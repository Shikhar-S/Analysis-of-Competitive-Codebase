<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931295_62479861.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="block">/*void bfs(int x,int y){
	while(!Qx.empty())Qx.pop();
	while(!Qy.empty())Qy.pop();
	memset(vis,0,sizeof(vis));
	Qx.push(x);
	Qy.push(y);
	dis[x][y]=1;
	while(!Qx.empty()){
		int x=Qx.front(),y=Qy.front();
		ans=max(ans,vis[x][y]);
		if(x==1&amp;&amp;ch[y]=='1'&amp;&amp;!vis[0][y]){
			dis[0][y]=vis[x][y]+1;
			Qx.push(0);
			Qy.push(y);
		}
		if(!x&amp;&amp;ch[y]=='1'&amp;&amp;!vis[0][y]){
			
		}
	}
}*/</comment>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name><name>vis</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ch</name><index>[<expr><literal type="number">1005</literal></expr>]</index></name></decl>;</decl_stmt>
<comment type="block">/*void dfs(int x,int y){
	cout&lt;&lt;"HI "&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;
	ans=max(ans,vis[x][y]);
	if(ch[y]=='1'){
		if(!vis[x^1][y]){
			vis[x^1][y]=vis[x][y]+1;
			dfs(x^1,y);
			vis[x^1][y]=0;
		}
	}
	if(y&gt;1&amp;&amp;!vis[x][y-1]){
		vis[x][y-1]=vis[x][y]+1;
		dfs(x,y-1);
		vis[x][y-1]=0;
	}
	if(y&lt;n&amp;&amp;!vis[x][y+1]){
		vis[x][y+1]=vis[x][y]+1;
		dfs(x,y+1);
		vis[x][y+1]=0;
	}
}*/</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>ch</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
