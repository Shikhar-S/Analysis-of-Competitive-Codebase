<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931633_62492962.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>LEN</name> <init>= <expr><literal type="number">100000</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>fastio</name><block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>it</name></decl>,<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>LEN</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
  <constructor><name>fastio</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>it</name> <operator>=</operator> <name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  }</block></constructor>
  <function><type><name>char</name></type> <name>get</name><parameter_list>()</parameter_list><block>{
    <if>if<condition>(<expr><name>it</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>s</name><index>[<expr><name>it</name><operator>++</operator></expr>]</index></name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>it</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>len</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>LEN</name></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>len</name></expr> ?</condition><then> <expr><name><name>s</name><index>[<expr><name>it</name><operator>++</operator></expr>]</index></name></expr> </then><else>: <expr><name>EOF</name></expr></else></ternary></expr>;</return>
  }</block></function>
  <function><type><name>bool</name></type> <name>notend</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <call><name>get</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>;</condition><incr><expr><name>c</name> <operator>=</operator> <call><name>get</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    <if>if<condition>(<expr><name>it</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>c</name> <operator>!=</operator> <name>EOF</name></expr>;</return>
  }</block></function>
  <function><type><name>void</name></type> <name>put</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>it</name> <operator>==</operator> <name>LEN</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>LEN</name></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>it</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>it</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
  }</block></function>
  <function><type><name>void</name></type> <name>flush</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>fwrite</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>it</name></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
</public>}</block><decl><name>buff</name></decl>,<decl><type ref="prev"/><name>bufo</name></decl>;</struct>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>getint</name><parameter_list>()</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sig</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>;</condition><incr><expr><name>c</name> <operator>=</operator> <call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>sig</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
  <for>for<control>(<init>;</init><condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition><incr><expr><name>c</name> <operator>=</operator> <call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></for>
  <return>return <expr><name>sig</name> <operator>*</operator> <name>res</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>getll</name><parameter_list>()</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sig</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>;</condition><incr><expr><name>c</name> <operator>=</operator> <call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>sig</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
  <for>for<control>(<init>;</init><condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition><incr><expr><name>c</name> <operator>=</operator> <call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></for>
  <return>return <expr><name>sig</name> <operator>*</operator> <name>res</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>putint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>char</name></type> <name>suf</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>bufo</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
  <else>else<block>{
    <if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>bufo</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>x</name></expr>)</condition><block>{
      <expr_stmt><expr><name><name>s</name><index>[<expr><operator>++</operator><name>k</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    }</block></while>
    <for>for<control>(<init>;</init><condition><expr><name>k</name></expr>;</condition><incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>bufo</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  }</block></else></if>
  <expr_stmt><expr><call><name><name>bufo</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>suf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>putll</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>char</name></type> <name>suf</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>bufo</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
  <else>else<block>{
    <if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>bufo</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>x</name></expr>)</condition><block>{
      <expr_stmt><expr><name><name>s</name><index>[<expr><operator>++</operator><name>k</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    }</block></while>
    <for>for<control>(<init>;</init><condition><expr><name>k</name></expr>;</condition><incr><expr><name>k</name><operator>--</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>bufo</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  }</block></else></if>
  <expr_stmt><expr><call><name><name>bufo</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><name>suf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>char</name></type> <name>get_char</name><parameter_list>()</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>;</condition><incr><expr><name>c</name> <operator>=</operator> <call><name><name>buff</name><operator>.</operator><name>get</name></name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
  <return>return <expr><name>c</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>200005</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>t</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>firm</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>black</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list><block>{
  <return>return <expr><ternary><condition><expr><name><name>s</name><index>[<expr><operator>(</operator><name>pos</name> <operator>+</operator> <name>n</name><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>firm_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><if>if<condition>(<expr><name><name>s</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name></expr>)</condition><then><block>{
      <expr_stmt><expr><name><name>firm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>firm_cnt</name><operator>++</operator></expr>;</expr_stmt>
      <if>if<condition>(<expr><name>st</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>st</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></then></if></block></for>
  <if>if<condition>(<expr><name>firm_cnt</name> <operator>==</operator> <name>n</name></expr>)</condition><then><block>{
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  <if>if<condition>(<expr><name>st</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
      <if>if<condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><ternary><condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr> ?</condition><then> <expr><literal type="char">'W'</literal></expr> </then><else>: <expr><literal type="char">'B'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  
<comment type="line">//  cout &lt;&lt; st &lt;&lt; " " &lt;&lt; firm_cnt &lt;&lt; endl;</comment>
<comment type="line">//  for(int i = 0;i &lt; n;i++) cout &lt;&lt; firm[i] &lt;&lt; " ";</comment>
<comment type="line">//  cout &lt;&lt; endl;</comment>
<comment type="line">//  system("pause");</comment>
  
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>st</name></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>+</operator> <name>st</name></expr>)</condition><block>{
    <while>while<condition>(<expr><name><name>firm</name><index>[<expr><name>i</name> <operator>%</operator> <name>n</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><operator>!</operator><name><name>firm</name><index>[<expr><name>j</name> <operator>%</operator> <name>n</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>i</name></expr></init></decl>;</init><condition><expr><name>l</name> <operator>&lt;=</operator> <name>j</name></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>alive</name></decl>, <decl><type ref="prev"/><name>final</name></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>l</name> <operator>-</operator> <name>i</name> <operator>&lt;=</operator> <name>j</name> <operator>-</operator> <name>l</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>alive</name> <operator>=</operator> <name>l</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>final</name> <operator>=</operator> <call><name>black</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else<block>{
        <expr_stmt><expr><name>alive</name> <operator>=</operator> <name>j</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>final</name> <operator>=</operator> <call><name>black</name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <if>if<condition>(<expr><name>k</name> <operator>&lt;=</operator> <name>alive</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>l</name> <operator>%</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>(</operator><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <call><name>black</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'W'</literal></expr></else></ternary></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>l</name> <operator>%</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>final</name></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'W'</literal></expr></else></ternary></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  }</block></while>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><ternary><condition><expr><name><name>firm</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
