<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933383_62463639.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
#pragma GCC optimize("unroll-loops")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("-O3")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_io</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>getfiles</name></cpp:macro> <cpp:value>ifstream cin("input.txt"); ofstream cout("output.txt");</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>con</name></cpp:macro> <cpp:value>continue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">2000000005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>BIG_INF</name> <init>= <expr><literal type="number">2000000000000000005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>P</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>PI</name> <init>= <expr><literal type="number">3.141592653589793238462643</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>dir</name> <init>= <expr><block>{
    <expr><block>{
        <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>
    }</block></expr>,
    <expr><block>{
        <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>
    }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>valid</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>m</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><literal type="number">1999999973</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>fast_io</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>d</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>col1</name></decl>, <decl><type ref="prev"/><name>col2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>col1</name> <operator>=</operator> <name>a</name> <operator>/</operator> <name>c</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>a</name> <operator>%</operator> <name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>col1</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>col2</name> <operator>=</operator> <name>b</name> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>b</name> <operator>%</operator> <name>d</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>col2</name><operator>++</operator></expr>;</expr_stmt></block></then></if>

        <if>if <condition>(<expr><name>col1</name> <operator>+</operator> <name>col2</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>col1</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>col2</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
