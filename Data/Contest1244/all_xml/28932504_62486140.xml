<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932504_62486140.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 


<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>w</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>d</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>mw</name></decl></parameter>)</parameter_list><block>{
	
	<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>m</name></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>ll</name></type> <name>rem</name><init>=<expr><name>p</name><operator>-</operator><name>mw</name><operator>*</operator><name>w</name></expr></init></decl>;</decl_stmt>
	
	<while>while<condition>(<expr><name>rem</name><operator>%</operator><name>d</name></expr>)</condition><block>{
		
		<if>if<condition>(<expr><name>mw</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<return>return ;</return>
		}</block></then></if>
		
		<expr_stmt><expr><name>rem</name><operator>+=</operator><name>w</name></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>ll</name></type> <name>j</name><init>=<expr><name>rem</name><operator>%</operator><name>d</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>m</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<return>return ;</return>
		}</block></then></if>
		
		<expr_stmt><expr><name><name>m</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>mw</name><operator>--</operator></expr>;</expr_stmt>
		
	}</block></while>
	
	<decl_stmt><decl><type><name>ll</name></type> <name>n1</name><init>=<expr><name>mw</name><operator>+</operator><name>rem</name><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>n1</name><operator>&gt;</operator><name>n</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return ;</return>
	}</block></then></if>
	
	<decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><name>n</name><operator>-</operator><name>n1</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>mw</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><operator>(</operator><name>rem</name><operator>/</operator><name>d</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>z</name></expr>;</expr_stmt>
	
	<return>return ;</return>
	
}</block></function>
	
	
	
	
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>ll</name></type> <name>mw</name><init>=<expr><name>p</name><operator>/</operator><name>w</name></expr></init></decl>;</decl_stmt>
	
	<if>if<condition>(<expr><name>mw</name><operator>&gt;</operator><name>n</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	
	<expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>mw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
