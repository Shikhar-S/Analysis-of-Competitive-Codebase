<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934640_62500925.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>right</name> <init>= <expr><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>diff</name> <init>= <expr><call><name><name>vec</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>vec</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>right</name><operator>-</operator><name>left</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>current_gap</name> <init>= <expr><name><name>vec</name><index>[<expr><name>right</name></expr>]</index></name><operator>-</operator><name><name>vec</name><index>[<expr><name>right</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>vec</name><index>[<expr><name>left</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>vec</name><index>[<expr><name>left</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>subtract</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>iter</name></expr></argument>,<argument><expr><name>current_gap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>diff</name><operator>-=</operator><name>subtract</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>k</name> <operator>-=</operator> <call><name>min</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>current_gap</name><operator>*</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iter</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>left</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>right</name><operator>--</operator></expr>;</expr_stmt>
    }</block></while>
    <if>if<condition>(<expr><name>k</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>left</name> <operator>!=</operator> <name>right</name></expr>)</condition><then><block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>current_gap</name> <init>= <expr><name><name>vec</name><index>[<expr><name>right</name></expr>]</index></name><operator>-</operator><name><name>vec</name><index>[<expr><name>right</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>subtract</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>iter</name></expr></argument>,<argument><expr><name>current_gap</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>diff</name><operator>-=</operator><name>subtract</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>diff</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function></unit>
