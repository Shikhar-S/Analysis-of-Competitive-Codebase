<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28907892_62499437.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include> 
<using>using <namespace>namespace <name>std</name>;</namespace></using> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vv</name></cpp:macro> <cpp:value>vector&lt;v&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>15000001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vc</name></cpp:macro> <cpp:value>vector&lt;char&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>LIM</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>vv</name></type> <name>adj</name><parameter_list>(<parameter><decl><type><name>LIM</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>v</name></type> <name>value</name><parameter_list>(<parameter><decl><type><name>LIM</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>ll</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> 
<block>{ 
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>v</name></type> <name>arr</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>count</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>count</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>v</name></type> <name>b</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>v</name></type> <name>c</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name><name>count</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name><operator>!=</operator><call><name><name>count</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name><init>=<expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>ll</name></type> <name>left</name><init>=<expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>right</name><init>=<expr><name><name>b</name><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>posl</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>posr</name><init>=<expr><name>m</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>rem</name><init>=<expr><name>k</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>l</name><init>=<expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name><name>c</name><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iter</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{
        <if>if <condition>(<expr><name>l</name><operator>&gt;=</operator><name>r</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>iter</name><operator>++</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>left</name><operator>&lt;=</operator><name>right</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>need</name><init>=<expr><operator>(</operator><name><name>c</name><index>[<expr><name>posl</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>c</name><index>[<expr><name>posl</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>left</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>need</name><operator>&lt;=</operator><name>rem</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>posl</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>left</name><operator>+=</operator><name><name>b</name><index>[<expr><name>posl</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>l</name><operator>=</operator><name><name>c</name><index>[<expr><name>posl</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>rem</name><operator>-=</operator><name>need</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>move</name><init>=<expr><name>rem</name><operator>/</operator><name>left</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>l</name><operator>+=</operator><name>move</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
            <comment type="line">// cout&lt;&lt;left&lt;&lt;" "&lt;&lt;right&lt;&lt;" "&lt;&lt;rem&lt;&lt;" "&lt;&lt;l&lt;&lt;endl;</comment>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>need</name><init>=<expr><operator>(</operator><name><name>c</name><index>[<expr><name>posr</name></expr>]</index></name><operator>-</operator><name><name>c</name><index>[<expr><name>posr</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name>right</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>need</name><operator>&lt;=</operator><name>rem</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>posr</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>right</name><operator>+=</operator><name><name>b</name><index>[<expr><name>posr</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name><operator>=</operator><name><name>c</name><index>[<expr><name>posr</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>rem</name><operator>-=</operator><name>need</name></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>move</name><init>=<expr><name>rem</name><operator>/</operator><name>right</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>r</name><operator>-=</operator><name>move</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>            
        }</block></else></if>
        <comment type="line">// cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;" "&lt;&lt;rem&lt;&lt;" "&lt;&lt;iter&lt;&lt;"a"&lt;&lt;endl;</comment>
        <if>if <condition>(<expr><name>l</name><operator>&gt;=</operator><name>r</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>r</name><operator>-</operator><name>l</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>   

}</block></function> </unit>
