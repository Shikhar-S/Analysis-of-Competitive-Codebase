<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935791_62492941.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>m</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>gmin</name><parameter_list>()</parameter_list> <block>{
	<return>return <expr><operator>*</operator><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>gmax</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name><init>=<expr><call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>*</operator><operator>--</operator><name>it</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
		<if>if <condition>(<expr><call><name><name>m</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><literal type="string">"0\n"</literal></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>a</name><init>=<expr><call><name>gmin</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><call><name>gmax</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name><name>m</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>sz</name><init>=<expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><name><name>b</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0ll</literal></expr></argument>,<argument><expr><name><name>b</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>a</name><operator>.</operator><name>first</name></name><operator>-</operator><name>k</name><operator>/</operator><name>sz</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>m</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>c</name><init>=<expr><call><name>gmin</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><call><name>gmax</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>k</name><operator>&lt;</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>second</name></name></expr></argument>,<argument><expr><name><name>b</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name><name>b</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>a</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>second</name></name><operator>&gt;</operator><name><name>b</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>k</name><operator>/</operator><name><name>b</name><operator>.</operator><name>second</name></name><operator>&gt;=</operator><name><name>b</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>d</name><operator>.</operator><name>first</name></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>m</name><index>[<expr><name><name>a</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>+=</operator><name><name>a</name><operator>.</operator><name>second</name></name></expr><operator>,</operator><expr><name><name>m</name><index>[<expr><name><name>d</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>+=</operator><name><name>b</name><operator>.</operator><name>second</name></name></expr><operator>,</operator><expr><name>k</name><operator>-=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>d</name><operator>.</operator><name>first</name></name><operator>)</operator><operator>*</operator><name><name>b</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><return>return <expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name><name>b</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>a</name><operator>.</operator><name>first</name></name><operator>-</operator><name>k</name><operator>/</operator><name><name>b</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></else></if>
		}</block></then>
		<else>else  <block>{
			<if>if <condition>(<expr><name>k</name><operator>/</operator><name><name>a</name><operator>.</operator><name>second</name></name><operator>&gt;=</operator><name><name>c</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>a</name><operator>.</operator><name>first</name></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>m</name><index>[<expr><name><name>c</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>+=</operator><name><name>a</name><operator>.</operator><name>second</name></name></expr><operator>,</operator><expr><name><name>m</name><index>[<expr><name><name>b</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>+=</operator><name><name>b</name><operator>.</operator><name>second</name></name></expr><operator>,</operator><expr><name>k</name><operator>-=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>a</name><operator>.</operator><name>first</name></name><operator>)</operator><operator>*</operator><name><name>a</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><return>return <expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name><name>b</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>a</name><operator>.</operator><name>first</name></name><operator>-</operator><name>k</name><operator>/</operator><name><name>a</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></else></if>
		}</block></else></if>
	}</block></while>
}</block></function></unit>
