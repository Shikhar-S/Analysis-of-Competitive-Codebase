<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28902593_62500952.cpp"><comment type="line">//katana_handler</comment>
<comment type="line">//shakalaka_boom_boom</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include> 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ordered_set_pll</name></cpp:macro> <cpp:value>tree &lt;pll, null_type,less&lt;pll&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ordered_set</name></cpp:macro> <cpp:value>tree &lt;ll, null_type,less&lt;ll&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;</cpp:value></cpp:define>
<comment type="line">//query 1 order_of_key (k) : Number of items strictly smaller than k .</comment>
<comment type="line">//query 2 find_by_order(k) : K-th element in the set (counting from zero).</comment>
<comment type="line">//less&lt;ll&gt; means query 1 will return numbers strictly less than k</comment>
<comment type="line">//greater&lt;ll&gt; means query 1 will return numbers strictly greater than k</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>pb</name></cpp:macro>                 <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>pf</name></cpp:macro>                <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>MOD</name></cpp:macro>             <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>popb</name></cpp:macro>             <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>popf</name></cpp:macro>            <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>len</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>x.size()</cpp:value></cpp:define>    
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>MAXN</name></cpp:macro>               <cpp:value>100001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>mp</name></cpp:macro>                 <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>endl</name></cpp:macro>             <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>ff</name></cpp:macro>                 <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>ss</name></cpp:macro>                 <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>tt</name></cpp:macro>                <cpp:value>third</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>mapcl</name></cpp:macro>             <cpp:value>map&lt;char,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>mapll</name></cpp:macro>             <cpp:value>map&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>cmp</name></cpp:macro>             <cpp:value>complex&lt;double&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>pi</name></cpp:macro>                 <cpp:value>3.141592653589793238462643383279502884197169399375105820974944592307816406286</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>inf</name></cpp:macro>             <cpp:value>LLONG_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>flush</name></cpp:macro>             <cpp:value>fflush(stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>vll</name></cpp:macro>             <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>z</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>         <cpp:value>for(ll i=z;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>sqrt</name></cpp:macro>             <cpp:value>sqrtl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>		<cpp:macro><name>cbrt</name></cpp:macro>             <cpp:value>cbrtl</cpp:value></cpp:define>
<typedef>typedef		<type><name>long</name> <name>long</name></type>        <name>ll</name>;</typedef>
<typedef>typedef		<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type>        <name>pll</name>;</typedef>
<typedef>typedef		<type><name>long</name> <name>double</name></type>        <name>ld</name>;</typedef>
<function><type><name>bool</name></type>		<name>coll</name><parameter_list>(<parameter><decl><type><name>pll</name></type> <name>p1</name></decl></parameter>,<parameter><decl><type><name>pll</name></type> <name>p2</name></decl></parameter>,<parameter><decl><type><name>pll</name></type> <name>p3</name></decl></parameter>)</parameter_list>		<block>{<if>if<condition>(<expr><operator>(</operator><name><name>p3</name><operator>.</operator><name>ss</name></name><operator>-</operator><name><name>p2</name><operator>.</operator><name>ss</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>p2</name><operator>.</operator><name>ff</name></name><operator>-</operator><name><name>p1</name><operator>.</operator><name>ff</name></name><operator>)</operator><operator>==</operator><operator>(</operator><name><name>p2</name><operator>.</operator><name>ss</name></name><operator>-</operator><name><name>p1</name><operator>.</operator><name>ss</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>p3</name><operator>.</operator><name>ff</name></name><operator>-</operator><name><name>p2</name><operator>.</operator><name>ff</name></name><operator>)</operator></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then><else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>}</block></function>
<function><type><name>void</name></type>		<name>print</name><parameter_list>(<parameter><decl><type><name>auto</name></type> <name>x</name></decl></parameter>)</parameter_list>					<block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type>		<name>pv</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list>				<block>{<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>ll</name><operator>)</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type>		<name>pv1</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list>				<block>{<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>ll</name><operator>)</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type>		<name>pset</name><parameter_list>(<parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list>				<block>{<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name>v</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type>		<name>pvsl</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list>			<block>{<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>ll</name><operator>)</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>}</block></function>
<function><type><name>void</name></type>		<name>in</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>		<block>{<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>}</block></function>
<function><type><name>void</name></type>		<name>in1</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>		<block>{<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for><expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>}</block></function>
<decl_stmt><decl><type><name>void</name></type>		<name>sortv</name><argument_list>(<argument><expr><name>auto</name> <operator>&amp;</operator><name>v</name></expr></argument>)</argument_list>					<argument_list>{<argument><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;}</argument_list>
<name>void</name>		<name>fast</name><argument_list>()</argument_list>							<argument_list>{<argument><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>;<argument><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;<argument><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>;}</argument_list>
<name>double</name>		<name>dist2d</name><argument_list>(<argument><expr><name>pll</name> <name>a</name></expr></argument>,<argument><expr><name>pll</name> <name>b</name></expr></argument>)</argument_list>				<argument_list>{<argument><expr><name>ll</name> <name>x</name><operator>=</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>ff</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>ff</name></name></expr></argument>)</argument_list></call></expr></argument>;<argument><expr><name>ll</name> <name>y</name><operator>=</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>ss</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr></argument>;return <argument><expr><operator>(</operator><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>+</operator><operator>(</operator><name>y</name><operator>*</operator><name>y</name><operator>)</operator></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>;}</argument_list>
<name>int</name> main<argument_list>()</argument_list>
<argument_list>{
	<argument><expr><name>ll</name> <name>n</name></expr></argument>,<argument><expr><name>k</name></expr></argument>;
	<argument><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr></argument>;
	<argument><expr><name>ll</name> <name>ans</name><operator>=</operator><literal type="number">1e18</literal></expr></argument>;
	<argument><expr><name>vll</name> <name>v</name></expr></argument>;
	<argument><expr><call><name>in</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>;
	<argument><expr><call><name>sortv</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>;
	<argument><expr><name>ans</name><operator>=</operator><name><name>v</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>;
	<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>;
	<argument><expr><name>ll</name> <name>sum</name><operator>=</operator><literal type="number">0</literal></expr></argument>;
	<argument><expr><name>ll</name> <name>cnt</name><operator>=</operator><literal type="number">1</literal></expr></argument>;
	for<argument><expr><operator>(</operator><name>ll</name> <name>i</name><operator>=</operator><literal type="number">0</literal>;<name>i</name><operator>&lt;</operator><name>n</name>;<name>i</name><operator>++</operator><operator>)</operator>
	<block>{
		<expr><name>sum</name><operator>+=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;
		<expr><call><name><name>X</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>cnt</name><operator>++</operator><operator>)</operator><operator>-</operator><name>sum</name></expr></argument>)</argument_list></call></expr>;
	}</block>
	<name>sum</name><operator>=</operator><literal type="number">0</literal></expr></argument>;
	<argument><expr><name>cnt</name><operator>=</operator><literal type="number">1</literal></expr></argument>;
	for<argument><expr><operator>(</operator><name>ll</name> <name>i</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal>;<name>i</name><operator>&gt;=</operator><literal type="number">0</literal>;<name>i</name><operator>--</operator><operator>)</operator>
	<block>{
		<expr><name>sum</name><operator>+=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;
		<expr><call><name><name>Y</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>sum</name><operator>-</operator><operator>(</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>cnt</name><operator>++</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;
	}</block>
	<comment type="line">//pv(X);</comment>
	<call><name>reverse</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
	<comment type="line">//pv(Y);</comment>
	for<argument><expr><operator>(</operator><name>ll</name> <name>i</name><operator>=</operator><literal type="number">0</literal>;<name>i</name><operator>&lt;</operator><name>n</name>;<name>i</name><operator>++</operator><operator>)</operator>
	<block>{
		<if>if<condition>(<expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
		<expr_stmt><expr><block>{
			<expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</block></expr></expr_stmt></then></if>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block>
	}
	<call><name>reverse</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
	for<argument><expr><operator>(</operator><name>ll</name> <name>i</name><operator>=</operator><literal type="number">0</literal>;<name>i</name><operator>&lt;</operator><name>n</name>;<name>i</name><operator>++</operator><operator>)</operator>
	<block>{
		<expr><name>ll</name> <name>x</name><operator>=</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr>;
		<if>if<condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name><name>X</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><continue>continue;</continue></block></then></if></block></expr></argument>
		<if>if<condition>(<expr><name>x</name><operator>&gt;</operator><name>k</name></expr>)</condition><then>
		<block type="pseudo"><break>break;</break></block></then></if></argument_list></decl></decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><name>k</name><operator>-</operator><name>x</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>ind</name><init>=<expr><name>it</name><operator>-</operator><call><name><name>Y</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>ind</name><operator>=</operator><name>n</name><operator>-</operator><name>ind</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>tot</name><init>=<expr><name>x</name><operator>+</operator><operator>*</operator><operator>(</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>rem</name><init>=<expr><name>k</name><operator>-</operator><name>tot</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>left</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>right</name><init>=<expr><name>n</name><operator>-</operator><name>ind</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>tans</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>ind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>vi</name></decl>,<decl><type ref="prev"/><name>vind</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>vi</name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>vind</name><operator>=</operator><name><name>v</name><index>[<expr><name>ind</name></expr>]</index></name></expr>;</expr_stmt>
		<comment type="line">//cerr&lt;&lt;vi&lt;&lt;" "&lt;&lt;left&lt;&lt;"---"&lt;&lt;vind&lt;&lt;" "&lt;&lt;right&lt;&lt;endl;</comment>
		<comment type="line">//cerr&lt;&lt;rem&lt;&lt;endl;</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name>diff</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><name>vind</name><operator>-</operator><name>vi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>take</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>diff</name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>(</operator><name>rem</name><operator>/</operator><name>left</name><operator>)</operator><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>rem</name><operator>%</operator><name>left</name><operator>)</operator><operator>/</operator><name>right</name><operator>)</operator></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>ind</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>ind</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>take1</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>diff</name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>ind</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>ind</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>(</operator><name>rem</name><operator>/</operator><name>right</name><operator>)</operator><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>rem</name><operator>%</operator><name>right</name><operator>)</operator><operator>/</operator><name>left</name><operator>)</operator></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">//cerr&lt;&lt;rem&lt;&lt;" "&lt;&lt;diff&lt;&lt;" "&lt;&lt;take&lt;&lt;" "&lt;&lt;take1&lt;&lt;endl;</comment>
		<expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>diff</name><operator>-</operator><call><name>max</name><argument_list>(<argument><expr><name>take1</name></expr></argument>,<argument><expr><name>take</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}
	swap<expr_stmt><expr><operator>(</operator><name>X</name><operator>,</operator><name>Y</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>X</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><continue>continue;</continue></block></then></if>
		<if>if<condition>(<expr><name>x</name><operator>&gt;</operator><name>k</name></expr>)</condition><then>
		<block type="pseudo"><break>break;</break></block></then></if>
		<decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><name>k</name><operator>-</operator><name>x</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>Y</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>ind</name><init>=<expr><name>it</name><operator>-</operator><call><name><name>Y</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>ind</name><operator>=</operator><name>n</name><operator>-</operator><name>ind</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>tot</name><init>=<expr><name>x</name><operator>+</operator><operator>*</operator><operator>(</operator><name>it</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<comment type="line">//cout&lt;&lt;"here"&lt;&lt;tot&lt;&lt;endl;</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name>rem</name><init>=<expr><name>k</name><operator>-</operator><name>tot</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>left</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>right</name><init>=<expr><name>n</name><operator>-</operator><name>ind</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>tans</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>ind</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>vi</name></decl>,<decl><type ref="prev"/><name>vind</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>vi</name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>vind</name><operator>=</operator><name><name>v</name><index>[<expr><name>ind</name></expr>]</index></name></expr>;</expr_stmt>
		<comment type="line">//cerr&lt;&lt;vi&lt;&lt;" "&lt;&lt;vind&lt;&lt;endl;</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name>diff</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><name>vind</name><operator>-</operator><name>vi</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>take</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>diff</name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>(</operator><name>rem</name><operator>/</operator><name>left</name><operator>)</operator><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>rem</name><operator>%</operator><name>left</name><operator>)</operator><operator>/</operator><name>right</name><operator>)</operator></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>ind</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>ind</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>take1</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>diff</name></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>ind</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>ind</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><operator>(</operator><name>rem</name><operator>/</operator><name>right</name><operator>)</operator><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>rem</name><operator>%</operator><name>right</name><operator>)</operator><operator>/</operator><name>left</name><operator>)</operator></expr></argument>,<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>diff</name><operator>-</operator><call><name>max</name><argument_list>(<argument><expr><name>take1</name></expr></argument>,<argument><expr><name>take</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}
</unit>
