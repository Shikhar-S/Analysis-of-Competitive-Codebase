<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28902391_62497805.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"-O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p32</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>p64</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>pdd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v64</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v32</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vv32</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vv64</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>p64</name></expr></argument>&gt;</argument_list></name></type> <name>vp64</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>p32</name></expr></argument>&gt;</argument_list></name></type> <name>vp32</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>NUM</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = 0; i &lt; e; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forsn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = s; i &lt; e; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rforn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = s; i &gt;= 0; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rforsn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = s; i &gt;= e; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ln</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" = "&lt;&lt;x&lt;&lt;ln</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1e18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_cin</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ll)(x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zer</name></cpp:macro> <cpp:value>ll(0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v64</name></type> <name>nums</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>v64</name></type> <name>pref</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>fn</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>diff</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>minm</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>
	<macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
	<block>{
		<comment type="line">// cout&lt;&lt;i&lt;&lt;'\n';</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name>s1</name> <init>= <expr><name><name>pref</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// cout&lt;&lt;s1&lt;&lt;'\n';</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name>rval</name> <init>= <expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>diff</name></expr></init></decl>;</decl_stmt>
		<comment type="line">// cout&lt;&lt;rval&lt;&lt;'\n';</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name>pos</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>nums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>nums</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rval</name></expr></argument>)</argument_list></call><operator>-</operator><call><name><name>nums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">// cout&lt;&lt;pos&lt;&lt;'\n';</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name>s2</name> <init>= <expr><name><name>pref</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>pref</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">// cout&lt;&lt;s2&lt;&lt;'\n';</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>s1</name></expr></init></decl>;</decl_stmt>
		<comment type="line">// cout&lt;&lt;tmp&lt;&lt;'\n';</comment>
		<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>s2</name> <operator>-</operator> <operator>(</operator><name>n</name><operator>-</operator><name>pos</name><operator>)</operator><operator>*</operator><name>rval</name></expr>;</expr_stmt>
		<comment type="line">// cout&lt;&lt;tmp&lt;&lt;'\n';</comment>
		<expr_stmt><expr><name>minm</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>minm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// cout&lt;&lt;minm&lt;&lt;'\n';</comment>
		<comment type="line">// cout&lt;&lt;"ends\n";</comment>
	}</block>
	<macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>s2</name> <init>= <expr><name><name>pref</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>pref</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>rval</name> <init>= <expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>lval</name> <init>= <expr><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>diff</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>pos</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>nums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>nums</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lval</name></expr></argument>)</argument_list></call><operator>-</operator><call><name><name>nums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>s1</name> <init>= <expr><name><name>pref</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><name>lval</name><operator>*</operator><operator>(</operator><name>pos</name><operator>)</operator> <operator>-</operator> <name>s1</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>tmp</name> <operator>+=</operator> <name>s2</name> <operator>-</operator> <operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><name>rval</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>minm</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>minm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<if>if<condition>(<expr><name>minm</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
	<block>{
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></then></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>fast_cin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name></decl>;</decl_stmt>
    <macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
    	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>tmp</name></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name><name>nums</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>nums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>nums</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><name><name>nums</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>nums</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>pref</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
    	<expr_stmt><expr><call><name><name>pref</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>pref</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>nums</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <while>while<condition>(<expr><name>r</name><operator>-</operator><name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    	<if>if<condition>(<expr><call><name>fn</name><argument_list>(<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>)</condition><then>
    	<block>{
    		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>
    	}</block></then>
    	<else>else
    	<block>{
    		<expr_stmt><expr><name>l</name> <operator>=</operator> <name>diff</name></expr>;</expr_stmt>
    	}</block></else></if>
    }</block></while>
     <decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl>;</decl_stmt>
     <if>if<condition>(<expr><call><name>fn</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><then>
     <block>{
     	<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>l</name></expr>;</expr_stmt>
     }</block></then>
     <else>else
     <block>{
     	<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
     }</block></else></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
