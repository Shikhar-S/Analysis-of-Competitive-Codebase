<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28918547_62479152.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>void</name></type> <name>TaskA</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d %d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><operator>(</operator><name>a</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>c</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><operator>(</operator><name>b</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><name>d</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<if>if<condition>(<expr><name>x</name><operator>+</operator><name>y</name><operator>&gt;</operator><name>e</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name>e</name><operator>-</operator><name>y</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></while>
}</block></function>

<function><type><name>void</name></type> <name>TaskB</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><literal type="number">1005</literal></expr>]</index></name></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>op</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ed</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>N</name></expr></argument>,<argument><expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ed</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>N</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>op</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></block></for>
		<if>if<condition>(<expr><name>ed</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>op</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>N</name><operator>-</operator><name>ed</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal><operator>+</operator><operator>(</operator><name>ed</name><operator>-</operator><name>op</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<function><type><name>void</name></type> <name>extended</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<return>return ;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>extended</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name><operator>-=</operator><name>a</name><operator>/</operator><name>b</name><operator>*</operator><name>x</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>TaskC</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>g</name></decl>,<decl><type ref="prev"/><name>base</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>e</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>o</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>fo</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>g</name><operator>=</operator><call><name>__gcd</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>b</name><operator>%</operator><name>g</name></expr>)</condition><then><block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block></then></if>
	<expr_stmt><expr><name>b</name><operator>/=</operator><name>g</name></expr><operator>,</operator><expr><name>c</name><operator>/=</operator><name>g</name></expr><operator>,</operator><expr><name>d</name><operator>/=</operator><name>g</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>d</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>e</name><operator>=</operator><name>b</name><operator>/</operator><operator>(</operator><name>c</name><operator>*</operator><name>d</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name><operator>-=</operator><name>e</name><operator>*</operator><name>c</name><operator>*</operator><name>d</name></expr><operator>,</operator><expr><name>base</name><operator>=</operator><name>e</name><operator>*</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>extended</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>%</operator><name>d</name><operator>+</operator><name>d</name><operator>)</operator><operator>%</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>o</name><operator>=</operator><name>x</name><operator>*</operator><name>c</name><operator>/</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name><operator>=</operator><name>b</name><operator>/</operator><name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fo</name><operator>=</operator><operator>(</operator><name>b</name><operator>%</operator><name>d</name><operator>)</operator><operator>*</operator><name>x</name><operator>+</operator><name>base</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name><operator>-=</operator><operator>(</operator><name>b</name><operator>%</operator><name>d</name><operator>)</operator><operator>*</operator><name>o</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name>fo</name><operator>=</operator><name>b</name><operator>/</operator><name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name><operator>=</operator><name>b</name><operator>%</operator><name>c</name></expr>;</expr_stmt>
	}</block></else></if>

	<if>if<condition>(<expr><name>tmp</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cnt</name><operator>=</operator><operator>(</operator><operator>-</operator><name>tmp</name><operator>)</operator><operator>/</operator><name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name><operator>+=</operator><operator>(</operator><name>cnt</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fo</name><operator>-=</operator><operator>(</operator><name>cnt</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>d</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>cnt</name><operator>=</operator><name>tmp</name><operator>/</operator><name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp</name><operator>-=</operator><name>cnt</name><operator>*</operator><name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>fo</name><operator>+=</operator><name>cnt</name><operator>*</operator><name>d</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>fo</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal><operator>||</operator><name>fo</name><operator>+</operator><name>tmp</name></expr></argument>&gt;</argument_list></name><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>,<argument><expr><name>fo</name></expr></argument>,<argument><expr><name>tmp</name></expr></argument>,<argument><expr><name>a</name><operator>-</operator><name>fo</name><operator>-</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>TaskD</name><parameter_list>()</parameter_list><block>{
	
}</block></function>
<function><type><name>void</name></type> <name>TaskE</name><parameter_list>()</parameter_list><block>{
	
}</block></function>


<function><type><name>void</name></type> <name>TaskG</name><parameter_list>()</parameter_list><block>{
	
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
       	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
	<comment type="line">//TaskA();</comment>
	<comment type="line">//TaskB();</comment>
	<expr_stmt><expr><call><name>TaskC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//TaskD();</comment>
	<comment type="line">//TaskE();</comment>
	<comment type="line">//TaskF();</comment>
    <comment type="line">//TaskG();</comment>
}</block></function></unit>
