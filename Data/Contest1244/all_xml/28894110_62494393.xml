<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28894110_62494393.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name>ch</name></decl>;</decl_stmt> 
	<decl_stmt><decl><specifier>static</specifier> <type><name>bool</name></type> <name>opt</name></decl>;</decl_stmt> 
	<while>while <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>ch</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><empty_stmt>;</empty_stmt></block></while> 
	<expr_stmt><expr><name>x</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>opt</name> <operator>=</operator> <name>ch</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr></else></ternary></expr>;</expr_stmt> 
	<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></while> 
	<if>if <condition>(<expr><name>opt</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>~</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if> 
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>void</name></type> <name>putint</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>tail</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt> 
	<if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>~</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 
	<if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then> 
	<else>else
	<block>{
		<for>for <control>(<init>;</init> <condition><expr><name>x</name></expr>;</condition> <incr><expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><operator>*</operator><operator>++</operator><name>tail</name> <operator>=</operator> <name>x</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></for> 
		<for>for <control>(<init>;</init> <condition><expr><name>tail</name> <operator>!=</operator> <name>buf</name></expr>;</condition> <incr><expr><operator>--</operator><name>tail</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>*</operator><name>tail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> 
	}</block></else></if>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>tense</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><ternary><condition><expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>x</name> <operator>=</operator> <name>y</name></expr></then></ternary></expr><operator>,</operator> <expr><literal type="boolean">true</literal> <operator>:</operator> <literal type="boolean">false</literal></expr>;</return> 
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>relax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>x</name> <operator>=</operator> <name>y</name></expr></then></ternary></expr><operator>,</operator> <expr><literal type="boolean">true</literal> <operator>:</operator> <literal type="boolean">false</literal></expr>;</return> 
}</block></function>

<typedef>typedef <type><name>unsigned</name></type> <name>u32</name>;</typedef> 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>s64</name>;</typedef> 
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>u64</name>;</typedef> 
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>pii</name>;</typedef> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::make_pair(x, y)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MaxN</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>K</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>bool</name></type> <name><name>a</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>lst</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>nxt</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>tot</name></decl>;</decl_stmt> 
<comment type="line">//int lef[MaxN], rit[MaxN]; </comment>
<decl_stmt><decl><type><name>int</name></type> <name><name>ufs</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sze</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>S</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>bool</name></type> <name><name>bo</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>;</decl_stmt> 

<function><specifier>inline</specifier> <type><name>int</name></type> <name>ufs_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><ternary><condition><expr><name><name>ufs</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name>x</name></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name><name>ufs</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>ufs_find</name><argument_list>(<argument><expr><name><name>ufs</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> 
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>ufs_merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
<comment type="line">//	printf(":%d %d\n", x, y); </comment>

	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>ufs_find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>ufs_find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>y</name></expr>)</condition><then>
	<block>{
		<comment type="line">// if (lef[x] == nxt[rit[y]])</comment>
		<comment type="line">// 	std::swap(x, y); </comment>

		<expr_stmt><expr><name><name>ufs</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name>sze</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <name><name>sze</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt> 
		<expr_stmt><expr><operator>--</operator><name>tot</name></expr>;</expr_stmt> 

	<comment type="line">//	lef[y] = lef[x]; </comment>
	}</block></then></if>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>ufs_init</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>tot</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt> 
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>ufs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> 
	<comment type="line">//	lef[i] = rit[i] = i; </comment>
		<expr_stmt><expr><name><name>sze</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name><name>lst</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>ufs_merge</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>lst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 
	}</block></for>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>print</name><parameter_list>()</parameter_list>
<block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><ternary><condition><expr><name><name>a</name><index>[<expr><call><name>ufs_find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'W'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>orzczk</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>read</name><argument_list>(<argument><expr><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr>;</expr_stmt></block></for> 

	<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>lst</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>x</name> <operator>==</operator> <name>n</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><call><name>ufs_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>ufs_find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>sze</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><name><name>sze</name><index>[<expr><call><name>ufs_find</name><argument_list>(<argument><expr><name><name>lst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>sze</name><index>[<expr><call><name>ufs_find</name><argument_list>(<argument><expr><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 
		}</block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>bo</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></else></if> 
	}</block></for>

<comment type="line">//	print(); </comment>

	<decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><name>K</name></expr></init></decl>;</decl_stmt> 
	<while>while <condition>(<expr><name>cur</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>T</name></decl>;</decl_stmt> 
		<expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

		<for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name>S</name></expr></range></decl></init>)</control>
		<block>{
		<comment type="line">//	printf("%d ", v); </comment>

			<decl_stmt><decl><type><name>int</name></type> <name>lef_u</name> <init>= <expr><call><name>ufs_find</name><argument_list>(<argument><expr><name><name>lst</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
			<decl_stmt><decl><type><name>int</name></type> <name>rit_u</name> <init>= <expr><call><name>ufs_find</name><argument_list>(<argument><expr><name><name>nxt</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
			<if>if <condition>(<expr><name><name>sze</name><index>[<expr><name>lef_u</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>bo</name><index>[<expr><name><name>lst</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>ufs_merge</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>lef_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 
			<if>if <condition>(<expr><name><name>sze</name><index>[<expr><name>rit_u</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>bo</name><index>[<expr><name><name>nxt</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name>ufs_merge</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>rit_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 
		}</block></for>
		<comment type="line">//puts(""); </comment>

		<for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name>S</name></expr></range></decl></init>)</control>
		<block>{
			<expr_stmt><expr><name><name>bo</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> 
			<decl_stmt><decl><type><name>int</name></type> <name>lef_u</name> <init>= <expr><call><name>ufs_find</name><argument_list>(<argument><expr><name><name>lst</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 
			<decl_stmt><decl><type><name>int</name></type> <name>rit_u</name> <init>= <expr><call><name>ufs_find</name><argument_list>(<argument><expr><name><name>nxt</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

			<if>if <condition>(<expr><name><name>sze</name><index>[<expr><name>lef_u</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block>{
				<if>if <condition>(<expr><call><name><name>T</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>lef_u</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>T</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>lef_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 
			}</block></then></if>
			<if>if <condition>(<expr><name><name>sze</name><index>[<expr><name>rit_u</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block>{
				<if>if <condition>(<expr><call><name><name>T</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>rit_u</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>T</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>rit_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> 
			}</block></then></if>
		}</block></for>

		<expr_stmt><expr><name>S</name> <operator>=</operator> <name>T</name></expr><operator>,</operator> <expr><operator>--</operator><name>cur</name></expr>;</expr_stmt> 
	}</block></while>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><call><name>ufs_find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><name><name>sze</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>K</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt></block></then></if> 
		}</block></then></if></block></for>
	<comment type="line">//	else</comment>
	<comment type="line">//		printf("ufs%d = %d\n", i, ufs_find(i)); </comment>
	<expr_stmt><expr><call><name>print</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 

	<return>return <expr><literal type="number">0</literal></expr>;</return> 
}</block></function></unit>
