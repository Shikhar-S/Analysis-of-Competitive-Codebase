<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934640_62475287.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>tt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>tt</name> <operator>&lt;</operator> <name>t</name></expr>;</condition> <incr><expr><operator>++</operator><name>tt</name></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>j</name> <operator>&lt;</operator> <name>left</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>left</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><name>j</name> <operator>&gt;</operator> <name>right</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>right</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block></then></if>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>left</name> <operator>==</operator> <name>n</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>right</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>n</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>right</name><operator>+</operator><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>left</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
}</block></function></unit>
