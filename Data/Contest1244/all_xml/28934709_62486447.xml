<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934709_62486447.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>original</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>num</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>print</name><parameter_list>()</parameter_list><block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>original</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>original</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>original</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>original</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iter</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name><init>=<expr><operator>++</operator><call><name><name>original</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init><condition><expr><name>it</name><operator>!=</operator><call><name><name>original</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>it</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>==</operator><operator>*</operator><name>it</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>num</name><index>[<expr><name>iter</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>num</name><index>[<expr><operator>++</operator><name>iter</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>fit</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>bit</name><init>=<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>diff</name><init>=<expr><call><name><name>s</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>-</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>diff</name></expr>)</condition><block>{
        <if>if <condition>(<expr><name><name>num</name><index>[<expr><name>fit</name></expr>]</index></name><operator>&lt;</operator><name><name>num</name><index>[<expr><name>bit</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>delta</name><operator>=</operator><name><name>s</name><index>[<expr><name>fit</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>s</name><index>[<expr><name>fit</name></expr>]</index></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>k</name><operator>&gt;=</operator><name>delta</name><operator>*</operator><name><name>num</name><index>[<expr><name>fit</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><name>delta</name><operator>*</operator><name><name>num</name><index>[<expr><name>fit</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>diff</name><operator>-=</operator><name>delta</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>num</name><index>[<expr><name>fit</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>num</name><index>[<expr><name>fit</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>fit</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>diff</name><operator>-=</operator><name>k</name><operator>/</operator><name><name>num</name><index>[<expr><name>fit</name></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>delta</name><operator>=</operator><name><name>s</name><index>[<expr><name>bit</name></expr>]</index></name><operator>-</operator><name><name>s</name><index>[<expr><name>bit</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>k</name><operator>&gt;=</operator><name>delta</name><operator>*</operator><name><name>num</name><index>[<expr><name>bit</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><name>delta</name><operator>*</operator><name><name>num</name><index>[<expr><name>bit</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>diff</name><operator>-=</operator><name>delta</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>num</name><index>[<expr><name>bit</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>num</name><index>[<expr><name>bit</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>bit</name><operator>--</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>diff</name><operator>-=</operator><name>k</name><operator>/</operator><name><name>num</name><index>[<expr><name>bit</name></expr>]</index></name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
