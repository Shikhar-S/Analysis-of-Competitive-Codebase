<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28917152_62485363.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ma</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>d</name></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ma</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
  }</block></for>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>ma</name></expr></range></decl></init>)</control>
      <block type="pseudo"><expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <while>while<condition>(<expr><name>k</name></expr>)</condition>
  <block>{
      <if>if<condition>(<expr><call><name><name>d</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
          <block type="pseudo"><break>break;</break></block></then></if>
      <if>if<condition>(<expr><call><name><name>d</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name> <operator>&lt;</operator> <call><name><name>d</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name></expr>)</condition><then>
      <block>{
 
          <decl_stmt><decl><type><name>int</name></type> <name>merge_price</name> <init>= <expr><operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator></expr></init></decl>;</decl_stmt>
          <if>if<condition>(<expr><name>merge_price</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then>
          <block>{
              <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
              <break>break;</break>
          }</block></then>
          <else>else
          <block>{
              <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>new_elem</name> <init>= <expr><block>{<expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>, <expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>}</block></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name><name>d</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><name>new_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>merge_price</name></expr>;</expr_stmt>
          }</block></else></if>
          <continue>continue;</continue>
      }</block></then>
      <else>else
      <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name><name>d</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>merge_price</name> <init>= <expr><operator>(</operator><name><name>d</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>d</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>)</operator> <operator>*</operator> <name><name>d</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <comment type="line">//  cout&lt;&lt;merge_price&lt;&lt;endl;</comment>
          <if>if<condition>(<expr><name>merge_price</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then>
          <block>{
              <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>d</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><name><name>d</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
              <break>break;</break>
          }</block></then>
          <else>else
          <block>{
              <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>new_elem</name> <init>= <expr><block>{<expr><name><name>d</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">2</literal></expr> ]</index></name><operator>.</operator><name>first</name></expr>, <expr><name><name>d</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>+</operator> <name><name>d</name><index>[<expr><name>sz</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>}</block></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><call><name><name>d</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>new_elem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>merge_price</name></expr>;</expr_stmt>
          }</block></else></if>
      }</block></else></if>
  }</block></while>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>d</name><index>[<expr><call><name><name>d</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
