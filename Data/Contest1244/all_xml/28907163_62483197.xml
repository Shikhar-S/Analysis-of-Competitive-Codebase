<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28907163_62483197.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>num</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>val</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if></block></for>
	<if>if<condition>(<expr><name>f</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> 
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
    <block>{
    	<if>if<condition>(<expr><name>l</name><operator>&gt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>nn</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
		<while>while<condition>(<expr><name>l</name><operator>&lt;</operator><name>n</name><operator>&amp;&amp;</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>++</operator></expr><operator>,</operator><expr><name>nn</name><operator>++</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>val</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>num</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>nn</name></expr>;</expr_stmt>
	    <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>val</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>-</operator><name><name>val</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>cst</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>k</name><operator>&lt;=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name><name>num</name><index>[<expr><name>l</name></expr>]</index></name><operator>&lt;</operator><name><name>num</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition><then>
		<block>{
		    <expr_stmt><expr><name>tmp</name><operator>=</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>val</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>val</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cst</name><operator>=</operator><operator>(</operator><name>ll</name><operator>)</operator><name>tmp</name><operator>*</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>num</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name>cst</name></expr>)</condition><then>
			<block>{
			    <expr_stmt><expr><name>ans</name><operator>-=</operator><name><name>val</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>val</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
			    <expr_stmt><expr><name>k</name><operator>-=</operator><name>cst</name></expr>;</expr_stmt>
			    <expr_stmt><expr><name><name>num</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>num</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then>	
			<else>else
			<block>{
				<expr_stmt><expr><name>tmp</name><operator>=</operator><name>k</name><operator>/</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>num</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>-=</operator><name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>tmp</name><operator>=</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>val</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>val</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cst</name><operator>=</operator><operator>(</operator><name>ll</name><operator>)</operator><name>tmp</name><operator>*</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>num</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name>cst</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ans</name><operator>-=</operator><name><name>val</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>val</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name><operator>-=</operator><name>cst</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>num</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>num</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>tmp</name><operator>=</operator><name>k</name><operator>/</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>num</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>-=</operator><name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
