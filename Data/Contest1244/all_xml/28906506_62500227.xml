<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28906506_62500227.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
 
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<typedef>typedef <type><name><name>tree</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>ordered_set</name>;</typedef>
<comment type="line">// order_of_key(val): returns the number of values less than val</comment>
<comment type="line">// find_by_order(k): returns an iterator to the kth largest element (0-based)</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ll)(a.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>Ch</name></parameter>, <parameter><type><name>class</name></type> <name>Tr</name></parameter>, <parameter><type><name>class</name></type> <name>Container</name></parameter>&gt;</parameter_list></template>
<type><name><name>basic_ostream</name> <argument_list type="generic">&lt;<argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>Tr</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name><name>basic_ostream</name> <argument_list type="generic">&lt;<argument><expr><name>Ch</name></expr></argument>, <argument><expr><name>Tr</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name>Container</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> 
<block>{
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"{ "</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>y</name> <operator>:</operator> <name>x</name></expr></init>)</control> 
    <block>{
        <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>X</name></parameter>, <parameter><type><name>class</name></type> <name>Y</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{
    <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>ff</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>ss</name></name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <return>return <expr><name>a</name></expr>;</return>
    }</block></then></if>

    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>modexp</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{   
    <expr_stmt><expr><name>a</name><operator>%=</operator><name>c</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><name>b</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>c</name></expr>;</expr_stmt>
        }</block></then></if>

        <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>L</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

    <comment type="line">// vector &lt;ll&gt; a;</comment>

    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>m</name><index>[<expr><name>t</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

        <comment type="line">// a.pb(t);</comment>
    }</block></for>

    <comment type="line">// sort(all(a));</comment>

    <decl_stmt><decl><type><name><name>deque</name> <argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>: <expr><name>m</name></expr></range></decl></init>)</control>
    <block>{
        <comment type="line">// cout &lt;&lt;  i.ff &lt;&lt; " " &lt;&lt; i.ss &lt;&lt; endl;</comment>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>i</name><operator>.</operator><name>ff</name></name></expr></argument>, <argument><expr><name><name>i</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <while>while<condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <break>break;</break>
        }</block></then></if>


        <if>if<condition>(<expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name> <operator>&lt;=</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>pll</name></type> <name>top</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// if(q.front().ff == top.ff + 1)</comment>
                <comment type="line">// {</comment>
                <comment type="line">//     k-=q.front().ss;</comment>
                <comment type="line">//     pll s = q.front();</comment>
                <comment type="line">//     q.pop_front();</comment>
                <comment type="line">//     q.push_front(mp(s.ff, top.ss+s.ss));</comment>
                <comment type="line">// }</comment>

                <comment type="line">// else</comment>
                <comment type="line">// {</comment>
                    <decl_stmt><decl><type><name>ll</name></type> <name>req</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ff</name> <operator>-</operator> <name><name>top</name><operator>.</operator><name>ff</name></name></expr></init></decl>;</decl_stmt>

                    <if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>req</name><operator>*</operator><name><name>top</name><operator>.</operator><name>ss</name></name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>req</name><operator>*</operator><name><name>top</name><operator>.</operator><name>ss</name></name></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>pll</name></type> <name>s</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>ff</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>ss</name></name> <operator>+</operator> <name><name>top</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// q.push_front(mp(top.ff+1, top.ss));</comment>
                    }</block></then>

                    <else>else
                    <block>{
                        <decl_stmt><decl><type><name>ll</name></type> <name>can</name> <init>= <expr><name>k</name><operator>/</operator><name><name>top</name><operator>.</operator><name>ss</name></name></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><name>k</name><operator>-=</operator><name><name>top</name><operator>.</operator><name>ss</name></name><operator>*</operator><name>can</name></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>top</name><operator>.</operator><name>ff</name></name> <operator>+</operator> <name>can</name></expr></argument>, <argument><expr><name><name>top</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// cout &lt;&lt; q.back().ff - (top.ff + can) &lt;&lt; endl;</comment>
                        <comment type="line">// return 0;</comment>
                    }</block></else></if>
                <comment type="line">// }</comment>
            }</block></then>

            <else>else
            <block>{
                <break>break;</break>
            }</block></else></if>
        }</block></then>

        <else>else
        <block>{
            <comment type="line">// cout &lt;&lt; "**" &lt;&lt; endl;</comment>
            <if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ss</name></expr>)</condition><then>
            <block>{
                <comment type="line">// cout &lt;&lt; "*" &lt;&lt; endl;</comment>
                <decl_stmt><decl><type><name>pll</name></type> <name>top</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// if(q.back().ff == top.ff - 1)</comment>
                <comment type="line">// {</comment>
                <comment type="line">//     k-=q.back().ss;</comment>
                <comment type="line">//     pll s = q.back();</comment>
                <comment type="line">//     q.pop_back();</comment>
                <comment type="line">//     q.pb(mp(s.ff, top.ss+s.ss));</comment>
                <comment type="line">// }</comment>

                <comment type="line">// else</comment>
                <comment type="line">// {</comment>
                    <comment type="line">// cout &lt;&lt; "**" &lt;&lt; endl;</comment>
                    <comment type="line">// q.push_back(mp(top.ff-1, top.ss));</comment>

                    <decl_stmt><decl><type><name>ll</name></type> <name>req</name> <init>= <expr><name><name>top</name><operator>.</operator><name>ff</name></name> <operator>-</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ff</name></expr></init></decl>;</decl_stmt>

                    <if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>req</name><operator>*</operator><name><name>top</name><operator>.</operator><name>ss</name></name></expr>)</condition><then>
                    <block>{
                        <comment type="line">// cout &lt;&lt; "***" &lt;&lt; endl;</comment>
                        <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>req</name><operator>*</operator><name><name>top</name><operator>.</operator><name>ss</name></name></expr>;</expr_stmt>
                        <decl_stmt><decl><type><name>pll</name></type> <name>s</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>s</name><operator>.</operator><name>ff</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>.</operator><name>ss</name></name> <operator>+</operator> <name><name>top</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// q.push_front(mp(top.ff+1, top.ss));</comment>
                    }</block></then>

                    <else>else
                    <block>{
                        <decl_stmt><decl><type><name>ll</name></type> <name>can</name> <init>= <expr><name>k</name><operator>/</operator><name><name>top</name><operator>.</operator><name>ss</name></name></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><name>k</name> <operator>-=</operator> <name><name>top</name><operator>.</operator><name>ss</name></name><operator>*</operator><name>can</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>top</name><operator>.</operator><name>ff</name></name> <operator>-</operator> <name>can</name></expr></argument>, <argument><expr><name><name>top</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <comment type="line">// cout &lt;&lt; top.ff - can - q.front().ff &lt;&lt; endl;</comment>
                        <comment type="line">// return 0;</comment>
                    }</block></else></if>
                <comment type="line">// }</comment>
            }</block></then>

            <else>else
            <block>{
                <break>break;</break>
            }</block></else></if>
        }</block></else></if>
    }</block></while>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ff</name> <operator>-</operator> <call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>ff</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
