<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28894420_62487504.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0; i&lt;a; i++)</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name>int</name></type> <name><name>e</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>loop</name><argument_list>(<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name>int</name></type> <name><name>degr</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>loop</name><argument_list>(<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name><name>degr</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	}</block>
	<macro><name>loop</name><argument_list>(<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name><name>degr</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>degr</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>degr</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>degr</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block>
	<decl_stmt><decl><type><name>int</name></type> <name>leaf</name></decl>;</decl_stmt>
	<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name><name>degr</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>leaf</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block>
	<decl_stmt><decl><type><name>int</name></type> <name><name>nei</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>loop</name><argument_list>(<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name><name>nei</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>nei</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	}</block>
	<macro><name>loop</name><argument_list>(<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name><name>nei</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>nei</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>nei</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
		<if>if<condition>(<expr><name><name>nei</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>nei</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>nei</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
	}</block>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>used</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>tree</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>loop</name><argument_list>(<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name><name>used</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
	}</block>
	<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name><name>used</name><index>[<expr><name>leaf</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>leaf</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>used</name><index>[<expr><name><name>nei</name><index>[<expr><name>leaf</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>leaf</name><operator>=</operator><name><name>nei</name><index>[<expr><name>leaf</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>leaf</name><operator>=</operator><name><name>nei</name><index>[<expr><name>leaf</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
	}</block>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>num</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>col</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>loop</name><argument_list>(<argument><literal type="number">6</literal></argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block>
	<expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block>
	<expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block>
	<expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block>
	<expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
	<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block>
	<expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
	<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name>cur</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cur</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block>
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><name>x</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>num</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name>x</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>==</operator><name>x</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>==</operator><name>x</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>==</operator><name>x</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>num</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>==</operator><name>x</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>num</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<macro><name>loop</name><argument_list>(<argument>n</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
}</block></function>
</unit>
