<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28929422_62468593.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<class>class <name>customIO</name> <block>{<private type="default">
</private><public>public:
  <decl_stmt><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl>;</decl_stmt>
  <constructor><name>customIO</name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>_in</name></decl></parameter>, <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>_out</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>in</name><argument_list>(<argument><expr><name>_in</name></expr></argument>)</argument_list></call>, <call><name>out</name><argument_list>(<argument><expr><name>_out</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
  <function><type><name>string</name></type> <name>next</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
  }</block></function>
  <function><type><name>double</name></type> <name>nextDouble</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>stod</name><argument_list>(<argument><expr><call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><type><name>int</name></type> <name>nextInt</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>stoi</name><argument_list>(<argument><expr><call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><type><name>long</name> <name>long</name></type> <name>nextLong</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>stoll</name><argument_list>(<argument><expr><call><name>next</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>t</name></expr>;</expr_stmt> }</block></function>
  <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>U</name><modifier>...</modifier></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>u</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
  <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>U</name><modifier>...</modifier></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>u</name><operator>...</operator></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>
  <function><type><name>void</name></type> <name>println</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
</public>}</block>;</class>

<class>class <name>CF1244B</name> <block>{<private type="default">
</private><public>public:
  <function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>customIO</name> <modifier>&amp;</modifier></type><name>io</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name><name>io</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>io</name><operator>.</operator><name>nextInt</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>string</name></type> <name>s</name> <init>= <expr><call><name><name>io</name><operator>.</operator><name>next</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><then> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></for>
      <expr_stmt><expr><call><name><name>io</name><operator>.</operator><name>println</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return;</return>
  }</block></function>
</public>}</block>;</class>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>customIO</name></type> <name>io</name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CF1244B</name></type> <name>solver</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>solver</name><operator>.</operator><name>solve</name></name><argument_list>(<argument><expr><name>io</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
