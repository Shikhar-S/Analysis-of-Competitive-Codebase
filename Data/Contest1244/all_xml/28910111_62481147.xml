<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28910111_62481147.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> 	<cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro>  	<cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>tn</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>tn</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>tn</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
	<for>for <control>(<init>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="number">48</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>f</name></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>P</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>exgcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then><block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <return>return;</return> }</block></then></if>
	<expr_stmt><expr><call><name>exgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>y</name> <operator>-=</operator> <name>x</name> <operator>*</operator> <operator>(</operator><name>a</name> <operator>/</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><ternary><condition><expr><name>y</name></expr> ?</condition><then> <expr><call><name>gcd</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>%</operator> <name>y</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return>}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>read</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>read</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>read</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><call><name>gcd</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>p</name> <operator>%</operator> <name>g</name></expr>)</condition><then><block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></then></if>
	<expr_stmt><expr><name>A</name> <operator>/=</operator> <name>g</name></expr><operator>,</operator> <expr><name>B</name> <operator>/=</operator> <name>g</name></expr><operator>,</operator> <expr><name>p</name> <operator>/=</operator> <name>g</name></expr><operator>,</operator> <expr><name>P</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>exgcd</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>B</name> <operator>+</operator> <name>B</name><operator>)</operator> <operator>%</operator> <name>B</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <operator>(</operator><name>p</name> <operator>%</operator> <name>B</name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>%</operator> <name>B</name> <operator>+</operator> <name>B</name><operator>)</operator> <operator>%</operator> <name>B</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>A</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>B</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></then></if>
	<if>if <condition>(<expr><name>B</name> <operator>&lt;</operator> <name>A</name></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>y</name> <operator>/</operator> <name>A</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>y</name> <operator>-=</operator> <name>k</name> <operator>*</operator> <name>A</name></expr><operator>,</operator> <expr><name>x</name> <operator>+=</operator> <name>k</name> <operator>*</operator> <name>B</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>X</name> <init>= <expr><name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>Y</name> <init>= <expr><name>y</name></expr></init></decl>, <decl><type ref="prev"/><name>T</name> <init>= <expr><name>n</name> <operator>-</operator> <name>X</name> <operator>-</operator> <name>Y</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>X</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>Y</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>T</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></then> <else>else <block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>X</name> <init>= <expr><name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>Y</name> <init>= <expr><name>y</name></expr></init></decl>, <decl><type ref="prev"/><name>T</name> <init>= <expr><name>n</name> <operator>-</operator> <name>X</name> <operator>-</operator> <name>Y</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>X</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>Y</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>T</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
