<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933788_62484509.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &lt;= (b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &gt;= (b); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR(i,1,(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR(i,0,(n)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mini</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a=min(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a=max(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int) w.size()</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<comment type="line">//typedef pair&lt;pii, int&gt; para;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1e18</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>deg</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>down</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>used</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vi</name></type> <name><name>graph</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cl</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>bestCl</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>perms</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>DFS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>root</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>used</name><index>[<expr><name>root</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name><name>graph</name><index>[<expr><name>root</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
		<if>if <condition>(<expr><operator>!</operator><name><name>used</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>down</name><index>[<expr><name>root</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>

<function><type><name>ll</name></type> <name>color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>vi</name><modifier>&amp;</modifier></type> <name>perm</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><name><name>c</name><index>[<expr><name><name>perm</name><index>[<expr><name>cnt</name></expr>]</index></name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>cl</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>perm</name><index>[<expr><name>cnt</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <name>dir</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>dir</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
	<if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>tmp</name> <operator>+</operator> <call><name>color</name><argument_list>(<argument><expr><name><name>down</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<macro><name>RI</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<macro><name>RI</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<macro><name>RI</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name>int</name></type> <name>root</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n - <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>graph</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>graph</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>deg</name><index>[<expr><name>b</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
		<if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>a</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name><name>deg</name><index>[<expr><name>b</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block>
	<expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>best</name> <init>= <expr><name>inf</name></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>perm</name><range>: <expr><name>perms</name></expr></range></decl></init>)</control> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name><name>c</name><index>[<expr><name><name>perm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>cl</name><index>[<expr><name>root</name></expr>]</index></name> <operator>=</operator> <name><name>perm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>perm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>graph</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cl</name><index>[<expr><name><name>graph</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>perm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>perm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>graph</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cl</name><index>[<expr><name><name>graph</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>perm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>color</name><argument_list>(<argument><expr><name><name>down</name><index>[<expr><name><name>graph</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>color</name><argument_list>(<argument><expr><name><name>down</name><index>[<expr><name><name>graph</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>perm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>ans</name> <operator>&lt;</operator> <name>best</name></expr>)</condition><then> <block>{
			<macro><name>RI</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
				<expr_stmt><expr><name><name>bestCl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cl</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			}</block>
			<expr_stmt><expr><name>best</name> <operator>=</operator> <name>ans</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>best</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<macro><name>RI</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>bestCl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
