<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935586_62483374.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1e18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>(int) 2e5</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>input</name> <parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition> <block>{
		<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c</name> <operator>^</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><ternary><condition><expr><name>f</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><name>x</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>Edge</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>nxt</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>edge</name><index>[<expr><name>N</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>fst</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ecnt</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>add_edge</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>edge</name><index>[<expr><name>ecnt</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>edge</name><index>[<expr><name>ecnt</name></expr>]</index></name><operator>.</operator><name>nxt</name> <operator>=</operator> <name><name>fst</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fst</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>ecnt</name> <operator>++</operator></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>init_e</name> <parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>fst</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>fst</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>calc</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><literal type="number">6</literal> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>DP</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>flg</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1ll</literal> <operator>*</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>fst</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>flg</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DP</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>a</name> <operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>b</name> <operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>calc</name> <argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></for>
		}</block></for>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>out</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pre</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>fst</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>out</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>, <argument><expr><call><name>calc</name> <argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>init_e</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>input</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>input</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>input</name> <argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><call><name>input</name> <argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>u</name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>v</name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_edge</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_edge</name> <argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	
	<decl_stmt><decl><type><name>bool</name></type> <name>flg</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>st</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>flg</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<if>if <condition>(<expr><operator>!</operator><name>flg</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><call><name>DP</name> <argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cur</name></decl>, <decl><type ref="prev"/><name>pre</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>st</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>st</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>pre</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></for>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>out</name> <argument_list>(<argument><expr><name>st</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
