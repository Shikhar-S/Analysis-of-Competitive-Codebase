<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934548_62490557.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastIO</name></cpp:macro> <cpp:value>do { cin.tie(nullptr); cout.tie(nullptr); ios::sync_with_stdio(false); } while (false);</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>fastIO</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>graph</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>graph</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graph</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>root</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><literal type="number">2</literal> <operator>&lt;</operator> <name><name>graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if <condition>(<expr><name>root</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>root</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>tonew</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>fromnew</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>fromnew</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>root</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><operator>*</operator><name><name>graph</name><index>[<expr><name>root</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>fromnew</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graph</name><index>[<expr><name>next</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>root</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ull</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ull</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>fc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>fc</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>sc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>sc</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>fc</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <switch>switch <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>)</condition> <block>{
                    <case>case <expr><literal type="number">0</literal></expr>:</case>
                        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>fc</name></expr>]</index><index>[<expr><name>sc</name></expr>]</index></name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>fc</name></expr>]</index><index>[<expr><name><name>fromnew</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="number">1</literal></expr>:</case>
                        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>fc</name></expr>]</index><index>[<expr><name>sc</name></expr>]</index></name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>sc</name></expr>]</index><index>[<expr><name><name>fromnew</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                        <break>break;</break>
                    <case>case <expr><literal type="number">2</literal></expr>:</case>
                        <decl_stmt><decl><type><name>int</name></type> <name>tc</name> <init>= <expr><literal type="number">6</literal> <operator>-</operator> <operator>(</operator><name>sc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>fc</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>fc</name></expr>]</index><index>[<expr><name>sc</name></expr>]</index></name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>tc</name></expr>]</index><index>[<expr><name><name>fromnew</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                        <break>break;</break>
                }</block></switch>
            }</block></for>
        }</block></for>
    }</block></for>

    <decl_stmt><decl><type><name>ull</name></type> <name>answer</name> <init>= <expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ms</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>fc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>fc</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>sc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>sc</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name>sc</name> <operator>==</operator> <name>fc</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>fc</name></expr>]</index><index>[<expr><name>sc</name></expr>]</index></name> <operator>&lt;</operator> <name>answer</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>mf</name> <operator>=</operator> <name>fc</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ms</name> <operator>=</operator> <name>sc</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>answer</name> <operator>=</operator> <name><name>ans</name><index>[<expr><name>fc</name></expr>]</index><index>[<expr><name>sc</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>answer</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mf</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ms</name><operator>++</operator></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>col</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <switch>switch <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal></expr>)</condition> <block>{
            <case>case <expr><literal type="number">0</literal></expr>:</case>
                <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>fromnew</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>mf</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">1</literal></expr>:</case>
                <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>fromnew</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>ms</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="number">2</literal></expr>:</case>
                <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>fromnew</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal> <operator>-</operator> <name>mf</name> <operator>-</operator> <name>ms</name></expr>;</expr_stmt>
                <break>break;</break>
        }</block></switch>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>co</name> <range>: <expr><name>col</name></expr></range></decl></init> )</control> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>co</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
