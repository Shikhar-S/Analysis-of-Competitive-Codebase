<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28923915_62477557.cpp"><comment type="line">//  Copyright Â© 2019 Diego Garcia Rodriguez del Campo. All rights reserved.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>200005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>optimiza_io</name></cpp:macro> <cpp:value>cin.tie(0); ios_base::sync_with_stdio(0);</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>i64</name>;</typedef>

<decl_stmt><decl><type><name>i64</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>mn</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>i64</name></type> <name><name>cst</name><index>[<expr><name>MAX</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>i64</name></type> <name><name>cl</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>i64</name></expr></argument> &gt;</argument_list></name></type> <name><name>ady</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfsans</name><parameter_list>( <parameter><decl><type><name>i64</name></type> <name>x</name></decl></parameter> , <parameter><decl><type><name>i64</name></type> <name>c</name></decl></parameter> , <parameter><decl><type><name>i64</name></type> <name>p</name></decl></parameter> , <parameter><decl><type><name>i64</name></type> <name>t</name></decl></parameter> )</parameter_list> <block>{
    <expr_stmt><expr><name><name>cl</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <for>for<control>( <init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name><name>ady</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init> )</control>
        <block type="pseudo"><if>if<condition>( <expr><name>v</name> <operator>!=</operator> <name>p</name></expr> )</condition><then> 
            <block type="pseudo"><expr_stmt><expr><call><name>dfsans</name><argument_list>( <argument><expr><name>v</name></expr></argument> , <argument><expr><operator>(</operator> <name>c</name> <operator>+</operator> <name>t</name> <operator>+</operator> <literal type="number">3</literal> <operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr></argument> , <argument><expr><name>x</name></expr></argument> , <argument><expr><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><type><name>i64</name></type> <name>dfs</name><parameter_list>( <parameter><decl><type><name>i64</name></type> <name>x</name></decl></parameter> , <parameter><decl><type><name>i64</name></type> <name>c</name></decl></parameter> , <parameter><decl><type><name>i64</name></type> <name>p</name></decl></parameter> , <parameter><decl><type><name>i64</name></type> <name>t</name></decl></parameter> )</parameter_list> <block>{
    <decl_stmt><decl><type><name>i64</name></type> <name>ans</name> <init>= <expr><name><name>cst</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>( <init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name><name>ady</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init> )</control>
        <block type="pseudo"><if>if<condition>( <expr><name>v</name> <operator>!=</operator> <name>p</name></expr> )</condition><then> 
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dfs</name><argument_list>( <argument><expr><name>v</name></expr></argument> , <argument><expr><operator>(</operator> <name>c</name> <operator>+</operator> <name>t</name> <operator>+</operator> <literal type="number">3</literal> <operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr></argument> , <argument><expr><name>x</name></expr></argument> , <argument><expr><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>


<function><type><name>bool</name></type> <name>line</name><parameter_list>()</parameter_list> <block>{
    <for>for<control>( <init><decl><type><name>i64</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{
        <decl_stmt><decl><type><name>i64</name></type> <name>x</name> <init>= <expr><name><name>ady</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>x</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> )</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if<condition>( <expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>optimiza_io</name></type>
    <name>cin</name> &gt;&gt; <name>N</name></decl>;</decl_stmt>
    <for>for<control>( <init><decl><type><name>i64</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name> <operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><for>for<control>( <init><decl><type><name>i64</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control>
            <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>cst</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr> ;</expr_stmt></block></for></block></for>
            
    <for>for<control>( <init><decl><type><name>i64</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control> <block>{
        <decl_stmt><decl><type><name>i64</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ady</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>( <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ady</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>( <argument><expr><name>u</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    <if>if<condition>( <expr><operator>!</operator> <call><name>line</name><argument_list>()</argument_list></call></expr> )</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    
            
    <decl_stmt><decl><type><name>i64</name></type> <name>s1</name> <init>= <expr><call><name>dfs</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>s2</name> <init>= <expr><call><name>dfs</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>s3</name> <init>= <expr><call><name>dfs</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>    
    <decl_stmt><decl><type><name>i64</name></type> <name>s4</name> <init>= <expr><call><name>dfs</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>s5</name> <init>= <expr><call><name>dfs</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>s6</name> <init>= <expr><call><name>dfs</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>( <expr><name>s1</name> <operator>&lt;=</operator> <name>s2</name> <operator>&amp;&amp;</operator> <name>s1</name> <operator>&lt;=</operator> <name>s3</name> <operator>&amp;&amp;</operator> <name>s1</name> <operator>&lt;=</operator> <name>s4</name> <operator>&amp;&amp;</operator> <name>s1</name> <operator>&lt;=</operator> <name>s5</name> <operator>&amp;&amp;</operator> <name>s1</name> <operator>&lt;=</operator> <name>s6</name></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>mn</name> <operator>=</operator> <name>s1</name></expr><operator>,</operator> <expr><call><name>dfsans</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>( <expr><name>s2</name> <operator>&lt;=</operator> <name>s3</name> <operator>&amp;&amp;</operator> <name>s2</name> <operator>&lt;=</operator> <name>s4</name> <operator>&amp;&amp;</operator> <name>s2</name> <operator>&lt;=</operator> <name>s5</name> <operator>&amp;&amp;</operator> <name>s2</name> <operator>&lt;=</operator> <name>s6</name></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>mn</name> <operator>=</operator> <name>s2</name></expr><operator>,</operator> <expr><call><name>dfsans</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>( <expr><name>s3</name> <operator>&lt;=</operator> <name>s4</name> <operator>&amp;&amp;</operator> <name>s3</name> <operator>&lt;=</operator> <name>s5</name> <operator>&amp;&amp;</operator> <name>s3</name> <operator>&lt;=</operator> <name>s6</name></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>mn</name> <operator>=</operator> <name>s3</name></expr><operator>,</operator> <expr><call><name>dfsans</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>( <expr><name>s4</name> <operator>&lt;=</operator> <name>s5</name> <operator>&amp;&amp;</operator> <name>s4</name> <operator>&lt;=</operator> <name>s6</name></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>mn</name> <operator>=</operator> <name>s4</name></expr><operator>,</operator> <expr><call><name>dfsans</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
    <elseif>else <if>if<condition>( <expr><name>s5</name> <operator>&lt;=</operator> <name>s6</name></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>mn</name> <operator>=</operator> <name>s5</name></expr><operator>,</operator> <expr><call><name>dfsans</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>mn</name> <operator>=</operator> <name>s6</name></expr><operator>,</operator> <expr><call><name>dfsans</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><literal type="number">2</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></else></if>
    
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mn</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>( <init><decl><type><name>i64</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>cl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


<comment type="block">/*

3 
10 1 10
10 10 1
1 10 10
1 2
2 3

*/</comment></unit>
