<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28915254_62498823.cpp"><comment type="line">// include stdc++.h slows down compilation much.</comment>
<comment type="line">//#include&lt;bits/stdc++.h&gt;</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_IOSTREAM</name></cpp:macro> \
<cpp:value>{\
	ios::sync_with_stdio(false);\
	cin.tie(0);\
	cout.tie(0);\
}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAIL_RETURN</name></cpp:macro> \
<cpp:value>do\
{\
    printf("-1\n");\
    return 0;\
} while(0);</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">// USE_IOSTREAM;</comment>
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<comment type="line">//freopen("1.txt", "r", stdin);</comment>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>right</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>leftNum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rightNum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>left</name> <argument_list type="generic">&lt; <argument><expr><name>right</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition>
    <block>{
        <if>if <condition>(<expr><name>leftNum</name> <operator>&lt;</operator> <name>rightNum</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>diff</name> <init>= <expr><name><name>a</name><index>[<expr><name>left</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>left</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>diff</name> <operator>*</operator> <name>leftNum</name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>left</name></expr>]</index></name> <operator>+=</operator> <name>k</name> <operator>/</operator> <name>leftNum</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>leftNum</name> <operator>*</operator> <name>diff</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>leftNum</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>left</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>diff</name> <init>= <expr><name><name>a</name><index>[<expr><name>right</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>right</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>diff</name> <operator>*</operator> <name>rightNum</name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>right</name></expr>]</index></name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name>rightNum</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>rightNum</name> <operator>*</operator> <name>diff</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rightNum</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>right</name><operator>--</operator></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>

    <expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>right</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>left</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
