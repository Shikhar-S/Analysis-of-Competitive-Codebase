<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935438_62481655.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>games</name></decl>, <decl><type ref="prev"/><name>points</name></decl>, <decl><type ref="prev"/><name>pWin</name></decl>, <decl><type ref="prev"/><name>pDraw</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>games</name> <operator>&gt;&gt;</operator> <name>points</name> <operator>&gt;&gt;</operator> <name>pWin</name> <operator>&gt;&gt;</operator> <name>pDraw</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>targetMod</name> <init>= <expr><name>points</name> <operator>%</operator> <name>pWin</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>draws</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>targetMod</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>curMod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<do>do <block>{
			<expr_stmt><expr><name>curMod</name> <operator>=</operator> <operator>(</operator><name>curMod</name> <operator>+</operator> <name>pDraw</name><operator>)</operator> <operator>%</operator> <name>pWin</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>draws</name><operator>++</operator></expr>;</expr_stmt>
		}</block>
		while <condition>(<expr><name>curMod</name> <operator>!=</operator> <name>targetMod</name> <operator>&amp;&amp;</operator> <name>curMod</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
		<if>if <condition>(<expr><name>curMod</name> <operator>!=</operator> <name>targetMod</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></then></if>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>wins</name> <init>= <expr><operator>(</operator><name>points</name> <operator>-</operator> <name>draws</name> <operator>*</operator> <name>pDraw</name><operator>)</operator> <operator>/</operator> <name>pWin</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>wins</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>wins</name> <operator>+</operator> <name>draws</name> <operator>&lt;=</operator> <name>games</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>wins</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>draws</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>games</name> <operator>-</operator> <name>wins</name> <operator>-</operator> <name>draws</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></then>
	<else>else <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></else></if>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
