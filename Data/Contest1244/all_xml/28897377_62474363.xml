<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28897377_62474363.cpp">	<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
	<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ch</name><index>[<expr><literal type="number">1011</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
      <comment type="line">//  ll  gcd(ll a,ll b){return  !b?a:gcd(b,a%b);}</comment>
<comment type="line">//ll i,j,k,l,n,m,sum,maxx,minn,ans,x,y,flag,cc,t;</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>n</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>ans</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>ch</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal><operator>||</operator><name><name>ch</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
<comment type="line">//              while(ch&lt;='9' &amp;&amp; ch&gt;='0') {</comment>
<comment type="line">//       x=x*10+ch-'0';</comment>
<comment type="line">//       ch=getchar();</comment>
<comment type="line">//    }</comment>
<comment type="line">//    return x*f;</comment>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>maxx</name><init>=<expr><name>ans</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><if>if<condition>(<expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>maxx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>maxx</name></expr></argument>,<argument><expr><name>sum</name><operator>+</operator><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>maxx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>maxx</name></expr></argument>,<argument><expr><name>i</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>maxx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>maxx</name></expr></argument>,<argument><expr><operator>(</operator><name>len</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if></block></for>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>maxx</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
