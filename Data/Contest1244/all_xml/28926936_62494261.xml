<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926936_62494261.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>L</name></expr></argument>,<argument><expr><name>L</name></expr></argument>&gt;</argument_list></name></type> <name>P</name>;</typedef>
<function><specifier>inline</specifier> <type><name>L</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>L</name></type> <name>sum</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><argument_list>(<argument><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{
		<expr_stmt><expr><name>sum</name><operator>=</operator><name>sum</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>sum</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_size</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x?x-&gt;size:0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get_sp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x?x-&gt;sp:0)</cpp:value></cpp:define>
<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>node</name> <modifier>*</modifier></type><name>lch</name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>rch</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>key</name></decl>,<decl><type ref="prev"/><name>fix</name></decl>,<decl><type ref="prev"/><name>size</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>,<decl><type ref="prev"/><name>sp</name></decl>;</decl_stmt>
	<constructor><name>node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list><member_init_list>:<call><name>lch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>,<call><name>rch</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call>,<call><name>key</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>,<call><name>fix</name><argument_list>(<argument><expr><call><name>rand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call>,<call><name>size</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call>,<call><name>cnt</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call>,<call><name>sp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>pushup</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>size</name></name><operator>=</operator><call><name>get_size</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>lch</name></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>get_size</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>rch</name></name></expr></argument>)</argument_list></call><operator>+</operator><name><name>this</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>sp</name></name><operator>=</operator><call><name>get_sp</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>lch</name></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>get_sp</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>rch</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></function>
</public>}</block><decl><modifier>*</modifier><name>root</name></decl>;</struct>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>left_rotate</name><parameter_list>(<parameter><decl><type><name>node</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>node</name> <modifier>*</modifier></type><name>tmp</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>rch</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>rch</name></name><operator>=</operator><name><name>tmp</name><operator>-&gt;</operator><name>lch</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>lch</name></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>pushup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>tmp</name><operator>-&gt;</operator><name>pushup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>right_rotate</name><parameter_list>(<parameter><decl><type><name>node</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>node</name> <modifier>*</modifier></type><name>tmp</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>lch</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>lch</name></name><operator>=</operator><name><name>tmp</name><operator>-&gt;</operator><name>rch</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmp</name><operator>-&gt;</operator><name>rch</name></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>pushup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>tmp</name><operator>-&gt;</operator><name>pushup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>x</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>insert</name><parameter_list>(<parameter><decl><type><name>node</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>cnt</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><operator>new</operator> <call><name>node</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>k</name><operator>==</operator><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition><then><block>{
		<expr_stmt><expr><name><name>x</name><operator>-&gt;</operator><name>cnt</name></name><operator>+=</operator><name>cnt</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>pushup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>k</name><operator>&lt;</operator><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>lch</name></name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>pushup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>lch</name><operator>-&gt;</operator><name>fix</name></name><operator>&lt;</operator><name><name>x</name><operator>-&gt;</operator><name>fix</name></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>right_rotate</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></then>
	<else>else<block>{
		<expr_stmt><expr><call><name>insert</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>rch</name></name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>pushup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>rch</name><operator>-&gt;</operator><name>fix</name></name><operator>&lt;</operator><name><name>x</name><operator>-&gt;</operator><name>fix</name></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>left_rotate</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></else></if>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>del</name><parameter_list>(<parameter><decl><type><name>node</name> <modifier>*</modifier><modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>key</name></name><operator>==</operator><name>k</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>ret</name><operator>=</operator><name><name>x</name><operator>-&gt;</operator><name>cnt</name></name></expr>;</expr_stmt>
		<if>if<condition>(<expr><operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>lch</name></name><operator>||</operator><operator>!</operator><name><name>x</name><operator>-&gt;</operator><name>rch</name></name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>node</name> <modifier>*</modifier></type><name>tmp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></decl>;</decl_stmt>
			<if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>lch</name></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>x</name><operator>-&gt;</operator><name>lch</name></name></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>rch</name></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>x</name><operator>-&gt;</operator><name>rch</name></name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><operator>delete</operator> <name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>lch</name><operator>-&gt;</operator><name>fix</name></name><operator>&lt;</operator><name><name>x</name><operator>-&gt;</operator><name>rch</name><operator>-&gt;</operator><name>fix</name></name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>right_rotate</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>del</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>rch</name></name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><call><name>left_rotate</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>del</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>lch</name></name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></then>
	<else>else<block>{
		<if>if<condition>(<expr><name>k</name><operator>&lt;</operator><name><name>x</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><call><name>del</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>lch</name></name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><call><name>del</name><argument_list>(<argument><expr><name><name>x</name><operator>-&gt;</operator><name>rch</name></name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></else></if>
	<if>if<condition>(<expr><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>x</name><operator>-&gt;</operator><name>pushup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>P</name></type> <name>kth</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>node</name> <modifier>*</modifier></type><name>tmp</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>tmp</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name>k</name><operator>==</operator><call><name>get_sp</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>lch</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>P</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>k</name><operator>&lt;</operator><call><name>get_sp</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>lch</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>tmp</name><operator>-&gt;</operator><name>lch</name></name></expr>;</expr_stmt></block></then>
		<else>else<block>{
			<expr_stmt><expr><name>k</name><operator>-=</operator><call><name>get_sp</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>lch</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>tmp</name><operator>-&gt;</operator><name>rch</name></name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<return>return <expr><call><name>P</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>key</name></name></expr></argument>,<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>cnt</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>bl</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>id</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>L</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name><name>st</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cnt</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>k</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>now</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></decl>;</decl_stmt><expr_stmt><expr><name><name>bl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>cnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>st</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>^</operator><name>now</name></expr>)</condition><then><block>{<expr_stmt><expr><name>now</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name>id</name></expr>;</expr_stmt><expr_stmt><expr><name><name>st</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>cnt</name><index>[<expr><name>id</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>bl</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>id</name></expr>;</expr_stmt>}</block></then>
		<else>else<block>{<expr_stmt><expr><name><name>bl</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>id</name></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name><name>cnt</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt>}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name>id</name></expr>;</expr_stmt><expr_stmt><expr><name>ans</name><operator>=</operator><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>k</name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>l</name><operator>&lt;</operator><name>r</name></expr>)</condition><block>{
		<decl_stmt><decl><type><name>L</name></type> <name>tp1</name><argument_list>(<argument><expr><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>all1</name><argument_list>(<argument><expr><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name><operator>*</operator><operator>(</operator><name><name>st</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>st</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>L</name></type> <name>tp2</name><argument_list>(<argument><expr><name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>all2</name><argument_list>(<argument><expr><name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name><operator>*</operator><operator>(</operator><name><name>st</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>st</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>k</name><operator>&lt;</operator><call><name>min</name><argument_list>(<argument><expr><name>tp1</name></expr></argument>,<argument><expr><name>tp2</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name>tp1</name><operator>&lt;</operator><name>tp2</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>L</name></type> <name>flg</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>tp1</name><operator>*</operator><name>tp1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>flg</name><operator>&gt;=</operator><name>all1</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name><operator>-=</operator><name>all1</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>st</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>st</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name><name>st</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name><name>st</name><index>[<expr><name>l</name></expr>]</index></name><operator>+</operator><operator>(</operator><name>k</name><operator>/</operator><name>tp1</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name><operator>-=</operator><name>flg</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>st</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>st</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><name>tp1</name><operator>&gt;</operator><name>tp2</name></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>L</name></type> <name>flg</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>tp2</name><operator>*</operator><name>tp2</name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>flg</name><operator>&gt;=</operator><name>all2</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>k</name><operator>-=</operator><name>all2</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>st</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>st</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then>
				<else>else<block>{
					<expr_stmt><expr><name><name>st</name><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><name><name>st</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><operator>(</operator><name>k</name><operator>/</operator><name>tp2</name><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>k</name><operator>-=</operator><name>flg</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>st</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>st</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then>
			<else>else<block>{
				<if>if<condition>(<expr><name>all1</name><operator>&lt;</operator><name>all2</name></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>L</name></type> <name>flg</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>tp1</name><operator>*</operator><name>tp1</name></expr></argument>)</argument_list></decl>;</decl_stmt>
					<if>if<condition>(<expr><name>flg</name><operator>&gt;=</operator><name>all1</name></expr>)</condition><then><block>{
						<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>k</name><operator>-=</operator><name>all1</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>st</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>st</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
					}</block></then>
					<else>else<block>{
						<expr_stmt><expr><name><name>st</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name><name>st</name><index>[<expr><name>l</name></expr>]</index></name><operator>+</operator><operator>(</operator><name>k</name><operator>/</operator><name>tp1</name><operator>)</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>k</name><operator>-=</operator><name>flg</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>st</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>st</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then>
				<else>else<block>{
					<decl_stmt><decl><type><name>L</name></type> <name>flg</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>tp2</name><operator>*</operator><name>tp2</name></expr></argument>)</argument_list></decl>;</decl_stmt>
					<if>if<condition>(<expr><name>flg</name><operator>&gt;=</operator><name>all2</name></expr>)</condition><then><block>{
						<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>k</name><operator>-=</operator><name>all2</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>st</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>st</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
					}</block></then>
					<else>else<block>{
						<expr_stmt><expr><name><name>st</name><index>[<expr><name>r</name></expr>]</index></name><operator>=</operator><name><name>st</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><operator>(</operator><name>k</name><operator>/</operator><name>tp2</name><operator>)</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>k</name><operator>-=</operator><name>flg</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>st</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>st</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
					}</block></else></if>
				}</block></else></if>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
