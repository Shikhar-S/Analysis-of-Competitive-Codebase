<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28897377_62495519.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>mp</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>a</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mp</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>s</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><operator>++</operator><name>sum</name></expr>]</index></name><operator>=</operator><name>it</name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>sum</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then>
        <else>else
        <block>{
            <if>if<condition>(<expr><name><name>mp</name><index>[<expr><name><name>c</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name><operator>&lt;</operator><name><name>mp</name><index>[<expr><name><name>c</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>zz</name><init>=<expr><operator>(</operator><name><name>c</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>c</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>mp</name><index>[<expr><name><name>c</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name>zz</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>k</name><operator>-=</operator><name>zz</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>c</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+=</operator><name><name>mp</name><index>[<expr><name><name>c</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><name><name>c</name><index>[<expr><name>l</name></expr>]</index></name><operator>+=</operator><name>k</name><operator>/</operator><name><name>mp</name><index>[<expr><name><name>c</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></else></if>
            }</block></then>
            <else>else
            <block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>zz</name><init>=<expr><operator>(</operator><name><name>c</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>c</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>mp</name><index>[<expr><name><name>c</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name>zz</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>k</name><operator>-=</operator><name>zz</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>c</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+=</operator><name><name>mp</name><index>[<expr><name><name>c</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><name><name>c</name><index>[<expr><name>r</name></expr>]</index></name><operator>-=</operator><name>k</name><operator>/</operator><name><name>mp</name><index>[<expr><name><name>c</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></else></if>
            }</block></else></if>
<comment type="line">//            cout&lt;&lt;l&lt;&lt;" "&lt;&lt;r&lt;&lt;" "&lt;&lt;k&lt;&lt;endl;</comment>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>c</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
