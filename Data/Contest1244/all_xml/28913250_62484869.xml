<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28913250_62484869.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>File</name><parameter_list>(<parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>freopen(#_ ".in", "r", stdin), freopen(#_ ".out", "w", stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mset</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, b, sizeof a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i(a), i##_END_(b); i &lt;= i##_END_; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>drep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i(a), i##_END_(b); i &gt;= i##_END_; i--)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>tomax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name> <operator>=</operator> <name>b</name></expr></then></ternary></expr><operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>tomin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>b</name> <operator>&lt;</operator> <name>a</name></expr> ?</condition><then> <expr><name>a</name> <operator>=</operator> <name>b</name></expr></then></ternary></expr><operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>;</return>}</block></function>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>|=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
    <if>if<condition>(<expr><name>f</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <operator>-</operator><name>a</name></expr>;</expr_stmt></block></then></if>
}</block></function>

<struct><template>template<parameter_list>&lt;<parameter><type><name>int</name></type> <name>N</name></parameter>, <parameter><type><name>int</name></type> <name>M</name></parameter>, <parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> struct <name>Link</name> <block>{<public type="default">
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>erep</name><parameter_list>(<parameter><type><name>k</name></type></parameter>, <parameter><type><name>G</name></type></parameter>, <parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int k(G.HEAD[o]); k; k = G.NXT[k])</cpp:value></cpp:define>
    <decl_stmt><decl><type><name>int</name></type> <name><name>HEAD</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>NXT</name><index>[<expr><name>M</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>tot</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>T</name></type> <name><name>W</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
    <function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name><name>NXT</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name> <operator>=</operator> <name><name>HEAD</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>W</name><index>[<expr><name><name>HEAD</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>tot</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>}</block></function>
    <function type="operator"><type><name>T</name><modifier>&amp;</modifier></type> <name>operator<name>[]</name></name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><name><name>W</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</return>}</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>Link</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>, <argument><expr><name>N</name> <modifier>*</modifier> <literal type="number">2</literal></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>G</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>deg</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vec</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>tot</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>o</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>vec</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>
    <macro><name>erep</name><argument_list>(<argument>k</argument>, <argument>G</argument>, <argument>o</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>G</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>v</name> <operator>==</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>ansc</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">2</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>deg</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>deg</name><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>G</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>G</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>dir</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>rep</name><argument_list>(<argument>d</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>now</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><name>now</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>+</operator> <name>d</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        }</block>
        <if>if<condition>(<expr><call><name>tomin</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>col</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt> <expr_stmt><expr><name>dir</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name><name>ansc</name><index>[<expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>col</name> <operator>=</operator> <operator>(</operator><name>col</name> <operator>+</operator> <name>dir</name><operator>)</operator> <operator>%</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    }</block>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%c"</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>ansc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" \n"</literal><index>[<expr><name>i</name> <operator>==</operator> <name>n</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
