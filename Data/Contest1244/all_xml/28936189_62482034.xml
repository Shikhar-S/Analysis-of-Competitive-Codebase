<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936189_62482034.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>gcd</name></decl>, <decl><type ref="prev"/><name>min</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld%lld%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">1000000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>m</name> <operator>-</operator> <name>b</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>j</name> <operator>%</operator> <name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>j</name> <operator>/=</operator> <name>a</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>min</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
        }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr><name>min</name> <operator>==</operator> <literal type="number">1e18</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return> }</block></then></if>
    <for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">1000000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>j</name> <operator>=</operator> <name>m</name> <operator>-</operator> <name>b</name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>j</name> <operator>%</operator> <name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>j</name> <operator>/=</operator> <name>a</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>min</name> <operator>==</operator> <name>i</name> <operator>+</operator> <name>j</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> }</block></then></if>
        }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr><name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
