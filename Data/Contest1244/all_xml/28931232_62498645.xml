<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931232_62498645.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &lt; b; ++i)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>debug</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">7e5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>it</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>was</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>array</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type> <name><name>ev</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>check_same</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <return>return <expr><name>flag</name></expr>;</return>
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <call><name>int</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>array</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>seg</name></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">3</literal> * n</argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>cur</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>seg</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>l</name></expr>, <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ev</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>, <expr><operator>+</operator><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ev</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <block>{<expr><name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>l</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block>
    <if>if <condition>(<expr><call><name>check_same</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>s</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>seg</name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"     seg = "</literal> <operator>&lt;&lt;</operator> <name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">"  "</literal> <operator>&lt;&lt;</operator> <name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>it</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name><name>seg</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>x</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">3</literal> * n</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><name>x</name> <operator>%</operator> <name>n</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>it</name> <operator>&lt;</operator> <name>m</name> <operator>&amp;&amp;</operator> <name><name>seg</name><index>[<expr><name>it</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name>x</name></expr>)</condition> <block>{
            <expr_stmt><expr><operator>++</operator><name>it</name></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>it</name> <operator>==</operator> <name>m</name> <operator>||</operator> <name>x</name> <operator>&lt;=</operator> <name><name>seg</name><index>[<expr><name>it</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>debug</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"  it="</literal> <operator>&lt;&lt;</operator> <name>it</name> <operator>&lt;&lt;</operator> <literal type="string">"   x="</literal> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>it</name> <operator>==</operator> <name>m</name></expr>)</condition><then> <block>{
            <break>break;</break> <comment type="line" format="doxygen">/// all positions will be colored?;</comment>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>seg</name><index>[<expr><name>it</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;=</operator> <name><name>seg</name><index>[<expr><name>it</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name>xx</name></expr>]</index></name> <operator>=</operator> <name><name>seg</name><index>[<expr><name>it</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <comment type="line" format="doxygen">/// = color in seg</comment>
            <expr_stmt><expr><name><name>was</name><index>[<expr><name>xx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>it</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <continue>continue;</continue> <comment type="line" format="doxygen">/// will colored after?</comment>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>seg</name><index>[<expr><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>seg</name><index>[<expr><name>it</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then> <block>{ <comment type="line" format="doxygen">/// between same colors</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>L</name></decl>, <decl><type ref="prev"/><name>R</name></decl>, <decl><type ref="prev"/><name>color</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>it</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>it</name> <operator>&lt;</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>R</name> <operator>=</operator> <name><name>seg</name><index>[<expr><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>L</name> <operator>=</operator> <name><name>seg</name><index>[<expr><name>it</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>color</name> <operator>=</operator> <name><name>seg</name><index>[<expr><name>it</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>L</name> <operator>-</operator> <name>R</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>R</name> <operator>+</operator> <name>k</name> <operator>||</operator> <name>x</name> <operator>&gt;=</operator> <name>L</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>xx</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>xx</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>-</operator> <operator>(</operator><name>R</name> <operator>+</operator> <name>k</name><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <name>color</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name><name>was</name><index>[<expr><name>xx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{ <comment type="line" format="doxygen">/// it &gt; 0 &amp;&amp; it &lt; m</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>L</name></decl>, <decl><type ref="prev"/><name>R</name></decl>, <decl><type ref="prev"/><name>Lcolor</name></decl>, <decl><type ref="prev"/><name>Rcolor</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>it</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>it</name> <operator>&lt;</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>R</name> <operator>=</operator> <name><name>seg</name><index>[<expr><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>L</name> <operator>=</operator> <name><name>seg</name><index>[<expr><name>it</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>Rcolor</name> <operator>=</operator> <name><name>seg</name><index>[<expr><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>Lcolor</name> <operator>=</operator> <name><name>seg</name><index>[<expr><name>it</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>(</operator><name>L</name> <operator>-</operator> <name>R</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>R</name> <operator>+</operator> <name>k</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&gt;=</operator> <name>L</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>xx</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>x</name> <operator>-</operator> <name>R</name> <operator>&lt;</operator> <name>L</name> <operator>-</operator> <name>x</name><operator>)</operator></expr> ?</condition><then> <expr><name>Rcolor</name></expr> </then><else>: <expr><name>Lcolor</name></expr></else></ternary></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>R</name> <operator>+</operator> <name>k</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>xx</name></expr>]</index></name> <operator>=</operator> <name>Rcolor</name></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>L</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>xx</name></expr>]</index></name> <operator>=</operator> <name>Lcolor</name></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>xx</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>-</operator> <operator>(</operator><name>R</name> <operator>+</operator> <name>k</name><operator>)</operator><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <name>Rcolor</name></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name><name>was</name><index>[<expr><name>xx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block>
    <if>if <condition>(<expr><call><name><name>seg</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>k</name> <operator>%=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name>k</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>was</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block>
    }</block></then></if>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>was</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'W'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    }</block>
}</block></function>

<comment type="block" format="doxygen">/**
9 2
BBWBWBBWW
*/</comment></unit>
