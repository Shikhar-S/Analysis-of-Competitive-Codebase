<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28892317_62470786.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro>   <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((int)((v).size()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v).begin()),((v).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM</name><parameter_list>(<parameter><type><name>dp</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(dp ,i, sizeof (dp))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repit</name><parameter_list>( <parameter><type><name>cont</name></type></parameter> , <parameter><type><name>i</name></type></parameter>  )</parameter_list></cpp:macro> <cpp:value>for( auto i : cont)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forr</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(ll c=x;c&lt;=(ll)n; ++c )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forrr</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(ll c=x;c&gt;=( ll )n ;--c )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; " LOOK " &lt;&lt;(#x) &lt;&lt;" = " &lt;&lt;  x &lt;&lt; '\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICPC</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printarr</name><parameter_list>(<parameter><type><name>a</name></type></parameter> , <parameter><type><name>l</name></type></parameter> , <parameter><type><name>r</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>forr ( i , l , r )cout &lt;&lt; a[i] &lt;&lt; " ";cout&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printarr2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter> , <parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>forr ( i , 1 , n){forr ( j , 1, m )cout &lt;&lt; a[i][j] &lt;&lt; " ";cout&lt;&lt;endl;}</cpp:value></cpp:define>

<comment type="line">//freopen("input.txt", "r", stdin);</comment>
<comment type="line">//freopen("output.txt", "w", stdout);</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<expr_stmt><expr><name>ICPC</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl> ;</decl_stmt>
<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
<while>while <condition>( <expr><name>t</name><operator>--</operator></expr> )</condition>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl> ;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>mx</name><init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
  <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
  <block>{
      <if>if <condition>( <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then>
      <block>{
          <expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>( <argument><expr><operator>(</operator> <name>n</name> <operator>-</operator> <name>i</name> <operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><name>mx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>( <argument><expr><operator>(</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument> , <argument><expr><name>mx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mx</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></while>
}</block></function>
</unit>
