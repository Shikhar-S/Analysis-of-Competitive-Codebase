<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933287_62493576.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>LL</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>VL</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<function><type><name>LL</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>K</name></decl></parameter>, <parameter><decl><type><name>VL</name><modifier>&amp;</modifier></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>C</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>a</name> <range>: <expr><name>A</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>C</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <while>while <condition>(<expr><call><name><name>C</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>C</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>auto</name> <index>[<expr><name>a</name></expr><operator>,</operator> <name>ca</name>]</index> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>it</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>auto</name> <index>[<expr><name>b</name></expr><operator>,</operator> <name>cb</name>]</index> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>C</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>auto</name> <index>[<expr><name>d</name></expr><operator>,</operator> <name>cd</name>]</index> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>auto</name> <index>[<expr><name>c</name></expr><operator>,</operator> <name>cc</name>]</index> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>ca</name> <operator>&lt;=</operator> <name>cd</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>LL</name></type> <name>diff</name> <init>= <expr><name>b</name> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>LL</name></type> <name>p</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>K</name> <operator>/</operator> <name>ca</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <decl_stmt><decl><type><name>LL</name></type> <name>na</name> <init>= <expr><name>a</name> <operator>+</operator> <name>p</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>K</name> <operator>-=</operator> <name>p</name> <operator>*</operator> <name>ca</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>C</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><index>[<expr><name>na</name></expr>]</index></name> <operator>+=</operator> <name>ca</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>LL</name></type> <name>diff</name> <init>= <expr><name>d</name> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>LL</name></type> <name>p</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>K</name> <operator>/</operator> <name>cd</name></expr></argument>, <argument><expr><name>diff</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <decl_stmt><decl><type><name>LL</name></type> <name>nd</name> <init>= <expr><name>d</name> <operator>-</operator> <name>p</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>K</name> <operator>-=</operator> <name>p</name> <operator>*</operator> <name>cd</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>C</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>C</name><index>[<expr><name>nd</name></expr>]</index></name> <operator>+=</operator> <name>cd</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>

    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>C</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>auto</name> <index>[<expr><name>a</name></expr><operator>,</operator> <name>ca</name>]</index> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>it</name> <operator>=</operator> <call><name><name>C</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>auto</name> <index>[<expr><name>b</name></expr><operator>,</operator> <name>cb</name>]</index> <operator>=</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
    <return>return <expr><name>b</name> <operator>-</operator> <name>a</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>K</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>K</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>A</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>LL</name><modifier>&amp;</modifier></type> <name>a</name> <range>: <expr><name>A</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>K</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
