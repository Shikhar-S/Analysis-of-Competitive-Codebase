<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28895489_62486864.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>, <decl><type ref="prev"/><name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>



<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><name>p</name> <operator>-</operator> <name>n</name><operator>*</operator><name>d</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>denom</name> <init>= <expr><name>w</name> <operator>-</operator> <name>d</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>num</name><operator>/</operator><name>denom</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>num</name><operator>%</operator><name>denom</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>res</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*cout&lt;&lt;res&lt;&lt;" ";
    int z = p - res*w;
    cout&lt;&lt;z/d&lt;&lt;" "&lt;&lt;(n - res - z/d);*/</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>res</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>tmp</name><operator>*</operator><name>w</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>tmp</name><operator>*</operator><name>w</name><operator>)</operator><operator>%</operator><name>d</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><operator>(</operator><operator>(</operator><name>p</name> <operator>-</operator> <name>tmp</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>d</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><operator>(</operator><name>q</name> <operator>+</operator> <name>tmp</name><operator>)</operator> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>tmp</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>q</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name> <operator>-</operator> <name>tmp</name> <operator>-</operator> <name>q</name><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
