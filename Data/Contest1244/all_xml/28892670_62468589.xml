<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28892670_62468589.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<comment type="line">// Author: MrLolthe1st</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms</name></cpp:macro> <cpp:value>multiset</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;long long, long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name></cpp:macro> <cpp:value>&lt;&lt; " " &lt;&lt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>srt</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::sort(a.begin(), a.end())</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>_set_to_vec</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>z</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>z</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><call><name><name>w</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>*</operator><name>it</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>w</name></expr>;</return>
}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>pop_front</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>vec</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>z_function</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>z</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>r</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>i</name> <operator>-</operator> <name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<while>while <condition>(<expr><name>i</name> <operator>+</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></while>
		<if>if <condition>(<expr><name>i</name> <operator>+</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>r</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<return>return <expr><name>z</name></expr>;</return>
}</block></function>
<struct>struct <name>point</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<constructor><name>point</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <member_init_list>:<call><name>x</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>, <call><name>y</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor><empty_stmt>;</empty_stmt>
	<constructor><name>point</name><parameter_list>()</parameter_list> <block>{}</block></constructor><empty_stmt>;</empty_stmt>
</public>}</block>;</struct>

<function type="operator"><type><name>point</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>point</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>
<function type="operator"><type><name>point</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>point</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>
<function type="operator"><type><name>double</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>y</name></name><operator>)</operator></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>

<function type="operator"><type><name>double</name></type> <name>operator<name>^</name></name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>b</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>
<function type="operator"><type><name>double</name></type> <name>operator<name>%</name></name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>point</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>atan2</name><argument_list>(<argument><expr><name>a</name> <operator>^</operator> <name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<decl_stmt><decl><type><name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-13</literal></expr></init></decl>;</decl_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>equals</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>eps</name></expr>;</return>
}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>int</name></type> <name>sign</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pt</name></cpp:macro> <cpp:value>point</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>double</name></type> <name>area</name><parameter_list>(<parameter><decl><type><name>pt</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pt</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>pt</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><operator>(</operator><name><name>b</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>x</name></name><operator>)</operator></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>char</name></type> <name>intersect_1</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <name>d</name></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<return>return <expr><call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>char</name></type> <name>intersect</name><parameter_list>(<parameter><decl><type><name>pt</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pt</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>pt</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>pt</name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><call><name>intersect_1</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call>
		<operator>&amp;&amp;</operator> <call><name>intersect_1</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call>
		<operator>&amp;&amp;</operator> <call><name>area</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>area</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal>
		<operator>&amp;&amp;</operator> <call><name>area</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>area</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>double</name></type> <name>pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<function><type><name>double</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>point</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>p</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>cmpr</name><parameter_list>(<parameter><decl><type><name>pt</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pt</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name>equals</name><argument_list>(<argument><expr><operator>(</operator><name>a</name> <operator>^</operator> <name>b</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><call><name>dist</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>dist</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><operator>(</operator><name>a</name> <operator>^</operator> <name>b</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return></block></else></if>
}</block></function>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>pt</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pt</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>x</name></name> <operator>||</operator> <name><name>a</name><operator>.</operator><name>x</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>x</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>y</name></name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>cw</name><parameter_list>(<parameter><decl><type><name>pt</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pt</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>pt</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>*</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>c</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <name><name>b</name><operator>.</operator><name>x</name></name> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <name><name>c</name><operator>.</operator><name>x</name></name> <operator>*</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>ccw</name><parameter_list>(<parameter><decl><type><name>pt</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pt</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>pt</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>*</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>c</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <name><name>b</name><operator>.</operator><name>x</name></name> <operator>*</operator> <operator>(</operator><name><name>c</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator> <name><name>c</name><operator>.</operator><name>x</name></name> <operator>*</operator> <operator>(</operator><name><name>a</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>convex_hull</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pt</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>  <block type="pseudo"><return>return;</return></block></then></if>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>pt</name></type> <name>p1</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>p2</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pt</name></expr></argument>&gt;</argument_list></name></type> <name>up</name></decl>, <decl><type ref="prev"/><name>down</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>up</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>down</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>cw</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<while>while <condition>(<expr><call><name><name>up</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>cw</name><argument_list>(<argument><expr><name><name>up</name><index>[<expr><call><name><name>up</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>up</name><index>[<expr><call><name><name>up</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block type="pseudo"><expr_stmt><expr><call><name><name>up</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
			<expr_stmt><expr><call><name><name>up</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>ccw</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<while>while <condition>(<expr><call><name><name>down</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ccw</name><argument_list>(<argument><expr><name><name>down</name><index>[<expr><call><name><name>down</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>down</name><index>[<expr><call><name><name>down</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
				<block type="pseudo"><expr_stmt><expr><call><name><name>down</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
			<expr_stmt><expr><call><name><name>down</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>up</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>up</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><call><name><name>down</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>down</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>

<typedef>typedef <type><name>string</name></type> <name>str</name>;</typedef>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<return>return <expr><name>in</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
	<return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>E</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>E</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name><name>a</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>a</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
	<return>return <expr><name>in</name></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>T</name></type> <name>c</name></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>a</name></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>T</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><operator>(</operator><name>a</name> <operator>/</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>b</name></expr>;</return>
}</block></function>


<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>prefix_function</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name><name>pi</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>pi</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></while>
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>pi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>pi</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>binpow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><call><name>binpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>a</name></expr>;</return></block></then>
	<else>else <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>binpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name>b</name> <operator>*</operator> <name>b</name></expr>;</return>
	}</block></else></if>
}</block></function>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>primes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>lp</name><argument_list>(<argument><expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pr</name></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>lp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>lp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>pr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>pr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>lp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>*</operator> <name><name>pr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>lp</name><index>[<expr><name>i</name> <operator>*</operator> <name><name>pr</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>pr</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	}</block></for>
	<return>return <expr><name>pr</name></expr>;</return>
}</block></function>


<typedef>typedef <type><name><name>vec</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>matrix</name>;</typedef>

<function type="operator"><type><name>matrix</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>matrix</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>matrix</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>matrix</name></type> <name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cx</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>cy</name> <init>= <expr><call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>cx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>m</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>resize</name><argument_list>(<argument><expr><name>cy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cx</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>cy</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>*</operator> <name><name>b</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
			<expr_stmt><expr><name><name>m</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<return>return <expr><name>m</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>matrix</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>matrix</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
	<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>auto</name></type> <name>r</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt>
		<return>return <expr><name>r</name></expr>;</return>
	}</block></then>
	<else>else <block>{
		<decl_stmt><decl><type><name>auto</name></type> <name>r</name> <init>= <expr><call><name>pow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>r</name> <operator>*</operator> <name>r</name></expr>;</expr_stmt>
		<return>return <expr><name>r</name></expr>;</return>
	}</block></else></if>
}</block></function>
<function><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>printDivisors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>r</name></decl>;</decl_stmt>
	<comment type="line">// Note that this loop runs till square root </comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<comment type="line">// If divisors are equal, print only one </comment>
			<if>if <condition>(<expr><name>n</name> <operator>/</operator> <name>i</name> <operator>==</operator> <name>i</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>

			<else>else <comment type="line">// Otherwise print both </comment>
				<block type="pseudo"><expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>r</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>n</name> <operator>/</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></then></if>
	}</block></for>
	<return>return <expr><name>r</name></expr>;</return>
}</block></function>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>vi</name></type> <name>p</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>slv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>from</name> <operator>&gt;=</operator> <call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>cs</name> <init>= <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>p</name><index>[<expr><name>from</name></expr>]</index></name> <operator>-</operator> <name>cs</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt0</name> <init>= <expr><name>w</name> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>cnt0</name> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><call><name>slv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>slv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>solve1</name><parameter_list>(<parameter><decl><type><name>vi</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>mn</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>j</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name>mn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>mn</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>mx</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
			<if>if <condition>(<expr><name>mx</name> <operator>-</operator> <name>mn</name> <operator>==</operator> <name>j</name> <operator>-</operator> <name>i</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		}</block></for></block></for>
	<return>return <expr><name>cnt</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>solve_fast</name><parameter_list>(<parameter><decl><type><name>vi</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{

	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ml</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">0ll</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>mr</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1ll</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>mr</name> <operator>-</operator> <name>ml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>cnt</name></expr>;</return>

}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>first</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>last</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>first</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>first</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
			}</block></then></if></block></for>
		<if>if <condition>(<expr><name>last</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>n</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>max</name><argument_list>(<argument><expr><operator>(</operator><name>n</name> <operator>-</operator> <name>first</name><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>last</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
}</block></function>
</unit>
