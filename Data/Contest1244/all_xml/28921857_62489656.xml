<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28921857_62489656.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
      <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>t</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>rt</name><init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name>  <operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rt</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
    <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
  }</block></for>
  <if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ord</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name><name>ord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>millor</name> <init>= <expr><name>LLONG_MAX</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{
    <if>if <condition>(<expr><name><name>t</name><index>[<expr><name><name>ord</name><index>[<expr><name>pos</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>ord</name><index>[<expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ord</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name><name>ord</name><index>[<expr><name>pos</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name><name>ord</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name><name>ord</name><index>[<expr><name>pos</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></else></if>
    <expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
  }</block></while>
  
  
  <decl_stmt><decl><type><name>int</name></type> <name>in</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>seg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>  <condition><expr><name>i</name><operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>ord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>ord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>=<expr><name>j</name></expr></init></decl>, <decl><type ref="prev"/><name>ap</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>pp</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>pp</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>pp</name><operator>++</operator></expr></incr>)</control> <block>{
          <expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal><operator>-</operator><name>p</name><operator>-</operator><name>ap</name></expr>]</index><index>[<expr><name><name>ord</name><index>[<expr><name>pp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>apvell</name> <init>= <expr><name>ap</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>ap</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>p</name> <operator>=</operator> <literal type="number">3</literal><operator>-</operator><name>apvell</name><operator>-</operator><name>p</name></expr>;</expr_stmt>
        }</block></for>
        <if>if <condition>(<expr><name>cost</name> <operator>&lt;</operator> <name>millor</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>millor</name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>in</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>seg</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></for>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>millor</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>col</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>ord</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>ord</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>seg</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>pp</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>pp</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>pp</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name><name>col</name><index>[<expr><name><name>ord</name><index>[<expr><name>pp</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal><operator>-</operator> <name><name>col</name><index>[<expr><name><name>ord</name><index>[<expr><name>pp</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>-</operator><name><name>col</name><index>[<expr><name><name>ord</name><index>[<expr><name>pp</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

</unit>
