<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931772_62481707.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>speed_cubing</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>um</name></cpp:macro> <cpp:value>unordered_map</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>us</name></cpp:macro> <cpp:value>unordered_set</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bp</name></cpp:macro> <cpp:value>__builtin_popcount</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll, ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.1415926535</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>speed_cubing</name></type>
  
  <name>cin</name>&gt;&gt;<name>n</name>&gt;&gt;<name>p</name>&gt;&gt;<name>w</name>&gt;&gt;<name>d</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>p</name><operator>/</operator><name>w</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>

  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>x</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>&gt;=</operator><name>x</name><operator>-</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
     
      <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>w</name></expr></init></decl>;</decl_stmt>

      <if>if<condition>(<expr><name>temp</name><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
         <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>temp</name><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>
         <if>if<condition>(<expr><name>n</name><operator>-</operator><operator>(</operator><name>i</name><operator>+</operator><name>y</name><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <block>{<expr><name>i</name></expr>,<expr><name>y</name></expr>,<expr><name>n</name><operator>-</operator><operator>(</operator><name>i</name><operator>+</operator><name>y</name><operator>)</operator></expr>}</block></expr>;</expr_stmt>
            <break>break;</break>
         }</block></then>
         <else>else 
           <block type="pseudo"><break>break;</break></block></else></if>
      }</block></then></if>

  }</block></for>

  <if>if<condition>(<expr><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  }</block></then>
  <else>else 
    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
