<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934868_62498284.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"./Lib/debug.hpp"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>auto</name></type> <name>d_val</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>a</name></expr>;</return> }</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* (=ï¼¾oï¼¾=) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>

<comment type="block">/* macro */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = (ll)(b); i &lt; (ll)(e); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = (ll)(e-1); i &gt;= (ll)(b); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR(i, 0, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RFOR(i, 0, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPC</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(const auto&amp; x:(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPI2</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = (b); it != (e); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPI</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REPI2(it, (c).begin(), (c).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREPI</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REPI2(it, (c).rbegin(), (c).rend())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPI_ERACE2</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = (b); it != (e);)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPI_ERACE</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>REPI_ERACE2(it, (c).begin(), (c).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cauto</name></cpp:macro> <cpp:value>const auto&amp;</cpp:value></cpp:define>
<comment type="block">/* macro func */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{sort(ALL(x));}while(false)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSORT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{sort((x).rbegin(),(x).rend());}while(false)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIQUE</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{v.erase( unique(v.begin(), v.end()), v.end() );}while(false)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{x = std::max(x,y);}while(false)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{x = std::min(x,y);}while(false)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BR</name></cpp:macro> <cpp:value>do{cout&lt;&lt;"\n";}while(false)</cpp:value></cpp:define>

<comment type="block">/* type define */</comment>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>PAIR</name> <init>= <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></type></init>;</using>
<using>using <name>VS</name> <init>= <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument>&gt;</argument_list></name></name></type></init>;</using>
<using>using <name>VL</name> <init>= <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></name></type></init>;</using>
<using>using <name>VVL</name> <init>= <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VL</name></expr></argument>&gt;</argument_list></name></name></type></init>;</using>
<using>using <name>VVVL</name> <init>= <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VVL</name></expr></argument>&gt;</argument_list></name></name></type></init>;</using>
<using>using <name>VD</name> <init>= <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></name></type></init>;</using>
<using><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
using <name>V</name> <init>= <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></name></type></init>;</using>

<comment type="block">/* using std */</comment>
<using>using <name><name>std</name><operator>::</operator><name>cout</name></name>;</using>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>char</name></type> <name>endl</name> <init>= <expr><literal type="char">'\n'</literal></expr></init></decl>;</decl_stmt>
<using>using <name><name>std</name><operator>::</operator><name>cin</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>sort</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>pair</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>string</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>stack</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>queue</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>vector</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>list</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>map</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>unordered_map</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>multimap</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>unordered_multimap</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>set</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>unordered_set</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>unordered_multiset</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>multiset</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>bitset</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>priority_queue</name></name>;</using>

<comment type="block">/* constant value */</comment>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//constexpr ll MOD = 998244353;</comment>

<comment type="block">/* Initial processing  */</comment>
<struct>struct <name>Preprocessing</name> <block>{<public type="default"> <constructor><name>Preprocessing</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor><empty_stmt>;</empty_stmt> </public>}</block><decl><name>_Preprocessing</name></decl>;</struct>

<comment type="block">/* Remove the source of the bug */</comment>
<function><type><name>signed</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>signed</name></type></decl></parameter>, <parameter><decl><type><name>signed</name></type></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return> }</block></function>

<comment type="block">/* define hash */</comment>
<namespace>namespace <name>std</name> <block>{ <class><template>template <parameter_list>&lt;&gt;</parameter_list></template>	class <name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name> <block>{<private type="default"> </private><public>public:	<function type="operator"><type><name>size_t</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><call><name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call><argument_list>(<argument><expr><literal type="number">1000000000</literal> <operator>*</operator> <name><name>x</name><operator>.</operator><name>first</name></name> <operator>+</operator> <name><name>x</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return> }</block></function> </public>}</block>;</class> }</block></namespace>

<comment type="block">/* input */</comment>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vec</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>x</name> <range>: <expr><name>vec</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt></block></for> <return>return <expr><name>is</name></expr>;</return> }</block></function>

<comment type="line">//=============================================================================================</comment>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>VL</name></type> <name>v</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SORT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>VL</name></type> <name>up</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>down</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n - <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
		<if>if <condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>v</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{ <continue>continue;</continue> }</block></then></if>
		<expr_stmt><expr><name><name>up</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block>
	<macro><name>RFOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<if>if <condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>v</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{ <continue>continue;</continue> }</block></then></if>
		<expr_stmt><expr><name><name>down</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><call><name>dump</name><argument_list>(<argument><expr><name>up</name></expr></argument>, <argument><expr><name>down</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{
		<if>if <condition>(<expr><name><name>up</name><index>[<expr><name>l</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>down</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>dif</name> <init>= <expr><name><name>v</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>dif</name> <operator>*</operator> <name><name>up</name><index>[<expr><name>l</name></expr>]</index></name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>u</name> <init>= <expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>d</name> <operator>+=</operator> <name>k</name> <operator>/</operator> <name><name>up</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>u</name> <operator>-</operator> <name>d</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>dif</name> <operator>*</operator> <name><name>up</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt> <while>while <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name> <operator>&amp;&amp;</operator> <name><name>up</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{ <expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt> }</block></while>
			}</block></else></if>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>dif</name> <init>= <expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>dif</name> <operator>*</operator> <name><name>down</name><index>[<expr><name>r</name></expr>]</index></name> <operator>&gt;=</operator> <name>k</name></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>u</name> <init>= <expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>u</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name><name>down</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>u</name> <operator>-</operator> <name>d</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>dif</name> <operator>*</operator> <name><name>down</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt> <while>while <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name> <operator>&amp;&amp;</operator> <name><name>down</name><index>[<expr><name>r</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{ <expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt> }</block></while>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
