<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896759_62482246.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>go_precise</name></cpp:macro> <cpp:value>cout &lt;&lt; fixed &lt;&lt; setprecision(15);</cpp:value></cpp:define>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>path</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>used</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>used</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>path</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>to</name> <range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><name><name>used</name><index>[<expr><name>to</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>col</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>root</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>root</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>, <decl><type ref="prev"/><name>pos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//123</comment>
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>color</name></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line">//132</comment>
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>color</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>color</name></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line">//213</comment>
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>color</name></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line">//231</comment>
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>color</name></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line">//312</comment>
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>color</name></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line">//321</comment>
    <expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>i</name><operator>%</operator><literal type="number">3</literal><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>color</name></expr>]</index><index>[<expr><name><name>path</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr><name>cur</name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>col</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr> ;</expr_stmt></block></for>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"\nTime elapsed: "</literal> <operator>&lt;&lt;</operator> <literal type="number">1.0</literal> <operator>*</operator> <call><name>clock</name><argument_list>()</argument_list></call> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="string">" s.\n"</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
