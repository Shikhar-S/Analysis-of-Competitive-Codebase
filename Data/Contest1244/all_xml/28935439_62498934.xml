<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935439_62498934.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>arr</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>leftk</name></decl>, <decl><type ref="prev"/><name>currmx</name></decl>, <decl><type ref="prev"/><name>currmn</name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>leftk</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>arr</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>currmn</name><operator>=</operator><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>currmx</name><operator>=</operator><name><name>arr</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>rt</name><init>=<expr><name>n</name><operator>-</operator><name>i</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>lft</name><init>=<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>enddiff</name><init>=<expr><name><name>arr</name><index>[<expr><name>rt</name></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><name>rt</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>enddiff</name><operator>*</operator><name>i</name> <operator>&lt;=</operator> <name>leftk</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>leftk</name><operator>-=</operator><name>enddiff</name><operator>*</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>currmx</name><operator>=</operator><name><name>arr</name><index>[<expr><name>rt</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>rt</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>moving</name><init>=<expr><name>leftk</name><operator>/</operator><name>i</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>leftk</name><operator>-=</operator><name>moving</name><operator>*</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>currmx</name><operator>=</operator><name><name>arr</name><index>[<expr><name>rt</name></expr>]</index></name><operator>-</operator><name>moving</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></else></if>
		<if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name><operator>==</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>begdiff</name><init>=<expr><name><name>arr</name><index>[<expr><name>lft</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><name>lft</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>begdiff</name><operator>*</operator><name>i</name> <operator>&lt;=</operator> <name>leftk</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>leftk</name><operator>-=</operator><name>begdiff</name><operator>*</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>currmn</name><operator>=</operator><name><name>arr</name><index>[<expr><name>lft</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>lft</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>moving</name><init>=<expr><name>leftk</name><operator>/</operator><name>i</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>leftk</name><operator>-=</operator><name>moving</name><operator>*</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>currmn</name><operator>=</operator><name><name>arr</name><index>[<expr><name>lft</name></expr>]</index></name><operator>+</operator><name>moving</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>currmx</name><operator>-</operator><name>currmn</name></expr>;</expr_stmt>
}</block></function></unit>
