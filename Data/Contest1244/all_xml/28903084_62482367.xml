<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28903084_62482367.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bclz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__builtin_clz(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>INT</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NN</name></cpp:macro> <cpp:value>100100</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>NN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>M</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"out.out"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>INT</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nn</name><init>=<expr><call><name>unique</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><name>a</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//	cerr&lt;&lt;nn;</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>st</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ed</name><init>=<expr><name>nn</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name>st</name><operator>==</operator><name>ed</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>st</name></expr>]</index></name></expr>]</index></name><operator>&lt;=</operator><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>ed</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>st</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>st</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>st</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>k</name><operator>-=</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>st</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>st</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>st</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>st</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+=</operator><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>st</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>st</name><operator>++</operator></expr>;</expr_stmt>
<comment type="line">//				cerr&lt;&lt;k&lt;&lt;' '&lt;&lt;i&lt;&lt;endl;</comment>
			}</block></then>
			<else>else <block>{
				<expr_stmt><expr><name>k</name><operator>/=</operator><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>st</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>st</name></expr>]</index></name><operator>+=</operator><name>k</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>ed</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>st</name></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></else></if>
		}</block></then>
		<else>else <block>{
			<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>ed</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>ed</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>ed</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
<comment type="line">//				cerr&lt;&lt;k;</comment>
				<expr_stmt><expr><name>k</name><operator>-=</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>ed</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>ed</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>ed</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>ed</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+=</operator><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>ed</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ed</name><operator>--</operator></expr>;</expr_stmt>
<comment type="line">//				cerr&lt;&lt;k&lt;&lt;' '&lt;&lt;i&lt;&lt;endl;</comment>
			}</block></then>
			<else>else <block>{
				<expr_stmt><expr><name>k</name><operator>/=</operator><name><name>M</name><index>[<expr><name><name>a</name><index>[<expr><name>ed</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>ed</name></expr>]</index></name><operator>-=</operator><name>k</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>ed</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>st</name></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
       </unit>
