<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28898322_62502322.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>200005</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name><name>vis</name><index>[<expr><name>maxn</name></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name><name>arr</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>rig</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>lef</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>stk</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>tol</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>x</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><name>n</name></expr></then><else>:<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>tor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>x</name><operator>==</operator><name>n</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>inti</name><init>=<expr><name>k</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name><operator>%</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><call><name>tor</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</init><condition><expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><operator>!</operator><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition><incr><expr><name>j</name><operator>=</operator><operator>(</operator><ternary><condition><expr><name>j</name><operator>+</operator><literal type="number">1</literal><operator>&gt;</operator><name>n</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></incr>)</control><block>{<expr_stmt><expr><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>rig</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>}</block></for>
			<expr_stmt><expr><name><name>lef</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name><name>arr</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name>cnt</name></expr>;</expr_stmt><expr_stmt><expr><name><name>col</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>}</block></then></if>
		}</block></then></if>
	}</block></for><decl_stmt><decl><type><name>int</name></type> <name>opt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>k</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><name>opt</name><operator>++</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>tl</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>cnt</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<comment type="line">//	printf("%d-%d=&gt;",lef[i],rig[i]);</comment>
			<if>if <condition>(<expr><name><name>vis</name><index>[<expr><call><name>tor</name><argument_list>(<argument><expr><name><name>rig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>&amp;&amp;</operator><name><name>vis</name><index>[<expr><call><name>tol</name><argument_list>(<argument><expr><name><name>lef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>stk</name><index>[<expr><operator>++</operator><name>tl</name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><call><name>tor</name><argument_list>(<argument><expr><name><name>rig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>vis</name><index>[<expr><call><name>tor</name><argument_list>(<argument><expr><name><name>rig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name><name>rig</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>tor</name><argument_list>(<argument><expr><name><name>rig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while>while <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><call><name>tor</name><argument_list>(<argument><expr><name><name>rig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>&amp;&amp;</operator><operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><call><name>tor</name><argument_list>(<argument><expr><name><name>rig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>^</operator><operator>(</operator><name>opt</name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition><block>{<expr_stmt><expr><name><name>vis</name><index>[<expr><call><name>tor</name><argument_list>(<argument><expr><name><name>rig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name><name>rig</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>tor</name><argument_list>(<argument><expr><name><name>rig</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></while>
			}</block></then></if>
			<if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><call><name>tol</name><argument_list>(<argument><expr><name><name>lef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>vis</name><index>[<expr><call><name>tol</name><argument_list>(<argument><expr><name><name>lef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name><name>lef</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>tol</name><argument_list>(<argument><expr><name><name>lef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<while>while <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><call><name>tol</name><argument_list>(<argument><expr><name><name>lef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>&amp;&amp;</operator><operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><call><name>tol</name><argument_list>(<argument><expr><name><name>lef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>^</operator><operator>(</operator><name>opt</name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition><block>{<expr_stmt><expr><name><name>vis</name><index>[<expr><call><name>tol</name><argument_list>(<argument><expr><name><name>lef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name><name>lef</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>tol</name><argument_list>(<argument><expr><name><name>lef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></while>
			}</block></then></if>
		<comment type="line">//	printf("%d-%d\n",lef[i],rig[i]);</comment>
		}</block></for><expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><name>stk</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>stk</name><operator>+</operator><name>tl</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>tl</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name><name>stk</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>arr</name><index>[<expr><name>cnt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>cnt</name><operator>--</operator></expr>;</expr_stmt>}</block></for>
	}</block></while><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>col</name><index>[<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block>{
			<if>if <condition>(<expr><name>inti</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><ternary><condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal></expr>?</condition><then><expr><literal type="char">'B'</literal></expr></then><else>:<expr><literal type="char">'W'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></else></if>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
