<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934737_62481967.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>long</name> <name>long</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>a</name><operator>*</operator><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	<block type="pseudo"><return>return <expr><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>a</name><operator>%</operator><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	<block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
	<return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>n</name><operator>*</operator><name>w</name> <operator>&lt;</operator> <name>p</name> <operator>||</operator> <name>w</name><operator>&lt;=</operator><name>d</name> <operator>||</operator> <operator>(</operator><name>p</name><operator>&gt;</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>p</name><operator>&lt;</operator><name>d</name><operator>)</operator></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
    <else>else
    <block>{
    	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<if>if<condition>(<expr><name>p</name><operator>%</operator><name>x</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
    	<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name>p</name><operator>/</operator><name>w</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name> <operator>=</operator> <name>p</name><operator>-</operator><operator>(</operator><name>x</name><operator>*</operator><name>w</name><operator>)</operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
			<while>while<condition>(<expr><name>y</name><operator>%</operator><name>d</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition>
			<block>{
				<if>if<condition>(<expr><call><name><name>mp</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>y</name><operator>%</operator><name>d</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>mp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><break>break;</break></block></then></if>
				<expr_stmt><expr><name><name>mp</name><index>[<expr><name>y</name><operator>%</operator><name>d</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>y</name><operator>+=</operator><name>w</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
			}</block></while>
			<if>if<condition>(<expr><name>y</name><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>+</operator><name>y</name><operator>/</operator><name>d</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>/</operator><name>d</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name><operator>/</operator><name>d</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
			<else>else
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
		}</block></else></if> 
	}</block></else></if>
}</block></function>
</unit>
