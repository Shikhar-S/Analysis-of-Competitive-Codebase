<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926277_62500948.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TASK</name></cpp:macro> <cpp:value>"ABC"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASIC</name></cpp:macro> \
		<cpp:value>freopen(TASK".inp", "r", stdin); \
		freopen(TASK".out", "w", stdout);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BASE</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(); cout.tie();</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>200001</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
     <decl_stmt><decl><type><name>BASE</name></type>
    <name>cin</name> &gt;&gt; <name>n</name> &gt;&gt; <name>p</name> &gt;&gt; <name>w</name> &gt;&gt; <name>d</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>gd</name> <init>= <expr><call><name>__gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>p</name> <operator>%</operator> <name>gd</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name>p</name> <operator>/=</operator> <name>gd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>w</name> <operator>/=</operator> <name>gd</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>/=</operator> <name>gd</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>r</name> <operator>&lt;=</operator> <name>d</name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>r</name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if></block></for>
    <if>if <condition>(<expr><name>r</name> <operator>==</operator> <name>d</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>ret</name> <operator>/</operator> <name>d</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>d</name> <operator>+</operator> <name>r</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>x</name> <operator>+</operator> <name>d</name> <operator>&lt;=</operator> <name>ret</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt></block></while>
    <if>if <condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>x</name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>%</operator> <name>d</name> <operator>||</operator> <name>x</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>x</name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>/</operator> <name>d</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>x</name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>/</operator> <name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>x</name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>/</operator> <name>d</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>x</name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>/</operator> <name>d</name></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
