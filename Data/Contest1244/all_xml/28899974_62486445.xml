<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28899974_62486445.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>i64</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>m</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>i64</name></type> <name>diff</name> <init>= <expr><operator>(</operator><operator>--</operator><call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>first</name> <operator>-</operator> <call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>m</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1U</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>it_mn</name> <init>= <expr><call><name><name>m</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>it_mx</name> <init>= <expr><operator>--</operator><call><name><name>m</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>it_mn</name><operator>-&gt;</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>it_mx</name><operator>-&gt;</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <break>break;</break>
        }</block></then></if>
        <if>if <condition>(<expr><name><name>it_mn</name><operator>-&gt;</operator><name>second</name></name> <operator>&lt;</operator> <name><name>it_mx</name><operator>-&gt;</operator><name>second</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it_sec</name> <init>= <expr><name>it_mn</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>++</operator><name>it_sec</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>dist</name> <init>= <expr><name><name>it_sec</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator> <name><name>it_mn</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name><name>it_mn</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>dist</name> <operator>*</operator> <name>cnt</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>dist</name> <operator>*</operator> <name>cnt</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>dist</name> <operator>=</operator> <name>k</name> <operator>/</operator> <name>cnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name><name>it_sec</name><operator>-&gt;</operator><name>second</name></name> <operator>+=</operator> <name><name>it_mn</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>diff</name> <operator>-=</operator> <name>dist</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it_mn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>it_sec</name> <init>= <expr><name>it_mx</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><operator>--</operator><name>it_sec</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>dist</name> <init>= <expr><name><name>it_mx</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator> <name><name>it_sec</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name><name>it_mx</name><operator>-&gt;</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>dist</name> <operator>*</operator> <name>cnt</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>dist</name> <operator>*</operator> <name>cnt</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>dist</name> <operator>=</operator> <name>k</name> <operator>/</operator> <name>cnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name><name>it_sec</name><operator>-&gt;</operator><name>second</name></name> <operator>+=</operator> <name><name>it_mx</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>diff</name> <operator>-=</operator> <name>dist</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>m</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it_mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>diff</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>


    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
