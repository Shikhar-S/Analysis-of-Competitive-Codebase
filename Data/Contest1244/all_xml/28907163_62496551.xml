<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28907163_62496551.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>c</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>l</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>r</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s2</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>flag</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init1</name><parameter_list>()</parameter_list>
<block>{
	<if>if<condition>(<expr><operator>!</operator><name><name>flag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
	<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>n</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for></block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>l</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></for>
}</block></function>
<function><type><name>void</name></type> <name>init2</name><parameter_list>()</parameter_list>
<block>{
	<if>if<condition>(<expr><operator>!</operator><name><name>flag</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then>
	<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>r</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>s2</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for></block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name>n</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>r</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>s2</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>c</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>flag</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>flag</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
	<if>if<condition>(<expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>c</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>flag</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>flag</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	<decl_stmt><decl><type><name>char</name></type> <name>tmp</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>init1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
	<if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then>
	<block>{
		<if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for>
		}</block></then>
		<else>else
		<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for>
		}</block></else></if>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<elseif>else <if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
		}</block></then>
		<else>else
		<block>{
		   	<if>if<condition>(<expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<elseif>else <if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"W"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'B'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"B"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>	
		}</block></else></if>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
16 3
BWBWBBWBWBWBBWBW
*/</comment></unit>
