<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28897165_62498229.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>mx</name><init>=<expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>mn</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>k</name></expr>)</condition><block>{
<comment type="line">//		cout&lt;&lt;mn&lt;&lt;' '&lt;&lt;mx&lt;&lt;' '&lt;&lt;k&lt;&lt;'\n';</comment>
		<if>if<condition>(<expr><name>mx</name><operator>==</operator><name>mn</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name>l</name><operator>&lt;=</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>k</name><operator>&lt;</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>l</name></expr></argument>,<argument><expr><operator>(</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name>mn</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>k</name><operator>-=</operator><name>tmp</name><operator>*</operator><name>l</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>mn</name><operator>+=</operator><name>tmp</name></expr>;</expr_stmt>
			<while>while<condition>(<expr><name>mn</name><operator>==</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt></block></while>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><name>k</name><operator>&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><operator>(</operator><name>mx</name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>k</name><operator>-=</operator><name>tmp</name><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>mx</name><operator>-=</operator><name>tmp</name></expr>;</expr_stmt>
			<while>while<condition>(<expr><name>mx</name><operator>==</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt></block></while> 
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>mx</name><operator>-</operator><name>mn</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
