<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28905805_62487920.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>pn</name></decl>,<decl><type ref="prev"/><name>pc</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name><name>cp</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>   <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    }</block></for>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>edges</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edges</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edges</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>ll</name></type> <name>head</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>   <block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><name>head</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <if>if<condition>(<expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>order</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>head</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>prev</name><init>=<expr><name>head</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>edges</name><index>[<expr><name>prev</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>cur</name> <init>= <expr><name><name>order</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name><name>edges</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>edges</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>k</name><operator>!=</operator><name>prev</name></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><name><name>order</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>k</name></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <expr_stmt><expr><name>prev</name><operator>=</operator><name>cur</name></expr>;</expr_stmt>
    }</block></for>

    <comment type="line">//for(i=1;i&lt;=n;i++)   cout&lt;&lt;order[i]&lt;&lt;" ";</comment>
    <comment type="line">//cout&lt;&lt;endl;</comment>

    <decl_stmt><decl><type><name>ll</name></type> <name><name>ans</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>mincost</name> <init>= <expr><literal type="number">1e15</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>ll</name></type> <name>c</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>c</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>d</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>d</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>d</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>c</name><operator>==</operator><name>d</name></expr>)</condition><then>    <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>c</name><operator>+</operator><name>d</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name>c</name><operator>+</operator><name>d</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>

            <decl_stmt><decl><type><name>ll</name></type> <name><name>arr</name><index>[]</index></name> <init>= <expr><block>{<expr><name>c</name></expr>,<expr><name>d</name></expr>,<expr><name>t</name></expr>}</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>ll</name></type> <name>cost</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>col</name> <init>= <expr><name><name>arr</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>cp</name><index>[<expr><name>col</name></expr>]</index><index>[<expr><name><name>order</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for>

            <if>if<condition>(<expr><name>cost</name><operator>&lt;</operator><name>mincost</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>mincost</name><operator>=</operator><name>cost</name></expr>;</expr_stmt>
                <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>    <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
            }</block></then></if>
        }</block></for>
    }</block></for>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>mincost</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>paint</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>col</name> <init>= <expr><name><name>ans</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">//cout&lt;&lt;order[i]&lt;&lt;"H";</comment>
        <expr_stmt><expr><name><name>paint</name><index>[<expr><name><name>order</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>col</name></expr>;</expr_stmt>
    }</block></for>

    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>   <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>paint</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
}</block></function>

</unit>
