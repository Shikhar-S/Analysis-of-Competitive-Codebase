<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935571_62494087.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name><init>=<type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>pll</name><init>=<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>arr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>m</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>x</name><operator>:</operator><name>m</name></expr></init>)</control><block>{
        <expr_stmt><expr><call><name><name>arr</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <while>while<condition>(<expr><call><name><name>arr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{
        <decl_stmt><decl><type><name>pll</name><modifier>&amp;</modifier></type> <name>a</name><init>=<expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>pll</name><modifier>&amp;</modifier></type> <name>b</name><init>=<expr><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>pll</name><modifier>&amp;</modifier></type> <name>c</name><init>=<expr><name><name>arr</name><index>[<expr><call><name><name>arr</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>pll</name><modifier>&amp;</modifier></type> <name>d</name><init>=<expr><call><name><name>arr</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>se</name></name><operator>&lt;</operator><name><name>d</name><operator>.</operator><name>se</name></name></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><name><name>a</name><operator>.</operator><name>se</name></name><operator>*</operator><operator>(</operator><name><name>b</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>a</name><operator>.</operator><name>fi</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name>cnt</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><name>cnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>b</name><operator>.</operator><name>se</name></name><operator>+=</operator><name><name>a</name><operator>.</operator><name>se</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>arr</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else<block>{
                <expr_stmt><expr><name><name>a</name><operator>.</operator><name>fi</name></name><operator>+=</operator><name>k</name><operator>/</operator><name><name>a</name><operator>.</operator><name>se</name></name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></then> <else>else<block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><name><name>d</name><operator>.</operator><name>se</name></name><operator>*</operator><operator>(</operator><name><name>d</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>c</name><operator>.</operator><name>fi</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><name>cnt</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><name>cnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>c</name><operator>.</operator><name>se</name></name><operator>+=</operator><name><name>d</name><operator>.</operator><name>se</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>arr</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else<block>{
                <expr_stmt><expr><name><name>d</name><operator>.</operator><name>fi</name></name><operator>-=</operator><name>k</name><operator>/</operator><name><name>d</name><operator>.</operator><name>se</name></name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>arr</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>fi</name><operator>-</operator><call><name><name>arr</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>fi</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
