<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28910025_62494811.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>((int)1e5+10)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MD</name></cpp:macro> <cpp:value>((int)1e9+7)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mp</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
        <if>if <condition>(<expr><call><name><name>mp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name> <init>= <expr><call><name><name>mp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>reverse_iterator</name></name></type> <name>rit</name> <init>= <expr><call><name><name>mp</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>f</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>f2</name> <init>= <expr><operator>*</operator><name>it</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>e</name> <init>= <expr><operator>*</operator><name>rit</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>rit</name><operator>++</operator></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>e2</name> <init>= <expr><operator>*</operator><name>rit</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><literal type="number">0LL</literal> <operator>+</operator> <operator>(</operator><operator>*</operator><call><name><name>mp</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>first</name> <operator>-</operator> <operator>(</operator><operator>*</operator><call><name><name>mp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mxf</name> <init>= <expr><name><name>f2</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mne</name> <init>= <expr><name><name>e2</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name><name>f</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>e</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dis</name> <init>= <expr><operator>(</operator><name><name>f2</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>f</name><operator>.</operator><name>first</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>dis</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>k</name> <operator>/</operator> <name><name>f</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>dis</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cost</name> <init>= <expr><name><name>f</name><operator>.</operator><name>second</name></name> <operator>*</operator> <name>dis</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>cost</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><call><name><name>mp</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>mp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>cost</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>f</name><operator>.</operator><name>first</name></name> <operator>+=</operator> <name>dis</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>f</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>+=</operator> <name><name>f</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>

        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dis</name> <init>= <expr><operator>(</operator><name><name>e</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>e2</name><operator>.</operator><name>first</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>dis</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>dis</name></expr></argument>, <argument><expr><name>k</name> <operator>/</operator> <name><name>e</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>dis</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cost</name> <init>= <expr><name><name>e</name><operator>.</operator><name>second</name></name> <operator>*</operator> <name>dis</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>cost</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>reverse_iterator</name></name></type> <name>ii</name> <init>= <expr><call><name><name>mp</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>mp</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><operator>--</operator><operator>(</operator><call><name><name>ii</name><operator>.</operator><name>base</name></name><argument_list>()</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>cost</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>e</name><operator>.</operator><name>first</name></name> <operator>-=</operator> <name>dis</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>e</name><operator>.</operator><name>first</name></name></expr>]</index></name> <operator>+=</operator> <name><name>e</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
