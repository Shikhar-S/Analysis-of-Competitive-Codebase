<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932526_62495168.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reg</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (reg int i = (a), i##end = (b); i &lt;= i##end; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (reg int i = (a), i##end = (b); i &gt;= i##end; --i)</cpp:value></cpp:define>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>_typer</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>_typer</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>_typer</name></type> <name>init</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>( <init>;</init> <condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>;</expr_stmt></block></for>
    <for>for <control>( <init>;</init> <condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>init</name> <operator>=</operator> <operator>(</operator><name>init</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>init</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ch</name> <operator>^</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt></block></for>
    <return>return <expr><ternary><condition><expr><name>k</name></expr> ?</condition><then> <expr><operator>-</operator><name>init</name></expr> </then><else>: <expr><name>init</name></expr></else></ternary></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">100005</literal></expr></init></decl>, <decl><type ref="prev"/><name>INF</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/*******************************************************************************
 *
 *
 *
 ******************************************************************************/</comment>


<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>A</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cnt</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>Ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>m</name></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>m</name> <operator>=</operator> <call><name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>A</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>A</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>tot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <if>if <condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>A</name><index>[<expr><name>tot</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>A</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name> <operator>=</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>tot</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>cnt</name><index>[<expr><name>tot</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>

    <expr_stmt><expr><name>Ans</name> <operator>=</operator> <name><name>A</name><index>[<expr><name>tot</name></expr>]</index></name> <operator>-</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>curl</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>curr</name> <init>= <expr><name>tot</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>curl</name> <operator>&lt;</operator> <name>curr</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>Ans</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>curl</name></expr>]</index></name> <operator>&lt;</operator> <name><name>cnt</name><index>[<expr><name>curr</name></expr>]</index></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>A</name><index>[<expr><name>curl</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>A</name><index>[<expr><name>curl</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>t</name> <operator>*</operator> <name><name>cnt</name><index>[<expr><name>curl</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>Ans</name> <operator>-=</operator> <name>m</name> <operator>/</operator> <name><name>cnt</name><index>[<expr><name>curl</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>m</name> <operator>-=</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>t</name> <operator>*</operator> <name><name>cnt</name><index>[<expr><name>curl</name></expr>]</index></name></expr><operator>,</operator> <expr><name>Ans</name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>curl</name></expr><operator>,</operator> <expr><name><name>cnt</name><index>[<expr><name>curl</name></expr>]</index></name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>curl</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>A</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>-</operator> <name><name>A</name><index>[<expr><name>curr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>t</name> <operator>*</operator> <name><name>cnt</name><index>[<expr><name>curr</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>Ans</name> <operator>-=</operator> <name>m</name> <operator>/</operator> <name><name>cnt</name><index>[<expr><name>curr</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>m</name> <operator>-=</operator> <literal type="number">1ll</literal> <operator>*</operator> <name>t</name> <operator>*</operator> <name><name>cnt</name><index>[<expr><name>curr</name></expr>]</index></name></expr><operator>,</operator> <expr><name>Ans</name> <operator>-=</operator> <name>t</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>curr</name></expr><operator>,</operator> <expr><name><name>cnt</name><index>[<expr><name>curr</name></expr>]</index></name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>curr</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></while>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>Ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
