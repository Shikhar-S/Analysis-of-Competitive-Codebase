<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934270_62488557.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>200050</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rec</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>d</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>son</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>res</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>st</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>zero</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>nxt</name></decl>,<decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>edge</name><index>[<expr><name>N</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tot</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>add_edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>edge</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>zero</name><operator>)</operator><block>{<expr><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name></expr>,<expr><name>b</name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>tot</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>x</name><operator>!=</operator><name>st</name><operator>&amp;&amp;</operator><name><name>d</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt><return>return;</return>}</block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>head</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>to</name><init>=<expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>to</name><operator>==</operator><name>fa</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>to</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>son</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>to</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>p1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>p1</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>p1</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>p2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>p2</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>p2</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>p1</name><operator>==</operator><name>p2</name><operator>&amp;&amp;</operator><name><name>d</name><index>[<expr><name>to</name></expr>]</index></name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><name>p1</name><operator>!=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>p2</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><if>if<condition>(<expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;</operator><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name>to</name></expr>]</index></name><operator>+</operator><name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name>to</name></expr>]</index></name><operator>+</operator><name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>rec</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>p2</name></expr>;</expr_stmt></block></then></if></block></then></if>
            <if>if<condition>(<expr><name>p1</name><operator>!=</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>p2</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><if>if<condition>(<expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;</operator><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name>to</name></expr>]</index></name><operator>+</operator><name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name>to</name></expr>]</index></name><operator>+</operator><name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>rec</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>p2</name></expr>;</expr_stmt></block></then></if></block></then></if>
            <if>if<condition>(<expr><name>p1</name><operator>!=</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>p2</name><operator>!=</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><if>if<condition>(<expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;</operator><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name>to</name></expr>]</index></name><operator>+</operator><name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name>to</name></expr>]</index></name><operator>+</operator><name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>rec</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>p2</name></expr>;</expr_stmt></block></then></if></block></then></if>
        }</block></for></block></for>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>r</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>add_edge</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>d</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator><expr><name><name>d</name><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
}</block></for>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
    <if>if<condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>st</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
}</block></for>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>r</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>r</name><operator>++</operator></expr></incr>)</control>
<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1e18</literal></expr>;</expr_stmt></block></for></block></for></block></for>
<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>rec1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>rec2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>r</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>r</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>^</operator><name>r</name><operator>&amp;&amp;</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>st</name></expr>]</index></name><operator>&lt;</operator><name><name>dp</name><index>[<expr><name>rec1</name></expr>]</index><index>[<expr><name>rec2</name></expr>]</index><index>[<expr><name>st</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>rec1</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>rec2</name><operator>=</operator><name>r</name></expr>;</expr_stmt></block></then></if></block></for></block></for>
<decl_stmt><decl><type><name>int</name></type> <name>poss</name><init>=<expr><name>st</name></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>dp</name><index>[<expr><name>rec1</name></expr>]</index><index>[<expr><name>rec2</name></expr>]</index><index>[<expr><name>st</name></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>poss</name></expr>)</condition><block>{
    <expr_stmt><expr><name><name>res</name><index>[<expr><name>poss</name></expr>]</index></name><operator>=</operator><name>rec1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t1</name><init>=<expr><name>rec1</name></expr></init></decl>,<decl><type ref="prev"/><name>t2</name><init>=<expr><name>rec2</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rec1</name><operator>=</operator><name>t2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rec2</name><operator>=</operator><name><name>rec</name><index>[<expr><name>t1</name></expr>]</index><index>[<expr><name>t2</name></expr>]</index><index>[<expr><name>poss</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>poss</name><operator>=</operator><name><name>son</name><index>[<expr><name>poss</name></expr>]</index></name></expr>;</expr_stmt>
}</block></while>
<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function></unit>
