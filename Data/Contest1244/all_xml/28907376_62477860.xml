<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28907376_62477860.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lld</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<function><type><name>int</name></type> <name>gcds</name><parameter_list>(<parameter><decl><type><name>lld</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lld</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>lld</name></type> <name>tmp</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>b</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block>{
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>a</name><operator>%</operator><name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>lld</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>lld</name></type> <name>now</name> <init>= <expr><call><name>gcds</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>p</name><operator>%</operator><name>now</name></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>	
	<decl_stmt><decl><type><name>lld</name></type> <name>tt</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><operator>(</operator><name>lld</name><operator>)</operator><literal type="number">0</literal></expr></argument>,<argument><expr><call>(<name>lld</name>)<argument_list>(<argument><expr><operator>(</operator><name>p</name><operator>-</operator><name>n</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>lld</name></type> <name>err</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
		<decl_stmt><decl><type><name>lld</name></type> <name>now</name> <init>= <expr><name>tt</name><operator>*</operator><name>w</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>now</name><operator>&gt;</operator><name>p</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name>tmp</name><operator>&gt;</operator><literal type="number">10</literal><operator>*</operator><name>w</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><operator>(</operator><name>p</name><operator>-</operator><name>now</name><operator>)</operator><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>lld</name></type> <name>now2</name> <init>= <expr><operator>(</operator><name>p</name><operator>-</operator><name>now</name><operator>)</operator><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>tt</name><operator>+</operator><name>now2</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld"</literal></expr></argument>,<argument><expr><name>tt</name></expr></argument>,<argument><expr><name>now2</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>tt</name><operator>-</operator><name>now2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>err</name><operator>++</operator></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></then></if>	
		<expr_stmt><expr><name>tt</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<if>if<condition>(<expr><name>err</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
