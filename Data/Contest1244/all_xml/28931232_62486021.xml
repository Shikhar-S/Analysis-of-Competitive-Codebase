<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931232_62486021.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &lt; b; ++i)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>debug</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">3e5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pre</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>suf</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>precalc</name><parameter_list>()</parameter_list> <block>{
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pre</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
    }</block>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>suf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>suf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    }</block></for>
}</block></function>

<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>distance</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>it</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>curCost</name></decl>, <decl><type ref="prev"/><name>cur</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>it</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>curCost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>R</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>distance</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>it</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>it</name></expr>]</index></name> <operator>&gt;</operator> <name>R</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name>it</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>curCost</name> <operator>+=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>it</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>it</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>cnt</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>curCost</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>it</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cur</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>it</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>R</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cnt</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>cur</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>it</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>curCost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>distance</name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>it</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>it</name></expr>]</index></name> <operator>&lt;</operator> <name>L</name></expr>)</condition> <block>{
            <if>if <condition>(<expr><name>it</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>curCost</name> <operator>+=</operator> <operator>(</operator><name><name>a</name><index>[<expr><name>it</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>cnt</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><operator>++</operator><name>it</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>suf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>curCost</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>it</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cur</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>L</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name>cnt</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>cur</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>precalc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">1e10</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>r</name> <operator>-</operator> <name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>r</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function></unit>
