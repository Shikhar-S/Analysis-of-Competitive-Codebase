<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28921290_62499950.cpp"><comment type="line">//RAB RAKHA</comment>

<comment type="block">/* Code till every compiler has crashed */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<comment type="block">/*-----------------------------------------------------------------
                            Templates
----------------------------------------------------------------*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTIO</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; n;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; a &gt;&gt; b;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out1</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; n &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>out3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " " &lt;&lt; c &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inputarr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i];</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printarr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;" ";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>initarr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++) a[i]=x;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>veci</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>seti</name></cpp:macro> <cpp:value>set&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mapi</name></cpp:macro> <cpp:value>map&lt;int,int&gt;</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*-----------------------------------------------------------------
                            Templates
----------------------------------------------------------------*/</comment>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
       <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
       <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>

    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>

    <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>swap</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{
     <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name> <operator>+</operator> <name>b</name></expr>;</expr_stmt>
     <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
     <expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
}</block></function>
<comment type="block">/*
if()
cout &lt;&lt; "YES\n";
else
cout &lt;&lt; "NO\n";
*/</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FASTIO</name>
    <name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>in2</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>inputarr</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>m0</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>m1</name><init>=<expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>m</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
        <decl_stmt><decl><type><name>ll</name></type> <name>s</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>l</name><init>=<expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>ll</name></type> <name>dh</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>df</name><init>=<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
        <block>{
            <if>if<condition>(<expr><name>s</name><operator>&gt;=</operator><name>l</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
            <if>if<condition>(<expr><name><name>m</name><index>[<expr><name>s</name></expr>]</index></name><operator>&lt;=</operator><name><name>m</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>y</name><operator>&lt;</operator><name><name>m</name><index>[<expr><name>s</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
                <if>if<condition>(<expr><operator>(</operator><name><name>v</name><index>[<expr><name>dh</name></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>dh</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>m</name><index>[<expr><name>s</name></expr>]</index></name><operator>&gt;</operator><name>y</name></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>ll</name></type> <name>pos</name><init>=<expr><name>y</name><operator>/</operator><name><name>m</name><index>[<expr><name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>y</name><operator>-=</operator><name>pos</name><operator>*</operator><name><name>m</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>s</name><operator>+=</operator><name>pos</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>m</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><name><name>m</name><index>[<expr><name>s</name><operator>-</operator><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>m</name><index>[<expr><name>s</name><operator>-</operator><name>pos</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><name><name>m</name><index>[<expr><name><name>v</name><index>[<expr><name>dh</name></expr>]</index></name></expr>]</index></name><operator>+=</operator><name><name>m</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y</name><operator>-=</operator><operator>(</operator><name><name>v</name><index>[<expr><name>dh</name></expr>]</index></name><operator>-</operator><name>s</name><operator>)</operator><operator>*</operator><name><name>m</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>m</name><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>s</name><operator>+=</operator><name><name>v</name><index>[<expr><name>dh</name></expr>]</index></name><operator>-</operator><name>s</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>dh</name><operator>++</operator></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then>
            <else>else
            <block>{
                <if>if<condition>(<expr><name>y</name><operator>&lt;</operator><name><name>m</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
                <if>if<condition>(<expr><operator>(</operator><name><name>v</name><index>[<expr><name>df</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>v</name><index>[<expr><name>df</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>m</name><index>[<expr><name>l</name></expr>]</index></name><operator>&gt;</operator><name>y</name></expr>)</condition><then>
                <block>{
                    <decl_stmt><decl><type><name>ll</name></type> <name>pos</name><init>=<expr><name>y</name><operator>/</operator><name><name>m</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>y</name><operator>-=</operator><name>pos</name><operator>*</operator><name><name>m</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>l</name><operator>-=</operator><name>pos</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>m</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><name><name>m</name><index>[<expr><name>l</name><operator>+</operator><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>m</name><index>[<expr><name>l</name><operator>+</operator><name>pos</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><name><name>m</name><index>[<expr><name><name>v</name><index>[<expr><name>df</name></expr>]</index></name></expr>]</index></name><operator>+=</operator><name><name>m</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y</name><operator>-=</operator><operator>(</operator><name>l</name><operator>-</operator><name><name>v</name><index>[<expr><name>df</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>m</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>m</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>l</name><operator>+=</operator><name><name>v</name><index>[<expr><name>df</name></expr>]</index></name><operator>-</operator><name>l</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>df</name><operator>--</operator></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></while>
        <expr_stmt><expr><name>ans</name><operator>=</operator><name>l</name><operator>-</operator><name>s</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>ans</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name>out1</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function></unit>
