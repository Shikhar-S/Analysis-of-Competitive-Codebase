<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28920557_62468405.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>      <comment type="line">// std::accumulate</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
    
    
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;=</operator><literal type="number">11000000</literal></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>x</name><operator>*</operator><name>w</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name><operator>-</operator><name>x</name><operator>*</operator><name>w</name><operator>)</operator><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator>  <name>x</name><operator>+</operator><operator>(</operator><name>p</name><operator>-</operator><name>x</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>d</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><operator>(</operator><name>p</name><operator>-</operator><name>x</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>d</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>x</name><operator>-</operator><operator>(</operator><name>p</name><operator>-</operator><name>x</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>y</name><operator>&lt;=</operator><literal type="number">11000000</literal></expr>;</condition><incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>y</name><operator>*</operator><name>d</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name><operator>-</operator><name>y</name><operator>*</operator><name>d</name><operator>)</operator><operator>%</operator><name>w</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>+</operator><operator>(</operator><name>p</name><operator>-</operator><name>y</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld %lld\n"</literal></expr></argument>,<argument><expr><operator>(</operator><name>p</name><operator>-</operator><name>y</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>y</name><operator>-</operator><operator>(</operator><name>p</name><operator>-</operator><name>y</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
    
}</block></function>
</unit>
