<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925725_62486332.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>val</name><index>[<expr><name>M</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Deg</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Ans</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Col</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fa</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>E</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>,<decl><type ref="prev"/><name>nx</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>edge</name><index>[<expr><name>M</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>tot</name></decl>,<decl><type ref="prev"/><name><name>head</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>Addedge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>edge</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>.</operator><name>to</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>edge</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><name>nx</name><operator>=</operator><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>tot</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>A</name><index>[<expr><operator>++</operator><name>sz</name></expr>]</index></name><operator>=</operator><name>now</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>head</name><index>[<expr><name>now</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nx</name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>nxt</name><init>=<expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>fa</name><index>[<expr><name>now</name></expr>]</index></name><operator>==</operator><name>nxt</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name><name>fa</name><index>[<expr><name>nxt</name></expr>]</index></name><operator>=</operator><name>now</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>nxt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>Solve</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name><name>Col</name><index>[<expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name><name>Col</name><index>[<expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name><init>=<expr><name><name>val</name><index>[<expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>val</name><index>[<expr><name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>q</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{
					<if>if<condition>(<expr><name>q</name><operator>==</operator><name><name>Col</name><index>[<expr><name><name>A</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>||</operator><name>q</name><operator>==</operator><name><name>Col</name><index>[<expr><name><name>A</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
					<expr_stmt><expr><name>res</name><operator>+=</operator><name><name>val</name><index>[<expr><name><name>A</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>Col</name><index>[<expr><name><name>A</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>q</name></expr>;</expr_stmt>
					<break>break;</break>
				}</block></for>
			}</block></for>
			<if>if<condition>(<expr><name>res</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ans</name><operator>=</operator><name>res</name></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>Ans</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name><name>Col</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></for>
			}</block></then></if>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>Ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Addedge</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Addedge</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>Deg</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>Deg</name><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>Deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
		<expr_stmt><expr><name>cnt</name><operator>+=</operator><name><name>Deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><name>cnt</name><operator>!=</operator><literal type="number">2</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>Deg</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>Solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
