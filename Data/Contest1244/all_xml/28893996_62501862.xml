<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28893996_62501862.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &lt;= (b); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &gt;= (b); i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fst</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">4000010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>gi</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>pre</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init> <condition><expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>pre</name> <operator>=</operator> <name>c</name></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
	<for>for<control>(<init>;</init> <condition><expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10ll</literal> <operator>+</operator> <operator>(</operator><name>c</name> <operator>^</operator> <literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt></block></for>
	<if>if<condition>(<expr><name>pre</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><type><name>bool</name></type> <name>check</name><parameter_list>()</parameter_list> <block>{ <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">2</literal></argument>, <argument>n</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if> <return>return <expr><literal type="number">1</literal></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>m</name> <operator>%=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal><operator>)</operator> <operator>^</operator> <name>m</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'W'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>n + <literal type="number">1</literal></argument>, <argument>n + n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr/>)</control> <block>{
		<expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <for>for<control>(<init>;</init> <condition><expr><name>j</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
		<if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><then> <block>{ <macro><name>rep</name><argument_list>(<argument>k</argument>, <argument>i</argument>, <argument>j</argument>)</argument_list></macro> <expr_stmt><expr><name><name>vis</name><index>[<expr><operator>(</operator><name>k</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></then></if>
<comment type="line">//		printf("&gt;&gt;&gt; %d %d\n", i, j);</comment>
		<if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>m</argument>)</argument_list></macro> <block>{
		<if>if<condition>(<expr><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name>st</name></expr></range></decl></init>)</control> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>lb</name> <init>= <expr><operator>(</operator><name><name>v</name><operator>.</operator><name>fst</name></name> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name><operator>)</operator> <operator>%</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rb</name> <init>= <expr><name><name>v</name><operator>.</operator><name>snd</name></name> <operator>%</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//			printf("&gt;&gt;&gt; %d %d %d %d\n", lb, v.fst, v.snd, rb);</comment>
			<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>lb</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>vis</name><index>[<expr><name>rb</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>lb</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>lb</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name><name>v</name><operator>.</operator><name>fst</name></name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>rb</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>rb</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name><name>v</name><operator>.</operator><name>fst</name></name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name><name>vis</name><index>[<expr><name>lb</name></expr>]</index></name> <operator>=</operator> <name><name>vis</name><index>[<expr><name>rb</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>rb</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name><name>v</name><operator>.</operator><name>snd</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>rb</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>snd</name></name></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>lb</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name><name>v</name><operator>.</operator><name>fst</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>lb</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>fst</name></name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><call><name><name>tmp</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>lb</name></expr></argument>, <argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>st</name> <operator>=</operator> <name>tmp</name></expr><operator>,</operator> <expr><call><name><name>tmp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><name>m</name> <operator>%=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal><operator>)</operator> <operator>^</operator> <name>m</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'W'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
