<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896380_62487433.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>long</name> <name>long</name></expr></argument> &gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>c</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>ans</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>C</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dgin</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><name><name>c</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>c</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+=</operator><name><name>c</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name></expr></init>)</control>
    <block>{
        <if>if<condition>(<expr><name>x</name><operator>==</operator><name>p</name></expr>)</condition><then>    <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>C</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>ans</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name></expr></init>)</control>
    <block>{
        <if>if<condition>(<expr><name>x</name><operator>==</operator><name>p</name></expr>)</condition><then>    <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><operator>(</operator><name>l</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>st</name></decl>,<decl><type ref="prev"/><name>mn</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>   <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>    <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><operator>++</operator><name><name>dgin</name><index>[<expr><name>v</name></expr>]</index></name></expr><operator>,</operator><expr><operator>++</operator><name><name>dgin</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>   <block type="pseudo"><if>if<condition>(<expr><name><name>dgin</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then>  <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if></block></for>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>dgin</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>  <block>{<expr_stmt><expr><name>st</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><break>break;</break>}</block></then></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name><operator>||</operator><name>j</name><operator>==</operator><name>k</name><operator>||</operator><name>i</name><operator>==</operator><name>k</name></expr>)</condition><then>    <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>&lt;</operator><name>mn</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>mn</name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>mn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>,<argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
