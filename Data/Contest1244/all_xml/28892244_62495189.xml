<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28892244_62495189.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>B</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>T</name><init>=<expr><literal type="number">2e14</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>k</name></decl>,<decl><type ref="prev"/><name><name>A</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>d</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>s</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tmp</name><operator>+=</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <if>if<condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><operator>(</operator><name>s</name><operator>+</operator><name>d</name><operator>)</operator></expr>)</condition><then><block>{
                <expr_stmt><expr><name>tmp</name><operator>+=</operator><call><name>abs</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><name>d</name><operator>-</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></for>
    <return>return <expr><name>tmp</name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>check2</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>mid</name></decl></parameter>)</parameter_list><block>{
        <decl_stmt><decl><type><name>LL</name></type> <name>L</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>R</name><init>=<expr><name>T</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>R</name><operator>-</operator><name>L</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><block>{
       <comment type="line">//     printf("Ovde %I64d %I64d %I64d\n",mid,L,R);</comment>
            <decl_stmt><decl><type><name>LL</name></type> <name>MID</name><init>=<expr><operator>(</operator><name>R</name><operator>+</operator><name>L</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
         <comment type="line">//   printf("Provera za %I64d %I64d %I64d %I64d\n",MID,MID+1,check(MID,mid),check(MID+1,mid));</comment>
            <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>MID</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>&lt;</operator><call><name>check</name><argument_list>(<argument><expr><name>MID</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><name>R</name><operator>=</operator><name>MID</name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <expr_stmt><expr><name>L</name><operator>=</operator><name>MID</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>&gt;</operator><name>k</name> <operator>&amp;&amp;</operator> <call><name>check</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>&gt;</operator><name>k</name></expr>)</condition><then><block>{
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>LL</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>B</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>r</name><operator>-</operator><name>l</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><block>{
  <comment type="line">//      printf("Saddd %I64d %I64d\n",l,r);</comment>
        <decl_stmt><decl><type><name>LL</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>L</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>R</name><init>=<expr><literal type="number">2e14</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name>check2</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></then>
        <else>else    <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
 <comment type="line">//   printf("Smor %I64d %I64d\n",l,r);</comment>
    <if>if<condition>(<expr><call><name>check2</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>l</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>r</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line">//binarna po d, pa ternarna po startu</comment>
</unit>
