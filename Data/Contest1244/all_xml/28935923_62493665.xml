<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935923_62493665.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INL</name></cpp:macro> <cpp:value>inline</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REG</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDB</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULL</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RPT</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (REG int i=(x);i&lt;(y);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DRPT</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (REG int i=(x);i&gt;(y);i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MST</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a),(b),sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MRK</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;"Mark"&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" = "&lt;&lt;(x)&lt;&lt;endl;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXM</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLINF</name></cpp:macro> <cpp:value>0x3f3f3f3f3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>1e-5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>a</name><index>[<expr><literal type="number">201000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>lsum</name></decl>,<decl><type ref="prev"/><name>lval</name></decl>,<decl><type ref="prev"/><name>rsum</name></decl>,<decl><type ref="prev"/><name>rval</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>lval</name><operator>=</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>lsum</name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><name>rval</name><operator>=</operator><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>rsum</name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
	<decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><name>rval</name><operator>-</operator><name>lval</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{
		<comment type="line">//cout&lt;&lt;lsum&lt;&lt;' '&lt;&lt;lval&lt;&lt;' '&lt;&lt;rsum&lt;&lt;' '&lt;&lt;rval&lt;&lt;endl;</comment>
		<if>if <condition>(<expr><name>rval</name><operator>-</operator><name>lval</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		<if>if <condition>(<expr><name>k</name><operator>&lt;</operator><name>lsum</name> <operator>&amp;&amp;</operator> <name>k</name><operator>&lt;</operator><name>rsum</name></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		<if>if <condition>(<expr><name>lsum</name><operator>&lt;</operator><name>rsum</name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>tmp</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>lsum</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name>lval</name></expr></argument>,<argument><expr><name>k</name><operator>/</operator><name>lsum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>lval</name><operator>+=</operator><name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>-=</operator><name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name><operator>-=</operator><name>tmp</name><operator>*</operator><name>lsum</name></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><name>lsum</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>lval</name> <operator>&amp;&amp;</operator> <name>i</name><operator>&lt;=</operator><name>n</name></expr> ;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name>lsum</name><operator>++</operator></expr>;</expr_stmt></block></for>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>tmp</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>rval</name><operator>-</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>rsum</name></expr>]</index></name></expr></argument>,<argument><expr><name>k</name><operator>/</operator><name>rsum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>rval</name><operator>-=</operator><name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>-=</operator><name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>k</name><operator>-=</operator><name>tmp</name><operator>*</operator><name>rsum</name></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><name>rsum</name></expr></init></decl>;</init><condition><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>rval</name> <operator>&amp;&amp;</operator> <name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name>rsum</name><operator>++</operator></expr>;</expr_stmt></block></for>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>rval</name><operator>-</operator><name>lval</name></expr>;</expr_stmt>
	<return>return <expr><operator>~</operator><operator>~</operator><operator>(</operator><literal type="number">0</literal><operator>^</operator><name>_</name><operator>^</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
}</block></function>

</unit>
