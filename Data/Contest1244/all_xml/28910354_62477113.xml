<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28910354_62477113.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<function><type><name>signed</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>totGames</name></decl>,<decl><type ref="prev"/><name>totPoints</name></decl>,<decl><type ref="prev"/><name>win</name></decl>,<decl><type ref="prev"/><name>draw</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>origPt</name></decl>,<decl><type ref="prev"/><name>origGame</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>totGames</name><operator>&gt;&gt;</operator><name>totPoints</name><operator>&gt;&gt;</operator><name>win</name><operator>&gt;&gt;</operator><name>draw</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>origPt</name> <operator>=</operator> <name>totPoints</name></expr>;</expr_stmt> <expr_stmt><expr><name>origGame</name> <operator>=</operator> <name>totGames</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>lcm</name> <init>= <expr><name>win</name><operator>*</operator><name>draw</name><operator>/</operator><call><name><name>std</name><operator>::</operator><name>__gcd</name></name><argument_list>(<argument><expr><name>win</name></expr></argument>,<argument><expr><name>draw</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>lcms</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>lcms</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><literal type="number">0LL</literal></expr></argument>, <argument><expr><name>totPoints</name><operator>/</operator><name>lcm</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>totGames</name> <operator>-=</operator> <operator>(</operator><name>lcm</name><operator>/</operator><name>win</name><operator>)</operator><operator>*</operator><name>lcms</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>totPoints</name> <operator>&gt;=</operator> <name>lcm</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>(</operator><name>totPoints</name> <operator>%=</operator> <name>lcm</name><operator>)</operator> <operator>+=</operator> <name>lcm</name></expr>;</expr_stmt></block></then></if>

    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>win</name><operator>&lt;=</operator><name>totPoints</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name>totPoints</name><operator>-</operator><name>i</name><operator>*</operator><name>win</name><operator>)</operator><operator>%</operator><name>draw</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>totPoints</name><operator>-</operator><name>i</name><operator>*</operator><name>win</name><operator>)</operator><operator>/</operator><name>draw</name><operator>&lt;=</operator><name>totGames</name></expr>)</condition><then><block>{
	    <expr_stmt><expr><name>w</name> <operator>=</operator> <name>lcms</name><operator>*</operator><operator>(</operator><name>lcm</name><operator>/</operator><name>win</name><operator>)</operator><operator>+</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>totPoints</name><operator>-</operator><name>i</name><operator>*</operator><name>win</name><operator>)</operator><operator>/</operator><name>draw</name></expr>;</expr_stmt> <expr_stmt><expr><name>l</name> <operator>=</operator> <name>origGame</name><operator>-</operator><name>w</name><operator>-</operator><name>d</name></expr>;</expr_stmt>
	    <if>if<condition>(<expr><name>w</name><operator>*</operator><name>win</name> <operator>+</operator> <name>d</name><operator>*</operator><name>draw</name> <operator>!=</operator> <name>origPt</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
	    <if>if<condition>(<expr><name><name>w</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>d</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>l</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal> <operator>||</operator> <name>w</name></expr></argument>&gt;</argument_list></name><name>origGame</name> <operator>||</operator> <name>d</name></expr></argument>&gt;</argument_list></name><name>origGame</name> <operator>||</operator> <name>l</name></expr></argument>&gt;</argument_list></name><name>origGame</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
	    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name>w</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>d</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>l</name><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
	    <return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if></block></for>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
