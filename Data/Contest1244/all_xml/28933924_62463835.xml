<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933924_62463835.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>a</name><operator>%</operator><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	    <block type="pseudo"><return>return <expr><name>a</name><operator>/</operator><name>b</name></expr>;</return></block></then></if>
	<return>return <expr><name>a</name><operator>/</operator><name>b</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>d</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>f</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>f</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <call><name>f</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
	}</block></while>   
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
