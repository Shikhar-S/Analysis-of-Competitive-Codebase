<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934023_62496338.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>100011</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>LEAF</name></decl>;</decl_stmt>
<function_decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>edge</name><parameter_list>(<parameter><decl><type><name>MAXN</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name><name>COLOR</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>parent</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>SEEN</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>bfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>CL1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>CL2</name></decl></parameter>)</parameter_list><block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>SEEN</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>COLOR</name><index>[<expr><name>CL1</name></expr>]</index><index>[<expr><name>CL2</name></expr>]</index><index>[<expr><name>LEAF</name></expr>]</index></name><operator>=</operator><name>CL1</name></expr>;</expr_stmt><expr_stmt><expr><name><name>COLOR</name><index>[<expr><name>CL1</name></expr>]</index><index>[<expr><name>CL2</name></expr>]</index><index>[<expr><name><name>edge</name><index>[<expr><name>LEAF</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>CL2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>parent</name><index>[<expr><name><name>edge</name><index>[<expr><name>LEAF</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>LEAF</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>SEEN</name><index>[<expr><name>LEAF</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>SEEN</name><index>[<expr><name><name>edge</name><index>[<expr><name>LEAF</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>QE</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>QE</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><name>LEAF</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name><name>QE</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>X</name><init>=<expr><call><name><name>QE</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>QE</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><range>:<expr><name><name>edge</name><index>[<expr><name>X</name></expr>]</index></name></expr></range></decl></init>)</control>
            <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>SEEN</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>X</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>SEEN</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>QE</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>COLOR</name><index>[<expr><name>CL1</name></expr>]</index><index>[<expr><name>CL2</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal><operator>-</operator><name><name>COLOR</name><index>[<expr><name>CL1</name></expr>]</index><index>[<expr><name>CL2</name></expr>]</index><index>[<expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>-</operator><name><name>COLOR</name><index>[<expr><name>CL1</name></expr>]</index><index>[<expr><name>CL2</name></expr>]</index><index>[<expr><name><name>parent</name><index>[<expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if></block></for>
    }</block></while>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edge</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edge</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
    <elseif>else <if>if <condition>(<expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>LEAF</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></elseif></if></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>bfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>MINCOST</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>,<decl><type ref="prev"/><name>COST</name></decl>,<decl><type ref="prev"/><name>Cx</name></decl>,<decl><type ref="prev"/><name>Cy</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>COST</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name>COST</name><operator>+=</operator><name><name>A</name><index>[<expr><name><name>COLOR</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></for>
            <if>if <condition>(<expr><name>COST</name><operator>&lt;</operator><name>MINCOST</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>MINCOST</name><operator>=</operator><name>COST</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>Cx</name><operator>=</operator><name>i</name></expr>;</expr_stmt><expr_stmt><expr><name>Cy</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if></block></for></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>MINCOST</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>N</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>COLOR</name><index>[<expr><name>Cx</name></expr>]</index><index>[<expr><name>Cy</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
}</block></function></unit>
