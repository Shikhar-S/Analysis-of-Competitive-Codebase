<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934709_62491712.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>chip</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pow</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>chip</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call><operator>==</operator><literal type="char">'W'</literal></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>chip</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name><name>chip</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><goto>goto <name>general</name>;</goto></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>k</name><operator>%=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><ternary><condition><expr><operator>(</operator><name><name>chip</name><index>[<expr><name>x</name></expr>]</index></name><operator>^</operator><operator>(</operator><name>k</name><operator>)</operator><operator>)</operator></expr>?</condition><then><expr><literal type="char">'W'</literal></expr></then><else>:<expr><literal type="char">'B'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
    <label><name>general</name>:</label>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>chip</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name><name>chip</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>pow</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>k</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pow</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>]</index></name><operator>=</operator><name>k</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>pow</name><index>[<expr><name>x</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>&gt;</operator><name><name>pow</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>pow</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>]</index></name><operator>=</operator><name><name>pow</name><index>[<expr><name>x</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>chip</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>]</index></name><operator>=</operator><name><name>chip</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>pow</name><index>[<expr><name>x</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>&gt;</operator><name><name>pow</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>pow</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>]</index></name><operator>=</operator><name><name>pow</name><index>[<expr><name>x</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>chip</name><index>[<expr><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>n</name></expr>]</index></name><operator>=</operator><name><name>chip</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>x</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>x</name><operator>--</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>pow</name><index>[<expr><name>x</name><operator>%</operator><name>n</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>&gt;</operator><name><name>pow</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>pow</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>pow</name><index>[<expr><name>x</name><operator>%</operator><name>n</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>chip</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>chip</name><index>[<expr><name>x</name><operator>%</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>x</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>x</name><operator>--</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>pow</name><index>[<expr><name>x</name><operator>%</operator><name>n</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal><operator>&gt;</operator><name><name>pow</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>pow</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>pow</name><index>[<expr><name>x</name><operator>%</operator><name>n</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>chip</name><index>[<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>chip</name><index>[<expr><name>x</name><operator>%</operator><name>n</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>k</name><operator>%=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>pow</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><ternary><condition><expr><name><name>chip</name><index>[<expr><name>x</name></expr>]</index></name></expr>?</condition><then><expr><literal type="char">'W'</literal></expr></then><else>:<expr><literal type="char">'B'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><ternary><condition><expr><operator>(</operator><name><name>chip</name><index>[<expr><name>x</name></expr>]</index></name><operator>^</operator><operator>(</operator><name>k</name><operator>)</operator><operator>)</operator></expr>?</condition><then><expr><literal type="char">'W'</literal></expr></then><else>:<expr><literal type="char">'B'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
}</block></function>
</unit>
