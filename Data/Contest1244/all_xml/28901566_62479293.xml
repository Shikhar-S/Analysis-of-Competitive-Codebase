<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28901566_62479293.cpp"><comment type="line">// I can't tell you what it really is,</comment>
<comment type="line">// I can only tell you what it feels like.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a; i &lt;= n; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>pair &lt; int, int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name></cpp:macro> <cpp:value>cout &lt;&lt; '\n'</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">4e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>v</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>temp</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// cout &lt;&lt; x &lt;&lt; ' ';</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <range>: <expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
		<if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>p</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></for>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
 
<function><specifier>inline</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
   <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
   <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
   <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro>
   	<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
   		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
   	}</block>
   <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
   	<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
   	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
   	<expr_stmt><expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   	<expr_stmt><expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block>
   <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
   <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
   	<if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
   		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
   		<return>return;</return>
   	}</block></then></if>
   	<if>if <condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
   		<expr_stmt><expr><name>st</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
   	}</block></then></if>
   }</block>
   <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>st</name></expr></argument>,<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <comment type="line">// E;</comment>
   <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>col</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>ok</name></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>fin</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
   <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
   	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
   	<comment type="line">// for (int i : col) {</comment>
   	<comment type="line">// 	cout &lt;&lt; i &lt;&lt; ' ';</comment>
   	<comment type="line">// }</comment>
   		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
   			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name><name>col</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
   		}</block></for>
   		<comment type="line">// cout &lt;&lt; ans &lt;&lt; '\n';</comment>
   		<if>if <condition>(<expr><name>ans</name> <operator>&lt;</operator> <name>fin</name></expr>)</condition><then> <block>{
   			<expr_stmt><expr><name>fin</name> <operator>=</operator> <name>ans</name></expr>;</expr_stmt>
   			<expr_stmt><expr><name>ok</name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>
   		}</block></then></if>
   	<decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><call><name>next_permutation</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   	<if>if <condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
   }</block></while>
   <comment type="line">// for (int x : col) {</comment>
   <comment type="line">// 	cout &lt;&lt; x &lt;&lt; ' ';</comment>
   <comment type="line">// }</comment>
   <comment type="line">// E;</comment>
   <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fin</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
   <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
   	<expr_stmt><expr><name><name>arr</name><index>[<expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>ok</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
   }</block>
   <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
   	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
   }</block>

}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">//cin &gt;&gt; t; while(t--)</comment>
  <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
