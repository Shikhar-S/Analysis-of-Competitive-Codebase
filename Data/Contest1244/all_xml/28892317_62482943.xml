<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28892317_62482943.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro>   <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((int)((v).size()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((v).begin()),((v).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM</name><parameter_list>(<parameter><type><name>dp</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(dp ,i, sizeof (dp))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repit</name><parameter_list>( <parameter><type><name>cont</name></type></parameter> , <parameter><type><name>i</name></type></parameter>  )</parameter_list></cpp:macro> <cpp:value>for( auto i : cont)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forr</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(ll c=x;c&lt;=(ll)n; ++c )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forrr</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(ll c=x;c&gt;=( ll )n ;--c )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; " LOOK " &lt;&lt;(#x) &lt;&lt;" = " &lt;&lt;  x &lt;&lt; '\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICPC</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printarr</name><parameter_list>(<parameter><type><name>a</name></type></parameter> , <parameter><type><name>l</name></type></parameter> , <parameter><type><name>r</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>forr ( i , l , r )cout &lt;&lt; a[i] &lt;&lt; " ";cout&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printarr2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter> , <parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>forr ( i , 1 , n){forr ( j , 1, m )cout &lt;&lt; a[i][j] &lt;&lt; " ";cout&lt;&lt;endl;}</cpp:value></cpp:define>

<comment type="line">//freopen("input.txt", "r", stdin);</comment>
<comment type="line">//freopen("output.txt", "w", stdout);</comment>


<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> , <expr><literal type="number">1</literal></expr> , <expr><literal type="number">2</literal></expr>}</block></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">100007</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>v</name><index>[<expr><literal type="number">100007</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>nod</name></decl> ;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter> )</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>nod</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>( <init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init> )</control>
    <block>{
        <if>if <condition>( <expr><name>i</name> <operator>!=</operator> <name>p</name></expr>  )</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>( <argument><expr><name>i</name></expr></argument> , <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<expr_stmt><expr><name>ICPC</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt>
<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr> ;</expr_stmt>
<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition>  <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block type="pseudo"><for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition>  <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>


<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>  ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl> , <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></for>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition>  <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
<block>{
    <if>if <condition>( <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr> )</condition><then>
        <block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr> <operator>,</operator> <expr><literal type="number">0</literal></expr> ;</return></block></then></if>
    <if>if <condition>( <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>idx</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block></then></if>
}</block></for>
<expr_stmt><expr><call><name>dfs</name><argument_list>( <argument><expr><name>idx</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>  )</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ansp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>mn</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<do>do<block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
 <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
  <block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name><name>p</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>nod</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></for>


  <if>if <condition>( <expr><name>sum</name> <operator>&lt;</operator> <name>mn</name></expr> )</condition><then>
  <block>{
      <expr_stmt><expr><name>mn</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
      <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition>  <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>
        <block type="pseudo"><expr_stmt><expr><name><name>ansp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
  }</block></then></if>

}</block>while <condition>( <expr><call><name>next_permutation</name><argument_list>( <argument><expr><name>p</name></expr></argument> , <argument><expr><name>p</name><operator>+</operator><literal type="number">3</literal></expr></argument> )</argument_list></call></expr>)</condition>;</do>

<decl_stmt><decl><type><name>int</name></type> <name><name>nodp</name><index>[<expr><literal type="number">100007</literal></expr>]</index></name></decl>;</decl_stmt>
<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
 <block type="pseudo"><expr_stmt><expr><name><name>nodp</name><index>[<expr><name><name>nod</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>ansp</name><index>[<expr><name>i</name> <operator>%</operator> <literal type="number">3</literal></expr> ]</index></name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt></block></for>

<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mn</name>  <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
    <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>nodp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
}</block></function>
</unit>
