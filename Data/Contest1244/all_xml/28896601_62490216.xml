<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896601_62490216.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>inf</name><init>=<expr><literal type="number">1e15</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>p</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>bo</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ta</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>f</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>number</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>make</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
	<elseif>else <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">3</literal></expr>;</return></block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">4</literal></expr>;</return></block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">3</literal><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">5</literal></expr>;</return></block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">3</literal><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">6</literal></expr>;</return></block></then></if></elseif>
	<else>else <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>bo</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>a</name><index>[<expr><name>num</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ta</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>num</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control>
		<block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>bo</name><index>[<expr><name>it</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><operator>++</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
	<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><literal type="string">"-1\n"</literal></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">7</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
	<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>inf</name></expr>;</expr_stmt></block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><call><name>make</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
				<block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><call><name>make</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><call><name>make</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>-</operator><name>i</name><operator>-</operator><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>a</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></block></for></block></for></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>,<decl><type ref="prev"/><name>jj</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><name>inf</name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then>
				<block type="pseudo"><if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name><name>f</name><index>[<expr><call><name>make</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>f</name><index>[<expr><call><name>make</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>ii</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name>jj</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
				}</block></then></if></block></then></if></block></for></block></for>
	<expr_stmt><expr><name><name>number</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><name>jj</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>number</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>ii</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>number</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">6</literal><operator>-</operator><name><name>number</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>number</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name><name>number</name><index>[<expr><name><name>ta</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
