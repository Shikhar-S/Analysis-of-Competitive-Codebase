<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28913627_62486351.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">3e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>k1</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>k2</name></decl>, <decl><type ref="prev"/><name>k3</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>p</name> <operator>%</operator> <name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <if>if<condition>(<expr><name>p</name> <operator>/</operator> <name>w</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>p</name><operator>/</operator><name>w</name><operator>&lt;&lt;</operator><literal type="string">" 0 "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>p</name><operator>/</operator><name>w</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>p</name> <operator>&lt;</operator> <name>d</name></expr>)</condition><then> <block>{
        <if>if<condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>p</name> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>k1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>k2</name> <operator>=</operator> <name>p</name> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>d</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>p</name> <operator>-=</operator> <name>w</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>p</name> <operator>&lt;</operator> <name>d</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            }</block></then></if>
            <if>if<condition>(<expr><name>p</name> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k2</name> <operator>=</operator> <name>p</name> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
    }</block></else></if>
    <if>if<condition>(<expr><name>k1</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>nok</name> <init>= <expr><literal type="number">1ll</literal> <operator>*</operator> <name>w</name> <operator>*</operator> <name>d</name> <operator>/</operator> <call><name>__gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>addx</name> <init>= <expr><literal type="number">1ll</literal> <operator>*</operator> <call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>p</name> <operator>/</operator> <name>nok</name><operator>)</operator></expr></argument>, <argument><expr><name>k2</name><operator>/</operator><name>w</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>d</name></expr></init></decl>, <decl><type ref="prev"/><name>miny</name> <init>= <expr><literal type="number">1ll</literal> <operator>*</operator> <call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>p</name> <operator>/</operator> <name>nok</name><operator>)</operator></expr></argument>, <argument><expr><name>k2</name><operator>/</operator><name>w</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>w</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>k1</name> <operator>+=</operator> <name>addx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>k2</name> <operator>-=</operator> <name>miny</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>k1</name> <operator>+</operator> <name>k2</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>k1</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>k2</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>k1</name><operator>-</operator><name>k2</name></expr>;</expr_stmt>
}</block></function>
</unit>
