<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28929572_62485915.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NMAX</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>NMAX</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>poz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sol</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>,<decl><type ref="prev"/><name>S</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>used</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>v</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nr</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name><name>used</name><index>[<expr><name>node</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><name>node</name></expr>]</index></name><operator>=</operator><name><name>col</name><index>[<expr><name>nr</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>S</name><operator>+=</operator><name><name>c</name><index>[<expr><name>node</name></expr>]</index><index>[<expr><name><name>col</name><index>[<expr><name>nr</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name><name>g</name><index>[<expr><name>node</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
        <if>if<condition>(<expr><operator>!</operator><name><name>used</name><index>[<expr><name>it</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>it</name></expr></argument>, <argument><expr><operator>(</operator><name>nr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal> <operator>+</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>nr</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">4</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>y</name><operator>=</operator><name><name>g</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ok</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>q</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>q</name></expr></incr>)</control>
                <block type="pseudo"><if>if<condition>(<expr><name>q</name><operator>!=</operator><name>i</name> <operator>&amp;&amp;</operator> <name>q</name><operator>!=</operator><name>j</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name>q</name></expr>;</expr_stmt></block></then></if></block></for>

            <for>for<control>(<init><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>q</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>q</name></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name><name>used</name><index>[<expr><name>q</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
            <expr_stmt><expr><name><name>used</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>used</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>S</name><operator>=</operator><name><name>c</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if<condition>(<expr><name>S</name><operator>&lt;</operator><name>sol</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>sol</name><operator>=</operator><name>S</name></expr>;</expr_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>sol</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
