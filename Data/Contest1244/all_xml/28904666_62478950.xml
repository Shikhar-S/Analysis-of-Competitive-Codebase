<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28904666_62478950.cpp"><comment type="line" format="doxygen">/// don't hack me</comment>

<comment type="line" format="doxygen">/// follow me: https://www.instagram.com/rose_culbece/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>followmeoninsta</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0), cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>please</name></cpp:macro> <cpp:value>if(1)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>v</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>sp</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>please</name> <name>followmeoninsta</name></type>
    <name>cin</name> &gt;&gt; <name>n</name> &gt;&gt; <name>k</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>v</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>v</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ps</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>pd</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name><name>v</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>k</name> <operator>&amp;&amp;</operator> <name>ps</name> <operator>&lt;</operator> <name>pd</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>ps</name> <operator>&lt;=</operator> <name>n</name> <operator>-</operator> <name>pd</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>dd</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>ps</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>ps</name></expr>]</index></name></expr></argument>, <argument><expr><name>k</name> <operator>/</operator> <name>ps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>dd</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><name>ps</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>v</name><index>[<expr><name>ps</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>dd</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>-</operator> <name>dd</name> <operator>*</operator> <name>ps</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>dd</name> <operator>==</operator> <name><name>v</name><index>[<expr><name>ps</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>ps</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>ps</name><operator>++</operator></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><break>break;</break></block></else></if>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>dd</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>pd</name></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>pd</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>k</name> <operator>/</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>pd</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>dd</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><name>pd</name></expr>]</index></name> <operator>!=</operator> <name><name>v</name><index>[<expr><name>pd</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>dd</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>k</name> <operator>=</operator> <name>k</name> <operator>-</operator> <name>dd</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>pd</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>dd</name> <operator>==</operator> <name><name>v</name><index>[<expr><name>pd</name></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>pd</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>pd</name><operator>--</operator></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><break>break;</break></block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
