<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935587_62496467.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>a</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>curmin</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>curmax</name><init>=<expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name>j</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument>&gt;</argument_list></name><literal type="number">0</literal></expr>)</condition><block>{
		<while>while<condition>(<expr><name>i</name><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;=</operator><name>curmin</name></expr>)</condition><block>{
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		}</block></while>
		<while>while<condition>(<expr><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;=</operator><name>curmax</name></expr>)</condition><block>{
			<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
		}</block></while>
		<comment type="line">// printf("%d %d\n", i, j);</comment>
		<if>if<condition>(<expr><name>j</name><operator>&lt;=</operator><name>i</name></expr>)</condition><then><block>{
			<break>break;</break>
		}</block></then></if>
		<if>if<condition>(<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>==</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>)</operator></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then><block>{
					<expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>curmin</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				}</block></then>
				<else>else<block>{
					<expr_stmt><expr><name>curmin</name><operator>+=</operator><operator>(</operator><name>k</name><operator>/</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then>
			<else>else<block>{
				<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><then><block>{
					<expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>curmax</name><operator>=</operator><name><name>a</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				}</block></then>
				<else>else<block>{
					<expr_stmt><expr><name>curmax</name><operator>-=</operator><operator>(</operator><name>k</name><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
				}</block></else></if>	
			}</block></else></if>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>)</operator></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then><block>{
				<expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>curmin</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name>curmin</name><operator>+=</operator><operator>(</operator><name>k</name><operator>/</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if></elseif>
		<else>else<block>{
			<if>if<condition>(<expr><name>k</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><then><block>{
				<expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>curmax</name><operator>=</operator><name><name>a</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name>curmax</name><operator>-=</operator><operator>(</operator><name>k</name><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>j</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
		<comment type="line">// printf("%d %d %lld %lld %lld\n", i, j, curmin, curmax, k);</comment>
	}</block></while>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>curmax</name><operator>-</operator><name>curmin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
