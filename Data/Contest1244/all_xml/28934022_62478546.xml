<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934022_62478546.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
 
<decl_stmt><decl><type><name>ll</name></type> <name>prime</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
    <comment type="line">// freopen("input.txt", "r", stdin);</comment>
    <comment type="line">// freopen("output.txt", "w", stdout);</comment>

    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>p</name> <operator>/</operator> <name>w</name></expr>;</init> <condition><expr><name>x</name> <operator>&gt;=</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">0ll</literal></expr></argument>, <argument><expr><name>p</name> <operator>/</operator> <name>w</name> <operator>-</operator> <name>d</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>--</operator><name>x</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>%</operator> <name>d</name> <operator>==</operator> <operator>(</operator><name>p</name> <operator>%</operator> <name>d</name><operator>)</operator></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>x</name> <operator>*</operator> <name>w</name><operator>)</operator> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
            }</block></else></if>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
