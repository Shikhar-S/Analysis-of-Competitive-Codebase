<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28927336_62483183.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pr</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>LL</name></type> <name>read</name><parameter_list>( )</parameter_list><block>{<decl_stmt><decl><type><name>LL</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>( )</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition> <block>{<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>}</block></while><while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block>{<expr_stmt><expr><name>sum</name><operator>=</operator><name>sum</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>}</block></while><if>if<condition>(<expr><name>f</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><name>sum</name></expr>;</return></block></then></if><return>return <expr><name>sum</name></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>sum</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>( )</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition> <block>{<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>}</block></while><while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block>{<expr_stmt><expr><name>sum</name><operator>=</operator><name>sum</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>}</block></while><if>if<condition>(<expr><name>f</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>=</operator><operator>-</operator><name>sum</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>sum</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>( )</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition> <block>{<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>}</block></while><while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block>{<expr_stmt><expr><name>sum</name><operator>=</operator><name>sum</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>( )</argument_list></call></expr>;</expr_stmt>}</block></while><if>if<condition>(<expr><name>f</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>=</operator><operator>-</operator><name>sum</name></expr>;</expr_stmt></block></then></if>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>( )</parameter_list>
<block>{
  <decl_stmt><decl><type><name>LL</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>j</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>S</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition>
    <block>{
      <if>if<condition>(<expr><operator>!</operator><name>S</name></expr>)</condition><then>
	<block>{
	  <decl_stmt><decl><type><name>LL</name></type> <name>P</name><init>=<expr><name>n</name><operator>-</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>LL</name></type> <name>D</name><init>=<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  <if>if<condition>(<expr><name>k</name><operator>&gt;</operator><name>P</name><operator>*</operator><name>D</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name><operator>-=</operator><name>P</name><operator>*</operator><name>D</name></expr><operator>,</operator><expr><name>ans</name><operator>-=</operator><name>D</name></expr><operator>,</operator><expr><name>j</name><operator>--</operator></expr><operator>,</operator><expr><name>S</name><operator>^=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
	  <else>else <block>{<expr_stmt><expr><name>ans</name><operator>-=</operator><name>k</name><operator>/</operator><name>P</name></expr>;</expr_stmt><break>break;</break>}</block></else></if>
	}</block></then>
      <else>else
	<block>{
	  <decl_stmt><decl><type><name>LL</name></type> <name>P</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
	  <decl_stmt><decl><type><name>LL</name></type> <name>D</name><init>=<expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	  <if>if<condition>(<expr><name>k</name><operator>&gt;</operator><name>P</name><operator>*</operator><name>D</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name><operator>-=</operator><name>P</name><operator>*</operator><name>D</name></expr><operator>,</operator><expr><name>ans</name><operator>-=</operator><name>D</name></expr><operator>,</operator><expr><name>i</name><operator>++</operator></expr><operator>,</operator><expr><name>S</name><operator>^=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
	  <else>else <block>{<expr_stmt><expr><name>ans</name><operator>-=</operator><name>k</name><operator>/</operator><name>P</name></expr>;</expr_stmt><break>break;</break>}</block></else></if>
	}</block></else></if>
    }</block></while>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
