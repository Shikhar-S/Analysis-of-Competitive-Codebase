<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935540_62498580.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILE</name><parameter_list>(<parameter><type><name>Name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>freopen(Name".in", "r", stdin), freopen(Name".out", "w", stdout)</cpp:value></cpp:define>

<namespace>namespace <name>io</name> <block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>__SIZE</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">21</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>ibuf</name><index>[<expr><name>__SIZE</name></expr>]</index></name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>iS</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>iT</name></decl>, <decl><type ref="prev"/><name><name>obuf</name><index>[<expr><name>__SIZE</name></expr>]</index></name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>oS</name> <init>= <expr><name>obuf</name></expr></init></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>oT</name> <init>= <expr><name>oS</name> <operator>+</operator> <name>__SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>__c</name></decl>, <decl><type ref="prev"/><name><name>qu</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>__f</name></decl>, <decl><type ref="prev"/><name>qr</name></decl>, <decl><type ref="prev"/><name>_eof</name></decl>;</decl_stmt>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Gc</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(iS == iT ? (iT = (iS = ibuf) + fread (ibuf, 1, __SIZE, stdin), (iS == iT ? EOF : *iS ++)) : *iS ++)</cpp:value></cpp:define>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>flush</name> <parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>fwrite</name> <argument_list>(<argument><expr><name>obuf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>oS</name> <operator>-</operator> <name>obuf</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>oS</name> <operator>=</operator> <name>obuf</name></expr>;</expr_stmt> }</block></function>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>gc</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>Gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></function>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>pc</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><operator>*</operator><name>oS</name> <operator>++</operator> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <if>if <condition>(<expr><name>oS</name> <operator>==</operator> <name>oT</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>flush</name> <argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if> }</block></function>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>pstr</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>int</name></type> <name>__len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <for>for <control>(<init><expr><name>__f</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>__f</name> <operator>&lt;</operator> <name>__len</name></expr>;</condition> <incr><expr><operator>++</operator><name>__f</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>pc</name> <argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>__f</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> }</block></function>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>gstr</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list> <block>{ <for>for<control>(<init><expr><name>__c</name> <operator>=</operator> <call><name>Gc</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name><name>__c</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">32</literal> <operator>||</operator> <name>__c</name></expr></argument> &gt;</argument_list></name> <literal type="number">126</literal> <operator>||</operator> <name>__c</name> <operator>==</operator> <literal type="char">' '</literal></expr>;</condition><incr/>)</control>  <block type="pseudo"><expr_stmt><expr><name>__c</name> <operator>=</operator> <call><name>Gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
		<for>for<control>(<init>;</init> <condition><expr><name>__c</name> <operator>&gt;</operator> <literal type="number">31</literal> <operator>&amp;&amp;</operator> <name>__c</name> <operator>&lt;</operator> <literal type="number">127</literal> <operator>&amp;&amp;</operator> <name>__c</name> <operator>!=</operator> <literal type="char">' '</literal></expr>;</condition> <incr><expr><operator>++</operator><name>s</name></expr><operator>,</operator> <expr><name>__c</name> <operator>=</operator> <call><name>Gc</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <name>__c</name></expr>;</expr_stmt></block></for> <expr_stmt><expr><operator>*</operator><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> }</block></function>
	<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>I</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>gi</name> <parameter_list>(<parameter><decl><type><name>I</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>_eof</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>__f</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>__c</name> <operator>=</operator> <call><name>Gc</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><operator>(</operator><name><name>__c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>__c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>_eof</name></expr>;</condition> <incr><expr><name>__c</name> <operator>=</operator> <call><name>Gc</name><argument_list>()</argument_list></call></expr></incr>)</control> <block>{ <if>if <condition>(<expr><name>__c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>__f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>_eof</name> <operator>|=</operator> <name>__c</name> <operator>==</operator> <name>EOF</name></expr>;</expr_stmt> }</block></for>
		<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>__c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <name>__c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>_eof</name></expr>;</condition> <incr><expr><name>__c</name> <operator>=</operator> <call><name>Gc</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>__c</name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator></expr><operator>,</operator> <expr><name>_eof</name> <operator>|=</operator> <name>__c</name> <operator>==</operator> <name>EOF</name></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>__f</name></expr>;</expr_stmt> <return>return <expr><operator>!</operator><name>_eof</name></expr>;</return> }</block></function>
	<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>I</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>print</name> <parameter_list>(<parameter><decl><type><name>I</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>pc</name> <argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>pc</name> <argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
		<while>while <condition>(<expr><name>x</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name><name>qu</name><index>[<expr><operator>++</operator> <name>qr</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>%</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal></expr><operator>,</operator>  <expr><name>x</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block></while> <while>while <condition>(<expr><name>qr</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>pc</name> <argument_list>(<argument><expr><name><name>qu</name><index>[<expr><name>qr</name> <operator>--</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while> }</block></function>
	<struct>struct <name>Flusher_</name> <block>{<public type="default"><destructor><name>~<name>Flusher_</name></name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></destructor></public>}</block><decl><name>io_flusher_</name></decl>;</struct>
}</block></namespace> <using>using <name><name>io</name><operator>::</operator><name>pc</name></name>;</using> <using>using <name><name>io</name><operator>::</operator><name>gc</name></name>;</using> <using>using <name><name>io</name><operator>::</operator><name>pstr</name></name>;</using> <using>using <name><name>io</name><operator>::</operator><name>gstr</name></name>;</using> <using>using <name><name>io</name><operator>::</operator><name>gi</name></name>;</using> <using>using <name><name>io</name><operator>::</operator><name>print</name></name>;</using>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>chkmax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>chkmin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><operator>!</operator><name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> }</block></function>
<typedef>typedef <type><name>unsigned</name></type> <name>uit</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>

<comment type="line">// çé¢ç®åç¨</comment>
<comment type="line">// const int mod1 = 2999999; // for Hash</comment>
<comment type="line">// const int mod2 = 4999999; // for Hash</comment>
<comment type="line">// const int mod = 19491001;</comment>
<comment type="line">// const int mod = 19260817;</comment>
<comment type="line">// const int mod = 104857601;</comment>
<comment type="line">// const int mod = 998244353;</comment>
<comment type="line">// const int mod = 998244853;</comment>
<comment type="line">// const int mod = 1004535809;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>const</specifier> <name>T</name></type> <name>Mod</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>x</name> <operator>&gt;=</operator> <name>mod</name> <operator>*</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>x</name> <operator>%</operator> <name>mod</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>x</name> <operator>&gt;=</operator> <name>mod</name></expr> ?</condition><then> <expr><name>x</name> <operator>-</operator> <name>mod</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><specifier>const</specifier> <name>void</name></type> <name>Add</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>Mod</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">200100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ansx</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>t</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>d</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>id</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>to</name><index>[<expr><name>MAXN</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ne</name><index>[<expr><name>MAXN</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fi</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tp</name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>Link</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>tot</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>to</name><index>[<expr><name>tot</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ne</name><index>[<expr><name>tot</name></expr>]</index></name> <operator>=</operator> <name><name>fi</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fi</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>tot</name></expr>;</expr_stmt>
}</block></function>


<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>la</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>p</name><index>[<expr><operator>++</operator><name>tp</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr><operator>,</operator> <expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>tp</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>fi</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>ne</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>u</name> <operator>==</operator> <name>la</name></expr>)</condition><then>  <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>FILE</name><argument_list>(<argument><expr><literal type="string">"d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>gi</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>gi</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>gi</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>gi</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>gi</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>gi</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Link</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>Link</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator> <expr><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>||</operator> <name><name>d</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>pstr</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">62</literal></expr></init></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><then>  <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator> <expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>j</name></expr><operator>,</operator> <expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<while>while<condition>(<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>i</name> <operator>||</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>j</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></while>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>a</name><index>[<expr><name>k</name> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>p</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></for>
			<if>if<condition>(<expr><name>ans</name> <operator>&lt;</operator> <name>res</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>res</name> <operator>=</operator> <name>ans</name></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name><name>id</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>k</name> <operator>%</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
			}</block></then></if>
		}</block></for>
	}</block></for> <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>pc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>id</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>pc</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>pc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
