<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935727_62491060.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name><name>arr</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>arr</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>lo</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>hi</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ops</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>lo</name><operator>&lt;</operator><name>hi</name> <operator>&amp;&amp;</operator> <name>ops</name><operator>&lt;</operator><name>k</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name>lo</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>n</name><operator>-</operator><name>hi</name></expr>)</condition><then><block>{ <comment type="line">//conviene alzare i minimi</comment>
			<if>if<condition>(<expr><operator>(</operator><name><name>arr</name><index>[<expr><name>lo</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><name>lo</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>lo</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>ops</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then><block>{ <comment type="line">//lo uguaglio all'el successivo</comment>
				<expr_stmt><expr><name>ops</name><operator>+=</operator><operator>(</operator><name><name>arr</name><index>[<expr><name>lo</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><name>lo</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>lo</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>lo</name></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{ <comment type="line">// non ci arrivo</comment>
				<expr_stmt><expr><name><name>arr</name><index>[<expr><name>lo</name></expr>]</index></name><operator>+=</operator><operator>(</operator><name>k</name><operator>-</operator><name>ops</name><operator>)</operator><operator>/</operator><operator>(</operator><name>lo</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>ops</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<else>else <block>{ <comment type="line">//conviene abbassare i massimi</comment>
			<if>if<condition>(<expr><operator>(</operator><name><name>arr</name><index>[<expr><name>hi</name></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><name>hi</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>hi</name><operator>)</operator><operator>+</operator><name>ops</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then><block>{ <comment type="line">//lo uguaglio all'el precedente</comment>
				<expr_stmt><expr><name>ops</name><operator>+=</operator><operator>(</operator><name><name>arr</name><index>[<expr><name>hi</name></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><name>hi</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>hi</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><operator>--</operator><name>hi</name></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{ <comment type="line">// non ci arrivo</comment>
				<expr_stmt><expr><name><name>arr</name><index>[<expr><name>hi</name></expr>]</index></name><operator>-=</operator><operator>(</operator><name>k</name><operator>-</operator><name>ops</name><operator>)</operator><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>hi</name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>ops</name><operator>=</operator><name>k</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">0ll</literal></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><name>hi</name></expr>]</index></name><operator>-</operator><name><name>arr</name><index>[<expr><name>lo</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
