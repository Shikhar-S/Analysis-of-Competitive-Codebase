<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28896789_62501694.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>ll</name></type> <name>digni</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>y</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><call><name>digni</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>res</name><operator>*</operator><name>res</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><operator>(</operator><call><name>digni</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>sum</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>sum</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

    <comment type="block">/*ll sol=a[n]-a[1];
    for(ll br=1;2*br&lt;=n;br++)
    {
        ll levo=br*a[br]-sum[br];
        ll desno=br*a[n-br+1]- (sum[n]-sum[n-br]);

        ll jos,dis;
        if(br==n-br+1)
        {
            jos=0;
            dis=0;
        }
        if(br+1==n-br+1)
        {
            jos=a[br+1]-a[br];
            dis=a[br+1]-a[br];
        }
        else
        {
            jos=(a[br+1]-a[br])+(a[n-br+1] - a[n-br]);
            dis=a[n-br+1]-a[br];
        }

        ll tre=levo+desno;
        if(tre&gt;k)break;

        ll ost=k-tre;
        ll moze_jos_da_se_doda=min(ost/br,jos);

        dis-=moze_jos_da_se_doda;

        sol=min(sol,dis);
    }*/</comment>

    <decl_stmt><decl><type><name>ll</name></type> <name>minn</name><init>=<expr><name>k</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>tre</name><init>=<expr><operator>(</operator><name>i</name><operator>*</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>+</operator> <operator>(</operator><operator>(</operator><name><name>sum</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>-</operator><operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>)</operator><operator>*</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>minn</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>minn</name></expr></argument>,<argument><expr><name>tre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <if>if<condition>(<expr><name>minn</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"0\n"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <decl_stmt><decl><type><name>ll</name></type> <name>sol</name><init>=<expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>br</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><literal type="number">2</literal><operator>*</operator><name>br</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>br</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>tre</name><init>=<expr><operator>(</operator><name>br</name><operator>*</operator><name><name>a</name><index>[<expr><name>br</name></expr>]</index></name><operator>-</operator><name><name>sum</name><index>[<expr><name>br</name></expr>]</index></name><operator>)</operator><operator>+</operator><operator>(</operator><operator>(</operator><name><name>sum</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>sum</name><index>[<expr><name>n</name><operator>-</operator><name>br</name></expr>]</index></name><operator>)</operator><operator>-</operator><name>br</name><operator>*</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>br</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

        <if>if<condition>(<expr><name>tre</name><operator>&gt;</operator><name>k</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>

        <decl_stmt><decl><type><name>ll</name></type> <name>ost</name><init>=<expr><name>k</name><operator>-</operator><name>tre</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ll</name></type> <name>jos</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>dis</name></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>br</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name>n</name><operator>-</operator><name>br</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>jos</name><operator>=</operator><name><name>a</name><index>[<expr><name>br</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>br</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dis</name><operator>=</operator><name><name>a</name><index>[<expr><name>br</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>br</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>jos</name><operator>=</operator><name><name>a</name><index>[<expr><name>br</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>br</name></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>br</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>br</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dis</name><operator>=</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>br</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>br</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></else></if>

        <decl_stmt><decl><type><name>ll</name></type> <name>moze_jos</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>ost</name><operator>/</operator><name>br</name></expr></argument>,<argument><expr><name>jos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>dis</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>dis</name><operator>-</operator><name>moze_jos</name></expr></argument>,<argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sol</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>dis</name></expr></argument>,<argument><expr><name>sol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>sol</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
