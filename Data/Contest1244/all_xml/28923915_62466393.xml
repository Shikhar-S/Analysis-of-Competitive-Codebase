<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28923915_62466393.cpp"><comment type="line">//  Copyright Â© 2019 Diego Garcia Rodriguez del Campo. All rights reserved.</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>200005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>optimiza_io</name></cpp:macro> <cpp:value>cin.tie(0); ios_base::sync_with_stdio(0);</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>i64</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>optimiza_io</name></type>
    <name>cin</name> &gt;&gt; <name>T</name></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>T</name> <operator>--</operator></expr> )</condition> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>mn</name> <init>= <expr><name>N</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name>N</name></expr></init></decl>;</decl_stmt>
        <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr> )</control>
            <block type="pseudo"><if>if<condition>( <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr> )</condition><then> <block>{
                <expr_stmt><expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>( <argument><expr><name>mx</name></expr></argument> , <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>mn</name> <operator>=</operator> <call><name>min</name><argument_list>( <argument><expr><name>mn</name></expr></argument> , <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></block></for>
        <if>if<condition>( <expr><name>mx</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then> <block>{
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>max</name><argument_list>( <argument><expr><name>ans</name></expr></argument> , <argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator> <name>mx</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>max</name><argument_list>( <argument><expr><name>ans</name></expr></argument> , <argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator> <name>N</name> <operator>-</operator> <name>mn</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
            
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
