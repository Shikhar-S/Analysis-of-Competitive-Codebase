<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28906090_62464554.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include> 

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"avx2,sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>

<comment type="line">//namespaces</comment>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using> 
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">//MACROS</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>watch</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; "debug : " &lt;&lt; #x &lt;&lt; " -&gt; " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=(s); i&lt;(e); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fod</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=(s)-1; i&gt;=(e); i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>

<comment type="line">//Templates</comment>
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
using <name>ordered_set</name> <init>=<type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><decl><type><name>T</name></type> <name>i</name> <range>: <expr><name>v</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><decl><type><name>T</name></type> <name>i</name> <range>: <expr><name>v</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>S</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>S</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt> <return>return <expr><name>os</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>S</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>S</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>v</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'('</literal> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">"=&gt;"</literal> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="char">')'</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>

<comment type="line">//globals</comment>
<decl_stmt><decl><type><name>ll</name> <specifier>const</specifier></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name> <specifier>const</specifier></type> <name>inf</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name> <specifier>const</specifier></type> <name>size_1d</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name> <specifier>const</specifier></type> <name>size_2d</name> <init>= <expr><literal type="number">1e3</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<comment type="line">//functions</comment>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">2e18</literal></expr></init></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>x</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt><while>while<condition>(<expr><name>y</name></expr>)</condition><block>{<if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>ans</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>ans</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>modInverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>m0</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if><while>while <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block>{ <decl_stmt><decl><type><name>ll</name></type> <name>q</name> <init>= <expr><name>a</name> <operator>/</operator> <name>m</name></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>m</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>m</name></expr><operator>,</operator><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt><expr_stmt><expr><name>t</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name> <operator>=</operator> <name>x</name> <operator>-</operator> <name>q</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt><expr_stmt><expr><name>x</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>}</block></while><if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>+=</operator> <name>m0</name></expr>;</expr_stmt></block></then></if><return>return <expr><name>x</name></expr>;</return>}</block></function> 
<function><type><name>ll</name></type> <name>gcdext</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt><return>return <expr><name>b</name></expr>;</return>}</block></then></if><decl_stmt><decl><type><name>ll</name></type> <name>x1</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>gcd1</name> <init>= <expr><call><name>gcdext</name><argument_list>(<argument><expr><name>b</name><operator>%</operator><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>x1</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><operator>*</operator><name>x</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <operator>(</operator><name>b</name><operator>/</operator><name>a</name><operator>)</operator><operator>*</operator><name>x1</name></expr>;</expr_stmt><expr_stmt><expr><operator>*</operator><name>y</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt><return>return <expr><name>gcd1</name></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>randomize</name><parameter_list>()</parameter_list><block>{<return>return <expr><operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">10000</literal><operator>)</operator></expr>;</return>}</block></function> 

<comment type="line">// CODE STARTS HERE</comment>

<function><type><name>int</name></type> <name>fun</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>a</name><operator>%</operator><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>a</name><operator>/</operator><name>c</name></expr> </then><else>: <expr><name>a</name><operator>/</operator><name>c</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>IOS</name>

    <name>int</name></type> <name>t</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl> ;</decl_stmt><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name>fun</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fun</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>fun</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator><literal type="string">" "</literal> <operator>&lt;&lt;</operator> <call><name>fun</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
