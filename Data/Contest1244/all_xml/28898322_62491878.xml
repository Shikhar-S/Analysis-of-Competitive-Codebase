<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28898322_62491878.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name><init>=<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>answ</name><init>=<expr><name>inf</name></expr></init></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pre</name><index>[<expr><name>maxn</name></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name><name>suf</name><index>[<expr><name>maxn</name></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>pre</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>suf</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>suf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>rem</name><init>=<expr><name>k</name><operator>-</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name>i</name><operator>-</operator><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>rem</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><name>i</name></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>)</condition><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name><name>suf</name><index>[<expr><name>mid</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>mid</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;=</operator><name>rem</name></expr>)</condition><then><block>{<expr_stmt><expr><name>ans</name><operator>=</operator><name>mid</name></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		}</block></while><decl_stmt><decl><type><name>ll</name></type> <name>opt</name><init>=<expr><name>rem</name><operator>-</operator><operator>(</operator><name><name>suf</name><index>[<expr><name>ans</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>ans</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>ans</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>answ</name><operator>=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>answ</name></expr></argument>,<argument><expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>ans</name></expr>]</index></name><operator>-</operator><name>opt</name><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>ans</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>rem</name><init>=<expr><name>k</name><operator>-</operator><operator>(</operator><name><name>suf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>rem</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>i</name></expr></init></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>)</condition><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<comment type="line">//	printf("checking:(%d-%d)%d -&gt; %lld - %lld\n",l,r,mid,a[mid]*mid,pre[mid]);</comment>
			<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name><operator>*</operator><name>mid</name><operator>-</operator><name><name>pre</name><index>[<expr><name>mid</name></expr>]</index></name><operator>&lt;=</operator><name>rem</name></expr>)</condition><then><block>{<expr_stmt><expr><name>ans</name><operator>=</operator><name>mid</name></expr>;</expr_stmt><expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
		}</block></while><comment type="line">//printf("&gt;%d\n",ans);</comment>
		<decl_stmt><decl><type><name>ll</name></type> <name>opt</name><init>=<expr><name>rem</name><operator>-</operator><operator>(</operator><name><name>a</name><index>[<expr><name>ans</name></expr>]</index></name><operator>*</operator><name>ans</name><operator>-</operator><name><name>pre</name><index>[<expr><name>ans</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>answ</name><operator>=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>answ</name></expr></argument>,<argument><expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><operator>(</operator><name>opt</name><operator>/</operator><operator>(</operator><name>ans</name><operator>)</operator><operator>+</operator><name><name>a</name><index>[<expr><name>ans</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name>answ</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
