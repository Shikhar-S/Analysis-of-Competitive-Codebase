<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28910354_62484690.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><specifier>constexpr</specifier> <type><name>auto</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100000</literal><operator>+</operator><literal type="number">50</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>order</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>G</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>Calc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type> <name>nowAt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type> <name>fa</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>currentOrd</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><block>{
    <for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>it</name> <range>: <expr><name><name>G</name><index>[<expr><name>nowAt</name></expr>]</index></name></expr></range></decl></init>)</control>
	<block type="pseudo"><if>if<condition>(<expr><name>it</name> <operator>!=</operator> <name>fa</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>cost</name><index>[<expr><name><name>order</name><index>[<expr><name>currentOrd</name></expr>]</index></name></expr>]</index><index>[<expr><name>nowAt</name></expr>]</index></name> <operator>+</operator> <call><name>Calc</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name>nowAt</name></expr></argument>,<argument><expr><operator>(</operator><name>currentOrd</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if></block></for>
    <return>return <expr><name><name>cost</name><index>[<expr><name><name>order</name><index>[<expr><name>currentOrd</name></expr>]</index></name></expr>]</index><index>[<expr><name>nowAt</name></expr>]</index></name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>out</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>OutPut</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type> <name>nowAt</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type> <name>fa</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>currentOrd</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name><name>out</name><index>[<expr><name>nowAt</name></expr>]</index></name> <operator>=</operator> <name><name>order</name><index>[<expr><name>currentOrd</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>it</name> <range>: <expr><name><name>G</name><index>[<expr><name>nowAt</name></expr>]</index></name></expr></range></decl></init>)</control>
	<block type="pseudo"><if>if<condition>(<expr><name>it</name> <operator>!=</operator> <name>fa</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>OutPut</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name>nowAt</name></expr></argument>,<argument><expr><operator>(</operator><name>currentOrd</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>totVertex</name></decl>,<decl><type ref="prev"/><name>st</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>totVertex</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>color</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>color</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>color</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>for_each</name></name><argument_list>(<argument><expr><name><name>cost</name><index>[<expr><name>color</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>cost</name><index>[<expr><name>color</name></expr>]</index></name><operator>+</operator><name>totVertex</name></expr></argument>,<argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl/></parameter></parameter_list>auto<ref_qualifier>&amp;</ref_qualifier> <name>it</name></lambda></expr></argument>)</argument_list></call><block>{ <expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>it</name></expr>; }</block></expr></expr_stmt></block></for>)</block>;</function>

    <decl_stmt><decl><type><name>int</name></type> <name>fr</name></decl>,<decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>totVertex</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>fr</name><operator>&gt;&gt;</operator><name>to</name></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator><name>fr</name></expr>;</expr_stmt><expr_stmt><expr><operator>--</operator><name>to</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>G</name><index>[<expr><name>fr</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>G</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>totVertex</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
	<if>if<condition>(<expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>st</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
	    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
    }</block></for>

    <comment type="line">//std::cout&lt;&lt;st&lt;&lt;std::endl;</comment>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>min</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>,<decl><type ref="prev"/><name>ts</name></decl>,<decl><type ref="prev"/><name><name>od</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	    <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><name>k</name> <operator>&amp;&amp;</operator> <name>j</name><operator>!=</operator><name>k</name></expr>)</condition><then><block>{
		    <expr_stmt><expr><name><name>order</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
		    
		    <expr_stmt><expr><name>ts</name> <operator>=</operator> <call><name>Calc</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		    <if>if<condition>(<expr><name>ts</name> <operator>&lt;</operator> <name>min</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>min</name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>od</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>order</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		    }</block></then></if>
		}</block></then></if></block></for></block></for></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>order</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>od</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>OutPut</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name>min</name><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>for_each</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>,<argument><expr><name>out</name><operator>+</operator><name>totVertex</name></expr></argument>,<argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <specifier>auto</specifier><modifier>&amp;</modifier></type> <name>it</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name>it</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt> }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}
</unit>
