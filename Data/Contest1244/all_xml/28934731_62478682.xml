<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934731_62478682.cpp"><comment type="line" format="doxygen">/// Radoslaw Mysliwiec 2019</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using>using <name>vi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pi</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pll</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>was</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><name>p</name><operator>%</operator><name>w</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>mod</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <if>if <condition>(<expr><name>p</name><operator>/</operator><name>w</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>p</name><operator>/</operator><name>w</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>n</name><operator>-</operator><operator>(</operator><name>p</name><operator>/</operator><name>w</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
    }</block></then>
    <else>else <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ilosc_draw</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>!</operator><name><name>was</name><index>[<expr><operator>(</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name>ilosc_draw</name><operator>*</operator><name>d</name><operator>)</operator> <operator>)</operator> <operator>%</operator> <name>w</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>ilosc_draw</name><operator>*</operator><name>d</name> <operator>&lt;=</operator> <name>p</name></expr>)</condition><block>{

            <expr_stmt><expr><name><name>was</name><index>[<expr><operator>(</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name>ilosc_draw</name><operator>*</operator><name>d</name><operator>)</operator> <operator>)</operator> <operator>%</operator> <name>w</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <if>if <condition>(<expr><operator>(</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name>ilosc_draw</name><operator>*</operator><name>d</name><operator>)</operator> <operator>)</operator> <operator>%</operator> <name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>ilosc_win</name> <init>= <expr><operator>(</operator><operator>(</operator> <name>p</name> <operator>-</operator> <operator>(</operator><name>ilosc_draw</name><operator>*</operator><name>d</name><operator>)</operator> <operator>)</operator> <operator>/</operator> <name>w</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>ilosc_draw</name> <operator>+</operator> <name>ilosc_win</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ilosc_win</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>ilosc_draw</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>ilosc_win</name> <operator>-</operator> <name>ilosc_draw</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><operator>++</operator><name>ilosc_draw</name></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></else></if>


}</block></function>
</unit>
