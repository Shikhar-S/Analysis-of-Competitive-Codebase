<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926837_62488244.cpp"><comment type="line">// clang-format off</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string_view&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;variant&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;optional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;valarray&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;csignal&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstddef&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NDEBUG</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;exception&gt;</cpp:file></cpp:include>

<comment type="line">// &lt;&lt; pair</comment>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"("</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="string">", "</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><literal type="string">")"</literal></expr>;</return>}</block></function>
<comment type="line">// &lt;&lt; container</comment>
<struct><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type></parameter>,<parameter><type><template>template<parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type></parameter>&gt;</parameter_list></template> <name>class</name></type><parameter><type><modifier>...</modifier></type></parameter></parameter>&gt;</parameter_list></template>struct <name>is_instantiation_of</name><super>:<specifier>public</specifier> <name><name>std</name><operator>::</operator><name>false_type</name></name></super><block>{<public type="default"/>}</block>;</struct>
<struct><template>template<parameter_list>&lt;<parameter><type><template>template<parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type></parameter>&gt;</parameter_list></template><name>class</name></type> <name>U</name></parameter>,<parameter><type><template>template<parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type></parameter>&gt;</parameter_list></template><name>class</name></type><parameter><type><modifier>...</modifier></type><name>Us</name></parameter></parameter>,<parameter><type><name>typename</name><modifier>...</modifier></type><name>T</name></parameter>&gt;</parameter_list></template>struct <name><name>is_instantiation_of</name><argument_list type="generic">&lt;<argument><expr><name><name>U</name><argument_list type="generic">&lt;<argument><expr><name>T</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>U</name></expr></argument>,<argument><expr><name>Us</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><super>:<specifier>public</specifier> <name><name>std</name><operator>::</operator><name>true_type</name></name></super><block>{<public type="default"/>}</block>;</struct>
<struct><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>S</name></parameter>,<parameter><type><template>template<parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type></parameter>&gt;</parameter_list></template><name>class</name></type> <name>U</name></parameter>,<parameter><type><template>template<parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type></parameter>&gt;</parameter_list></template><name>class</name><modifier>...</modifier></type><name>Us</name></parameter>&gt;</parameter_list></template>struct <name><name>is_instantiation_of</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>U</name></expr></argument>,<argument><expr><name>Us</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><super>:<name><name>std</name><operator>::</operator><name><name>bool_constant</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_instantiation_of</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>,<argument><expr><name>Us</name><modifier>...</modifier></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>&gt;</argument_list></name></name></super><block>{<public type="default"/>}</block>;</struct>

<function_decl><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>C</name></parameter>&gt;</parameter_list></template><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type><name>_debug_go</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>C</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>C</name></parameter>,<parameter><type><name>typename</name></type><init>=<expr><name><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_instantiation_of</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>vector</name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>deque</name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>set</name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>map</name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>unordered_set</name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>unordered_map</name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>multiset</name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>multimap</name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>unordered_multiset</name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>unordered_multimap</name></name></expr></argument>,<argument><expr><name><name>std</name><operator>::</operator><name>valarray</name></name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>&gt;</argument_list></name></name></expr></init></parameter>&gt;</parameter_list></template><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>C</name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>_debug_go</name><argument_list>(<argument><expr><name>os</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name><name>std</name><operator>::</operator><name>size_t</name></name></type> <name>N</name></parameter>&gt;</parameter_list></template> <type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>N</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>_debug_go</name><argument_list>(<argument><expr><name>os</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>C</name></parameter>&gt;</parameter_list></template><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>_debug_go</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>C</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>bool</name></type> <name>first</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"["</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>v</name></expr></range></decl></init>)</control><block>{<if>if<condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">", "</literal></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name>first</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></else></if><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><name>i</name></expr>;</expr_stmt>}</block></for><return>return <expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"]"</literal></expr>;</return>}</block></function>

<struct>struct <name>Debugger</name><block>{<public type="default"><function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>Debugger</name><modifier>&amp;</modifier></type><name>operator<name>,</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name><operator>&lt;&lt;</operator><name>v</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt><return>return <expr><operator>*</operator><name>this</name></expr>;</return>}</block></function></public>}</block> <decl><name>dbg</name></decl>;</struct>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {dbg,args; cerr &lt;&lt; "\n";} while(0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a); i &lt; (b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR(i, 0, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITER</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto i((s)); i != (e); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IT</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ITER(i, (c).begin(), (c).end())</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>ui</name> <init>= <type><name>uint32_t</name></type></init>;</using>
<using>using <name>ll</name> <init>= <type><name>int64_t</name></type></init>;</using>
<using>using <name>ull</name> <init>= <type><name>uint64_t</name></type></init>;</using>
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name> <init>= <expr><name>int</name></expr></init></parameter>&gt;</parameter_list></template> using <name>Pt</name> <init>= <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>T</name></type> <name>cross</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Pt</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Pt</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>a</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>b</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call> <operator>-</operator> <call><name><name>a</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call> <operator>*</operator> <call><name><name>b</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>cmpPt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>Pt</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>Pt</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><call><name><name>a</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>b</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><call><name><name>a</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>b</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>b</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call><operator>)</operator></expr>;</return>
}</block></function>
<comment type="line">// END TEMPLATE</comment>
<comment type="line">// clang-format on</comment>

<decl_stmt><decl><specifier>constexpr</specifier> <type><name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>C</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>c</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>E</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>N - <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>--</operator><name>u</name></expr><operator>,</operator> <expr><operator>--</operator><name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>E</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>E</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>leaves</name></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>u</argument>, <argument>N</argument>)</argument_list></macro> <block>{
    <if>if <condition>(<expr><name><name>E</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then> <elseif>else <if>if <condition>(<expr><name><name>E</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>leaves</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
  }</block>
  <if>if <condition>(<expr><call><name><name>leaves</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>ll</name></type> <name>best</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>bestCs</name></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>c0</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>d</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>leaves</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><name>c0</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vis</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>Cs</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition> <block>{
      <expr_stmt><expr><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>Cs</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>C</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>v</name> <range>: <expr><name><name>E</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>u</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block></then></if></block></for>
    }</block></while>
    <if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <name>best</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>best</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>bestCs</name> <operator>=</operator> <name>Cs</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>best</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  <macro><name>REP</name><argument_list>(<argument>u</argument>, <argument>N</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>bestCs</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
