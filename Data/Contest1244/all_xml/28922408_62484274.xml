<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28922408_62484274.cpp"><comment type="block">/*----------------
     Smit Patel
     DA-IICT
----------------*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">// #include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">// #include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
<comment type="line">// using namespace __gnu_pbds;</comment>
<comment type="line">// #define ordered_set tree&lt;int, null_type,less&lt;int&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;</comment>
<comment type="line">// #define ordered_set tree&lt;int, null_type,less_equal&lt;int&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ins</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fori</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a; i&lt;n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ford</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a; i&gt;n; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,b,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>deb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" : "&lt;&lt;x&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" : "&lt;&lt;x&lt;&lt;"\t"&lt;&lt;#y&lt;&lt;" : "&lt;&lt;y&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.rbegin(),v.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bp</name></cpp:macro> <cpp:value>__builtin_popcount</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>infi</name></cpp:macro> <cpp:value>1000000002</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>infll</name></cpp:macro> <cpp:value>1e18+5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>200005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LN</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>mll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>sll</name>;</typedef>

<function_decl><type><name>ll</name></type> <name>choose</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>isprime</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>vll</name></type> <name><name>adj</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vll</name></type> <name>v</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>vis</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control>
  <block>{
    <if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>it</name></expr>]</index></name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
  <macro><name>fori</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
  <block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block>
  <macro><name>fori</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
  <block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block>
  <macro><name>fori</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
  <block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block>
  <macro><name>fori</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
  <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>adj</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>adj</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <decl_stmt><decl><type><name>ll</name></type> <name>fl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>tmp</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <macro><name>fori</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
  <block>{
    <if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>tmp</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fl</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
  }</block>
  <if>if<condition>(<expr><name>fl</name> <operator>||</operator> <name>tmp</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>string</name></type> <name>s</name><init>=<expr><literal type="string">"123"</literal></expr></init></decl>,<decl><type ref="prev"/><name>ansss</name><init>=<expr><literal type="string">"123"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><name>LLONG_MAX</name></expr></init></decl>;</decl_stmt>
  <macro><name>fori</name><argument_list>(<argument>tt</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro>
  <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>fori</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>v.size()</argument>)</argument_list></macro>
    <block>{
      <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name>cnt</name><operator>+=</operator><name><name>a</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      }</block></then>
      <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>==</operator><literal type="char">'2'</literal></expr>)</condition><then>
      <block>{
        <expr_stmt><expr><name>cnt</name><operator>+=</operator><name><name>b</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      }</block></then></if></elseif>
      <else>else
      <block>{
        <expr_stmt><expr><name>cnt</name><operator>+=</operator><name><name>c</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      }</block></else></if>
    }</block>
    <if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name>cnt</name></expr>)</condition><then>
    <block>{
      <expr_stmt><expr><name>ans</name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ansss</name><operator>=</operator><name>s</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>next_permutation</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name><name>arr</name><index>[<expr><name>N</name></expr>]</index></name><init>=<expr><block>{}</block></expr></init></decl>;</decl_stmt>
  <macro><name>fori</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>v.size()</argument>)</argument_list></macro>
  <block>{
    <expr_stmt><expr><name><name>arr</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>ansss</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
  }</block>
  <macro><name>fori</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
  <block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
  }</block>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
  <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>choose</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
  <if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <return>return <expr><operator>(</operator><name>n</name><operator>*</operator> <call><name>choose</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>/</operator><name>k</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>isprime</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
  <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{
    <if>if<condition>(<expr><name>n</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
      <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
  }</block></for>
  <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>%</operator><name>p</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
  <block>{
    <if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>p</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>p</name></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
  <block>{
    <if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name>x</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>y</name><operator>=</operator><name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><name>x</name></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>
</unit>
