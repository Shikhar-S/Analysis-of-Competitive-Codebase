<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934897_62465492.cpp"><comment type="line">//Ñ¹ï¿½Ð¿Î´ï¿½</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>sss</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>fff</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ccc</name></decl>;</decl_stmt><expr_stmt><expr><name>ccc</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt><while>while<condition>(<expr><name><name>ccc</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ccc</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>ccc</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>fff</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ccc</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><while>while<condition>(<expr><name>ccc</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ccc</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>sss</name><operator>=</operator><operator>(</operator><name>sss</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>sss</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>ccc</name><operator>^</operator><literal type="char">'0'</literal><operator>)</operator></expr><operator>,</operator><expr><name>ccc</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while><return>return <expr><name>sss</name><operator>*</operator><name>fff</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if><expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>%</operator><literal type="number">10</literal><operator>)</operator><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>wri</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>c</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>k</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ansa</name><init>=<expr><operator>(</operator><name>a</name><operator>/</operator><name>c</name><operator>)</operator></expr></init></decl>,<decl><type ref="prev"/><name>ansb</name><init>=<expr><operator>(</operator><name>b</name><operator>/</operator><name>d</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>a</name><operator>%</operator><name>c</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ansa</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>b</name><operator>%</operator><name>d</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ansb</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>ansa</name><operator>+</operator><name>ansb</name><operator>&gt;</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name>ansa</name></expr></argument>,<argument><expr><name>ansb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//	freopen("123.in","r",stdin);</comment>
<comment type="line">//	freopen("123.out","w",stdout);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>T</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
