<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28892801_62478793.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>gcd</name> <init>= <expr><call><name>__gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>yes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><operator>(</operator><name>p</name> <operator>-</operator> <name>d</name><operator>*</operator><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>d</name><operator>*</operator><name>i</name><operator>)</operator><operator>%</operator><name>w</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>d</name><operator>*</operator><name>i</name><operator>)</operator><operator>/</operator><name>w</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>yes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>

            }</block></then></if>
        }</block></for>

        <if>if<condition>(<expr><name>yes</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>



    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
