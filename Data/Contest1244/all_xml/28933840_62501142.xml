<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933840_62501142.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>


<function><name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>OW</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>OB</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pos_finish</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pos_finish</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>pos_finish</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>pos_finish</name></expr>;</expr_stmt></block></while>
    <if>if <condition>(<expr><name>pos_finish</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <while>while <condition>(<expr><name>pos2</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>pos_finish</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>pos2</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>pos2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>pos2</name></expr>;</expr_stmt></block></while>
    <if>if <condition>(<expr><operator>(</operator><name>n</name> <operator>-</operator> <name>pos_finish</name><operator>)</operator> <operator>+</operator> <name>pos2</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>OW</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>pos_finish</name> <operator>%</operator> <name>n</name></expr>, <expr><name>pos2</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>OB</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>pos_finish</name> <operator>%</operator> <name>n</name></expr>, <expr><name>pos2</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></then></if>
    <expr_stmt><expr><name>pos1</name> <operator>=</operator> <name>pos2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>pos2</name><operator>++</operator></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>pos1</name> <operator>&lt;</operator> <name>pos_finish</name></expr>)</condition> <block>{
        <while>while <condition>(<expr><name>pos2</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>pos_finish</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>pos2</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>pos2</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>pos2</name></expr>;</expr_stmt></block></while>
        <if>if <condition>(<expr><name>pos2</name> <operator>-</operator> <name>pos1</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>pos1</name></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>OW</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>pos1</name></expr>, <expr><name>pos2</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>OB</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>pos1</name></expr>, <expr><name>pos2</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></then></if>
        <expr_stmt><expr><name>pos2</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos1</name> <operator>=</operator> <name>pos2</name></expr>;</expr_stmt>
    }</block></while>
    <decl_stmt><decl><type><name>int</name></type> <name><name>type</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>OW</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>OW</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</init> <condition><expr><name>pos</name> <operator>!=</operator> <name><name>OW</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</condition> <incr><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>type</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>type</name><index>[<expr><name><name>OW</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>OB</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><name><name>OB</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</init> <condition><expr><name>pos</name> <operator>!=</operator> <name><name>OB</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</condition> <incr><expr><name>pos</name> <operator>=</operator> <operator>(</operator><name>pos</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>type</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>type</name><index>[<expr><name><name>OB</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>left</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>right</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>pre</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>type</name><index>[<expr><name>i</name> <operator>%</operator> <name>n</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pre</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>pre</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name> <operator>%</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name><name>type</name><index>[<expr><name>pre</name> <operator>%</operator> <name>n</name></expr>]</index></name></expr>, <expr><name>i</name> <operator>-</operator> <name>pre</name></expr>}</block></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>pre</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>type</name><index>[<expr><name>i</name> <operator>%</operator> <name>n</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pre</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>pre</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>right</name><index>[<expr><name>i</name> <operator>%</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name><name>type</name><index>[<expr><name>pre</name> <operator>%</operator> <name>n</name></expr>]</index></name></expr>, <expr><name>pre</name> <operator>-</operator> <name>i</name></expr>}</block></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>mini_1</name> <init>= <expr><name>inf</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>mini_2</name> <init>= <expr><name>inf</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>mini_1</name> <operator>=</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>mini_2</name> <operator>=</operator> <name><name>right</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><call><name>min</name><argument_list>(<argument><expr><name>mini_1</name></expr></argument>, <argument><expr><name>mini_2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>cur_col</name> <init>= <expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>cur_col</name> <operator>=</operator> <operator>(</operator><name>cur_col</name> <operator>+</operator> <name>k</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>cur_col</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'B'</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'W'</literal></expr>;</expr_stmt></block></else></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>tip</name>  <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>mini_1</name> <operator>&lt;</operator> <name>mini_2</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tip</name> <operator>=</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>tip</name> <operator>=</operator> <name><name>right</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt></block></else></if>
            <if>if <condition>(<expr><name>tip</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'W'</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'B'</literal></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
