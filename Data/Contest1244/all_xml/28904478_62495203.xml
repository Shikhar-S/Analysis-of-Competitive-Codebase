<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28904478_62495203.cpp"><comment type="line">//  Mayank Agarwal</comment>
<comment type="line">//  IIIT Hyderabad</comment>



<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>,  <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> 
<block>{ 
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>      
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>%</operator> <name>p</name></expr>;</expr_stmt>   
    <while>while <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 
    <block>{ 
        <if>if <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> 
            <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name><operator>*</operator><name>x</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt></block></then></if> 
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt> 
    }</block></while> <return>return <expr><name>res</name><operator>%</operator><name>p</name></expr>;</return> 
}</block></function> 
<function><type><name>ll</name></type> <name>modinver</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><call><name>power</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call><operator>*</operator><call><name>power</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>M</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>M</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>SieveOfEratosthenes</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> 
<block>{   
    <decl_stmt><decl><type><name>bool</name></type> <name><name>prime</name><index>[<expr><literal type="number">10005</literal></expr>]</index></name></decl>;</decl_stmt> 
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>prime</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>prime</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  
    <for>for <control>(<init><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>p</name><operator>*</operator><name>p</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> 
    <block>{ 
        <if>if <condition>(<expr><name><name>prime</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then> 
        <block>{ 
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>p</name><operator>*</operator><name>p</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>p</name></expr></incr>)</control> 
                <block type="pseudo"><expr_stmt><expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></for> 
        }</block></then></if> 
    }</block></for> 
}</block></function>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>v1</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></type> <name>ver</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>fl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>par</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name><name>v1</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>fl</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<comment type="line">// cout&lt;&lt;x&lt;&lt;'\n';</comment>
	<expr_stmt><expr><call><name><name>ver</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>v1</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>v1</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>par</name></expr>)</condition><then>
		<block>{
			<comment type="line">// cout&lt;&lt;v[x][i]&lt;&lt;'\n';</comment>
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>v1</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<return>return;</return>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">100002</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>;</decl_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
   <block>{
   	<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>;</decl_stmt>
   	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
   }</block></for>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
   <block>{
   	<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>;</decl_stmt>
   	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
   	<comment type="line">// b.pb(x);</comment>
   }</block></for>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
   <block>{
   	<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>;</decl_stmt>
   	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
   	<comment type="line">// c.pb(x);</comment>
   }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>v1</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>v1</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
    	<if>if<condition>(<expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
    	<block>{
    		<comment type="line">// cout&lt;&lt;i&lt;&lt;" ";</comment>
    		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		<break>break;</break>
    	}</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>fl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    	<return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>v</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">// for (int i = 0; i &lt; 6; ++i)</comment>
    <comment type="line">// {</comment>
    <comment type="line">// 	v[1]</comment>
    <comment type="line">// }</comment>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>min</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>,<decl><type ref="prev"/><name>index</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator><literal type="number">7</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>kk</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>ll</name></type> <name>tot</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	<comment type="line">// cout&lt;&lt;i&lt;&lt;'\n';</comment>
    	<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <call><name><name>ver</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
    	<block>{
    		<comment type="line">// cout&lt;&lt;v[i][kk]&lt;&lt;" "&lt;&lt;ver[j]&lt;&lt;'\n';</comment>
    		<if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>kk</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
    		<block>{
    			<expr_stmt><expr><name>tot</name><operator>+=</operator><name><name>a</name><index>[<expr><name><name>ver</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    		}</block></then>
    		<elseif>else <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>kk</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
    		<block>{
    			<expr_stmt><expr><name>tot</name><operator>+=</operator><name><name>b</name><index>[<expr><name><name>ver</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    		}</block></then></if></elseif>
    		<else>else
    		<block>{
    			<expr_stmt><expr><name>tot</name><operator>+=</operator><name><name>c</name><index>[<expr><name><name>ver</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    		}</block></else></if>
    		<expr_stmt><expr><name>kk</name><operator>++</operator></expr>;</expr_stmt>
    		<expr_stmt><expr><name>kk</name><operator>=</operator><name>kk</name><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
    	}</block></for>
    	<comment type="line">// cout&lt;&lt;tot&lt;&lt;'\n';</comment>
    	<if>if<condition>(<expr><name>tot</name><operator>&lt;</operator><name>min</name></expr>)</condition><then>
    	<block>{
    		<expr_stmt><expr><name>min</name><operator>=</operator><name>tot</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>index</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    	}</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>min</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>col</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>kk</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ver</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
    	<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>ver</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>kk</name></expr>]</index></name></expr>;</expr_stmt>
    	<expr_stmt><expr><name>kk</name><operator>++</operator></expr>;</expr_stmt>
    	<expr_stmt><expr><name>kk</name><operator>=</operator><name>kk</name><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    <comment type="line">// dp[ver[0]][1][0]=a[ver[0]];</comment>
    <comment type="line">// dp[ver[0]][2][0]=b[ver[0]];</comment>
    <comment type="line">// dp[ver[0]][3][0]=c[ver[0]];</comment>
    <comment type="line">// dp[ver[1]][1][2]=a[ver[1]]+b[ver[0]];</comment>
    <comment type="line">// dp[ver[1]][1][3]=a[ver[1]]+c[ver[0]];</comment>
    <comment type="line">// cout&lt;&lt;ver[0]&lt;&lt;'\n';</comment>
    <comment type="line">// cout&lt;&lt;dp[ver[1]][1][3]&lt;&lt;" "&lt;&lt;ver[1]&lt;&lt;'\n';</comment>
    <comment type="line">// dp[ver[1]][2][1]=b[ver[1]]+a[ver[0]];</comment>
    <comment type="line">// dp[ver[1]][2][3]=b[ver[1]]+c[ver[0]];</comment>
    <comment type="line">// dp[ver[1]][3][1]=c[ver[0]]+a[ver[1]];</comment>
    <comment type="line">// dp[ver[1]][3][2]=c[ver[0]]+b[ver[1]];</comment>
    <comment type="line">// for (int i = 2; i &lt; ver.size(); ++i)</comment>
    <comment type="line">// {</comment>
    <comment type="line">// 	dp[ver[i]][1][2]=dp[ver[i-1]][2][3]+a[ver[i]];</comment>
    <comment type="line">// 	dp[ver[i]][1][3]=dp[ver[i-1]][3][2]+a[ver[i]];</comment>
    <comment type="line">// 	dp[ver[i]][2][1]=dp[ver[i-1]][1][3]+b[ver[i]];</comment>
    <comment type="line">// 	dp[ver[i]][2][3]=dp[ver[i-1]][3][1]+b[ver[i]];</comment>
    <comment type="line">// 	dp[ver[i]][3][1]=dp[ver[i-1]][1][2]+c[ver[i]];</comment>
    <comment type="line">// 	dp[ver[i]][3][2]=dp[ver[i-1]][2][1]+c[ver[i]];</comment>
    <comment type="line">// }</comment>
    <comment type="line">// cout&lt;&lt;dp[ver[ver.size()-1]][1][3]&lt;&lt;'\n';</comment>
    <comment type="line">// cout&lt;&lt;min({dp[ver[ver.size()-1]][1][2],dp[ver[ver.size()-1]][1][3],dp[ver[ver.size()-1]][2][1],dp[ver[ver.size()-1]][2][3],dp[ver[ver.size()-1]][3][1],dp[ver[ver.size()-1]][3][2]});</comment>
}</block></function>
</unit>
