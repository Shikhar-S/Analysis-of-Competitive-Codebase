<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28914567_62482574.cpp"><comment type="line">//#include&lt;bits/stdc++.h&gt;</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pub</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pob</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>puf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pof</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>i</name></type></parameter> , <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = 0 ; i &lt; n ; i++)</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl> ;</decl_stmt>

<function><type><name>ll</name></type> <name>updatel</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>l_ind</name></decl></parameter> , <parameter><decl><type><name>ll</name></type> <name><name>arr</name><index>[]</index></name></decl></parameter> ,<parameter><decl><type><name>ll</name></type> <name>r_ind</name></decl></parameter>)</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><name>l_ind</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>r_ind</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>arr</name><index>[<expr><name>l_ind</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>l_ind</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><break>break ;</break></block></else></if>
	}</block></for>
	<return>return <expr><name>l_ind</name></expr> ;</return>
}</block></function>

<function><type><name>ll</name></type> <name>updater</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>r_ind</name></decl></parameter> , <parameter><decl><type><name>ll</name></type> <name><name>arr</name><index>[]</index></name></decl></parameter> ,<parameter><decl><type><name>ll</name></type> <name>l_ind</name></decl></parameter>)</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><name>r_ind</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name>l_ind</name></expr> ;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>arr</name><index>[<expr><name>r_ind</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>r_ind</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><break>break ;</break></block></else></if>
	}</block></for>
	<return>return <expr><name>r_ind</name></expr> ;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>k</name></decl> ;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr> ;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>arr</name><index>[<expr><name>n</name></expr>]</index></name></decl> ;</decl_stmt>
	<macro><name>fo</name><argument_list>(<argument>i</argument> , <argument>n</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
	}</block>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>arr</name></expr></argument> , <argument><expr><name>arr</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>l_ind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> , <decl><type ref="prev"/><name>r_ind</name> <init>= <expr><operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl> , <decl><type ref="prev"/><name>r</name></decl> ;</decl_stmt>
	<expr_stmt><expr><name>l_ind</name> <operator>=</operator> <call><name>updatel</name><argument_list>(<argument><expr><name>l_ind</name></expr></argument> , <argument><expr><name>arr</name></expr></argument> , <argument><expr><name>r_ind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><name>r_ind</name> <operator>=</operator> <call><name>updater</name><argument_list>(<argument><expr><name>r_ind</name></expr></argument> , <argument><expr><name>arr</name></expr></argument> , <argument><expr><name>l_ind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<while>while<condition>(<expr><name>l_ind</name> <operator>!=</operator> <name>r_ind</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{
	    <comment type="line">//cout &lt;&lt; "l_ind = " &lt;&lt; l_ind &lt;&lt; "  r_ind = " &lt;&lt; r_ind ;</comment>
		<expr_stmt><expr><name>l</name> <operator>=</operator> <name>l_ind</name> <operator>+</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>r_ind</name></expr> ;</expr_stmt>
		<comment type="line">//cout &lt;&lt; "  l = " &lt;&lt; l &lt;&lt; "   r = " &lt;&lt; r &lt;&lt; endl ;</comment>
		<if>if<condition>(<expr><name>l</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>diff</name> <init>= <expr><name><name>arr</name><index>[<expr><name>l_ind</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>l_ind</name></expr>]</index></name></expr></init></decl> ;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>change</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>diff</name></expr></argument> , <argument><expr><name>k</name><operator>/</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
			<expr_stmt><expr><name><name>arr</name><index>[<expr><name>l_ind</name></expr>]</index></name> <operator>+=</operator> <name>change</name></expr> ;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name>change</name> <operator>*</operator> <name>l</name><operator>)</operator></expr> ;</expr_stmt>
			<comment type="line">//cout &lt;&lt; "diff = " &lt;&lt; diff &lt;&lt; "  change = " &lt;&lt; change &lt;&lt; endl ;</comment>
			<if>if<condition>(<expr><name>change</name> <operator>==</operator> <name>diff</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>l_ind</name> <operator>=</operator> <call><name>updatel</name><argument_list>(<argument><expr><name>l_ind</name></expr></argument> , <argument><expr><name>arr</name></expr></argument> , <argument><expr><name>r_ind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><break>break ;</break></block></else></if>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>diff</name> <init>= <expr><name><name>arr</name><index>[<expr><name>r_ind</name></expr>]</index></name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>r_ind</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>change</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>diff</name></expr></argument> , <argument><expr><name>k</name><operator>/</operator><name>r</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
			<expr_stmt><expr><name><name>arr</name><index>[<expr><name>r_ind</name></expr>]</index></name> <operator>-=</operator> <name>change</name></expr> ;</expr_stmt>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name>change</name> <operator>*</operator> <name>r</name><operator>)</operator></expr> ;</expr_stmt>
			<comment type="line">//cout &lt;&lt; "diff = " &lt;&lt; diff &lt;&lt; "  change = " &lt;&lt; change &lt;&lt; endl ;</comment>
			<if>if<condition>(<expr><name>change</name> <operator>==</operator> <name>diff</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>r_ind</name> <operator>=</operator> <call><name>updater</name><argument_list>(<argument><expr><name>r_ind</name></expr></argument> , <argument><expr><name>arr</name></expr></argument> , <argument><expr><name>l_ind</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then>
			<else>else
				<block type="pseudo"><break>break ;</break></block></else></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>arr</name><index>[<expr><name>r_ind</name></expr>]</index></name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>l_ind</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
