<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28906422_62485778.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #a &lt;&lt; ": " &lt;&lt; a &lt;&lt; endl</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cost</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>printAns</name><parameter_list>()</parameter_list> <block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"out"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>

	<decl_stmt><decl><type><name>int</name></type> <name>leaf</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>leaf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>leaf</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>leaf</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>adj</name><index>[<expr><name>leaf</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
	}</block></for>

	<decl_stmt><decl><type><name>int</name></type> <name>adjLeaf</name> <init>= <expr><name><name>adj</name><index>[<expr><name>leaf</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>colLeaf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>colLeaf</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>colLeaf</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>colAdjLeaf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>colAdjLeaf</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>colAdjLeaf</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>totCost</name> <init>= <expr><name><name>dp</name><index>[<expr><name>colLeaf</name></expr>]</index><index>[<expr><name>colAdjLeaf</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>totCost</name> <operator>=</operator> <name>LLONG_MAX</name></expr>;</expr_stmt>

			<if>if <condition>(<expr><name>colLeaf</name> <operator>==</operator> <name>colAdjLeaf</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

			<expr_stmt><expr><name>totCost</name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>leaf</name></expr>]</index><index>[<expr><name>colLeaf</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>adjLeaf</name></expr>]</index><index>[<expr><name>colAdjLeaf</name></expr>]</index></name></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name><name>prevCol</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>colLeaf</name></expr>, <expr><name>colAdjLeaf</name></expr>}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>prevAt</name> <init>= <expr><name>adjLeaf</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>currAt</name> <init>= <expr><name><name>adj</name><index>[<expr><name>adjLeaf</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>adj</name><index>[<expr><name>adjLeaf</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>leaf</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>visited</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal> <operator>^</operator> <literal type="number">1</literal> <operator>^</operator> <literal type="number">2</literal> <operator>^</operator> <name><name>prevCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>prevCol</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>totCost</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><name>currAt</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>

				<expr_stmt><expr><name>visited</name><operator>++</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>visited</name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>

				<expr_stmt><expr><name><name>prevCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prevCol</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>prevCol</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

				<decl_stmt><decl><type><name>int</name></type> <name>nxtAt</name> <init>= <expr><name><name>adj</name><index>[<expr><name>currAt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>adj</name><index>[<expr><name>currAt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>prevAt</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>prevAt</name> <operator>=</operator> <name>currAt</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>currAt</name> <operator>=</operator> <name>nxtAt</name></expr>;</expr_stmt>
			}</block></while>
		}</block></for>
	}</block></for>

	<decl_stmt><decl><type><name>ll</name></type> <name>minCost</name> <init>= <expr><operator>*</operator><call><name>min_element</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>minCost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>colLeaf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>colLeaf</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>colLeaf</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>colAdjLeaf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>colAdjLeaf</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>colAdjLeaf</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>colLeaf</name></expr>]</index><index>[<expr><name>colAdjLeaf</name></expr>]</index></name> <operator>&gt;</operator> <name>minCost</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

			<expr_stmt><expr><name><name>ans</name><index>[<expr><name>leaf</name></expr>]</index></name> <operator>=</operator> <name>colLeaf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ans</name><index>[<expr><name>adjLeaf</name></expr>]</index></name> <operator>=</operator> <name>colAdjLeaf</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name><name>prevCol</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>colLeaf</name></expr>, <expr><name>colAdjLeaf</name></expr>}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>prevAt</name> <init>= <expr><name>adjLeaf</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>currAt</name> <init>= <expr><name><name>adj</name><index>[<expr><name>adjLeaf</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>adj</name><index>[<expr><name>adjLeaf</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>leaf</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>visited</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr><name>visited</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal> <operator>^</operator> <literal type="number">1</literal> <operator>^</operator> <literal type="number">2</literal> <operator>^</operator> <name><name>prevCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>prevCol</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>ans</name><index>[<expr><name>currAt</name></expr>]</index></name> <operator>=</operator> <name>col</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

				<expr_stmt><expr><name>visited</name><operator>++</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>visited</name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>

				<expr_stmt><expr><name><name>prevCol</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prevCol</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>prevCol</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

				<decl_stmt><decl><type><name>int</name></type> <name>nxtAt</name> <init>= <expr><name><name>adj</name><index>[<expr><name>currAt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>adj</name><index>[<expr><name>currAt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>prevAt</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>prevAt</name> <operator>=</operator> <name>currAt</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>currAt</name> <operator>=</operator> <name>nxtAt</name></expr>;</expr_stmt>
			}</block></while>

			<expr_stmt><expr><call><name>printAns</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
