<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932952_62497047.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINF</name></cpp:macro> <cpp:value>100000000000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector &lt; int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair &lt; int , int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro> <cpp:value>vector &lt; pair &lt; int , int &gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQRTN</name></cpp:macro> <cpp:value>355</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXXN</name></cpp:macro> <cpp:value>1000005</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>  ;</namespace></using>

<decl_stmt><decl><type><name>vi</name></type> <name><name>edge</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl> , <decl><type ref="prev"/><name>tree</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>answer</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>c1</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>c2</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>c3</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl> ;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>par</name></decl></parameter> )</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>tree</name><operator>.</operator><name>pb</name></name> <argument_list>( <argument><expr><name>src</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>edge</name><index>[<expr><name>src</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <if>if <condition>( <expr><name><name>edge</name><index>[<expr><name>src</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>par</name></expr> )</condition><then> <block>{
            <expr_stmt><expr><call><name>dfs</name> <argument_list>( <argument><expr><name><name>edge</name><index>[<expr><name>src</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name>src</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
        }</block></then></if>
    }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt> <expr_stmt><expr><call><name>scanf</name> <argument_list>( <argument><expr><literal type="string">"%d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>n</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <expr_stmt><expr><call><name>scanf</name> <argument_list>( <argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    }</block></for>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <expr_stmt><expr><call><name>scanf</name> <argument_list>( <argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    }</block></for>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <expr_stmt><expr><call><name>scanf</name> <argument_list>( <argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>c3</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    }</block></for>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <expr_stmt><expr><call><name>scanf</name> <argument_list>( <argument><expr><literal type="string">"%d %d"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>u</name></expr></argument> , <argument><expr><operator>&amp;</operator><name>v</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>edge</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name> <argument_list>( <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>edge</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name> <argument_list>( <argument><expr><name>u</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    }</block></for>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <if>if <condition>( <expr><operator>(</operator><name>int</name><operator>)</operator><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr> )</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name> <argument_list>( <argument><expr><literal type="string">"-1\n"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr> ;</return>
        }</block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>leaf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <if>if <condition>( <expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>leaf</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>dfs</name> <argument_list>( <argument><expr><name>leaf</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><call><name><name>tree</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name>n</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>vi</name></type> <name>perm</name></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>color_ans</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name><name>perm</name><operator>.</operator><name>pb</name></name> <argument_list>( <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name><name>perm</name><operator>.</operator><name>pb</name></name> <argument_list>( <argument><expr><literal type="number">2</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name><name>perm</name><operator>.</operator><name>pb</name></name> <argument_list>( <argument><expr><literal type="number">3</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>fin</name> <init>= <expr><name>LINF</name></expr></init></decl> ;</decl_stmt>
    <do>do <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
        <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>node</name> <init>= <expr><name><name>tree</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>color</name> <init>= <expr><name><name>perm</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
            <if>if <condition>( <expr><name>color</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>c1</name><index>[<expr><name>node</name></expr>]</index></name></expr> ;</expr_stmt>
            }</block></then>
            <elseif>else <if>if <condition>( <expr><name>color</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><then> <block>{
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>c2</name><index>[<expr><name>node</name></expr>]</index></name></expr> ;</expr_stmt>
            }</block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>c3</name><index>[<expr><name>node</name></expr>]</index></name></expr> ;</expr_stmt></block></else></if>
        }</block></for>
        <if>if <condition>( <expr><name>ans</name> <operator>&lt;</operator> <name>fin</name></expr> )</condition><then> <block>{
            <expr_stmt><expr><name>fin</name> <operator>=</operator> <name>ans</name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>color_ans</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>perm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>color_ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>perm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ;</expr_stmt>
            <expr_stmt><expr><name><name>color_ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>perm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> ;</expr_stmt>
        }</block></then></if>
    }</block> while <condition>( <expr><call><name>next_permutation</name><argument_list>(<argument><expr><call><name><name>perm</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>perm</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition> ;</do>

    <expr_stmt><expr><call><name>printf</name> <argument_list>( <argument><expr><literal type="string">"%lld\n"</literal></expr></argument> , <argument><expr><name>fin</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name> <argument_list>( <argument><expr><name>fin</name> <operator>&lt;</operator> <name>LINF</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <expr_stmt><expr><name><name>answer</name><index>[<expr><name><name>tree</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>color_ans</name><index>[<expr><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr> ;</expr_stmt>
    }</block></for>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{
        <expr_stmt><expr><call><name>printf</name> <argument_list>( <argument><expr><literal type="string">"%d "</literal></expr></argument> , <argument><expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name> <argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function>
</unit>
