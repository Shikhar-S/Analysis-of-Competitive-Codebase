<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28902371_62481733.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>++</operator><name><name>cnt</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>cnt</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>mn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>inc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>mv</name></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition>
    <block>{
        <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>idx</name> <operator>=</operator> <name>l</name></expr><operator>,</operator> <expr><name>dx</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>idx</name> <operator>=</operator> <name>r</name></expr><operator>,</operator> <expr><name>dx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>mn</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
<comment type="line">//        cout &lt;&lt; l &lt;&lt; " " &lt;&lt; r &lt;&lt; " " &lt;&lt; idx &lt;&lt; " " &lt;&lt; mn &lt;&lt; endl;</comment>
        <if>if <condition>(<expr><name>mn</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name>inc</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>idx</name><operator>+</operator><name>dx</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>k</name> <operator>/</operator> <name><name>v</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//        cout &lt;&lt; v[idx].first &lt;&lt; endl;</comment>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>+=</operator> <name>inc</name> <operator>*</operator> <name>dx</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>inc</name> <operator>*</operator> <name><name>v</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
<comment type="line">//        cout &lt;&lt; inc &lt;&lt; " " &lt;&lt; k &lt;&lt; endl;</comment>
<comment type="line">//        cout &lt;&lt; v[idx].first &lt;&lt; " " &lt;&lt; v[idx].second &lt;&lt; " " &lt;&lt; v[idx+dx].first &lt;&lt; " " &lt;&lt;v[idx+dx].second &lt;&lt; endl;</comment>
        <expr_stmt><expr><name>mv</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>==</operator> <name><name>v</name><index>[<expr><name>idx</name><operator>+</operator><name>dx</name></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>v</name><index>[<expr><name>idx</name><operator>+</operator><name>dx</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>+=</operator> <name><name>v</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
<comment type="line">//            cout &lt;&lt; "$$$: " &lt;&lt;v[idx+dx].first &lt;&lt; " " &lt;&lt; v[idx+dx].second &lt;&lt; endl;</comment>
            <expr_stmt><expr><name>mv</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>mv</name></expr>)</condition><then>
            <block type="pseudo"><if>if <condition>(<expr><name>l</name> <operator>==</operator> <name>idx</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt></block></else></if></block></then></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
