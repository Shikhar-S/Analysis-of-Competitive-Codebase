<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28910315_62494765.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;cassert&gt;</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;cmath&gt;</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;cstdlib&gt;</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;ctime&gt;</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fir</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sec</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pch</name></cpp:macro> <cpp:value>putchar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rg</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)_.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT</name><parameter_list>(<parameter><type><name>_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::sort(_.begin(), _.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LB</name><parameter_list>(<parameter><type><name>_</name></type></parameter>, <parameter><type><name>__</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::lower_bound(_.begin(), _.end(), __)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UB</name><parameter_list>(<parameter><type><name>_</name></type></parameter>, <parameter><type><name>__</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::upper_bound(_.begin(), _.end(), __)</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, format, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>format</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>DB</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>DB</name></expr></argument>&gt;</argument_list></name></name></type> <name>Pdd</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>Pii</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>Pli</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></name></type> <name>Pil</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></name></type> <name>Pll</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>Vi</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></name></type> <name>Vl</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>Mii</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>Mli</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></name></type> <name>Mil</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></name></type> <name>Mll</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>Si</name>;</typedef>
<typedef>typedef <type><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></name></type> <name>Sl</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kInf</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>, <decl><type ref="prev"/><name>kMod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>kInf64</name> <init>= <expr><literal type="number">0x3f3f3f3f3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<comment type="line">// const double kPie = acos(-1), kEps = 1e-9;</comment>


<comment type="block">/* NOTICE! The default mod number is 1e9 + 7 ! */</comment>

<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>Pll</name></expr></argument>&gt;</argument_list></name></name></type> <name>que</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Mll</name></type> <name>cnt</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name>cnt</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>v</name><operator>.</operator><name>fir</name></name></expr>,<expr><name><name>v</name><operator>.</operator><name>sec</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
        <if>if<condition>(<expr><call><name>SZ</name><argument_list>(<argument><expr><name>que</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <decl_stmt><decl><type><name>Pll</name></type> <name>bbb</name> <init>= <expr><call><name><name>que</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>fff</name> <init>= <expr><call><name><name>que</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>fff</name><operator>.</operator><name>sec</name></name> <operator>&lt;</operator> <name><name>bbb</name><operator>.</operator><name>sec</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Pll</name></type> <name>cur</name> <init>= <expr><call><name><name>que</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>LL</name></type> <name>mdzz</name> <init>= <expr><operator>(</operator><name><name>cur</name><operator>.</operator><name>fir</name></name> <operator>-</operator> <name><name>fff</name><operator>.</operator><name>fir</name></name><operator>)</operator> <operator>*</operator> <name><name>fff</name><operator>.</operator><name>sec</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>mdzz</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>LL</name></type> <name>steps</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>fff</name><operator>.</operator><name>sec</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>fff</name><operator>.</operator><name>fir</name></name> <operator>+=</operator> <name>steps</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push_front</name></name><argument_list>(<argument><expr><name>fff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>sec</name> <operator>+=</operator> <name><name>fff</name><operator>.</operator><name>sec</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>mdzz</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>Pll</name></type> <name>cur</name> <init>= <expr><call><name><name>que</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>LL</name></type> <name>mdzz</name> <init>= <expr><operator>(</operator><name><name>bbb</name><operator>.</operator><name>fir</name></name> <operator>-</operator> <name><name>cur</name><operator>.</operator><name>fir</name></name><operator>)</operator> <operator>*</operator> <name><name>bbb</name><operator>.</operator><name>sec</name></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>mdzz</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>LL</name></type> <name>steps</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>bbb</name><operator>.</operator><name>sec</name></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>bbb</name><operator>.</operator><name>fir</name></name> <operator>-=</operator> <name>steps</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>bbb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>mdzz</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>sec</name> <operator>+=</operator> <name><name>bbb</name><operator>.</operator><name>sec</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><call><name><name>que</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>fir</name> <operator>-</operator> <call><name><name>que</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call><operator>.</operator><name>fir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
