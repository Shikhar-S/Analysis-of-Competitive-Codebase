<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28905768_62489084.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>d</name><operator>&gt;&gt;</operator><name>w</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>z</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><call><name>min</name><argument_list>(<argument><expr><literal type="number">10000000ll</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>d</name><operator>)</operator><operator>/</operator><name>w</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>d</name><operator>)</operator><operator>%</operator><name>w</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>j</name><operator>&lt;=</operator><name>n</name><operator>-</operator><name>i</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>z</name><operator>=</operator><name>n</name><operator>-</operator><name>i</name><operator>-</operator><name>j</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>j</name><operator>=</operator><operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>d</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><operator>(</operator><name>p</name><operator>-</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>j</name><operator>&lt;=</operator><name>n</name><operator>-</operator><name>i</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>x</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>z</name><operator>=</operator><name>n</name><operator>-</operator><name>i</name><operator>-</operator><name>j</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><name>x</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>z</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>p</name><operator>%</operator><name>w</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><name>p</name><operator>/</operator><name>w</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<if>if<condition>(<expr><name>p</name><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><name>p</name><operator>/</operator><name>d</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>x</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></then></if>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
}</block></function></unit>
