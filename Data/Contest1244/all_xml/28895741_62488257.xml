<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28895741_62488257.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">100007</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name><name>pre</name><index>[<expr><literal type="number">100007</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>suf</name><index>[<expr><literal type="number">100007</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>n</name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name> <name>int</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>mid</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">1000000000000000</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>temp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// cout &lt;&lt; "YO " &lt;&lt; a[i]+mid&lt;&lt; endl;</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>mid</name></expr></argument>)</argument_list></call><operator>-</operator><name>a</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>f</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>temp</name><operator>+</operator><name><name>suf</name><index>[<expr><name>f</name></expr>]</index></name><operator>-</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>f</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name>mid</name><operator>)</operator></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>temp</name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><name><name>pre</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>,<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// cout &lt;&lt; "CHECKIN " &lt;&lt; mid &lt;&lt; " " &lt;&lt; i &lt;&lt; " " &lt;&lt; f &lt;&lt; " "  &lt;&lt; temp &lt;&lt; endl;</comment>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>temp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="line">// cout &lt;&lt; "YO " &lt;&lt; a[i]-mid&lt;&lt; endl;</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>mid</name></expr></argument>)</argument_list></call><operator>-</operator><name>a</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>f</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>temp</name> <operator>=</operator> <name>temp</name><operator>-</operator><name><name>pre</name><index>[<expr><name>f</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name>f</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name>mid</name><operator>)</operator></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>temp</name> <operator>=</operator> <name>temp</name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>)</operator><operator>+</operator><name><name>suf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>,<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// cout &lt;&lt; "CHECKIN " &lt;&lt; mid &lt;&lt; " " &lt;&lt; i &lt;&lt; " " &lt;&lt; f &lt;&lt; " "  &lt;&lt; temp &lt;&lt; endl;</comment>
    }</block></for>





    <comment type="line">// cout &lt;&lt; "MID " &lt;&lt; mid &lt;&lt; " " &lt;&lt; cnt &lt;&lt; endl;</comment>
    <return>return <expr><name>cnt</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
 
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 
 
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><name><name>pre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>suf</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>pre</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>suf</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>suf</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    
    <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>low</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>high</name><init>=<expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>low</name><operator>&lt;</operator><name>high</name></expr>)</condition><block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>mid</name> <init>= <expr><name>low</name> <operator>+</operator> <operator>(</operator><name>high</name><operator>-</operator><name>low</name><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>k</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>high</name><operator>=</operator><name>mid</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>low</name><operator>=</operator><name>mid</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>low</name></expr>;</expr_stmt>
   
 
}</block></function></unit>
