<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28928624_62486914.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">100005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>n1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><operator>++</operator><name>n1</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>n1</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>n1</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></else></if></block></for>
    <expr_stmt><expr><name>n</name><operator>=</operator><name>n1</name></expr>;</expr_stmt>
    <comment type="line">//for (int i=1;i&lt;=n;i++) printf("%lld %lld\n",a[i],s[i]);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>ansl</name><init>=<expr><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>ansr</name><init>=<expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>m</name></expr>)</condition><block>{
        <if>if <condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>&lt;</operator><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name><operator>&gt;=</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ansl</name><operator>=</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>+</operator><name>m</name><operator>/</operator><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr><operator>,</operator><expr><name>m</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr><operator>,</operator><expr><name>ansl</name><operator>=</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator><expr><name>m</name><operator>-=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name></expr><operator>,</operator><expr><name>l</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name><operator>&gt;=</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ansr</name><operator>=</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name>m</name><operator>/</operator><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name></expr><operator>,</operator><expr><name>m</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name></expr><operator>,</operator><expr><name>ansr</name><operator>=</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr><operator>,</operator><expr><name>m</name><operator>-=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>s</name><index>[<expr><name>r</name></expr>]</index></name></expr><operator>,</operator><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ansr</name><operator>-</operator><name>ansl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
