<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934377_62497371.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>sum</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>sum</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		
	<decl_stmt><decl><type><name>int</name></type> <name>H</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>T</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>T</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>H</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>H</name><operator>==</operator><name>n</name><operator>-</operator><name>T</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name>H</name><operator>&lt;=</operator><name>T</name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>p</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>H</name></expr></argument>,<argument><expr><operator>(</operator><name>LL</name><operator>)</operator><name><name>a</name><index>[<expr><name>H</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><operator>(</operator><name>LL</name><operator>)</operator><name><name>a</name><index>[<expr><name>H</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>p</name><operator>!=</operator><operator>(</operator><name>LL</name><operator>)</operator><name><name>a</name><index>[<expr><name>H</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>H</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ans</name><operator>-=</operator><name>p</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name>LL</name><operator>)</operator><name>H</name><operator>*</operator><name>p</name></expr>;</expr_stmt><expr_stmt><expr><name>H</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>p</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>k</name><operator>/</operator><name>T</name></expr></argument>,<argument><expr><operator>(</operator><name>LL</name><operator>)</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>T</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><operator>(</operator><name>LL</name><operator>)</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>T</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>p</name><operator>!=</operator><operator>(</operator><name>LL</name><operator>)</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>T</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><operator>(</operator><name>LL</name><operator>)</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>T</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ans</name><operator>-=</operator><name>p</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name>LL</name><operator>)</operator><name>T</name><operator>*</operator><name>p</name></expr>;</expr_stmt><expr_stmt><expr><name>T</name><operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><name>T</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>H</name></expr>]</index></name></expr>;</expr_stmt>
	<comment type="line">//	cout&lt;&lt;"H: "&lt;&lt;H&lt;&lt;" T:"&lt;&lt;T&lt;&lt;" K:"&lt;&lt;k&lt;&lt;" ans:"&lt;&lt;ans&lt;&lt;endl;</comment>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
