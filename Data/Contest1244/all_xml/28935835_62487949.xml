<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935835_62487949.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>root</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>adjlist</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adjlist</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adjlist</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>adjlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then>
        <elseif>else <if>if <condition>(<expr><name><name>adjlist</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>root</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>group</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><name><name>adjlist</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name>root</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>adjlist</name><index>[<expr><name>cur</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block>{
        <if>if <condition>(<expr><name><name>adjlist</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>last</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>adjlist</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>adjlist</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>last</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>adjlist</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>group</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>id</name> <operator>=</operator> <operator>(</operator><name>id</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
    }</block></while>
    <decl_stmt><decl><type><name>int</name></type> <name><name>cost</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cost</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cost</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
            <expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <comment type="line">//printf("%lld %lld %lld\n",cost[i][0],cost[i][1],cost[i][2]);</comment>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name><name>op</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>op</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>op</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>op</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>m</name></expr>)</condition><then><block>{
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></for>
    }</block></then>
    <elseif>else <if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>m</name></expr>)</condition><then><block>{
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></for>
    }</block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name>m</name></expr>)</condition><then><block>{
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></for>
    }</block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name>m</name></expr>)</condition><then><block>{
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
    }</block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <name>m</name></expr>)</condition><then><block>{
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></for>
    }</block></then></if></elseif>
    <elseif>else <if>if <condition>(<expr><name><name>op</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <name>m</name></expr>)</condition><then><block>{
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name><name>group</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
    }</block></then></if></elseif></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>


}</block></function>
</unit>
