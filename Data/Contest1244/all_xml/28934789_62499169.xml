<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934789_62499169.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">400100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>t</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Block</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>ch</name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal><operator>&gt;</operator><literal type="number">9</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
    <while>while<condition>(<expr><name>ch</name><operator>-</operator><literal type="char">'0'</literal><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;=</operator><literal type="number">9</literal></expr>)</condition><block>{<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
    <return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>st</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>pre</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>st</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>st</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if></block></for>
}</block></function>
<function><type><name>bool</name></type> <name>check</name><parameter_list>()</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>st</name> <operator>==</operator> <name>n</name><operator>)</operator></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>Last</name> <init>= <expr><name><name>s</name><index>[<expr><name>st</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>ed</name> <init>= <expr><name>st</name> <operator>+</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>st</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ed</name> <operator>+</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
        <block>{
			<expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
            <block>{
				<if>if<condition>(<expr><name>Last</name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                <block>{
					<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>mi</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mi</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>l</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>t</name><index>[<expr><name>r</name> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>Last</name></expr>;</expr_stmt></block></for>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>l</name> <operator>+</operator> <name>mi</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>r</name> <operator>-</operator> <name>mi</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
						<block type="pseudo"><if>if<condition>(<expr><name><name>t</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt></block></then>
						<else>else                <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt></block></else></if></block></for>
				}</block></then> 
                <else>else<block>{
					<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>mi</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><operator>(</operator><name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mi</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>l</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>Last</name></expr><operator>,</operator> <expr><name><name>t</name><index>[<expr><name>r</name> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>l</name> <operator>+</operator> <name>mi</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>r</name> <operator>-</operator> <name>mi</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
						<block type="pseudo"><if>if<condition>(<expr><name><name>t</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt></block></then>
						<else>else                <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt></block></else></if></block></for>
				}</block></else></if>
			}</block></then></if>
            <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>Last</name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then>
        <else>else<block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
            <block>{
				<if>if<condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>b</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>st</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>ed</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>   <block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>&gt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name><operator>-</operator><name>n</name></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><name><name>t</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>k</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pre</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <name>n</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>n</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
	<if>if<condition>(<expr><call><name>check</name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
		<if>if<condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'B'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'W'</literal></expr>;</expr_stmt></block></then>
				<else>else            <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'B'</literal></expr>;</expr_stmt></block></else></if>
			}</block></for>            
        }</block></then></if>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
