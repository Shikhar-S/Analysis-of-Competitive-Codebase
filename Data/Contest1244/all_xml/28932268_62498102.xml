<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28932268_62498102.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>1e16</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//    freopen("f.txt","r",stdin);</comment>
<comment type="line">//    freopen("g.txt","w",stdout);</comment>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>arr</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>mx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>mn</name><init>=<expr><literal type="number">1e10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>,<decl><type ref="prev"/><name>jt</name></decl>,<decl><type ref="prev"/><name>kt</name></decl>,<decl><type ref="prev"/><name>lt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>mp</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>mx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mx</name></expr></argument>,<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>mn</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mn</name></expr></argument>,<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>,<decl><type ref="prev"/><name>dif</name></decl>,<decl><type ref="prev"/><name>need</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name>f</name></decl>,<decl><type ref="prev"/><name>need1</name></decl>,<decl><type ref="prev"/><name>dif1</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>kt</name><operator>=</operator><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>kt</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>lt</name><operator>=</operator><name>kt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lt</name><operator>--</operator></expr>;</expr_stmt>
    <comment type="line">//cout&lt;&lt;*kt&lt;&lt;" "&lt;&lt;*lt&lt;&lt;endl;</comment>
    <expr_stmt><expr><name>jt</name><operator>=</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>jt</name><operator>++</operator></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>mx</name><operator>==</operator><name>mn</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <for>for<control>(<init><expr><name>it</name><operator>=</operator><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</init><condition>;</condition><incr/>)</control>
    <block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><operator>*</operator><name>kt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name><name>mp</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name><operator>=</operator><operator>*</operator><name>lt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>=</operator><operator>*</operator><name>it</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><name><name>mp</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name><operator>=</operator><operator>*</operator><name>jt</name></expr>;</expr_stmt>
<comment type="line">//        cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;" "&lt;&lt;c&lt;&lt;endl;</comment>
<comment type="line">//        cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;" "&lt;&lt;z&lt;&lt;endl;</comment>
        <if>if<condition>(<expr><name>y</name><operator>&lt;</operator><name>b</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>dif</name><operator>=</operator><name>z</name><operator>-</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>need</name><operator>=</operator><name>dif</name><operator>*</operator><name>y</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>need</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><name>need</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mp</name><index>[<expr><name>z</name></expr>]</index></name><operator>+=</operator><name>y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>mn</name><operator>=</operator><name>z</name></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name>y</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>p</name><operator>=</operator><name>k</name><operator>/</operator><name>y</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>mn</name><operator>=</operator><name>x</name><operator>+</operator><name>p</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if></elseif>
            <else>else
                <block type="pseudo"><break>break;</break></block></else></if>
            <expr_stmt><expr><name>it</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>jt</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>dif</name><operator>=</operator><name>a</name><operator>-</operator><name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>need</name><operator>=</operator><name>dif</name><operator>*</operator><name>b</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>need</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><name>need</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mp</name><index>[<expr><name>c</name></expr>]</index></name><operator>+=</operator><name>b</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>mx</name><operator>=</operator><name>c</name></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name>b</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>p</name><operator>=</operator><name>k</name><operator>/</operator><name>b</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>mx</name><operator>=</operator><name>a</name><operator>-</operator><name>p</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if></elseif>
            <else>else
                <block type="pseudo"><break>break;</break></block></else></if>
            <expr_stmt><expr><name>kt</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>lt</name><operator>--</operator></expr>;</expr_stmt>
        }</block></else></if>
        <if>if<condition>(<expr><name>z</name><operator>==</operator><name>a</name></expr>)</condition><then>
        <block>{
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <comment type="line">//cout&lt;&lt;mx&lt;&lt;" "&lt;&lt;mn&lt;&lt;endl;</comment>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>abs</name><argument_list>(<argument><expr><name>mx</name><operator>-</operator><name>mn</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
