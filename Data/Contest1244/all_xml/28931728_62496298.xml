<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931728_62496298.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pdd</name></cpp:macro> <cpp:value>pair&lt;double, double&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<comment type="line">//#define gcd __gcd</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>if (!DEBUG) {cin.tie(0);cout.tie(0);ios_base::sync_with_stdio(0);}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name></cpp:macro> <cpp:value>if (DEBUG) cout</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100001</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>M</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cl</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ans_v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>cl</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>^</operator> <name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>debug</name> <operator>&lt;&lt;</operator> <literal type="string">"DFS "</literal> <operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>cl</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><name>r</name> <operator>+</operator> <name><name>c</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>res</name></expr>;</return></block></then></if>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>u</name> <range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><name>debug</name> <operator>&lt;&lt;</operator> <literal type="string">"U "</literal> <operator>&lt;&lt;</operator> <name>u</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>u</name> <operator>!=</operator> <name>p1</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    }</block></for>
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>fast</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>u</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>s</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>p1</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>

        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>p2</name> <init>= <expr><name><name>g</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>p3</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>g</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>p1</name></expr> ?</condition><then> <expr><name><name>g</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>g</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ans_v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><call><name>dfs</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><block>{<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>, <expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ans_v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><call><name>dfs</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><block>{<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>, <expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ans_v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><call><name>dfs</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><block>{<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>, <expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ans_v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><call><name>dfs</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><block>{<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>, <expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ans_v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><call><name>dfs</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><block>{<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>, <expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ans_v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><call><name>dfs</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><block>{<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>, <expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>ans_v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ans_v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name> <operator>=</operator> <name><name>ans_v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>fi</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name> <operator>=</operator> <name><name>ans_v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>se</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>p3</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>p1</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p1</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>p2</name></expr>]</index><index>[<expr><name><name>cl</name><index>[<expr><name>p2</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>cl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
}</block></function>
</unit>
