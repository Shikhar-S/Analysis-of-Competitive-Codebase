<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28933788_62491155.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &lt;= (b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &gt;= (b); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RI</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR(i,1,(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR(i,0,(n)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mini</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a=min(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a=max(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int) w.size()</cpp:value></cpp:define>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<comment type="line">//typedef pair&lt;pii, int&gt; para;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1e18</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>last</name> <init>= <expr><call><name>unique</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{
		<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name> <operator>||</operator> 
		   <operator>(</operator><name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator> <operator>&lt;</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>v</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name><name>v</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name>next</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <name>diff</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block>{
				<comment type="line">// TODO</comment>
				<decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>z</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+</operator> <name>z</name></expr>]</index></name> <operator>=</operator> <name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				}</block></then></if>
				<break>break;</break>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>next</name></expr>]</index></name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>diff</name> <operator>*</operator> <name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>prev</name> <init>= <expr><name><name>v</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>diff</name> <init>= <expr><operator>(</operator><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name>prev</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <name>diff</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block>{
				<comment type="line">//cout &lt;&lt; "Here!" &lt;&lt; endl;</comment>
				<decl_stmt><decl><type><name>ll</name></type> <name>z</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<comment type="line">//cout &lt;&lt; z &lt;&lt; endl;</comment>
				<if>if <condition>(<expr><name>z</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name>z</name></expr>]</index></name> <operator>=</operator> <name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				}</block></then></if>
				<break>break;</break>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>prev</name></expr>]</index></name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>diff</name> <operator>*</operator> <name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>v</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<decl_stmt><decl><type><name>ll</name></type> <name>minim</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>maxim</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>x</name><range>: <expr><name>cnt</name></expr></range></decl></init>)</control> <block>{
		<if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>nd</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<comment type="line">//cout &lt;&lt; "Sprawdzam " &lt;&lt; x.st &lt;&lt; endl;</comment>
			<expr_stmt><expr><name>maxim</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>maxim</name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>st</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>minim</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>minim</name></expr></argument>, <argument><expr><name><name>x</name><operator>.</operator><name>st</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>maxim</name> <operator>-</operator> <name>minim</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
