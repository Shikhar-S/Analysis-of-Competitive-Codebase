<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931588_62476905.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>INT</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NN</name></cpp:macro> <cpp:value>100010</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>NN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INT</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>INT</name></type> <name><name>sum</name><index>[<expr><name>NN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>can</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>idl</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>idl</name><operator>--</operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>idr</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><operator>(</operator><name>INT</name><operator>)</operator> <name>L</name> <operator>*</operator> <name>idl</name> <operator>-</operator> <name><name>sum</name><index>[<expr><name>idl</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>INT</name><operator>)</operator> <name>R</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>idr</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>sum</name><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>sum</name><index>[<expr><name>idr</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>)</operator> <operator>&lt;=</operator> <name>k</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"out.out"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt> 
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ed</name> <init>= <expr><literal type="number">1000000001</literal></expr></init></decl>;</decl_stmt>
	
	<while>while<condition>(<expr><name>st</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>ed</name></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>md</name> <init>= <expr><operator>(</operator><name>st</name> <operator>+</operator> <name>ed</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name> <operator>and</operator> <operator>!</operator><name>flag</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>md</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><call><name>can</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>md</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>flag</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ed</name> <operator>=</operator> <name>md</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>st</name> <operator>=</operator> <name>md</name></expr>;</expr_stmt></block></else></if>
	}</block></while>
	
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ed</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

                           </unit>
