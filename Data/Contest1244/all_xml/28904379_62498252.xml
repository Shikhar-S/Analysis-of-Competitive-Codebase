<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28904379_62498252.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//</comment>
<comment type="line">// Created by 93569 on 2019/10/13.</comment>
<comment type="line">//</comment>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>c</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>K</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>L</name></decl>, <decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>c</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>c</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <while>while <condition>(<expr><name>K</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>L</name><operator>.</operator><name>second</name></name> <operator>&gt;=</operator> <name><name>R</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if <condition>(<expr><name>K</name> <operator>&lt;</operator> <name><name>L</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name> <operator>&amp;&amp;</operator> <name>K</name> <operator>&lt;</operator> <name><name>R</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <if>if <condition>(<expr><name><name>L</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>R</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block>{
            <label><name>LLL</name>:</label>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>v</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>K</name> <operator>/</operator> <name><name>L</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name><name>L</name><operator>.</operator><name>second</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>L</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>K</name> <operator>-=</operator> <name><name>L</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name> <operator>*</operator> <name>v</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>L</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name> <operator>+</operator> <name>v</name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>L</name><operator>.</operator><name>second</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name><name>c</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>R</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name> <operator>&lt;</operator> <name><name>L</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block>{
            <label><name>RR</name>:</label>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>v</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>K</name> <operator>/</operator> <name><name>R</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>R</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>c</name><index>[<expr><name><name>R</name><operator>.</operator><name>second</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>K</name> <operator>-=</operator> <name><name>R</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name> <operator>*</operator> <name>v</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>R</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name>v</name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>R</name><operator>.</operator><name>second</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><name>v</name> <operator>!=</operator> <name><name>c</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
        }</block></then></if></elseif> <else>else <block>{
            <if>if <condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>L</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>c</name><index>[<expr><name><name>L</name><operator>.</operator><name>second</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>L</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name> <operator>&gt;</operator>
                <call><name>abs</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>c</name><index>[<expr><name><name>R</name><operator>.</operator><name>second</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>R</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block>{
                <goto>goto <name>LLL</name>;</goto>
            }</block></then> <else>else <block>{
                <goto>goto <name>RR</name>;</goto>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>R</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>L</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
