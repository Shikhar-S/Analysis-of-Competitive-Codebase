<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28923707_62474299.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>pii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
  <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

  <while>while<condition>(<expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if<condition>(<expr><operator>(</operator><name>y</name><operator>*</operator><name>d</name><operator>)</operator> <operator>%</operator> <name>w</name> <operator>==</operator> <name>p</name><operator>%</operator><name>w</name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>y</name><operator>*</operator><name>d</name><operator>+</operator><name>w</name><operator>*</operator><literal type="number">1000000000000L</literal><operator>)</operator><operator>%</operator><name>w</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><operator>(</operator><name>p</name><operator>-</operator><operator>(</operator><name>x</name><operator>*</operator><name>w</name><operator>+</operator><name>y</name><operator>*</operator><name>d</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

        <expr_stmt><expr><name>x</name> <operator>+=</operator> <operator>(</operator><name>p</name><operator>-</operator><operator>(</operator><name>x</name><operator>*</operator><name>w</name><operator>+</operator><name>y</name><operator>*</operator><name>d</name><operator>)</operator><operator>)</operator><operator>/</operator><name>w</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>x</name><operator>*</operator><name>w</name><operator>+</operator><name>y</name><operator>*</operator><name>d</name> <operator>==</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
          <break>break;</break>
        }</block></then></if>
      }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if>
  }</block></while>


  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
