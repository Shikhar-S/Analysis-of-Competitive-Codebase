<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28930806_62480707.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
		<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"1244C.in"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>p</name> <operator>%</operator> <call><name>__gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x0</name></decl>, <decl><type ref="prev"/><name>y0</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>d</name></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dy</name> <init>= <expr><name>p</name> <operator>-</operator> <name>w</name><operator>*</operator><name>x</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>dy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> 
		<block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><name>dy</name> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>x0</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>y0</name> <operator>=</operator> <name>dy</name> <operator>/</operator> <name>d</name></expr>;</expr_stmt>
			<break>break;</break> 
		}</block></then></if>
	}</block></for>

	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>gcd</name> <init>= <expr><call><name>__gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>x0</name> <operator>+</operator> <name>y0</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x0</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>y0</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>x0</name> <operator>-</operator> <name>y0</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>prod</name> <init>= <expr><literal type="number">1LL</literal> <operator>*</operator> <name>gcd</name> <operator>*</operator> <operator>(</operator><name>x0</name> <operator>+</operator> <name>y0</name> <operator>-</operator> <name>n</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tmin</name> <init>= <expr><operator>(</operator><name>prod</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>w</name><operator>-</operator><name>d</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x0</name> <operator>+</operator> <name>d</name><operator>/</operator><name>gcd</name> <operator>*</operator> <name>tmin</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y0</name> <operator>-</operator> <name>w</name><operator>/</operator><name>gcd</name> <operator>*</operator> <name>tmin</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal><operator>&lt;&lt;</operator> <name>n</name> <operator>-</operator> <name>x</name><operator>-</operator> <name>y</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></then> 
		<else>else
		<block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
