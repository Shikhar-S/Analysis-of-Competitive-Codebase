<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28930148_62485322.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>

<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>a</name><index>[<expr><literal type="number">500005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>seq</name><index>[<expr><literal type="number">500005</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>,<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if<condition>(<expr><call><name><name>mp</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>mp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>seq</name><index>[<expr><operator>++</operator> <name>cnt</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>seq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>seq</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	for(LL i = 1;i &lt;= cnt;i ++) cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; seq[i] &lt;&lt; ' ' &lt;&lt; mp[seq[i]] &lt;&lt; endl;</comment>
	<decl_stmt><decl><type><name>LL</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name> <init>= <expr><name>cnt</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name>l</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><operator>!</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name><name>mp</name><index>[<expr><name><name>seq</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>mp</name><index>[<expr><name><name>seq</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>tmp</name> <init>= <expr><name><name>mp</name><index>[<expr><name><name>seq</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>seq</name><index>[<expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>seq</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>LL</name></type> <name>num</name> <init>= <expr><name><name>mp</name><index>[<expr><name><name>seq</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>tmp</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>l</name> <operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>seq</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name><name>seq</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+=</operator> <name>k</name> <operator>/</operator> <name><name>mp</name><index>[<expr><name><name>seq</name><index>[<expr><name>l</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			}</block></else></if>
		}</block></then>
		<else>else<block>{
			<decl_stmt><decl><type><name>LL</name></type> <name>tmp</name> <init>= <expr><name><name>mp</name><index>[<expr><name><name>seq</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>seq</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>seq</name><index>[<expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>LL</name></type> <name>num</name> <init>= <expr><name><name>mp</name><index>[<expr><name><name>seq</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>tmp</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <name>tmp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>r</name> <operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>seq</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <name>num</name></expr>;</expr_stmt>
			}</block></then>
			<else>else<block>{
				<expr_stmt><expr><name><name>seq</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name><name>mp</name><index>[<expr><name><name>seq</name><index>[<expr><name>r</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<break>break;</break>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>seq</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-</operator> <name><name>seq</name><index>[<expr><name>l</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
10 100000000000
1000000 1 1000000 10000 100 10000 100000000 10000000 100 10 2 2
*/</comment></unit>
