<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931689_62481028.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r1</name></cpp:macro> <cpp:value>rt&lt;&lt;1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>r2</name></cpp:macro> <cpp:value>rt&lt;&lt;1|1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri</name></cpp:macro> <cpp:value>register int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ri i=(a);i&lt;=(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ri i=(a);i&lt;=(b);i+=(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ri i=(a);i&gt;=(b);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ri i=(a);i&gt;=(b);i-=(c))</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>d</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>g</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>gv</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>ri</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>ri</name></type> <name>j</name></decl></parameter>,<parameter><decl><type><name>ri</name></type> <name>k</name></decl></parameter>,<parameter><decl><type><name>ri</name></type> <name>l</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>y</name><operator>&lt;</operator><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>y</name></expr><operator>,</operator><expr><name><name>g</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><name>l</name></expr>;</expr_stmt></block></then></if>}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>lj</name></decl>,<decl><type ref="prev"/><name>lk</name></decl>,<decl><type ref="prev"/><name><name>res</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ri</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>ri</name></type> <name>fa</name></decl></parameter>,<parameter><decl><type><name>ri</name></type> <name>dep</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>dep</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><name>dep</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>k</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name>j</name><operator>!=</operator><name>k</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>fa</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>k</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if></elseif>
	<else>else<block>{
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>k</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name>j</name><operator>!=</operator><name>k</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>upd</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><literal type="number">6</literal><operator>-</operator><name>j</name><operator>-</operator><name>k</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>fa</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><literal type="number">6</literal><operator>-</operator><name>j</name><operator>-</operator><name>k</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><literal type="number">6</literal><operator>-</operator><name>j</name><operator>-</operator><name>k</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>(int)gv[u].size()-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>ri</name></type> <name>v</name><init>=<expr><name><name>gv</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name>v</name><operator>==</operator><name>fa</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name>dep</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<if>if<condition>(<expr><name>fa</name><operator>&amp;&amp;</operator><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1e16</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>ri</name></type> <name>cj</name></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>k</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><if>if<condition>(<expr><name>k</name><operator>!=</operator><name>j</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>&lt;</operator><name>ans</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>f</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>lj</name><operator>=</operator><name>k</name></expr>;</expr_stmt><expr_stmt><expr><name>lk</name><operator>=</operator><name><name>g</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>cj</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><expr_stmt><expr><name><name>res</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>cj</name></expr>;</expr_stmt>
	}</block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>lj</name></expr><operator>,</operator><expr><name>lj</name><operator>=</operator><name>lk</name></expr><operator>,</operator><expr><name>lk</name><operator>=</operator><name><name>g</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name><name>res</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index><index>[<expr><name>lj</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ri</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>ri</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>u</name><operator>&gt;&gt;</operator><name>v</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gv</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>gv</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>ri</name></type> <name>rt</name></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>rt</name><operator>=</operator><name>i</name></expr>;</expr_stmt><break>break;</break>
	}</block></then></if>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>k</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="number">1e16</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>rt</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
