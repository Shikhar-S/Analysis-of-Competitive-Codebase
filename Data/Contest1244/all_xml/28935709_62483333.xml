<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935709_62483333.cpp"><comment type="block" format="doxygen">/**
	Â© 2017-2019 Tai-Yuan Kuo All Rights Reserved.
*/</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; n; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 1; i &lt;= n; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rfor0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = n - 1; i &gt;= 0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rfor1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = n; i &gt; 0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = (a).begin(); it != (a).end(); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = (a).rbegin(); it != (a).rend(); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name></cpp:macro> <cpp:value>for0</cpp:value></cpp:define>

<decl_stmt><decl><type><name>stringstream</name></type> <name>output</name></decl>;</decl_stmt>

<comment type="block" format="doxygen">/** Actually outputs the result and end the program.*/</comment>
<function_decl><specifier>inline</specifier> <type><name>void</name></type> <name>eOP</name><parameter_list>()</parameter_list>;</function_decl>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>for1</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
	<block>{
		<macro><name>for1</name> <argument_list>(<argument>j</argument>, <argument>n</argument>)</argument_list></macro>
		<block>{
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		}</block>
	}</block>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edges</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>rep</name> <argument_list>(<argument>_</argument>, <argument>n - <literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
    	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>

    	<expr_stmt><expr><name><name>edges</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name><name>edges</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <macro><name>for1</name> <argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
    	<if>if <condition>(<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
    }</block>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>g</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
    <macro><name>for1</name> <argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
    	<if>if <condition>(<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>s</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
    }</block>

    <expr_stmt><expr><name><name>g</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>changed</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>changed</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>n</name><range>: <expr><name><name>edges</name><index>[<expr><name>s</name></expr>]</index></name></expr></range></decl></init>)</control>
		<block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>g</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>changed</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>g</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>g</name><index>[<expr><name>s</name></expr>]</index></name> <operator>%</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>s</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
<comment type="line">//cout &lt;&lt; n &lt;&lt; " " &lt;&lt; g[n] &lt;&lt; endl;</comment>
				<break>break;</break>
			}</block></then></if>
		}</block></for>
	}</block></while>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>gc</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<comment type="line">// [group][colour] = cost</comment>
    <macro><name>for1</name> <argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>group</name> <init>= <expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <macro><name>for1</name> <argument_list>(<argument>j</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro> <comment type="line">// colour</comment>
        <block>{
        	<expr_stmt><expr><name><name>gc</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block>
    }</block>

    <decl_stmt><decl><type><name>int</name></type> <name><name>perm</name><index>[]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>=
    <expr><block>{
		<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
		<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt> <comment type="line">// [p][group] = colour</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cost</name> <init>= <expr><literal type="number">100000000000001ll</literal></expr></init></decl>;</decl_stmt>

    <macro><name>rep</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>for1</name> <argument_list>(<argument>j</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro> <comment type="line">// group</comment>
        <block>{
        	<expr_stmt><expr><name>c</name> <operator>+=</operator> <name><name>gc</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>perm</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
<comment type="line">//cout &lt;&lt; perm[i][j] &lt;&lt; " ";</comment>
        }</block>
<comment type="line">//cout &lt;&lt; endl;</comment>

        <if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <name>cost</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cost</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		}</block></then></if>
    }</block>

<comment type="line">//cout &lt;&lt; gc[1][perm[p][1]] &lt;&lt; gc[2][perm[p][2]] &lt;&lt; gc[3][perm[p][3]] &lt;&lt; endl;</comment>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>cost</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <macro><name>for1</name> <argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>perm</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
    }</block>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//cin &gt;&gt; t;</comment>
	<macro><name>rep</name> <argument_list>(<argument>i</argument>, <argument>t</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block>

	<expr_stmt><expr><call><name>eOP</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>eOP</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>output</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>output</name><operator>.</operator><name>str</name></name><argument_list>(<argument><expr><call><name>string</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
