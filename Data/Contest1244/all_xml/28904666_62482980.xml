<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28904666_62482980.cpp"><comment type="line" format="doxygen">/// don't hack me</comment>

<comment type="line" format="doxygen">/// follow me: https://www.instagram.com/rose_culbece/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>followmeoninsta</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0), cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>please</name></cpp:macro> <cpp:value>if(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cost</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>tr</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>color</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>mincost</name></decl>, <decl><type ref="prev"/><name>cosst</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>fndnxt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">3</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>please</name> <name>followmeoninsta</name></type>

    <name>cin</name> &gt;&gt; <name>n</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>bfr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>bfr</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>bfr</name></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>cost</name><index>[<expr><name>bfr</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tr</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>tr</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>tr</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>tr</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>root</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>tr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>root</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if></block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>lant</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>lant</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>tr</name><index>[<expr><call><name><name>lant</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>nod</name> <init>= <expr><name><name>tr</name><index>[<expr><call><name><name>lant</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>nod</name> <operator>==</operator> <name><name>lant</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>lant</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>nod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>mincost</name> <operator>=</operator> <operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">60</literal><operator>)</operator></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>col1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>col1</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>col1</name></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>col2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>col2</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>col2</name></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name>col1</name> <operator>==</operator> <name>col2</name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name>cosst</name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>col1</name></expr>]</index><index>[<expr><name><name>lant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>col2</name></expr>]</index><index>[<expr><name><name>lant</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>prv1</name> <init>= <expr><name>col1</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>prv2</name> <init>= <expr><name>col2</name></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>nrw</name> <init>= <expr><call><name>fndnxt</name><argument_list>(<argument><expr><name>prv1</name></expr></argument>, <argument><expr><name>prv2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>cosst</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><call><name>fndnxt</name><argument_list>(<argument><expr><name>prv1</name></expr></argument>, <argument><expr><name>prv2</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><name><name>lant</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>prv1</name> <operator>=</operator> <name>prv2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>prv2</name> <operator>=</operator> <name>nrw</name></expr>;</expr_stmt>
            }</block></for>
            <if>if<condition>(<expr><name>cosst</name> <operator>&lt;=</operator> <name>mincost</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>mincost</name> <operator>=</operator> <name>cosst</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>color</name><index>[<expr><name><name>lant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>color</name><index>[<expr><name><name>lant</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>col2</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>prv1</name> <operator>=</operator> <name>col1</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>prv2</name> <operator>=</operator> <name>col2</name></expr>;</expr_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
                <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>nrw</name> <init>= <expr><call><name>fndnxt</name><argument_list>(<argument><expr><name>prv1</name></expr></argument>, <argument><expr><name>prv2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>color</name><index>[<expr><name><name>lant</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>nrw</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>prv1</name> <operator>=</operator> <name>prv2</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>prv2</name> <operator>=</operator> <name>nrw</name></expr>;</expr_stmt>
                }</block></for>
            }</block></then></if>
        }</block></for></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mincost</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>color</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
