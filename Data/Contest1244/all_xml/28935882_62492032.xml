<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935882_62492032.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll int,ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ist</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sbit</name></cpp:macro> <cpp:value>__builtin_popcount</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec</name></cpp:macro> <cpp:value>vector &lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vecs</name></cpp:macro> <cpp:value>vector &lt;string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vecl</name></cpp:macro> <cpp:value>vector &lt;ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vecp</name></cpp:macro> <cpp:value>vector &lt;pair&lt;int,int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vecpl</name></cpp:macro> <cpp:value>vector &lt;pair&lt;ll int,ll int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bs</name></cpp:macro> <cpp:value>binary_search</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bg</name></cpp:macro> <cpp:value>begin()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>en</name></cpp:macro> <cpp:value>end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>el</name></cpp:macro> <cpp:value>endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.bg,v.en</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wl</name></cpp:macro> <cpp:value>while</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name></cpp:macro> <cpp:value>size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>min(a,min(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>max(a,max(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setprecision(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,b,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rp</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ft</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it : x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#x&lt;&lt;" "&lt;&lt;x&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbga</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#arr&lt;&lt;": "; rep(tt,0,n)cerr&lt;&lt;arr[tt]&lt;&lt;" "; cerr&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mapi</name></cpp:macro> <cpp:value>map&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mapl</name></cpp:macro> <cpp:value>map&lt;ll int,ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mapc</name></cpp:macro> <cpp:value>map&lt;char,ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maps</name></cpp:macro> <cpp:value>map&lt;string,ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mapss</name></cpp:macro> <cpp:value>map&lt;string,string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scni</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scni</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d %d",&amp;x,&amp;y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scnl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scnl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld %lld",&amp;x,&amp;y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scns</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%s",x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pri</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d\n",x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld\n",x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prs</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%s\n",x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int t;cin&gt;&gt;t;while(t--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tests</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int t;scni(t);while(t--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(NULL);</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mex</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>temp</name><init>=<expr><name>a</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>b</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name>temp</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name><operator>=</operator><name>temp</name><operator>*</operator><name>temp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name><operator>=</operator><name>temp</name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>pr</name><index>[<expr><name>mex</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec</name></type> <name>prime</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>seive</name><parameter_list>()</parameter_list>
<block>{
    <macro><name>rp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>mex</argument>)</argument_list></macro> <expr_stmt><expr><name><name>pr</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>*</operator><name>i</name><operator>&lt;</operator><name>mex</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>pr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>*</operator><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>mex</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>pr</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for></block></then></if>
    }</block></for>
    <macro><name>rp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>mex</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name><name>pr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>prime</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block>
}</block></function>
<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>xx</name></decl>,<decl><type ref="prev"/><name>xy</name></decl>,<decl><type ref="prev"/><name>d1</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>exeu</name><parameter_list>(<parameter><decl><type><name>ll</name> <name>int</name></type> <name>a1</name></decl></parameter>,<parameter><decl><type><name>ll</name> <name>int</name></type> <name>b1</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>b1</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>xx</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>xy</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>d1</name><operator>=</operator><name>a1</name></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <expr_stmt><expr><call><name>exeu</name><argument_list>(<argument><expr><name>b1</name></expr></argument>,<argument><expr><name>a1</name><operator>%</operator><name>b1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>temp</name><init>=<expr><name>xx</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>xx</name><operator>=</operator><name>xy</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>xy</name><operator>=</operator><name>temp</name><operator>-</operator><operator>(</operator><name>a1</name><operator>/</operator><name>b1</name><operator>)</operator><operator>*</operator><name>xy</name></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>
<function><type><name>ll</name> <name>int</name></type> <name>modinv</name><parameter_list>(<parameter><decl><type><name>ll</name> <name>int</name></type> <name>A</name></decl></parameter>,<parameter><decl><type><name>ll</name> <name>int</name></type> <name>M</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>exeu</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>xx</name><operator>%</operator><name>M</name><operator>+</operator><name>M</name><operator>)</operator><operator>%</operator><name>M</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vec</name></type> <name><name>v</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name><name>ct</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mapi</name></type> <name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>vis</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>s</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>k</name></expr>]</index></name><operator>+=</operator><name><name>ct</name><index>[<expr><name><name>mp</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
    
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>v[s].size()</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name><name>v</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>s</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>fast</name>
    <name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <macro><name>fr</name><argument_list>(<argument>j</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>ct</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>fg</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sz</name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>fg</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block>
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sz</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>s</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block>
    <if>if<condition>(<expr><name>fg</name><operator>==</operator><literal type="number">0</literal> <operator>||</operator> <name>s</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> 
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1\n"</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>ll</name> <name>int</name></type> <name>ans</name><init>=<expr><name>LLONG_MAX</name></expr></init></decl>,<decl><type ref="prev"/><name>id</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro>
    <block>{
        <comment type="line">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;dp[i]&lt;&lt;el;</comment>
        <if>if<condition>(<expr><name>ans</name><operator>&gt;</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>id</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>el</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>col</name><index>[<expr><name>n</name></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>ft</name><argument_list>(<argument>it</argument>,<argument>v1</argument>)</argument_list></macro>
    <block>{
       <comment type="line">// cout&lt;&lt;it&lt;&lt;el;</comment>
        <if>if<condition>(<expr><name>id</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>id</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>id</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>id</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>id</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>id</name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>it</name></expr>]</index></name><operator>=</operator><name><name>mp</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt>
    }</block>
    <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
