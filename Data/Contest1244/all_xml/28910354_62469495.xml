<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28910354_62469495.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<function><type><name>bool</name></type> <name>ReadBool</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>char</name></type> <name>in</name></decl>;</decl_stmt>
    <do>do <block type="pseudo"><expr_stmt><expr><name>in</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block> while<condition>(<expr><name>in</name><operator>!=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>in</name><operator>!=</operator><literal type="char">'1'</literal></expr>)</condition>;</do>
    <return>return <expr><name>in</name><operator>==</operator><literal type="char">'1'</literal></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>totCases</name></decl>,<decl><type ref="prev"/><name>totLen</name></decl>,<decl><type ref="prev"/><name>lft</name></decl>,<decl><type ref="prev"/><name>rgt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>appear</name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>totCases</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>totCases</name><operator>--</operator></expr>)</condition><block>{
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>totLen</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>lft</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt> <expr_stmt><expr><name>rgt</name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt> <expr_stmt><expr><name>appear</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>totLen</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
	    <if>if<condition>(<expr><call><name>ReadBool</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
		<expr_stmt><expr><name>lft</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>lft</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rgt</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>rgt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>appear</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	    }</block></then></if>
	}</block></for>

	<if>if<condition>(<expr><operator>!</operator><name>appear</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name>totLen</name><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>rgt</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>totLen</name><operator>-</operator><name>lft</name><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
