<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28928771_62488006.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>num</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>num</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>ptr1</name> <init>= <expr><call><name><name>num</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>ptr2</name> <init>= <expr><call><name><name>num</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ptr2</name><operator>--</operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cnt2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>ptr1</name> <operator>!=</operator> <name>ptr2</name></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>tl</name> <init>= <expr><name><name>ptr1</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>tr</name> <init>= <expr><name><name>ptr2</name><operator>-&gt;</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>cnt1</name> <operator>+</operator> <name><name>ptr1</name><operator>-&gt;</operator><name>second</name></name> <operator>&lt;</operator> <name>cnt2</name> <operator>+</operator> <name><name>ptr2</name><operator>-&gt;</operator><name>second</name></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cnt1</name> <operator>+=</operator> <name><name>ptr1</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr1</name><operator>++</operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>delta</name> <init>= <expr><literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><name><name>ptr1</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator> <name>tl</name><operator>)</operator> <operator>*</operator> <name>cnt1</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>delta</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>k</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt></block></then>
			<else>else
			<block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>ansl</name> <init>= <expr><name>tl</name> <operator>+</operator> <name>k</name> <operator>/</operator> <name>cnt1</name></expr></init></decl>, <decl><type ref="prev"/><name>ansr</name> <init>= <expr><name>tr</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ansr</name> <operator>-</operator> <name>ansl</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></else></if>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>cnt2</name> <operator>+=</operator> <name><name>ptr2</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ptr2</name><operator>--</operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>delta</name> <init>= <expr><literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><name>tr</name> <operator>-</operator> <name><name>ptr2</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator> <operator>*</operator> <name>cnt2</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>delta</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>k</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt></block></then>
			<else>else
			<block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>ansl</name> <init>= <expr><name>tl</name></expr></init></decl>, <decl><type ref="prev"/><name>ansr</name> <init>= <expr><name>tr</name> <operator>-</operator> <name>k</name> <operator>/</operator> <name>cnt2</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ansr</name> <operator>-</operator> <name>ansl</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<if>if <condition>(<expr><name>ptr1</name> <operator>==</operator> <name>ptr2</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
