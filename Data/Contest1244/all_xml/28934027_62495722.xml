<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934027_62495722.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>adjacency</name><argument_list>(<argument><expr><name>n</name></expr></argument> )</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>cost</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block></for>


    <decl_stmt><decl><type><name>int</name></type> <name>maxi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>f</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>f</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adjacency</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adjacency</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxi</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>maxi</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>adjacency</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>maxi</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>maxi</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>adjacency</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <if>if<condition>(<expr><name>maxi</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>


    <decl_stmt><decl><type><name>int</name></type> <name>leaf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c</name><operator>&lt;</operator><call><name><name>adjacency</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><name><name>adjacency</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>leaf</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>bestColors</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>col1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>col1</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>col1</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>col2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>col2</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>col2</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name>col1</name> <operator>==</operator> <name>col2</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>colors</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>col3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>col1</name><operator>&amp;&amp;</operator><name>i</name><operator>!=</operator><name>col2</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>col3</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if></block></for>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>currentCost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>act</name> <init>= <expr><name>leaf</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>seen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>prec</name> <init>= <expr><name>leaf</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>toogle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>seen</name> <operator>!=</operator> <name>n</name></expr>)</condition> <block>{
                <if>if<condition>(<expr><name>toogle</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>colors</name><index>[<expr><name>act</name></expr>]</index></name><operator>=</operator><name>col1</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>currentCost</name><operator>+=</operator><name><name>cost</name><index>[<expr><name>col1</name></expr>]</index><index>[<expr><name>act</name></expr>]</index></name></expr>;</expr_stmt>}</block></then>
                <elseif>else <if>if<condition>(<expr><name>toogle</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>colors</name><index>[<expr><name>act</name></expr>]</index></name><operator>=</operator><name>col2</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>currentCost</name><operator>+=</operator><name><name>cost</name><index>[<expr><name>col2</name></expr>]</index><index>[<expr><name>act</name></expr>]</index></name></expr>;</expr_stmt>}</block></then></if></elseif></if>
                <if>if<condition>(<expr><name>toogle</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>colors</name><index>[<expr><name>act</name></expr>]</index></name><operator>=</operator><name>col3</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>currentCost</name><operator>+=</operator><name><name>cost</name><index>[<expr><name>col3</name></expr>]</index><index>[<expr><name>act</name></expr>]</index></name></expr>;</expr_stmt>}</block></then></if>
                <expr_stmt><expr><name>seen</name><operator>++</operator></expr>;</expr_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>a</name><operator>&lt;</operator><name><name>adjacency</name><index>[<expr><name>act</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name><name>adjacency</name><index>[<expr><name>act</name></expr>]</index><index>[<expr><name>a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name>n2</name> <operator>!=</operator> <name>prec</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>prec</name> <operator>=</operator> <name>act</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name>act</name> <operator>=</operator> <name>n2</name></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
                <expr_stmt><expr><name>toogle</name><operator>++</operator></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>toogle</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>toogle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
            }</block></while>
            <if>if<condition>(<expr><name>res</name><operator>==</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>res</name> <operator>&gt;</operator> <name>currentCost</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>res</name> <operator>=</operator> <name>currentCost</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>copy</name><argument_list>(<argument><expr><call><name><name>colors</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>colors</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>bestColors</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c</name><operator>&lt;</operator><call><name><name>bestColors</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>bestColors</name><index>[<expr><name>c</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
}</block></function>
</unit>
