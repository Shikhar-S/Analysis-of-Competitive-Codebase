<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28927253_62494359.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"-ffloat-store"</cpp:literal><name>)</name></cpp:pragma> <comment type="line">// to restrict undesirable precision</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"-fno-defer-pop"</cpp:literal><name>)</name></cpp:pragma><comment type="line">// to pop argument of function as soon as it returns</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{ <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if> <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name><operator>%</operator><name>m</name></expr>;</return></block></then></if> <decl_stmt><decl><type><name>ll</name></type> <name>t</name><init>=<expr><call><name>power</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>%</operator><name>m</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>t</name><operator>=</operator><operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt> <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><operator>(</operator><operator>(</operator><name>t</name><operator>%</operator><name>m</name><operator>)</operator><operator>*</operator><operator>(</operator><name>a</name><operator>%</operator><name>m</name><operator>)</operator><operator>)</operator><operator>%</operator><name>m</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>t</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>modInverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>power</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m</name><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ps</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>takeline</name></cpp:macro> <cpp:value>cin.ignore();</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>3000005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<comment type="line">//((1.0l)*BIG MULTIPLY MAGIC?)</comment>
<comment type="line">// string to integer stoi()</comment>
<comment type="line">// string to long long stoll()</comment>
<comment type="line">// string.substr(position,length);</comment>
<comment type="line">// integer to string to_string();</comment>
<comment type="line">//-----------------------------------------------</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>x</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>g</name><init>=<expr><call><name>__gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>p</name><operator>%</operator><name>g</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>p</name><operator>%</operator><name>w</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><operator>(</operator><name>n</name><operator>-</operator><name>p</name><operator>/</operator><name>w</name><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>p</name><operator>/</operator><name>w</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>p</name><operator>/</operator><name>w</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="string">" 0 "</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><name>p</name><operator>/</operator><name>w</name><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name>ll</name></type> <name>rem</name><init>=<expr><operator>(</operator><name>p</name><operator>%</operator><name>w</name><operator>)</operator></expr></init></decl>,<decl><type ref="prev"/><name>qe</name><init>=<expr><operator>(</operator><name>p</name><operator>/</operator><name>w</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>rem</name><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>n</name><operator>-</operator><name>qe</name><operator>-</operator><operator>(</operator><name>rem</name><operator>/</operator><name>d</name><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>qe</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><operator>(</operator><name>rem</name><operator>/</operator><name>d</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>qe</name><operator>-</operator><operator>(</operator><name>rem</name><operator>/</operator><name>d</name><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<comment type="line">//cout&lt;&lt;rem&lt;&lt;endl;</comment>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><call><name>min</name><argument_list>(<argument><expr><name>qe</name></expr></argument>,<argument><expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><operator>(</operator><name>rem</name><operator>+</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>%</operator><name>d</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><operator>(</operator><name>n</name><operator>-</operator><operator>(</operator><name>qe</name><operator>-</operator><name>i</name><operator>)</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>rem</name><operator>+</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>d</name><operator>)</operator><operator>)</operator><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<comment type="line">//cout&lt;&lt;(rem+i*w)&lt;&lt;endl;</comment>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>qe</name><operator>-</operator><name>i</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><operator>(</operator><name>rem</name><operator>+</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>d</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><operator>(</operator><name>n</name><operator>-</operator><operator>(</operator><name>qe</name><operator>-</operator><name>i</name><operator>)</operator><operator>-</operator><operator>(</operator><operator>(</operator><name>rem</name><operator>+</operator><name>i</name><operator>*</operator><name>w</name><operator>)</operator><operator>/</operator><name>d</name><operator>)</operator><operator>)</operator><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"-1"</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
