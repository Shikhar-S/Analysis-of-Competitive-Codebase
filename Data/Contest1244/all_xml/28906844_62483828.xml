<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28906844_62483828.cpp"><comment type="block">/*
AuThOr GaRyMr
æå·§:
1.åºå«å¯¹å¾å¤§æ°æ®&amp;å°æ°æ®ï¼
2.Dpé¾æ¨æ¶ç®è´¡ç®ï¼
3.long long (å°¤å¶ä¹æ³)ï¼
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a=b;a&lt;=c;++a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a=b;a&gt;=c;--a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>niv</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IT</name></cpp:macro> <cpp:value>iterator</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>II</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FIR</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEC</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREO</name></cpp:macro> <cpp:value>freopen("check.out","w",stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a=0;a&lt;b;++a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KEEP</name></cpp:macro> <cpp:value>while(1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRAND</name></cpp:macro> <cpp:value>mt19937 rng(chrono::steady_clock::now().time_since_epoch().count())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>random</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rng()%a</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>mp</name></expr></argument>,<argument><expr><name>mp</name></expr></argument>&gt;</argument_list></name></type> <name>superpair</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">100000</literal><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>degree</name><index>[<expr><literal type="number">100000</literal><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>each</name><index>[<expr><literal type="number">100000</literal><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>order</name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>las</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>laslas</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>now</name><operator>&gt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>Is</name></decl>;</decl_stmt>
	<macro><name>rb</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>las</name><operator>&amp;&amp;</operator><name>i</name><operator>!=</operator><name>laslas</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>Is</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block>
	<return>return <expr><call>(<name>LL</name>)<argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>Is</name></expr>]</index><index>[<expr><name><name>order</name><index>[<expr><name>now</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>dfs</name><argument_list>(<argument><expr><name>now</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>Is</name></expr></argument>,<argument><expr><name>las</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function><decl_stmt><decl><type><name>int</name></type> <name><name>col</name><index>[<expr><literal type="number">100000</literal><operator>+</operator><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>recover</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>las</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>laslas</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>now</name><operator>&gt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>Is</name></decl>;</decl_stmt>
	<macro><name>rb</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>las</name><operator>&amp;&amp;</operator><name>i</name><operator>!=</operator><name>laslas</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>Is</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block>
	<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>order</name><index>[<expr><name>now</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>Is</name></expr>;</expr_stmt>
<comment type="line">//	printf("%d ",Is);</comment>
	<expr_stmt><expr><call><name>recover</name><argument_list>(<argument><expr><name>now</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>Is</name></expr></argument>,<argument><expr><name>las</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>dfs_put</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>las</name></decl></parameter>)</parameter_list><block>{
<comment type="line">//	cout&lt;&lt;now&lt;&lt;endl;</comment>
	<expr_stmt><expr><call><name><name>order</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>degree</name><index>[<expr><name>now</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>las</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name><name>each</name><index>[<expr><name>now</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>it</name><operator>!=</operator><name>las</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>dfs_put</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<macro><name>rb</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
		<macro><name>rb</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rb</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>u</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>each</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>each</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>degree</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>degree</name><index>[<expr><name>v</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block>
	<macro><name>rb</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name><name>degree</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">3</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block>
	<decl_stmt><decl><type><name>int</name></type> <name>root</name></decl>;</decl_stmt>
	<macro><name>rb</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name><name>degree</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>root</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block>
	<expr_stmt><expr><call><name><name>order</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>dfs_put</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	cout&lt;&lt;root&lt;&lt;endl;</comment>
	<expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>LL</name><operator>)</operator><literal type="number">1000000000</literal><operator>*</operator><literal type="number">2000000</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rb</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
		<macro><name>rb</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
	}</block>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<macro><name>rb</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
		<macro><name>rb</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name>tmp</name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name><name>order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>tmp</name><operator>==</operator><name>res</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>order</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>col</name><index>[<expr><name><name>order</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>recover</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block>
	}</block>
	<macro><name>rb</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
