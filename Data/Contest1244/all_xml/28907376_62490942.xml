<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28907376_62490942.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lld</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<decl_stmt><decl><type><name>lld</name></type> <name><name>val</name><index>[<expr><literal type="number">111111</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>dp</name><index>[<expr><literal type="number">111111</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ans</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>lld</name></type> <name>recur</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>z2</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>lld</name></type> <name>ans</name> <init>= <expr><name><name>val</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>s</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>e</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>e</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>now</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name><name>v</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>e</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>next</name><operator>!=</operator><name>left</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>q</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{
					<if>if<condition>(<expr><name>s</name><operator>!=</operator><name>q</name><operator>&amp;&amp;</operator><name>z</name><operator>!=</operator><name>q</name></expr>)</condition><then><block>{
						<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>recur</name><argument_list>(<argument><expr><name>next</name></expr></argument>,<argument><expr><name>now</name></expr></argument>,<argument><expr><name>z</name></expr></argument>,<argument><expr><name>q</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then><elseif>else <if>if<condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>q</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{
					<if>if<condition>(<expr><name>s</name><operator>!=</operator><name>q</name><operator>&amp;&amp;</operator><name>z2</name><operator>!=</operator><name>q</name></expr>)</condition><then><block>{
						<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>recur</name><argument_list>(<argument><expr><name>next</name></expr></argument>,<argument><expr><name>now</name></expr></argument>,<argument><expr><name>z2</name></expr></argument>,<argument><expr><name>q</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			}</block></then></if></elseif></if>
		}</block></then></if>
	}</block></for>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>recur2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>left</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>z2</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>ans</name><index>[<expr><name>now</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>e</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>e</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>now</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>next</name> <init>= <expr><name><name>v</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>e</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>next</name><operator>!=</operator><name>left</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>q</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{
					<if>if<condition>(<expr><name>s</name><operator>!=</operator><name>q</name><operator>&amp;&amp;</operator><name>z</name><operator>!=</operator><name>q</name></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name>recur2</name><argument_list>(<argument><expr><name>next</name></expr></argument>,<argument><expr><name>now</name></expr></argument>,<argument><expr><name>z</name></expr></argument>,<argument><expr><name>q</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then><elseif>else <if>if<condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<for>for<control>(<init><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>q</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{
					<if>if<condition>(<expr><name>s</name><operator>!=</operator><name>q</name><operator>&amp;&amp;</operator><name>z2</name><operator>!=</operator><name>q</name></expr>)</condition><then><block>{
						<expr_stmt><expr><call><name>recur2</name><argument_list>(<argument><expr><name>next</name></expr></argument>,<argument><expr><name>now</name></expr></argument>,<argument><expr><name>z2</name></expr></argument>,<argument><expr><name>q</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			}</block></then></if></elseif></if>
		}</block></then></if>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>e</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>e</name><operator>&lt;</operator><literal type="number">111111</literal></expr>;</condition><incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>p</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition><incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>q</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition><incr><expr><name>q</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <literal type="number">1e18</literal></expr>;</expr_stmt></block></for></block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>e</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>e</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>e</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>e</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>e</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>e</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>val</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>e</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>e</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>v</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>e</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>e</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>v</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name>lld</name></type> <name>mm</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>e</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>e</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>p</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>q</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>q</name><operator>&lt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>q</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name>e</name><operator>==</operator><name>p</name><operator>||</operator><name>p</name><operator>==</operator><name>q</name><operator>||</operator><name>e</name><operator>==</operator><name>q</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<decl_stmt><decl><type><name>lld</name></type> <name>now</name> <init>= <expr><call><name>recur</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>p</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>now</name><operator>&lt;</operator><name>mm</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>mm</name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>s</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>t</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>mm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>recur2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>s</name></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>e</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>e</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
