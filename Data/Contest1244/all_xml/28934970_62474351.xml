<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934970_62474351.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"O2"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<comment type="line">//#pragma GCC optimize("no-stack-protector,fast-math")</comment>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>piii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#x&lt;&lt;'='&lt;&lt;(x)&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#x&lt;&lt;"= {"&lt;&lt;(x.first)&lt;&lt;", "&lt;&lt;(x.second)&lt;&lt;"}"&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;"{"&lt;&lt;#x&lt;&lt;", "&lt;&lt;#y&lt;&lt;"} = {"&lt;&lt;(x)&lt;&lt;", "&lt;&lt;(y)&lt;&lt;"}"&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugv</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#v&lt;&lt;" : ";for (auto x:v) cerr&lt;&lt;x&lt;&lt;' ';cerr&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kill</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return cout&lt;&lt;x&lt;&lt;'\n', 0;</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>eps</name><init>=<expr><literal type="number">1e-7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><literal type="number">1000000010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name><init>=<expr><literal type="number">10000000000000010LL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>, <decl><type ref="prev"/><name>LOG</name><init>=<expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//freopen("input.txt", "r", stdin);</comment>
	<comment type="line">//freopen("output.txt", "w", stdout);</comment>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>g</name><init>=<expr><call><name>__gcd</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>p</name><operator>%</operator><name>g</name></expr>)</condition><then> <block type="pseudo"><macro><name>kill</name><argument_list>(<argument>-<literal type="number">1</literal></argument>)</argument_list></macro>
	<expr_stmt><expr><name>p</name><operator>/=</operator><name>g</name></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name>w</name><operator>/=</operator><name>g</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>d</name><operator>/=</operator><name>g</name></expr>;</expr_stmt>
	
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>pp</name><init>=<expr><name>p</name><operator>-</operator><name>y</name><operator>*</operator><name>d</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>pp</name><operator>%</operator><name>w</name> <operator>||</operator> <name>pp</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
		<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><name>pp</name><operator>/</operator><name>w</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>x</name><operator>+</operator><name>y</name><operator>&gt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
		<if>if <condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>y</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>x</name><operator>*</operator><name>w</name><operator>+</operator><name>y</name><operator>*</operator><name>d</name><operator>!=</operator><name>p</name></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><name>x</name><operator>-</operator><name>y</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></for>
	
	<macro><name>kill</name><argument_list>(<argument>-<literal type="number">1</literal></argument>)</argument_list></macro>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
