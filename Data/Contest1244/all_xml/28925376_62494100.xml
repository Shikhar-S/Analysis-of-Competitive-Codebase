<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925376_62494100.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<function><specifier>inline</specifier> <type><name>ll</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init>;</init> <condition><expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><name>f</name></expr>;</expr_stmt></block></then></if></block></for>
    <for>for<control>(<init>;</init> <condition><expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>x</name> <operator>*</operator> <name>f</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>chkmin</name><parameter_list>( <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> )</parameter_list> <block>{ <if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block></then></if> }</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>chkmax</name><parameter_list>( <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> )</parameter_list> <block>{ <if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block></then></if> }</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name></cpp:macro> <cpp:value>read()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ln</name></cpp:macro> <cpp:value>endl</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>_</name></expr>;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>=</operator> <name>_</name></expr>;</expr_stmt>
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> 
		<block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>_</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>( <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>mx</name> <init>= <expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>mn</name> <init>= <expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<comment type="line">// cout &lt;&lt; upper_bound(a + 1, a + n + 1, 1) - a &lt;&lt; ln;</comment>
	<while>while<condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> 
	<block>{
		<if>if<condition>(<expr><name>mn</name> <operator>&gt;=</operator> <name>mx</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr> <operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>pos1</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mn</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pos2</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mx</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><operator>--</operator><name>pos1</name></expr>;</expr_stmt>
		<comment type="line">// cout &lt;&lt; pos1 &lt;&lt; " " &lt;&lt; pos2 &lt;&lt; " ";</comment>
		<if>if<condition>(<expr><name>n</name> <operator>-</operator> <name>pos2</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>pos1</name></expr>)</condition><then>
		<block>{
			<comment type="line">// puts("r");</comment>
			<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><name>k</name> <operator>/</operator> <operator>(</operator> <name>n</name> <operator>-</operator> <name>pos2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>tmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mx</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>pos2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator> <name>n</name> <operator>-</operator> <name>pos2</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>mx</name> <operator>-=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mx</name> <operator>-</operator><name><name>a</name><index>[<expr><name>pos2</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else
		<block>{
			<comment type="line">// puts("l");</comment>
			<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><name>k</name> <operator>/</operator> <name>pos1</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>tmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<comment type="line">// cout &lt;&lt; tmp &lt;&lt; ln;</comment>
			<expr_stmt><expr><name>k</name> <operator>-=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>pos1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>mn</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>pos1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>mn</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>pos1</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>mn</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<comment type="line">// cout &lt;&lt; k &lt;&lt; ln;</comment>
		<comment type="line">// cout &lt;&lt; mn &lt;&lt; " " &lt;&lt; mx &lt;&lt; ln;</comment>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>max</name><argument_list>(<argument><expr><name>mx</name> <operator>-</operator> <name>mn</name></expr></argument>, <argument><expr><literal type="number">0ll</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>ln</name></expr>;</expr_stmt>
}</block></function></unit>
