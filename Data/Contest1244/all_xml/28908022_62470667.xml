<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28908022_62470667.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scan</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn1</name><init>=<expr><literal type="number">205</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>s1</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>lens</name><init>=<expr><call><name><name>s1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>index1</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>index2</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>lens</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>index1</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>lens</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>index2</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>index1</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
		<else>else<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>temp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>temp</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>index1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>index1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>temp1</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>temp1</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>index2</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>index2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>temp</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>temp</name></expr></argument>,<argument><expr><name>temp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>temp</name><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function> 
</unit>
