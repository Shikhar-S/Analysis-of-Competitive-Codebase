<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28903088_62498031.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>100006</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>B</name><index>[<expr><name>M</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cnt</name><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>B</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>B</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><call><name>unique</name><argument_list>(<argument><expr><name>B</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>B</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><name>B</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>B</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>B</name><operator>+</operator><name>len</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><name>B</name></expr><operator>,</operator><expr><name><name>cnt</name><index>[<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>len</name></expr></init></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>l</name><argument_list type="generic">&lt;<argument><expr><name>r</name><operator>&amp;&amp;</operator><name>k</name></expr></argument>&gt;</argument_list></name><literal type="number">0</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name><operator>&lt;=</operator><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>now</name><init>=<expr><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>B</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>B</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>k</name><operator>&lt;=</operator><name>now</name></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>u</name><init>=<expr><name>k</name><operator>/</operator><name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>B</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name>u</name><operator>-</operator><name><name>B</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>k</name><operator>-=</operator><name>now</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>now</name><init>=<expr><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>B</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>B</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>k</name><operator>&lt;=</operator><name>now</name></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>u</name><init>=<expr><name>k</name><operator>/</operator><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>ans</name><operator>=</operator><name><name>B</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name>u</name><operator>-</operator><name><name>B</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
			<expr_stmt><expr><name>k</name><operator>-=</operator><name>now</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
