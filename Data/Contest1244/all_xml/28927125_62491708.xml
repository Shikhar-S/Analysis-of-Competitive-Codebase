<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28927125_62491708.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; n; i++)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>local</name></cpp:ifdef>
  <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// local</comment>
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>q</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>p</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block></while> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>q</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>q</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>q</name><operator>--</operator></expr>;</expr_stmt></block></while> <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
  <if>if<condition>(<expr><name>p</name> <operator>&gt;=</operator> <name>q</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name><name>a</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><name><name>p</name> <argument_list type="generic">&lt; <argument><expr><name>q</name> <operator>&amp;&amp;</operator> <name>k</name></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>dp</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>dq</name> <init>= <expr><name>n</name> <operator>-</operator> <name>q</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>dp</name> <operator>&lt;</operator> <name>dq</name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><name><name>a</name><index>[<expr><name>p</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name>ll</name><operator>)</operator> <name>dx</name> <operator>*</operator> <name>dp</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name>ll</name><operator>)</operator> <name>dx</name> <operator>*</operator> <name>dp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>dx</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tp</name> <init>= <expr><operator>++</operator><name>p</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>q</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>tp</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block></while> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name>dp</name></expr>;</expr_stmt>
        <break>break;</break>
      }</block></else></if>
      <comment type="line">//cout &lt;&lt; ans &lt;&lt; '\n';</comment>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>dx</name> <init>= <expr><name><name>a</name><index>[<expr><name>q</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>q</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name>ll</name><operator>)</operator> <name>dx</name> <operator>*</operator> <name>dq</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name>ll</name><operator>)</operator> <name>dx</name> <operator>*</operator> <name>dq</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>dx</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tq</name> <init>= <expr><operator>--</operator><name>q</name></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>q</name> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>tq</name></expr>]</index></name> <operator>==</operator> <name><name>a</name><index>[<expr><name>q</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>q</name><operator>--</operator></expr>;</expr_stmt></block></while> <expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>ans</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <name>dq</name></expr>;</expr_stmt>
        <break>break;</break>
      }</block></else></if>
    }</block></else></if>
  }</block></while>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
