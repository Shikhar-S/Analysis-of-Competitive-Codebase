<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934528_62474008.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>  <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppi</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>	
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">111</literal></expr></init></decl> , <decl><type ref="prev"/><name>NS</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">11</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"inp.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>freq</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>freq</name><index>[<expr><name>val</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<while>while <condition>(<expr><name>k</name> <operator>&amp;&amp;</operator> <call><name><name>freq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>auto</name></type> <name>it_l</name> <init>= <expr><call><name><name>freq</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>auto</name></type> <name>it_r</name> <init>= <expr><operator>--</operator><call><name><name>freq</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>it_r</name><operator>-&gt;</operator><name>second</name></name> <operator>&gt;=</operator> <name><name>it_l</name><operator>-&gt;</operator><name>second</name></name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>nxt</name> <init>= <expr><operator>++</operator><call><name><name>freq</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>ppi</name></type> <name>v</name> <init>= <expr><operator>*</operator><name>it_l</name></expr></init></decl>;</decl_stmt> 
			<expr_stmt><expr><call><name><name>freq</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it_l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>dis</name> <init>= <expr><operator>(</operator><name><name>nxt</name><operator>-&gt;</operator><name>first</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>first</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><literal type="number">1LL</literal> <operator>*</operator> <name>dis</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>second</name></name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>dis</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nxt</name><operator>-&gt;</operator><name>second</name></name> <operator>+=</operator> <name><name>v</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>go</name> <init>= <expr><name>k</name> <operator>/</operator> <name><name>v</name><operator>.</operator><name>second</name></name> <operator>+</operator> <name><name>v</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>freq</name><index>[<expr><name>go</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>nxt</name> <init>= <expr><operator>--</operator><operator>--</operator><call><name><name>freq</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>ppi</name></type> <name>v</name> <init>= <expr><operator>*</operator><name>it_r</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>freq</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>dis</name> <init>= <expr><operator>(</operator><name><name>v</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>nxt</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><literal type="number">1LL</literal> <operator>*</operator> <name>dis</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>second</name></name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">1LL</literal> <operator>*</operator> <name>dis</name> <operator>*</operator> <name><name>v</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>nxt</name><operator>-&gt;</operator><name>second</name></name> <operator>+=</operator> <name><name>v</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>go</name> <init>= <expr><operator>-</operator><name>k</name> <operator>/</operator> <name><name>v</name><operator>.</operator><name>second</name></name> <operator>+</operator> <name><name>v</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>freq</name><index>[<expr><name>go</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><operator>--</operator><call><name><name>freq</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>first</name> <operator>-</operator> <call><name><name>freq</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr>;</expr_stmt>
}</block></function></unit>
