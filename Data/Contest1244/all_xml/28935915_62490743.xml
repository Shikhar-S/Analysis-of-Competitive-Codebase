<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935915_62490743.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><literal type="number">100010</literal></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>k</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
        <block type="pseudo"><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><break>break;</break></block></else></if></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><break>break;</break></block></else></if></block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>l</name><operator>&lt;</operator><name>r</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>l</name><operator>&lt;</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>k</name><operator>&gt;=</operator><name>l</name><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><name>l</name><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                    <block type="pseudo"><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
                    <else>else <block type="pseudo"><break>break;</break></block></else></if></block></for>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>ans</name><operator>=</operator><name>k</name><operator>/</operator><name>l</name></expr>;</expr_stmt><break>break;</break>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <if>if <condition>(<expr><name>k</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>r</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
                    <if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then>
                    <else>else <block type="pseudo"><break>break;</break></block></else></if>
                }</block></for>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><name>ans</name><operator>=</operator><name>k</name><operator>/</operator><operator>(</operator><name>n</name><operator>-</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt><break>break;</break>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <if>if <condition>(<expr><name>l</name><operator>&gt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><name>l</name></expr>]</index></name><operator>-</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
