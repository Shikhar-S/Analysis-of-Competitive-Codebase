<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28934515_62488922.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
 
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>px</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>py</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>par</name></decl></parameter>)</parameter_list><block>{
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>: <expr><name><name>v</name><index>[<expr><name>node</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
        <if>if<condition>(<expr><name>par</name> <operator>==</operator> <name>i</name></expr>)</condition><then>    <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name>px</name> <operator>!=</operator> <literal type="number">3</literal> <operator>and</operator> <name>py</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>c</name><index>[<expr><name>node</name></expr>]</index></name> <operator>+</operator> <call><name>Get</name><argument_list>(<argument><expr><name>py</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
        <if>if<condition>(<expr><name>px</name> <operator>!=</operator> <literal type="number">2</literal> <operator>and</operator> <name>py</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>b</name><index>[<expr><name>node</name></expr>]</index></name> <operator>+</operator> <call><name>Get</name><argument_list>(<argument><expr><name>py</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
        <return>return <expr><name><name>a</name><index>[<expr><name>node</name></expr>]</index></name> <operator>+</operator> <call><name>Get</name><argument_list>(<argument><expr><name>py</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></for>
    <if>if<condition>(<expr><name>px</name> <operator>!=</operator> <literal type="number">3</literal> <operator>and</operator> <name>py</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>c</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>px</name> <operator>!=</operator> <literal type="number">2</literal> <operator>and</operator> <name>py</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>b</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</return></block></then></if>
    <return>return <expr><name><name>a</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>Solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>px</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>py</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>node</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>par</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>px</name> <operator>!=</operator> <literal type="number">3</literal> <operator>and</operator> <name>py</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>px</name> <operator>!=</operator> <literal type="number">2</literal> <operator>and</operator> <name>py</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>px</name> <operator>!=</operator> <literal type="number">1</literal> <operator>and</operator> <name>py</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>: <expr><name><name>v</name><index>[<expr><name>node</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
        <if>if<condition>(<expr><name>par</name> <operator>!=</operator> <name>i</name></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><call><name>Solve</name><argument_list>(<argument><expr><name>py</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>node</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>    
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <comment type="line">//ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>st</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal></expr><operator>,</operator>  <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>    <block type="pseudo"><expr_stmt><expr><name>st</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>mx</name> <init>= <expr><name>inf</name></expr></init></decl>, <decl><type ref="prev"/><name>sx</name></decl>, <decl><type ref="prev"/><name>sy</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><then>  <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><call><name>Get</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>val</name> <operator>&lt;</operator> <name>mx</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>mx</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>sy</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>Get</name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Solve</name><argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>st</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
    }</block></for>
}</block></function></unit>
