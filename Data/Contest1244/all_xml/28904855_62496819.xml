<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28904855_62496819.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>                      <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                      <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>for(ll i=(a);i&lt;=(b);i+=(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repb</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>for(ll i=(a);i&gt;=(b);i-=(c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro>                     <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro>                     <cpp:value>1e18</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro>                      <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>                      <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpll</name></cpp:macro>                    <cpp:value>vector&lt;pair&lt;ll,ll&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro>                     <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vld</name></cpp:macro>                     <cpp:value>vector&lt;ld&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvll</name></cpp:macro>                    <cpp:value>vector&lt;vector&lt;ll&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvld</name></cpp:macro>                    <cpp:value>vector&lt;vector&lt;ld&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro>                     <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvpll</name></cpp:macro>                   <cpp:value>vector&lt;vector&lt;pair&lt;ll,ll&gt;&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pqll</name></cpp:macro>                    <cpp:value>priority_queue&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mll</name></cpp:macro>                     <cpp:value>map&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mlc</name></cpp:macro>                     <cpp:value>map&lt;ll,char&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>um</name></cpp:macro>                      <cpp:value>unordered_map</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>umll</name></cpp:macro>                    <cpp:value>um&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>umlc</name></cpp:macro>                    <cpp:value>um&lt;ll,char&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                  <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro>                      <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro>                      <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ln</name></cpp:macro>                      <cpp:value>cout&lt;&lt;"\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro>                    <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name></cpp:macro>                    <cpp:value>ll T;cin&gt;&gt;T;while(T--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isvowel</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>(a == 'a' || a == 'e' || a == 'i' || a == 'o' || a == 'u')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastIO</name></cpp:macro>                  <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>show</name><parameter_list>(<parameter><type><name>w</name></type></parameter>,<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>for(ll i=0;i&lt;size;i++) cout&lt;&lt;w[i]&lt;&lt;" ";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>cout&lt;&lt;a&lt;&lt;"\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mset</name><parameter_list>(<parameter><type><name>dp</name></type></parameter>,<parameter><type><name>no</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>memset(dp,no,sizeof(dp))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>              <cpp:value>rep(i,0,n-1,1) cin&gt;&gt;a[i];</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>countbit</name></cpp:macro>                <cpp:value>__builtin_popcount</cpp:value></cpp:define>                                           <comment type="line">//Number of setbits in decimal notation</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>lower_bound(all(v),val)-v.begin()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>upper_bound(all(v),val)-v.begin()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SS</name></cpp:macro>                      <cpp:value>stringstream</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>                 <cpp:value>__f(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>__f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>Arg1</name><modifier>&amp;&amp;</modifier></type> <name>arg1</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>name</name> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>arg1</name> <operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Arg1</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>__f</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>names</name></decl></parameter>, <parameter><decl><type><name>Arg1</name><modifier>&amp;&amp;</modifier></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>&amp;&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>comma</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>names</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>cerr</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>comma</name> <operator>-</operator> <name>names</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" : "</literal> <operator>&lt;&lt;</operator> <name>arg1</name> <operator>&lt;&lt;</operator> <literal type="string">" | "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>__f</name><argument_list>(<argument><expr><name>comma</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>fastIO</name>
	<name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>input</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>umll</name></type> <name>mp</name></decl>,<decl><type ref="prev"/><name>greater</name></decl>,<decl><type ref="prev"/><name>smaller</name></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
	<expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
	<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
	<block type="pseudo"><expr_stmt><expr><name><name>greater</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
	<macro><name>repb</name><argument_list>(<argument>i</argument>,<argument>n-<literal type="number">2</literal></argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
	<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
	<block type="pseudo"><expr_stmt><expr><name><name>smaller</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
	
	<decl_stmt><decl><type><name>ll</name></type> <name>sm</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>lg</name><init>=<expr><name><name>a</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>k</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>sm</name><operator>&gt;=</operator><name>lg</name></expr>)</condition><then>
		<block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name><name>mp</name><index>[<expr><name>sm</name></expr>]</index></name><operator>&lt;</operator><name><name>mp</name><index>[<expr><name>lg</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><operator>(</operator><name><name>greater</name><index>[<expr><name>sm</name></expr>]</index></name><operator>-</operator><name>sm</name><operator>)</operator><operator>*</operator><name><name>mp</name><index>[<expr><name>sm</name></expr>]</index></name><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
			<block>{
			<expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name><name>greater</name><index>[<expr><name>sm</name></expr>]</index></name><operator>-</operator><name>sm</name><operator>)</operator><operator>*</operator><name><name>mp</name><index>[<expr><name>sm</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>greater</name><index>[<expr><name>sm</name></expr>]</index></name></expr>]</index></name><operator>+=</operator><name><name>mp</name><index>[<expr><name>sm</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>sm</name><operator>=</operator><name><name>greater</name><index>[<expr><name>sm</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
			<expr_stmt><expr><name>sm</name><operator>=</operator><operator>(</operator><name>k</name><operator>/</operator><name><name>mp</name><index>[<expr><name>sm</name></expr>]</index></name><operator>)</operator><operator>+</operator><name>sm</name></expr>;</expr_stmt>	
			<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>	
			}</block></else></if>
		}</block></then>
		<else>else
		<block>{
			<if>if<condition>(<expr><operator>(</operator><name>lg</name><operator>-</operator><name><name>smaller</name><index>[<expr><name>lg</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>mp</name><index>[<expr><name>lg</name></expr>]</index></name><operator>&lt;=</operator><name>k</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>k</name><operator>-=</operator><operator>(</operator><name>lg</name><operator>-</operator><name><name>smaller</name><index>[<expr><name>lg</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>mp</name><index>[<expr><name>lg</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>mp</name><index>[<expr><name><name>smaller</name><index>[<expr><name>lg</name></expr>]</index></name></expr>]</index></name><operator>+=</operator><name><name>mp</name><index>[<expr><name>lg</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>lg</name><operator>=</operator><name><name>smaller</name><index>[<expr><name>lg</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>lg</name><operator>=</operator><name>lg</name><operator>-</operator><operator>(</operator><name>k</name><operator>/</operator><name><name>mp</name><index>[<expr><name>lg</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
		
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>lg</name><operator>-</operator><name>sm</name></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
