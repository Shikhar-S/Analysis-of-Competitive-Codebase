<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28922628_62492163.cpp">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;long long&gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fori</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = a;i &lt;= b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forj</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll j = a;j &lt;= b;j++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fork</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll k = a;k &lt;= b;k++)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; a &gt;&gt; b;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; a;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a&lt;b?b:a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a&gt;b?b:a)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>mod</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><call><name>power</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <return>return <expr><operator>(</operator><name>x</name><operator>*</operator><name>temp</name><operator>*</operator><name>temp</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
    }</block></then> <else>else <block>{
        <return>return <expr><operator>(</operator><name>temp</name><operator>*</operator><name>temp</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
    }</block></else></if>
}</block></function>
<function><type><name>ll</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then><block>{
        <return>return <expr><name>a</name> <operator>-</operator> <name>b</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>b</name> <operator>-</operator> <name>a</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>fac</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>sol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>sol</name> <operator>*=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sol</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block>
    <return>return <expr><name>sol</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>sol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name></expr>)</condition><block>{
        <expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sol</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>sol</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>fromBinary</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>sol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>n</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>sol</name> <operator>+=</operator> <name><name>n</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sol</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>sol</name><operator>/</operator><literal type="number">2</literal></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>vll</name></type> <name>num</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>num2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vll</name></type> <name>deleted</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>deleteOrNo</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><call><name><name>num2</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if<condition>(<expr><name>deleteOrNo</name></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name><name>num2</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>deleted</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif></if>
}</block></function>
<function><type><name>bool</name></type> <name>thinksHeIsBetter</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
        <if>if<condition>(<expr><name>a</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <return>return <expr><literal type="boolean">true</literal></expr>;</return>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>a</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        }</block></else></if>
        <if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <return>return <expr><literal type="boolean">false</literal></expr>;</return>
        }</block></then></if>
    }</block></while>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>ceny</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>ceny</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>ceny</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>ceny</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>graph</name></decl>;</decl_stmt>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>n-<literal type="number">2</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graph</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graph</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>colorings</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>aku</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> main</decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>check</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>seen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>sol</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>lowest</name> <init>= <expr><literal type="number">10000000000000000</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>color</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>lowestC</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>firstMain</name></decl>;</decl_stmt>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro><block>{
        <comment type="line">//cout &lt;&lt; "-------------" &lt;&lt; endl;</comment>
        <macro><name>forj</name><argument_list>(<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>graph</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>firstMain</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block>
        <while>while<condition>(<expr><call><name><name>check</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{
            <expr_stmt><expr><call><name><name>check</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name>check</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>firstMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>seen</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>seen</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>firstMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>color</name><index>[<expr><name>firstMain</name></expr>]</index></name> <operator>=</operator> <name><name>colorings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>sol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>sol</name> <operator>+=</operator> <name><name>ceny</name><index>[<expr><name><name>colorings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name>firstMain</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <while>while<condition>(<expr><operator>!</operator><call><name><name>check</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
            <expr_stmt><expr>main <operator>=</operator> <call><name><name>check</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>check</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;</operator> <name><name>graph</name><index>[<expr/></index></name>main]<operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>graph</name><index>[<expr/></index></name>main]<operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                }</block></then></if>
                <if>if<condition>(<expr><call><name><name>seen</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name><name>graph</name><index>[<expr/></index></name>main]<index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <continue>continue;</continue>
                }</block></then></if>
                <expr_stmt><expr><name><name>color</name><index>[<expr><name><name>graph</name><index>[<expr/></index></name></expr></index></name>main]<index>[<expr><name>j</name></expr>]</index>] <operator>=</operator> <name><name>colorings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><operator>(</operator><operator>(</operator><name><name>aku</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>color</name><index>[<expr/></index></name></expr></index></name></expr></index></name>main]]<operator>+</operator><literal type="number">1</literal></expr></expr_stmt>)</block> <expr_stmt><expr><operator>%</operator> <literal type="number">3</literal></expr></expr_stmt></for>)</block>]<empty_stmt>;</empty_stmt></while>
                <comment type="line">//cout &lt;&lt; color[main] &lt;&lt; endl;</comment>
                <comment type="line">//cout &lt;&lt; graph[main][j] &lt;&lt; " ma farbu " &lt;&lt; color[graph[main][j]] &lt;&lt; endl;</comment>
                <comment type="line">//cout &lt;&lt; "              " &lt;&lt; colorings[i][(aku[i][color[main]] + 1)% 3] &lt;&lt; " " &lt;&lt; colorings[i][color[main]] &lt;&lt; endl;</comment>
                <expr_stmt><expr><name>sol</name> <operator>+=</operator> <name><name>ceny</name><index>[<expr><name><name>colorings</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><operator>(</operator><name><name>aku</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>color</name><index>[<expr/></index></name></expr></index></name></expr></index></name></expr></index></name>main]]<operator>+</operator><literal type="number">1</literal></expr></expr_stmt>)</block><expr_stmt><expr><operator>%</operator><literal type="number">3</literal>]]<index>[<expr><name><name>graph</name><index>[<expr/></index></name></expr></index>main]<index>[<expr><name>j</name></expr>]</index><operator>-</operator><literal type="number">1</literal>]</expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>check</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>graph</name><index>[<expr/></index></name>main]<index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>seen</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>graph</name><index>[<expr/></index></name>main]<index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></function>
        }
        if<expr_stmt><expr><operator>(</operator><name>sol</name> <operator>&lt;</operator> <name>lowest</name><operator>)</operator><block>{
            <expr><name>lowest</name> <operator>=</operator> <name>sol</name></expr>;
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name><name>lowestC</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>color</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt/></block></for>}</block></expr></expr_stmt>
        }
    }
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>lowest</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>lowestC</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}

</unit>
