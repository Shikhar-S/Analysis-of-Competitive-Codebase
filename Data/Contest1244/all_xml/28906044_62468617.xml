<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28906044_62468617.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=x;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fl</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=n;i&gt;=x;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>(ll)1e9+7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;x&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pai</name></cpp:macro> <cpp:value>pair&lt;ll, ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>itr</name><parameter_list>(<parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>:: iterator it</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>(ll)1e16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name></cpp:macro> <cpp:value>(ll)-1e16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>up</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lo</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
       <comment type="line" format="doxygen">///////////   ///     ///   ///      ///   ////////////  ///      ///</comment>
       <comment type="line" format="doxygen">///           ///     ///   ///      ///   ///      ///  ///      ///</comment>
       <comment type="line" format="doxygen">///           ///     ///   ///      ///   ///      ///  ///      ///</comment>
       <comment type="line" format="doxygen">///////////   ///////////   ///      ///   ////////////  ////////////</comment>
               <comment type="line" format="doxygen">///   ///     ///   ///      ///   ///      ///  ///      ///</comment>
               <comment type="line" format="doxygen">///   ///     ///   ///      ///   ///      ///  ///      ///</comment>
       <comment type="line" format="doxygen">///////////   ///     ///   ////////////   ////////////  ///      ///</comment>
<function><type><name>ll</name></type> <name>minn</name><parameter_list>( <parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> 
<block>{
    <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
    <return>return <expr><name>a</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>maxx2</name><parameter_list>( <parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
    <return>return <expr><name>b</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>maxx</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
  <return>return <expr><call><name>maxx2</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>maxx2</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>gcdd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then>
    <else>else
        <block type="pseudo"><return>return <expr><call><name>gcdd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>
<function><type><name>ll</name></type> <name>dsum</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>sum</name><operator>+=</operator><name>n</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>sum</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>poww</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then>
    <else>else
        <block type="pseudo"><return>return <expr><operator>(</operator><operator>(</operator><call><name>poww</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><literal type="number">998244353</literal><operator>)</operator><operator>*</operator><operator>(</operator><call><name>poww</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><literal type="number">998244353</literal><operator>)</operator><operator>*</operator><operator>(</operator><call><name>poww</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><literal type="number">998244353</literal><operator>)</operator><operator>)</operator><operator>%</operator><literal type="number">998244353</literal></expr>;</return></block></else></if>
}</block></function>
<function><type><name>long</name> <name>double</name></type> <name>gcdf</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>b</name></decl></parameter>)</parameter_list> 
<block>{ 
    <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> 
        <block type="pseudo"><return>return <expr><call><name>gcdf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if> 
    <if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0.000001</literal></expr>)</condition><then> 
        <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then> 
    <else>else
        <block type="pseudo"><return>return <expr><operator>(</operator><call><name>gcdf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>-</operator> <call><name>floor</name><argument_list>(<argument><expr><name>a</name> <operator>/</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return></block></else></if> 
}</block></function> 
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <macro><name>f</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block>
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>y</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>x</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><call><name>maxx2</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>*</operator><literal type="number">2</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
