<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931615_62481291.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef  <type><name>long</name> <name>long</name>  <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef  <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=a;i&lt;=b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rev</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sll</name></cpp:macro> <cpp:value>set&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpll</name></cpp:macro> <cpp:value>vector&lt;pll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ln</name></cpp:macro> <cpp:value>length()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ch</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>st</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>en</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vpll</name></type> <name>rgs</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>prv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
	<return>return <expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>nxt</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>( <expr><name>i</name> <operator>==</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<return>return <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>char</name></type> <name>flip</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'W'</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="char">'B'</literal></expr>;</return></block></then></if>
	<return>return <expr><literal type="char">'W'</literal></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>distost</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>ps</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>st</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>st</name> <operator>&lt;=</operator> <name>ps</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ps</name> <operator>-</operator> <name>st</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block></then></if>
	<return>return <expr><name>n</name><operator>-</operator><name>st</name> <operator>+</operator> <name>ps</name><operator>+</operator> <literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>distto</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>ps</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>en</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>ps</name> <operator>&lt;=</operator> <name>en</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>en</name> <operator>-</operator> <name>ps</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block></then></if>
	<return>return <expr><name>n</name><operator>-</operator><name>ps</name> <operator>+</operator> <name>en</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>getlen</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>ps</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>st</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>en</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>dtst</name><init>=<expr><call><name>distost</name><argument_list>(<argument><expr><name>ps</name></expr></argument>,<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>dten</name><init>=<expr><call><name>distto</name><argument_list>(<argument><expr><name>ps</name></expr></argument>,<argument><expr><name>en</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>dtst</name></expr></argument>,<argument><expr><name>dten</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name> <operator>::</operator> <name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>tt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
 		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><call><name>prv</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><call><name>nxt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
 		<expr_stmt><expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>   	
    	<expr_stmt><expr><name>tt</name><operator>++</operator></expr>;</expr_stmt>
    }</block>
    <if>if<condition>(<expr><name>tt</name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block>{
    	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
    		<if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>flip</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
    	}</block>
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    	<return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
    	<if>if<condition>(<expr><operator>!</operator><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
    	<decl_stmt><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
    	<while>while<condition>(<expr><name>j</name> <operator>&lt;=</operator> <name>n</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>ch</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block></while>
    	<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt>
    	<macro><name>rep</name><argument_list>(<argument>kk</argument>,<argument>i</argument>,<argument>j</argument>)</argument_list></macro> <block>{
    		<expr_stmt><expr><name><name>st</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name><name>en</name><index>[<expr><name>kk</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
    	}</block>
    	<expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
    }</block>
    <if>if<condition>(<expr><name><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ch</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>v</name> <init>= <expr><name><name>st</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>ll</name></type> <name>u</name> <init>= <expr><name><name>en</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>v</argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>en</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
    	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>u</argument>)</argument_list></macro> <expr_stmt><expr><name><name>st</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> 
    }</block></then></if>

    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
    	<if>if<condition>(<expr><operator>!</operator><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
    		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    		<continue>continue;</continue>
    	}</block></then></if>
    	<decl_stmt><decl><type><name>ll</name></type> <name>chs</name> <init>= <expr><call><name>getlen</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name><name>st</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>en</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>char</name></type> <name>nw</name> <init>= <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    	<if>if<condition>(<expr><name>chs</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nw</name> <operator>=</operator> <call><name>flip</name><argument_list>(<argument><expr><name>nw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    	<if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>chs</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>nw</name></expr>;</expr_stmt></block></then>
    	<else>else <block>{
    		<if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>flip</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
    	}</block></else></if>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>
</unit>
