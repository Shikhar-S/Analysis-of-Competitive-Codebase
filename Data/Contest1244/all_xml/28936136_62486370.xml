<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28936136_62486370.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">100008</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MAX</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>Edge</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>nxt</name></decl>,<decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>edge</name><index>[<expr><literal type="number">200008</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ecnt</name></decl>,<decl><type ref="prev"/><name><name>num</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>r</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>,<decl><type ref="prev"/><name><name>head</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name></decl>,<decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>edge</name><index>[<expr><operator>++</operator><name>ecnt</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>Edge</name><operator>)</operator><block>{<expr><name><name>head</name><index>[<expr><name>x</name></expr>]</index></name></expr>,<expr><name>y</name></expr>}</block></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>ecnt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>r</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>fa</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>num</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>p</name><init>=<expr><name><name>head</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>p</name></expr>;</condition><incr><expr><name>p</name><operator>=</operator><name><name>edge</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>edge</name><index>[<expr><name>p</name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>u</name><operator>!=</operator><name>fa</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></for>
}</block></function>
<function><type><name>void</name></type> <name>check</name><parameter_list>()</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name><name>c</name><index>[<expr><name><name>num</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>!=</operator><name>j</name><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name><name>c</name><index>[<expr><name><name>num</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>!=</operator><name>j</name><operator>)</operator></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>j</name></expr><operator>,</operator><expr><name>tmp</name><operator>+=</operator><name><name>a</name><index>[<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></block></for></block></for>
	<if>if<condition>(<expr><name>tmp</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>ans</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	}</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><break>break;</break>}</block></then></if></block></for>
	<if>if<condition>(<expr><name>n</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else
	<block>{
		<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1ll</literal><operator>*</operator><name>n</name><operator>*</operator><name>MAX</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>c</name><index>[<expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>c</name><index>[<expr><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>tmp</name><operator>=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>a</name><index>[<expr><name><name>num</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name><name>num</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>check</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></block></for></block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
