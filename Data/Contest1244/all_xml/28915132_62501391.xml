<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28915132_62501391.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100010</cpp:value></cpp:define> 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>ll</name></type> <name><name>suf</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>pref</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>df</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>df</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>df</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>df</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>df</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>pref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pref</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>df</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>suf</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>df</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type>  <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>suf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>suf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>df</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>mini</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>cur</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>cur</name> <operator>-=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>df</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>pref</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>cur</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>low</name> <init>= <expr><name><name>df</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>high</name> <init>= <expr><name><name>df</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<while>while<condition>(<expr><name>low</name> <operator>&lt;</operator> <name>high</name></expr>)</condition><block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>low</name> <operator>+</operator> <name>high</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>ind</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>df</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>df</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>df</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>rem</name> <init>= <expr><name>cur</name> <operator>-</operator> <operator>(</operator><name><name>suf</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>ind</name><operator>)</operator> <operator>*</operator> <name>mid</name><operator>)</operator></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>rem</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>high</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>low</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
			}</block></while>
			<if>if<condition>(<expr><name>low</name> <operator>!=</operator> <name><name>df</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mini</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mini</name></expr></argument>, <argument><expr><name>low</name> <operator>-</operator> <name><name>df</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
		<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cur</name> <operator>-=</operator> <operator>(</operator><name><name>suf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name><name>df</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>cur</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>low</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>high</name> <init>= <expr><name><name>df</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<while>while<condition>(<expr><name>low</name> <operator>&lt;</operator> <name>high</name></expr>)</condition><block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>mid</name> <init>= <expr><operator>(</operator><name>low</name> <operator>+</operator> <name>high</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>ind</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><call><name><name>df</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>df</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>mid</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name><name>df</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>ind</name><operator>--</operator></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>ll</name></type> <name>rem</name> <init>= <expr><name>cur</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>ind</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>mid</name> <operator>-</operator> <name><name>pref</name><index>[<expr><name>ind</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name>rem</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>high</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>low</name> <operator>=</operator> <name>mid</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
			}</block></while>
			<if>if<condition>(<expr><name>low</name> <operator>!=</operator> <name><name>df</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>mini</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>mini</name></expr></argument>, <argument><expr><name><name>df</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>low</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mini</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

}</block></function></unit>
