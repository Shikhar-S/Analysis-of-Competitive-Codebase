<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28926389_62493427.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<struct>struct <name>edge</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>,<decl><type ref="prev"/><name>to</name></decl>,<decl><type ref="prev"/><name>nxt</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>e</name><index>[<expr><literal type="number">200005</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>du</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Head</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>v</name><index>[<expr><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>index</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>col</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>anss</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<struct>struct <name>fuck</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>,<decl><type ref="prev"/><name>col</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>shit</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</struct>
<function><type><name>void</name></type> <name>update</name><parameter_list>()</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>anss</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
}</block></function>
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>from</name><operator>=</operator><name>x</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>to</name><operator>=</operator><name>y</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>nxt</name><operator>=</operator><name><name>Head</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>Head</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pre</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>index</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><name>now</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>Head</name><index>[<expr><name>now</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nxt</name></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name><operator>!=</operator><name>pre</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>,<argument><expr><name>now</name></expr></argument>,<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>fuck</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>fuck</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>pos</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>pos</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name><name>du</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>	
		<expr_stmt><expr><operator>++</operator><name><name>du</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>du</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>!</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name><name>du</name><index>[<expr><name>y</name></expr>]</index></name><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>!</operator><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>	
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>du</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>s</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">9223372036854775805</literal></expr></init></decl> ;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tep</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>tep</name><operator>+=</operator><name><name>v</name><index>[<expr><name><name>index</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>v</name><index>[<expr><name><name>index</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
				<block>{
					<expr_stmt><expr><name><name>col</name><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal><operator>-</operator><name><name>col</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>col</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>tep</name><operator>+=</operator><name><name>v</name><index>[<expr><name><name>index</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>col</name><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				}</block></for>
				<if>if<condition>(<expr><name>tep</name><operator>&lt;</operator><name>ans</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>ans</name><operator>=</operator><name>tep</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>shit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name><operator>=</operator><name><name>anss</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
		<expr_stmt><expr><name><name>shit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pos</name><operator>=</operator><name><name>index</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>shit</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>shit</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>shit</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>col</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
