<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931220_62495440.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>0x7f7f7f7f</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition> <block>{<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<while>while<condition>(<expr><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition> <block>{<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>pre</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>las</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>com</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{ <return>return <expr><name>x</name><operator>&lt;</operator><name>y</name></expr>;</return> }</block></function>
<function><type><name>ll</name></type> <name>check2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>l1</name><init>=<expr><name>x</name></expr></init></decl>,<decl><type ref="prev"/><name>r1</name><init>=<expr><name>x</name><operator>+</operator><name>y</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>l</name><operator>&lt;</operator><name>r</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>r</name><operator>-</operator><name>l</name><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition><then> 
		<block>{
		    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>&lt;=</operator><name>l1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>=</operator><name>r</name></expr>;</expr_stmt></block></then> 
			<else>else <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>=</operator><name>l</name></expr>;</expr_stmt></block></else></if>
			<break>break;</break>
		}</block></then></if> 
		<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name><operator>&lt;=</operator><name>l1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<expr_stmt><expr><name>sum</name><operator>=</operator><name>sum</name><operator>+</operator><literal type="number">1LL</literal><operator>*</operator><name>pos</name><operator>*</operator><name>l1</name><operator>-</operator><name><name>pre</name><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>l</name><operator>&lt;</operator><name>r</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>r</name><operator>-</operator><name>l</name><operator>&lt;=</operator><literal type="number">1</literal></expr>)</condition><then> 
		<block>{
		    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>r</name></expr>]</index></name><operator>&lt;=</operator><name>r1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>=</operator><name>r</name></expr>;</expr_stmt></block></then> 
			<else>else <block type="pseudo"><expr_stmt><expr><name>pos</name><operator>=</operator><name>l</name></expr>;</expr_stmt></block></else></if>
			<break>break;</break>
		}</block></then></if> 
		<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>mid</name></expr>]</index></name><operator>&lt;=</operator><name>r1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<expr_stmt><expr><name>sum</name><operator>=</operator><name>sum</name><operator>+</operator><name><name>las</name><index>[<expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name>n</name><operator>-</operator><name>pos</name><operator>)</operator><operator>*</operator><name>r1</name></expr>;</expr_stmt>
	<return>return <expr><name>sum</name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>check1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>l1</name></decl>,<decl><type ref="prev"/><name>r1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>lasl</name><init>=<expr><call><name>check2</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>lasr</name><init>=<expr><call><name>check2</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>l</name><operator>&lt;</operator><name>r</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>lasl</name><operator>&lt;=</operator><name>k</name><operator>||</operator><name>lasr</name><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>r</name><operator>-</operator><name>l</name><operator>&lt;=</operator><literal type="number">2</literal></expr>)</condition><then> 
		<block>{
		    <if>if<condition>(<expr><call><name>check2</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
		    <elseif>else <if>if<condition>(<expr><call><name>check2</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if></elseif>
		    <elseif>else <if>if<condition>(<expr><call><name>check2</name><argument_list>(<argument><expr><operator>(</operator><name>l</name><operator>+</operator><name>r</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if></elseif></if> 
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<expr_stmt><expr><name>l1</name><operator>=</operator><name>l</name><operator>+</operator><operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>)</operator><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name>r1</name><operator>=</operator><name>r</name><operator>-</operator><operator>(</operator><name>r</name><operator>-</operator><name>l</name><operator>)</operator><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>p</name><init>=<expr><call><name>check2</name><argument_list>(<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>q</name><init>=<expr><call><name>check2</name><argument_list>(<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>p</name><operator>&lt;</operator><name>q</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>r</name><operator>=</operator><name>r1</name></expr>;</expr_stmt> <expr_stmt><expr><name>lasr</name><operator>=</operator><name>q</name></expr>;</expr_stmt> }</block></then>
		<else>else  <block>{ <expr_stmt><expr><name>l</name><operator>=</operator><name>l1</name></expr>;</expr_stmt> <expr_stmt><expr><name>lasl</name><operator>=</operator><name>p</name></expr>;</expr_stmt> }</block></else></if>
<comment type="line">//		if(p&lt;lasl) { l=l1; lasl=p; }</comment>
<comment type="line">//		if(q&lt;lasr) { r=r1; lasr=q; }</comment>
	}</block></while>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>com</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>pre</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block type="pseudo"><expr_stmt><expr><name><name>las</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>las</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<while>while<condition>(<expr><name>l</name><operator>&lt;=</operator><name>r</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>l</name><operator>==</operator><name>r</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>r</name><operator>-</operator><name>l</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> 
		<block>{
		    <if>if<condition>(<expr><call><name>check1</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		    <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		    <break>break;</break>
		}</block></then></if></elseif></if>
		<decl_stmt><decl><type><name>int</name></type> <name>mid</name><init>=<expr><operator>(</operator><name>r</name><operator>+</operator><name>l</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><call><name>check1</name><argument_list>(<argument><expr><name>mid</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>l</name><operator>=</operator><name>mid</name></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
