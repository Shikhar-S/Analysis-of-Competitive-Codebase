<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28912108_62483328.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Long</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>Long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> <name>read</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>poss</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>print</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><name>Long</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>Long</name></type></decl></parameter>, <parameter><decl><type><name>Long</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Long</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>Long</name></type></decl></parameter>, <parameter><decl><type><name>Long</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name>poss</name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>print</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>bool</name></type> <name>poss</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>Long</name></type> <name>g</name> <init>= <expr><call><name>gcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>(</operator><name>p</name> <operator>%</operator> <name>g</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>Long</name></type> <name>m</name> <init>= <expr><name>p</name> <operator>/</operator> <name>g</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Long</name></type> <name>a</name> <init>= <expr><name>w</name> <operator>/</operator> <name>g</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Long</name></type> <name>b</name> <init>= <expr><name>d</name> <operator>/</operator> <name>g</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Long</name></type> <name>q</name> <init>= <expr><name>m</name> <operator>/</operator> <name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Long</name></type> <name>r</name> <init>= <expr><name>m</name> <operator>%</operator> <name>a</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>%</operator> <name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{
        <comment type="line">//cerr &lt;&lt; "r = " &lt;&lt; r &lt;&lt; endl;</comment>
        <expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
    }</block></while>
    <if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <comment type="line">//cerr &lt;&lt; "r = " &lt;&lt; r &lt;&lt; endl;</comment>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>r</name> <operator>/</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>x</name> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>z</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>print</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>y</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>z</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>Long</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
    <else>else
        <block type="pseudo"><return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>

<function><type><name>Long</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>Long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Long</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then>
    <else>else
        <block type="pseudo"><return>return <expr><call><name>f</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>

</unit>
