<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935444_62483113.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>edge</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>, <decl><type ref="prev"/><name>next</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>e</name><index>[<expr><name>N</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ecnt</name></decl>, <decl><type ref="prev"/><name><name>ind</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>adde</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>ecnt</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>edge</name><operator>)</operator><block>{<expr><name>to</name></expr>, <expr><name><name>head</name><index>[<expr><name>from</name></expr>]</index></name></expr>}</block></expr><operator>,</operator> <expr><name><name>head</name><index>[<expr><name>from</name></expr>]</index></name> <operator>=</operator> <name>ecnt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>ecnt</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>edge</name><operator>)</operator><block>{<expr><name>from</name></expr>, <expr><name><name>head</name><index>[<expr><name>to</name></expr>]</index></name></expr>}</block></expr><operator>,</operator> <expr><name><name>head</name><index>[<expr><name>to</name></expr>]</index></name> <operator>=</operator> <name>ecnt</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ind</name><index>[<expr><name>from</name></expr>]</index></name><operator>++</operator></expr><operator>,</operator> <expr><name><name>ind</name><index>[<expr><name>to</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>LL</name></type> <name>res</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>col</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ls1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ls2</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">3</literal> <operator>-</operator> <name>ls1</name> <operator>-</operator> <name>ls2</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>col</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>!=</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>ls2</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>adde</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>ind</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>rt</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>ind</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>rt</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <break>break;</break>
	}</block></then></if></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>fuck</name> <init>= <expr><name><name>e</name><index>[<expr><name><name>head</name><index>[<expr><name>rt</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>to</name></expr></init></decl>, <decl><type ref="prev"/><name>fuck2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>LL</name></type> <name>tmp</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>head</name><index>[<expr><name>fuck</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name> <operator>!=</operator> <name>rt</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fuck2</name> <operator>=</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</expr_stmt></block></then></if></block></for> 
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><call><name>dfs</name><argument_list>(<argument><expr><name>fuck2</name></expr></argument>, <argument><expr><name>fuck</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>res</name> <operator>+</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>rt</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>fuck</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></block></for></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>tmp</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><call><name>dfs</name><argument_list>(<argument><expr><name>fuck2</name></expr></argument>, <argument><expr><name>fuck</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>res</name> <operator>+</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>rt</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>fuck</name></expr>]</index></name> <operator>==</operator> <name>tmp</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name><name>col</name><index>[<expr><name>rt</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name><name>col</name><index>[<expr><name>fuck</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>
		}</block></then></if></block></for></block></for>
}</block></function></unit>
