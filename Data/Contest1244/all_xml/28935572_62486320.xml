<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935572_62486320.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(int a = 0; a &lt; (b); ++a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trav</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(auto&amp; a : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>clog &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro>        <cpp:value>'\n'</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ull</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="line">//content</comment>
    <decl_stmt><decl><type><name>ull</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ull</name></expr></argument>, <argument><expr><name>ull</name></expr></argument>&gt;</argument_list></name></type> <name>nums</name></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>ull</name></type> <name>u</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>nums</name><index>[<expr><name>u</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block>
    <while>while <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>ull</name></type> <name>numLowest</name> <init>= <expr><call><name><name>nums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ull</name></type> <name>numHighest</name> <init>= <expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>nums</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>numLowest</name> <operator>&lt;</operator> <name>numHighest</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>ull</name></type> <name>a</name> <init>= <expr><call><name><name>nums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ull</name></type> <name>b</name> <init>= <expr><call><name>next</name><argument_list>(<argument><expr><call><name><name>nums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ull</name></type> <name>n</name> <init>= <expr><name>numLowest</name> <operator>*</operator> <operator>(</operator><name>b</name> <operator>-</operator> <name>a</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>nums</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ull</name></type> <name>len</name> <init>= <expr><name>k</name> <operator>/</operator> <name>numLowest</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>nums</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>a</name><operator>+</operator><name>len</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nums</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+=</operator> <name>numLowest</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>ull</name></type> <name>a</name> <init>= <expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>nums</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ull</name></type> <name>b</name> <init>= <expr><call><name>prev</name><argument_list>(<argument><expr><call><name>prev</name><argument_list>(<argument><expr><call><name><name>nums</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ull</name></type> <name>n</name> <init>= <expr><name>numHighest</name> <operator>*</operator> <operator>(</operator><name>a</name> <operator>-</operator> <name>b</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name><name>nums</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <name>k</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ull</name></type> <name>len</name> <init>= <expr><name>k</name> <operator>/</operator> <name>numHighest</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>nums</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>a</name> <operator>-</operator> <name>len</name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>nums</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+=</operator> <name>numHighest</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <if>if <condition>(<expr><call><name><name>nums</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>prev</name><argument_list>(<argument><expr><call><name><name>nums</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>first</name> <operator>-</operator> <call><name><name>nums</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr>;</expr_stmt>
    }</block></else></if>


    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
