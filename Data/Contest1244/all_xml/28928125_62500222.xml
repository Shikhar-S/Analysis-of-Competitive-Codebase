<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28928125_62500222.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>arr</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>deque</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>Q</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>arr</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>arr</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><call><name><name>Q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>and</operator> <call><name><name>Q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>F</name> <operator>==</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>Q</name><index>[<expr><call><name><name>Q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>S</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <comment type="line">// for(auto i:Q) cout&lt;&lt;i.F&lt;&lt;" "&lt;&lt;i.S&lt;&lt;endl;</comment>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name><name>Q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>F</name> <operator>-</operator> <name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>F</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>and</operator> <call><name><name>Q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>S</name> <operator>&lt;</operator> <call><name><name>Q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>S</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><name><name>Q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>F</name> <operator>-</operator> <name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>F</name><operator>)</operator> <operator>*</operator> <name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>S</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><name><name>Q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>F</name> <operator>-</operator> <name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>F</name><operator>)</operator> <operator>*</operator> <name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>S</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>S</name> <operator>+=</operator> <name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>S</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop_front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>F</name> <operator>+=</operator> <operator>(</operator><name>k</name> <operator>/</operator> <name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>S</name><operator>)</operator></expr>;</expr_stmt>
                <return>return <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><call><name><name>Q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>F</name> <operator>-</operator> <name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>F</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return>
            }</block></else></if>
        }</block></then>
        <else>else
        <block>{
            <if>if<condition>(<expr><name>k</name> <operator>&gt;=</operator> <operator>(</operator><call><name><name>Q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>F</name> <operator>-</operator> <name><name>Q</name><index>[<expr><call><name><name>Q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>F</name><operator>)</operator> <operator>*</operator> <call><name><name>Q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>S</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <operator>(</operator><call><name><name>Q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>F</name> <operator>-</operator> <name><name>Q</name><index>[<expr><call><name><name>Q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>F</name><operator>)</operator> <operator>*</operator> <call><name><name>Q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>S</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>Q</name><index>[<expr><call><name><name>Q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>S</name> <operator>+=</operator> <call><name><name>Q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>S</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>Q</name><index>[<expr><call><name><name>Q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>F</name> <operator>-=</operator> <name>k</name> <operator>/</operator> <call><name><name>Q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>S</name></expr>;</expr_stmt>
                <return>return <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><call><name><name>Q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>F</name> <operator>-</operator> <name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>F</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><literal type="number">0</literal></expr>;</return>
            }</block></else></if>
        }</block></else></if>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name><name>Q</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>F</name> <operator>-</operator> <name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>F</name></expr>;</expr_stmt>
        <comment type="line">// cout&lt;&lt;k&lt;&lt;" "&lt;&lt;Q.front().F&lt;&lt;" "&lt;&lt;Q.back().F&lt;&lt;endl;</comment>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
