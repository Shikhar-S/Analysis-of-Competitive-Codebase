<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28931119_62495394.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>d</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cnt</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>unique</name><argument_list>(<argument><expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>d</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><name>d</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <while>while <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>d</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><operator>++</operator><name><name>cnt</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>l</name> <operator>&lt;</operator> <name>r</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>dif</name> <init>= <expr><name><name>d</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>d</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">1ll</literal><operator>*</operator><name>dif</name><operator>*</operator><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">1ll</literal><operator>*</operator><name>dif</name><operator>*</operator><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>l</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>d</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>k</name><operator>/</operator><name><name>cnt</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>dif</name> <init>= <expr><name><name>d</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>d</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">1ll</literal><operator>*</operator><name>dif</name><operator>*</operator><name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>k</name> <operator>-=</operator> <literal type="number">1ll</literal><operator>*</operator><name>dif</name><operator>*</operator><name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>d</name><index>[<expr><name>r</name></expr>]</index></name> <operator>-=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>k</name><operator>/</operator><name><name>cnt</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></cast></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>
        }</block></else></if>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>d</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>d</name><index>[<expr><name>l</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
