<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935572_62482307.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(int a = 0; a &lt; (b); ++a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trav</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(auto&amp; a : (b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>clog &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro>        <cpp:value>'\n'</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ull</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using>

<function><type><name>uint64_t</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>costs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if></block></for>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>cost</name> <init>= <expr><name><name>costs</name><index>[<expr><name>cur</name></expr>]</index><index>[<expr><name>color</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <macro><name>trav</name><argument_list>(<argument>c</argument>, <argument>graph[cur]</argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>parent</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cost</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>graph</name></expr></argument>, <argument><expr><name>costs</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block>
    <return>return <expr><name>cost</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>colorDfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cur</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>parent</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>graph</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>colors</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{

    <decl_stmt><decl><type><name>int</name></type> <name>color</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>l</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>color</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if></block></for>
    <expr_stmt><expr><name><name>colors</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <name>color</name></expr>;</expr_stmt>
    <macro><name>trav</name><argument_list>(<argument>c</argument>, <argument>graph[cur]</argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>parent</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>colorDfs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>graph</name></expr></argument>, <argument><expr><name>colors</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <comment type="line">//content</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>costs</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>graph</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>costs</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>u</name><operator>--</operator></expr><operator>,</operator> <expr><name>v</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graph</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>graph</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>graph</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>graph</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"-1"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>graph</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>left</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>left2</name> <init>= <expr><name><name>graph</name><index>[<expr><name>left</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>left3</name> <init>= <expr><ternary><condition><expr><name><name>graph</name><index>[<expr><name>left2</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>left</name></expr> ?</condition><then> <expr><name><name>graph</name><index>[<expr><name>left2</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>graph</name><index>[<expr><name>left2</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>best</name> <init>= <expr><call><name>make_pair</name><argument_list>(<argument><expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>uint64_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>r</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>best</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><block>{<expr><call><name>dfs</name><argument_list>(<argument><expr><name>left3</name></expr></argument>, <argument><expr><name>left2</name></expr></argument>, <argument><expr><name>graph</name></expr></argument>, <argument><expr><name>costs</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>costs</name><index>[<expr><name>left</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name> <operator>+</operator> <name><name>costs</name><index>[<expr><name>left2</name></expr>]</index><index>[<expr><name>r</name></expr>]</index></name></expr>, <expr><block>{<expr><name>l</name></expr>, <expr><name>r</name></expr>}</block></expr>}</block></expr></argument>, <argument><expr><name>best</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>best</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>colors</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>colors</name><index>[<expr><name>left</name></expr>]</index></name> <operator>=</operator> <name><name>best</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>colors</name><index>[<expr><name>left2</name></expr>]</index></name> <operator>=</operator> <name><name>best</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colorDfs</name><argument_list>(<argument><expr><name>left3</name></expr></argument>, <argument><expr><name>left2</name></expr></argument>, <argument><expr><name>graph</name></expr></argument>, <argument><expr><name>colors</name></expr></argument>, <argument><expr><name><name>best</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>best</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>trav</name><argument_list>(<argument>a</argument>, <argument>colors</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
    }</block>

    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
