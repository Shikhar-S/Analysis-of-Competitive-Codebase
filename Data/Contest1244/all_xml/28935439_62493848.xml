<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935439_62493848.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>col</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>par</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>mn</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>, <decl><type ref="prev"/><name>root</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>, <decl><type ref="prev"/><name>cost</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>perms</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr> , <expr><literal type="number">3</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>adj</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpp</name></decl></parameter>)</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>cp</name> <operator>&amp;&amp;</operator> <name>i</name><operator>!=</operator><name>cpp</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>col</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name><range>: <expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control>
	<block>{
		<if>if<condition>(<expr><name>v</name><operator>!=</operator><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>par</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>
<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cost</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>col</name><index>[<expr><name>root</name></expr>]</index></name><operator>=</operator><name><name>perms</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>col</name><index>[<expr><name>c1</name></expr>]</index></name><operator>=</operator><name><name>perms</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>col</name><index>[<expr><name>c2</name></expr>]</index></name><operator>=</operator><name><name>perms</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>col</name><index>[<expr><name>root</name></expr>]</index></name></expr>]</index><index>[<expr><name>root</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>col</name><index>[<expr><name>c1</name></expr>]</index></name></expr>]</index><index>[<expr><name>c1</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name><name>col</name><index>[<expr><name>c2</name></expr>]</index></name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name><range>: <expr><name><name>adj</name><index>[<expr><name>c1</name></expr>]</index></name></expr></range></decl></init>)</control>
	<block>{
		<if>if<condition>(<expr><name>v</name><operator>!=</operator><name>root</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>par</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>c1</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>c1</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>root</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name><range>: <expr><name><name>adj</name><index>[<expr><name>c2</name></expr>]</index></name></expr></range></decl></init>)</control>
	<block>{
		<if>if<condition>(<expr><name>v</name><operator>!=</operator><name>root</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>par</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><name>c2</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>c2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>col</name><index>[<expr><name>root</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>root</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
<comment type="line">//			cout &lt;&lt; i &lt;&lt; endl;</comment>
			<expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>c1</name><operator>=</operator><name><name>adj</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr><operator>,</operator> <expr><name>c2</name><operator>=</operator><name><name>adj</name><index>[<expr><name>root</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>par</name><index>[<expr><name>c1</name></expr>]</index></name><operator>=</operator><name>root</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>par</name><index>[<expr><name>c2</name></expr>]</index></name><operator>=</operator><name>root</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ansind</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		<if>if<condition>(<expr><name>cost</name><operator>&lt;</operator><name>mn</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>mn</name><operator>=</operator><name>cost</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ansind</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>ansind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>mn</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>col</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>
}</block></function></unit>
