<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935531_62496714.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Kafuu</name></cpp:macro> <cpp:value>signed</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Chino</name></cpp:macro> <cpp:value>main</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>px</name></cpp:macro> <cpp:value>putchar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pn</name></cpp:macro> <cpp:value>px('\n')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ps</name></cpp:macro> <cpp:value>px(' ')</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pd</name></cpp:macro> <cpp:value>puts("======================")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pj</name></cpp:macro> <cpp:value>puts("++++++++++++++++++++++")</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<while>while<condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>ch</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><ternary><condition><expr><name>y</name></expr>?</condition><then><expr><operator>-</operator><name>x</name></expr></then><else>:<expr><name>x</name></expr></else></ternary></expr>;</return>
}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>T</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>T</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<while>while<condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>ch</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><ternary><condition><expr><name>y</name></expr>?</condition><then><expr><operator>-</operator><name>x</name></expr></then><else>:<expr><name>x</name></expr></else></ternary></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>tax</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>dis</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>
<function><type><name>Kafuu</name></type> <name>Chino</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name><init>=<expr><call><name><name>read</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>dis</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>dis</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>len</name><operator>=</operator><call><name>unique</name><argument_list>(<argument><expr><name>dis</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>dis</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>)</argument_list></call><operator>-</operator><name>dis</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>len</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>len</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>tax</name><index>[<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name>dis</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>dis</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>len</name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><name>dis</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>mi</name><init>=<expr><name><name>tax</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>ma</name><init>=<expr><name><name>tax</name><index>[<expr><name>len</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>l</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>b</name><index>[<expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
		<if>if<condition>(<expr><name>mi</name><operator>&lt;</operator><name>ma</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">1ll</literal><operator>*</operator><name>mi</name><operator>*</operator><operator>(</operator><name><name>b</name><index>[<expr><name>l</name></expr>]</index></name><operator>-</operator><name><name>b</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>p</name><operator>&gt;</operator><name>k</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>b</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name>k</name><operator>/</operator><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
			<expr_stmt><expr><name>mi</name><operator>+=</operator><name><name>tax</name><index>[<expr><name>l</name><operator>++</operator></expr>]</index></name></expr><operator>,</operator><expr><name>k</name><operator>-=</operator><name>p</name></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">1ll</literal><operator>*</operator><name>ma</name><operator>*</operator><operator>(</operator><name><name>b</name><index>[<expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>b</name><index>[<expr><name>r</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>p</name><operator>&gt;</operator><name>k</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>b</name><index>[<expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name>k</name><operator>/</operator><name>ma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
			<expr_stmt><expr><name>ma</name><operator>+=</operator><name><name>tax</name><index>[<expr><name>r</name><operator>--</operator></expr>]</index></name></expr><operator>,</operator><expr><name>k</name><operator>-=</operator><name>p</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
}</block></function>
</unit>
