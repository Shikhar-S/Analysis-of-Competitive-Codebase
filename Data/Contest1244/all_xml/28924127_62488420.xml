<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28924127_62488420.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>double</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(int i = 0; i &lt; n; i ++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foe</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(int i = 0; i &lt;= n; i ++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(int i = 1; i &lt; n; i ++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo1e</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(int i = 1; i &lt;= n; i ++)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><literal type="number">105000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">105000</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>v_clr</name><index>[<expr><literal type="number">105000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>global</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>global</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
    <if>if<condition>(<expr><name>x</name> <operator>!=</operator> <name>p</name></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  }</block></for>
}</block></function>

<function><type><name>void</name></type> <name>color</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cpp</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>clr</name></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
    <if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>cp</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>cpp</name></expr>)</condition><then><block>{
      <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>clr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
  }</block></for>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
    <if>if<condition>(<expr><name>x</name> <operator>!=</operator> <name>p</name></expr>)</condition><then><block>{
      <expr_stmt><expr><call><name>color</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>clr</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
}</block></function>

<function><type><name>void</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>clr</name></decl>;</decl_stmt>
  <macro><name>fo</name><argument_list>(<argument>i</argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
    <if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>c2</name></expr>)</condition><then><block>{
      <expr_stmt><expr><name>clr</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
  }</block>
  <expr_stmt><expr><name><name>v_clr</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>clr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><range>: <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control><block>{
    <if>if<condition>(<expr><name>x</name> <operator>!=</operator> <name>p</name></expr>)</condition><then><block>{
      <expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>clr</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
  <macro><name>fo</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  <macro><name>fo</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <macro><name>fo</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cnt</name></decl>;</decl_stmt>
  <macro><name>fo</name><argument_list>(<argument>i</argument>, <argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>v</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>g</name><index>[<expr><name>v</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cnt</name><index>[<expr><name>v</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>++</operator></expr>;</expr_stmt>
  }</block>
  <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>: <expr><name>cnt</name></expr></range></decl></init>)</control>
    <block type="pseudo"><if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>S</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>F</name></name></expr>;</expr_stmt></block></then></if></block></for>
  <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>(<expr><operator>!</operator><name>global</name></expr>)</condition><then><block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>int</name></type> <name>c1</name></decl>, <decl><type ref="prev"/><name>c2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1e18</literal> <operator>+</operator> <literal type="number">228</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control><block>{
      <if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>sum</name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then><block>{
          <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>c1</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>c2</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></for>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>f</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>fo</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v_clr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>

}</block></function>
</unit>
