<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28925419_62496013.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>bool</name></type> <name>cur1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>sze</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>K</name></decl>;</decl_stmt>
<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>Q</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</struct>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>node</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>x</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>x</name></name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>num</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>Rd</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>res</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt><expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>c</name><operator>&lt;</operator><literal type="number">48</literal></expr>)</condition><block type="pseudo"><empty_stmt>;</empty_stmt></block></while>
	<do>do <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>res</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>c</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt></block>
	while<condition>(<expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>c</name><operator>&gt;</operator><literal type="number">47</literal></expr>)</condition>;</do>
	<return>return;</return>
}</block></function>
<decl_stmt><decl><type><name>bool</name></type> <name>cur2</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<comment type="line">//	printf("%lf MB\n",(&amp;cur2-&amp;cur1)/1024.0/1024);</comment>
	<expr_stmt><expr><call><name>Rd</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>K</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>Rd</name><argument_list>(<argument><expr><name><name>Q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>Q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>Q</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>Q</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>Q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><operator>-</operator><literal type="number">2e9</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>Q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>!=</operator><name><name>Q</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><operator>++</operator><name>sze</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>num</name><index>[<expr><name>sze</name></expr>]</index></name><operator>=</operator><name><name>Q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>cnt</name><index>[<expr><name>sze</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><name>sze</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>L</name><init>=<expr><name><name>cnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>R</name><init>=<expr><name><name>cnt</name><index>[<expr><name>sze</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>l</name><operator>&lt;</operator><name>r</name></expr>)</condition><block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>o1</name><init>=<expr><name>L</name><operator>*</operator><operator>(</operator><name><name>num</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>num</name><index>[<expr><name>l</name></expr>]</index></name><operator>)</operator></expr></init></decl>,<decl><type ref="prev"/><name>o2</name><init>=<expr><name>R</name><operator>*</operator><operator>(</operator><name><name>num</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>num</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>L</name><operator>&lt;</operator><name>R</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>o1</name><operator>&gt;</operator><name>K</name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>num</name><index>[<expr><name>l</name></expr>]</index></name><operator>-</operator><name>K</name><operator>/</operator><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name>K</name><operator>-=</operator><name>o1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>L</name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><name>o2</name><operator>&gt;</operator><name>K</name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name><name>num</name><index>[<expr><name>r</name></expr>]</index></name><operator>-</operator><name><name>num</name><index>[<expr><name>l</name></expr>]</index></name><operator>-</operator><name>K</name><operator>/</operator><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			}</block></then></if>
			<expr_stmt><expr><name>K</name><operator>-=</operator><name>o2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>R</name><operator>+=</operator><name><name>cnt</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
