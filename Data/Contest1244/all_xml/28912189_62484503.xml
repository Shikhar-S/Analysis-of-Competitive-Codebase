<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28912189_62484503.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ll)v.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define> 
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod1</name><init>= <expr><literal type="number">1000000009</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>base</name><init>= <expr><literal type="number">10529</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>base1</name><init>=<expr><literal type="number">11699</literal></expr></init></decl> ;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>2000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; " | " &lt;&lt; #y &lt;&lt; ": " &lt;&lt; y &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; " | " &lt;&lt; #y &lt;&lt; ": " &lt;&lt; y &lt;&lt; " | " &lt;&lt; #z &lt;&lt; ": " &lt;&lt; z &lt;&lt; "\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>cerr &lt;&lt; #a &lt;&lt; ": " &lt;&lt; a &lt;&lt; " | " &lt;&lt; #b &lt;&lt; ": " &lt;&lt; b &lt;&lt; " | " &lt;&lt; #c &lt;&lt; ": " &lt;&lt; c &lt;&lt; " | " &lt;&lt; #d &lt;&lt; ": " &lt;&lt; d &lt;&lt; "\n";</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">100002</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>root</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>col</name><index>[<expr><literal type="number">1000002</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>par</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">2</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>root</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></then></if>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>: <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><if>if<condition>(<expr><name>it</name><operator>!=</operator><name>par</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>
<function><type><name>ll</name></type> <name>dfs1</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>par</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>ind</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>per</name></decl></parameter>)</parameter_list><block>{
   <decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name><name>per</name><index>[<expr><name>ind</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
   <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>per</name><index>[<expr><name>ind</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
   <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>: <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><if>if<condition>(<expr><name>it</name><operator>!=</operator><name>par</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>dfs1</name><argument_list>(<argument><expr><name>it</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><operator>(</operator><name>ind</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr></argument>,<argument><expr><name>per</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
   <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt> 


<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>per</name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ans</name><operator>=</operator><block>{<expr><literal type="number">100000000000000000ll</literal></expr>,<expr><name>per</name></expr>}</block></expr>;</expr_stmt>
  <if>if<condition>(<expr><name>root</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>root</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
  <do>do<block>{
   <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><call><name>dfs1</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>per</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>per</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  while<condition>(<expr><call><name>next_permutation</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>per</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>;</do>

  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><operator>.</operator><name>F</name></name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>dfs1</name><argument_list>(<argument><expr><name>root</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name><name>ans</name><operator>.</operator><name>S</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function> </unit>
