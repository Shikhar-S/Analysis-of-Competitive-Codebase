<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28912883_62465138.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mt</name></cpp:macro> <cpp:value>make_tuple</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">10010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>res1</name></decl>,<decl><type ref="prev"/><name>res2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name><operator>&gt;&gt;</operator><name>d</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>res1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>res2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>res1</name> <operator>=</operator> <name>a</name><operator>/</operator><name>c</name> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>res2</name> <operator>=</operator> <name>b</name><operator>/</operator><name>d</name> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>%</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>res1</name> <operator>+</operator> <name>res2</name> <operator>&lt;=</operator> <name>k</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res1</name> <operator>+</operator> <operator>(</operator><name>k</name> <operator>-</operator> <name>res1</name> <operator>-</operator> <name>res2</name><operator>)</operator><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name>res2</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
        <else>else    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
