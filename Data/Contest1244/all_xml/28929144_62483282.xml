<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28929144_62483282.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">100007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>val</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name>l</name><operator>&gt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>val</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&gt;</operator><name><name>val</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then><block>{
		<if>if <condition>(<expr><name>k</name><operator>&gt;=</operator><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name><name>val</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>val</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>val</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>val</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>+=</operator><name><name>val</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
			<return>return <expr><call><name>solve</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>k</name><operator>-</operator><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name><name>val</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>val</name><index>[<expr><name>r</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>val</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then>
		<else>else<block>{
			<return>return <expr><name><name>val</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>val</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name>k</name><operator>/</operator><name><name>val</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</return>
		}</block></else></if>
	}</block></then>
	<else>else<block>{
		<if>if <condition>(<expr><name>k</name><operator>&gt;=</operator><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name><name>val</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>val</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>val</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>val</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>+=</operator><name><name>val</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
			<return>return <expr><call><name>solve</name><argument_list>(<argument><expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>k</name><operator>-</operator><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name><name>val</name><index>[<expr><name>l</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>val</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call><operator>*</operator><name><name>val</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then>
		<else>else<block>{
			<return>return <expr><name><name>val</name><index>[<expr><name>r</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>val</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name>k</name><operator>/</operator><name><name>val</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</return>
		}</block></else></if>
	}</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>n</name><operator>&amp;&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<expr_stmt><expr><call><name><name>val</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><name>cnt</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><call><name><name>val</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>solve</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
