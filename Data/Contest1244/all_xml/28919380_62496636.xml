<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28919380_62496636.cpp">
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>
 
 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;initializer_list&gt;</cpp:file></cpp:include>
 
<comment type="line">//#include &lt;ext/rope&gt;</comment>
<comment type="line">//#include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
  
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//using namespace __gnu_cxx;</comment>
<comment type="line">//using namespace __gnu_pbds;</comment>
 
<comment type="line">//template&lt;class T, class C = null_type&gt; using Tree = tree&lt;T, C, less_equal&lt;int&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;</comment>
 
<namespace>namespace <name>io</name><block>{
 
	<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter> )</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</return> }</block></function>
	<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list> <block>{ <for>for<control>( <init><decl><type><name>A</name></type> <name>p</name> <range>: <expr><name>v</name></expr></range></decl></init> )</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>p</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>
	<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list> <block>{ <for>for<control>( <init><decl><type><name>auto</name></type> <name>p</name> <range>: <expr><name>v</name></expr></range></decl></init> )</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>p</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>
	<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>mp</name></decl></parameter> )</parameter_list> <block>{ <for>for<control>( <init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>mp</name></expr></range></decl></init> )</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>it</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>it</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>
	<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>st</name></decl></parameter> )</parameter_list> <block>{ <for>for<control>( <init><decl><type><name>A</name></type> <name>p</name> <range>: <expr><name>st</name></expr></range></decl></init> )</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>p</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return> }</block></function>
 
	<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>( <parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter> )</parameter_list> <block>{ <return>return <expr><name>is</name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</return> }</block></function>
	<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>( <parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list> <block>{ <for>for<control>( <init><decl><type><name>A</name> <modifier>&amp;</modifier></type><name>p</name> <range>: <expr><name>v</name></expr></range></decl></init> )</control> <block type="pseudo"><expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name>p</name></expr>;</expr_stmt></block></for> <return>return <expr><name>is</name></expr>;</return> }</block></function>
	<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>( <parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list> <block>{ <for>for<control>( <init><expr><name>auto</name> <operator>&amp;</operator><name>p</name> <operator>:</operator> <name>v</name></expr></init> )</control> <block type="pseudo"><expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt></block></for> <return>return <expr><name>is</name></expr>;</return> }</block></function>
 
	<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>output</name><parameter_list>( <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter> )</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></function>
	<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>output</name><parameter_list>( <parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>mp</name></decl></parameter> )</parameter_list><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> <for>for<control>( <init><decl><type><name>auto</name></type> <name>it</name><range>: <expr><name>mp</name></expr></range></decl></init> )</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal> <operator>&lt;&lt;</operator> <name><name>it</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>it</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for> }</block></function>
	<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>output</name><parameter_list>( <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt> <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <if>if<condition>( <expr><name>i</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if> }</block></for> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></function>
	<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>output</name><parameter_list>( <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> <for>for<control>( <init><decl><type><name>auto</name></type> <name>p</name> <range>: <expr><name>v</name></expr></range></decl></init> )</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for> }</block></function>
	<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>output</name><parameter_list>( <parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>st</name></decl></parameter> )</parameter_list><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt> <for>for<control>( <init><decl><type><name>A</name></type> <name>p</name> <range>: <expr><name>st</name></expr></range></decl></init> )</control><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>p</name></expr>;</expr_stmt> <if>if<condition>( <expr><name>p</name> <operator>!=</operator> <operator>*</operator><call><name><name>st</name><operator>.</operator><name>rbegin</name></name><argument_list>()</argument_list></call></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if> }</block></for> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></function>
 
	<function><type><name>long</name> <name>long</name></type> <name>read</name><parameter_list>()</parameter_list><block>{ <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <do>do <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block> while<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr> )</condition>;</do> <if>if<condition>( <expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>d</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <while>while<condition>( <expr><call><name>isdigit</name><argument_list>( <argument><expr><name>c</name></expr></argument> )</argument_list></call></expr> )</condition><block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></while> <return>return <expr><name>d</name> <operator>*</operator> <name>x</name></expr>;</return>}</block></function>
 
}</block></namespace>

<using>using <namespace>namespace <name>io</name>;</namespace></using>


<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name> <argument_list>( <argument><expr><operator>-</operator><literal type="number">1.</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>llinf</name> <init>= <expr><name>__INT64_MAX__</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>inf</name> <init>= <expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>add</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rem</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RALL</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>x.rbegin(), x.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>sort( ALL( x ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REV</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>reverse( ALL( x ) )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>write</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; ": "; output( x );</cpp:value></cpp:define> 


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>( <parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>for( int i = a; i &lt;= b; i++ )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forv</name><parameter_list>( <parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>for( int i = a; i &gt;= b; i-- )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( x ) * ( x )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gcd</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>__gcd( a, b )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lcm</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( ( a ) * ( ( b ) / gcd( a, b ) ) )</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>gcd</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> )</parameter_list> <block>{ <while>while<condition>( <expr><name>b</name></expr> )</condition> <block>{ <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>( <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> }</block></while> <return>return <expr><name>a</name></expr>;</return> }</block></function>
 
 

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name>auto</name></type> <name>max</name> <parameter_list>( <parameter><decl><type><name>T1</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T2</name></type> <name>b</name></decl></parameter> )</parameter_list> <block>{ <decl_stmt><decl><type><name>auto</name></type> <name>max</name> <init>= <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr></init></decl>;</decl_stmt> <return>return <expr><name>max</name></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name>auto</name></type> <name>min</name> <parameter_list>( <parameter><decl><type><name>T1</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T2</name></type> <name>b</name></decl></parameter> )</parameter_list> <block>{ <decl_stmt><decl><type><name>auto</name></type> <name>min</name> <init>= <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr></init></decl>;</decl_stmt> <return>return <expr><name>min</name></expr>;</return> }</block></function>
 
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>updmax</name> <parameter_list>( <parameter><decl><type><name>T1</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T2</name></type> <name>b</name></decl></parameter> )</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>updmin</name> <parameter_list>( <parameter><decl><type><name>T1</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T2</name></type> <name>b</name></decl></parameter> )</parameter_list> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name>b</name></expr></else></ternary></expr>;</expr_stmt> }</block></function>
 
<decl_stmt><decl><type><name>random_device</name></type> <name>rd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mt19937</name></type> <name>mt</name><argument_list>( <argument><expr><call><name>rd</name><argument_list>( )</argument_list></call></expr></argument> )</argument_list></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>rand</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter> )</parameter_list>
<block>{
	<decl_stmt><decl><type><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dist</name><argument_list>( <argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument> )</argument_list></decl>;</decl_stmt>
	<return>return <expr><call><name>dist</name><argument_list>( <argument><expr><name>mt</name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><operator>(</operator> <name>int</name> <operator>)</operator> <literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 998244353</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><operator>(</operator> <name>int</name> <operator>)</operator> <literal type="number">1e6</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1001</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><specifier>static</specifier> <type><name>int</name></type> <name><name>a</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
 

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>f</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter> )</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
		<if>if<condition>( <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>m</name></expr> )</condition><then><block>{
			<if>if<condition>( <expr><name>ind</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>ind</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>( <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator> <name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>m</name> <operator>)</operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>

	<if>if<condition>( <expr><name>ind</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>

	<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>( <argument><expr><name>ans</name></expr></argument>, <argument><expr><name>sum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{

		<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>s</name> <operator>+=</operator> <operator>(</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal> <operator>)</operator> <operator>*</operator> <name>d</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sum</name> <operator>-=</operator> <call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>*</operator> <name>d</name></expr>;</expr_stmt>	
		<while>while<condition>( <expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>m</name></expr> )</condition> <block>{
			<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>m</name> <operator>)</operator> <operator>-</operator> <call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>( <argument><expr><name>ans</name></expr></argument>, <argument><expr><name>s</name> <operator>+</operator> <name>sum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	}</block></for>

	<return>return <expr><name>ans</name> <operator>&lt;=</operator> <name>k</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>solution</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>mx</name> <operator>=</operator> <call><name>max</name><argument_list>( <argument><expr><name>mx</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></for>

	<expr_stmt><expr><call><name>sort</name><argument_list>( <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>( <expr><name>r</name> <operator>-</operator> <name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator> <name>l</name> <operator>+</operator> <name>r</name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>( <expr><call><name>f</name><argument_list>( <argument><expr><name>m</name></expr></argument> )</argument_list></call></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></else></if>
	}</block></while>
	 
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name>r</name></expr></init></decl>;</decl_stmt>
	
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mx</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>reverse</name><argument_list>( <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>r</name> <operator>=</operator> <literal type="number">1e9</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>r</name> <operator>-</operator> <name>l</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> )</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator> <name>l</name> <operator>+</operator> <name>r</name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>( <expr><call><name>f</name><argument_list>( <argument><expr><name>m</name></expr></argument> )</argument_list></call></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name> <argument_list>( <argument><expr><name>ans</name></expr></argument>, <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
 
 
<function><type><name>int32_t</name></type> <name>main</name> <parameter_list>( )</parameter_list>
<block>{
 
	<decl_stmt><decl><type><name>int</name></type> <name>T1</name> <init>= <expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
 
	<comment type="line">//freopen("FILE_NAME.in", "r", stdin);</comment>
	<comment type="line">//freopen("FILE_NAME.out", "w", stdout);</comment>
 
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name> <argument_list>( <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name> <argument_list>( <argument><expr><literal type="null">nullptr</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name> <argument_list>( <argument><expr><literal type="null">nullptr</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//cout.precision(15);</comment>
 
	<decl_stmt><decl><type><name>int</name></type> <name>query</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//cin &gt;&gt; query;</comment>
 
	
	<while>while <condition>( <expr><name>query</name><operator>--</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><call><name>solution</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>

	<decl_stmt><decl><type><name>int</name></type> <name>T2</name> <init>= <expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"Time: "</literal> <operator>&lt;&lt;</operator> <operator>(</operator> <name>T2</name> <operator>-</operator> <name>T1</name> <operator>)</operator> <operator>/</operator> <literal type="number">1000.</literal> <operator>&lt;&lt;</operator> <literal type="string">" s."</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
 
	<return>return <expr><literal type="number">0</literal></expr>;</return>
 
}</block></function></unit>
