<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28928765_62478452.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>2000000000</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><name>f</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
    <while>while<condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><name>f</name> <operator>*</operator> <name>x</name></expr>;</return> 
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>extgcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    }</block></then><else>else <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><call><name>extgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>y</name> <operator>-=</operator> <operator>(</operator><name>a</name> <operator>/</operator> <name>b</name><operator>)</operator> <operator>*</operator> <name>x</name></expr>;</expr_stmt>
        <return>return <expr><name>d</name></expr>;</return>
    }</block></else></if>
}</block></function>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>w</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>xx</name></decl>, <decl><type ref="prev"/><name>yy</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>dd</name> <init>= <expr><call><name>extgcd</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>p</name> <operator>%</operator> <name>dd</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return ;</return>
    }</block></then><else>else <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>ww</name> <init>= <expr><name>w</name> <operator>/</operator> <name>dd</name></expr></init></decl>, <decl><type ref="prev"/><name>d_</name> <init>= <expr><name>d</name> <operator>/</operator> <name>dd</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>ll</name></type> <name>xx1</name> <init>= <expr><operator>(</operator><name>xx</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>/</operator> <name>dd</name><operator>)</operator> <operator>%</operator> <name>d_</name><operator>)</operator> <operator>%</operator> <name>d_</name> <operator>+</operator> <name>d_</name><operator>)</operator> <operator>%</operator> <name>d_</name></expr></init></decl>, <decl><type ref="prev"/><name>yy1</name> <init>= <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>w</name> <operator>*</operator> <name>xx1</name><operator>)</operator> <operator>/</operator> <name>d</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>xx1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>yy1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>xx1</name> <operator>+</operator> <name>yy1</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d %I64d\n"</literal></expr></argument>, <argument><expr><name>xx1</name></expr></argument>, <argument><expr><name>yy1</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>xx1</name> <operator>-</operator> <name>yy1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return ;</return>
        }</block></then></if>
        <decl_stmt><decl><type><name>ll</name></type> <name>yy2</name> <init>= <expr><operator>(</operator><name>yy</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>p</name> <operator>/</operator> <name>dd</name><operator>)</operator> <operator>%</operator> <name>ww</name><operator>)</operator> <operator>%</operator> <name>ww</name> <operator>+</operator> <name>ww</name><operator>)</operator> <operator>%</operator> <name>ww</name></expr></init></decl>, <decl><type ref="prev"/><name>xx2</name> <init>= <expr><operator>(</operator><name>p</name> <operator>-</operator> <name>d</name> <operator>*</operator> <name>yy2</name><operator>)</operator> <operator>/</operator> <name>w</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>xx2</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>yy2</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>xx2</name> <operator>+</operator> <name>yy2</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d %I64d\n"</literal></expr></argument>, <argument><expr><name>xx2</name></expr></argument>, <argument><expr><name>yy2</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>xx2</name> <operator>-</operator> <name>yy2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return ;</return>
        }</block></then></if>
    }</block></else></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return ;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
