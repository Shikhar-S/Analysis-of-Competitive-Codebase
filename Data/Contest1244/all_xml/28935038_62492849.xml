<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935038_62492849.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (a); i &lt; (b); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (b) - 1; i &gt;= (a); i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITER</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(__typeof(a.begin()) it = a.begin(); it != a.end(); it++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, value, sizeof(a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)a.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>LINF</name> <init>= <expr><name>INF</name> <operator>*</operator> <operator>(</operator><name>LL</name><operator>)</operator><name>INF</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">100</literal> <operator>+</operator> <literal type="number">47</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>L</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>dp</name><index>[<expr><name>MAX</name></expr>]</index><index>[<expr><name>L</name></expr>]</index><index>[<expr><name>L</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VI</name></type> <name><name>g</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>C</name><index>[<expr><name>MAX</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>VI</name></type> <name>A</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>R</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>R1</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>mex</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c2</name></decl></parameter>)</parameter_list>
<block>{
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>L</argument>)</argument_list></macro>
	<block>{
		<if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>c1</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>!=</operator> <name>c2</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
	}</block>
}</block></function>

<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>SZ(g[v])</argument>)</argument_list></macro>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>to</name> <operator>==</operator> <name>p</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>to</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">// freopen("in.txt","r", stdin);</comment>
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>v</argument>, <argument><literal type="number">0</literal></argument>, <argument>MAX</argument>)</argument_list></macro>
	<block>{
		<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>L</argument>)</argument_list></macro>
		<block>{
			<macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument><literal type="number">0</literal></argument>, <argument>L</argument>)</argument_list></macro> <expr_stmt><expr><name><name>dp</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>LINF</name></expr>;</expr_stmt>
		}</block>
	}</block>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>L</argument>)</argument_list></macro>
	<block>{
		<macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro>
		<block>{
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>C</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block>
	}</block>

	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n - <literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>g</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>

	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro>
	<block>{
		<if>if <condition>(<expr><call><name>SZ</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block>

	<decl_stmt><decl><type><name>int</name></type> <name>root</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<macro><name>FOR</name><argument_list>(<argument>v</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro>
	<block>{
		<if>if <condition>(<expr><call><name>SZ</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>root</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
	}</block>

	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>FOR</name><argument_list>(<argument>c1</argument>, <argument><literal type="number">0</literal></argument>, <argument>L</argument>)</argument_list></macro>
	<block>{
		<macro><name>FOR</name><argument_list>(<argument>c2</argument>, <argument><literal type="number">0</literal></argument>, <argument>L</argument>)</argument_list></macro>
		<block>{
			<if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>c2</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

			<decl_stmt><decl><type><name>LL</name></type> <name>tmp</name> <init>=  <expr><name><name>C</name><index>[<expr><name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>c1</name></expr>]</index></name> <operator>+</operator> <name><name>C</name><index>[<expr><name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
	}</block>

	<macro><name>FOR</name><argument_list>(<argument>v</argument>, <argument><literal type="number">2</literal></argument>, <argument>n</argument>)</argument_list></macro>
	<block>{
		<macro><name>FOR</name><argument_list>(<argument>c</argument>, <argument><literal type="number">0</literal></argument>, <argument>L</argument>)</argument_list></macro>
		<block>{
			<macro><name>FOR</name><argument_list>(<argument>c1</argument>, <argument><literal type="number">0</literal></argument>, <argument>L</argument>)</argument_list></macro>
			<block>{
				<if>if <condition>(<expr><name>c1</name> <operator>==</operator> <name>c</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<decl_stmt><decl><type><name>int</name></type> <name>c2</name> <init>= <expr><call><name>mex</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>c1</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>c1</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name> <operator>+</operator> <name><name>C</name><index>[<expr><name><name>A</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block>
		}</block>
	}</block>

	<decl_stmt><decl><type><name>int</name></type> <name>cc1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cc2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>FOR</name><argument_list>(<argument>c1</argument>, <argument><literal type="number">0</literal></argument>, <argument>L</argument>)</argument_list></macro>
	<block>{
		<macro><name>FOR</name><argument_list>(<argument>c2</argument>, <argument><literal type="number">0</literal></argument>, <argument>L</argument>)</argument_list></macro>
		<block>{
			<if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>cc1</name></expr>]</index><index>[<expr><name>cc2</name></expr>]</index></name> <operator>&gt;</operator> <name><name>dp</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>c1</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>cc1</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cc2</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
			}</block></then></if>

		}</block>
	}</block>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>cc1</name></expr>]</index><index>[<expr><name>cc2</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<macro><name>RFOR</name><argument_list>(<argument>v</argument>, <argument>n</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name><name>R</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>cc1</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>R</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>cc2</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

		<macro><name>FOR</name><argument_list>(<argument>c2</argument>, <argument><literal type="number">0</literal></argument>, <argument>L</argument>)</argument_list></macro>
		<block>{
			<if>if <condition>(<expr><name>c2</name> <operator>==</operator> <name>cc2</name> <operator>||</operator> <name>c2</name> <operator>==</operator> <name>cc1</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

			<if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>cc2</name></expr>]</index><index>[<expr><name>c2</name></expr>]</index></name> <operator>+</operator> <name><name>C</name><index>[<expr><name><name>A</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index><index>[<expr><name>cc1</name></expr>]</index></name> <operator>==</operator> <name><name>dp</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>cc1</name></expr>]</index><index>[<expr><name>cc2</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
				<comment type="line">//break;</comment>
			}</block></then></if>
		}</block>

		<expr_stmt><expr><name>cc1</name> <operator>=</operator> <name>cc2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cc2</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
	}</block>

	<macro><name>FOR</name><argument_list>(<argument>v</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name><name>R1</name><index>[<expr><name><name>A</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>R</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>

	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>R1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	}</block>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
