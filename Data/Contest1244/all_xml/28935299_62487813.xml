<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1244/all/28935299_62487813.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>acos(-1)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">5e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>base</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">123</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>w</name><operator>&gt;&gt;</operator><name>d</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>p</name><operator>%</operator><call><name>__gcd</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>other</name><init>=<expr><name>p</name><operator>%</operator><name>w</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name><operator>-=</operator><name>other</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>other</name><operator>%</operator><name>d</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>other</name><operator>%</operator><name>d</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        <expr_stmt><expr><name><name>vis</name><index>[<expr><name>other</name><operator>%</operator><name>d</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>other</name><operator>+=</operator><name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>-=</operator><name>w</name></expr>;</expr_stmt>
    }</block></while>
    <if>if<condition>(<expr><name>p</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>p</name><operator>%</operator><name>w</name><operator>||</operator><name>other</name><operator>%</operator><name>d</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cur</name><init>=<expr><name>p</name><operator>/</operator><name>w</name><operator>+</operator><name>other</name><operator>/</operator><name>d</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>cur</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name><init>=<expr><name>p</name><operator>/</operator><name>w</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name><init>=<expr><name>other</name><operator>/</operator><name>d</name></expr></init></decl>, <decl><type ref="prev"/><name>z</name><init>=<expr><name>n</name><operator>-</operator><name>cur</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>z</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
