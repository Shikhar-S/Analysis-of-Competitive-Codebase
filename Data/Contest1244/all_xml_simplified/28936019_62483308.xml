define directive macro name value pragma directive name name name name name include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name value using namespace name typedef type name name name typedef type name name name typedef type name name name name typedef type name name argument_list type generic argument expr name argument expr name name decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type specifier name name init expr call name argument_list argument expr operator literal type number function type name name name parameter_list block decl_stmt decl type name name decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number do block expr_stmt expr name operator call name argument_list condition expr operator name name argument_list type generic argument expr literal type char operator name literal type char operator operator name operator literal type char if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator literal type number else block type pseudo expr_stmt expr name operator name operator literal type char while condition expr operator name operator call name argument_list operator operator literal type char operator name operator literal type char block type pseudo expr_stmt expr name operator name operator literal type number operator operator name operator literal type char operator return expr name operator name function type name name name parameter_list block decl_stmt decl type name name decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number do block expr_stmt expr name operator call name argument_list condition expr operator name name argument_list type generic argument expr literal type char operator name literal type char operator operator name operator literal type char if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator literal type number else block type pseudo expr_stmt expr name operator name operator literal type char while condition expr operator name operator call name argument_list operator operator literal type char operator name operator literal type char block type pseudo expr_stmt expr name operator name operator literal type number operator operator name operator literal type char operator return expr name operator name function type name name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr literal type number while condition expr name block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name operator name operator name expr_stmt expr name operator name operator name operator name expr_stmt expr name operator literal type number return expr name decl_stmt decl type name name argument_list type generic argument expr name argument expr name name decl_stmt decl type name name decl_stmt decl type name name function type name name parameter_list block expr_stmt expr name operator call name argument_list operator expr name operator call name argument_list for control init decl type name name init expr literal type number decl type ref prev name condition expr name operator name incr expr operator name block expr_stmt expr name operator call name argument_list expr_stmt expr operator name name index expr name while condition expr name operator call name name operator name argument_list operator literal type number block decl_stmt decl type name name argument_list type generic argument expr name argument expr name name init expr operator call name name operator name argument_list decl type ref prev name init expr operator call name name operator name argument_list if condition expr name operator name name operator name operator name operator name name operator name then block type pseudo break if condition expr name name operator name operator name name operator name then block decl_stmt decl type name name argument_list type generic argument expr name argument expr name name init expr operator operator call name name operator name argument_list argument expr name name operator name operator decl_stmt decl type name name init expr name name operator name decl type ref prev name init expr name name operator name decl_stmt decl type name name init expr name operator name name operator name decl_stmt decl type name name init expr name operator name name operator name if condition expr name operator name then block expr_stmt expr name operator name expr_stmt expr name name index expr name operator name name operator name expr_stmt expr call name name operator name argument_list argument expr name name operator name else block decl_stmt decl type name name init expr name operator name name operator name expr_stmt expr name name index expr name name operator name operator name operator name name operator name expr_stmt expr name operator name name operator name operator name expr_stmt expr call name name operator name argument_list argument expr name name operator name else block decl_stmt decl type name name argument_list type generic argument expr name argument expr name name init expr operator operator operator operator call name name operator name argument_list argument expr name name operator name operator operator decl_stmt decl type name name init expr name name operator name decl type ref prev name init expr name name operator name decl_stmt decl type name name init expr name name operator name operator name decl_stmt decl type name name init expr name operator name name operator name if condition expr name operator name then block expr_stmt expr name operator name expr_stmt expr name name index expr name operator name name operator name expr_stmt expr call name name operator name argument_list argument expr name name operator name else block decl_stmt decl type name name init expr name operator name name operator name expr_stmt expr name name index expr name name operator name operator name operator name name operator name expr_stmt expr name operator name name operator name operator name expr_stmt expr call name name operator name argument_list argument expr name name operator name decl_stmt decl type name name init expr call name name operator name argument_list operator name decl type ref prev name init expr call name name operator name argument_list operator name expr_stmt expr call name argument_list argument expr name operator name comment type line return expr literal type number 
