pragma directive name name name literal name pragma directive name name name literal name include directive file define directive macro name parameter_list parameter type name value define directive macro name value using namespace name typedef type name name name typedef type name name name typedef type name name name name if directive expr name operator literal type number define directive macro name else directive define directive macro name value endif directive define directive macro name value define directive macro name value define directive macro name value namespace name block decl_stmt decl type name name name init expr call name argument_list argument expr operator literal type number comment type line namespace name block decl_stmt decl type name name name init expr operator literal type number decl_stmt decl type name name name init expr operator literal type number decl_stmt decl type name name name init expr operator literal type number operator literal type number decl_stmt decl type name name name init expr operator literal type number operator literal type number comment type line namespace name block decl_stmt decl type name name name init expr literal type number decl_stmt decl type name name name init expr literal type number decl_stmt decl type name name name init expr literal type number decl_stmt decl type name name name init expr literal type number comment type line comment type line namespace name block function template parameter_list parameter type name name comment type line specifier type name name name parameter_list parameter decl type name name parameter decl type name name block while condition expr name operator literal type number block decl_stmt decl type name name init expr name operator name expr_stmt expr name operator name expr_stmt expr name operator name return expr name function template parameter_list parameter type name name specifier type name name name parameter_list parameter decl type name name modifier name parameter decl type name name modifier name block return expr ternary condition expr name operator name then expr name else expr name function template parameter_list parameter type name name specifier type name name name parameter_list parameter decl type name name modifier name parameter decl type name name modifier name block return expr ternary condition expr name operator name then expr name else expr name function template parameter_list parameter type name name specifier type name name name parameter_list parameter decl type name name modifier name block return expr ternary condition expr name operator literal type number then expr name else expr operator name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr literal type number while condition expr name operator literal type number block if condition expr name operator literal type number then block expr_stmt expr name operator name operator name expr_stmt expr name operator name operator name expr_stmt expr name operator literal type number return expr name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name modifier name block expr_stmt expr name operator name decl_stmt decl type name name init expr literal type number while condition expr name operator literal type number block if condition expr name operator literal type number then block expr_stmt expr name operator name operator name operator name expr_stmt expr name operator name operator name operator name expr_stmt expr name operator literal type number return expr name operator name comment type line namespace name block function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name modifier name block decl_stmt decl type name name name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name init expr call name argument_list for control init condition expr operator call name argument_list argument expr name incr expr name operator call name argument_list block if condition expr name operator literal type char then block expr_stmt expr name operator operator literal type number for control init condition expr call name argument_list argument expr name incr expr name operator call name argument_list block expr_stmt expr name operator name operator literal type number operator name operator literal type char expr_stmt expr name operator name operator name if directive expr name operator literal type number function template parameter_list parameter type name name parameter type name modifier name type name name parameter_list parameter decl type name modifier name parameter decl type name modifier modifier name block expr_stmt expr call name argument_list argument expr name expr_stmt expr call name argument_list argument expr name operator endif directive function specifier type name name parameter_list block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr name return expr name function specifier type name name parameter_list block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr name return expr name comment type line undef directive name undef directive name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name decl type ref prev name decl_stmt decl type name name name index expr name function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr name argument expr name if condition expr name operator operator name operator literal type number operator operator name operator literal type number then block expr_stmt expr call name argument_list argument expr literal type string else block decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name name index expr name operator name operator expr name operator call name name operator name argument_list argument expr name argument expr name operator name operator literal type number expr_stmt expr name operator call name name operator name argument_list argument expr name argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr call name argument_list argument expr literal type string argument expr name expr_stmt expr call name argument_list argument expr literal type string expr_stmt expr name operator name operator operator name operator literal type number operator operator literal type number for control init decl type name name init expr literal type number condition incr expr operator name block decl_stmt decl type name name init expr name operator name operator literal type number operator literal type number if condition expr name operator name operator name operator literal type number then block expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name expr_stmt expr call name argument_list argument expr literal type string return expr literal type number else block expr_stmt expr name operator name expr_stmt expr call name argument_list argument expr name name index expr name argument expr name name index expr name operator name operator literal type number return expr literal type number 
