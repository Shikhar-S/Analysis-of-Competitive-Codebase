pragma directive name name name name name pragma directive name name name name name include directive file define directive macro name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value using namespace name typedef type name name name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name modifier name block expr_stmt expr name operator literal type number decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr call name argument_list while condition expr name name argument_list type generic argument expr literal type char operator name literal type char block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator literal type number expr_stmt expr name operator call name argument_list while condition expr name operator literal type char operator name operator literal type char block expr_stmt expr name operator operator name operator literal type number operator operator operator name operator literal type number operator operator operator name operator literal type number operator expr_stmt expr name operator call name argument_list expr_stmt expr name operator name function template parameter_list parameter type name name type name name parameter_list parameter decl type name name block if condition expr name operator literal type number then block type pseudo expr_stmt expr call name argument_list argument expr literal type char operator expr name operator operator name if condition expr name operator literal type number then block type pseudo expr_stmt expr call name argument_list argument expr name operator literal type number else block type pseudo expr_stmt expr call name argument_list argument expr name operator literal type number operator expr call name argument_list argument expr name operator literal type number operator literal type number function template parameter_list parameter type name name type name name parameter_list parameter decl type name name parameter decl type name name block expr_stmt expr call name argument_list argument expr name expr_stmt expr call name argument_list argument expr name decl_stmt decl type specifier name name init expr literal type number operator literal type number struct name block public type default decl_stmt decl type name name decl type ref prev name decl type ref prev name decl name name index expr name operator literal type number decl_stmt decl type name name name index expr name index expr literal type number index expr literal type number decl type ref prev name decl_stmt decl type name name name index expr name index expr literal type number index expr literal type number decl_stmt decl type name name name index expr literal type number index expr name decl_stmt decl type name name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl_stmt decl type name name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name function specifier type name name parameter_list parameter decl type name name parameter decl type name name block expr_stmt expr name name index expr operator name operator operator name operator block expr name expr name expr name name index expr name operator expr name name index expr name operator name expr_stmt expr name name index expr operator name operator operator name operator block expr name expr name expr name name index expr name operator expr name name index expr name operator name function type name name parameter_list parameter decl type name name parameter decl type name name block expr_stmt expr name name index expr operator name operator name for control init decl type specifier name name init expr name name index expr name condition expr name incr expr name operator name name index expr name operator name block decl_stmt decl type name name init expr name name index expr name operator name if condition expr name operator name then block type pseudo continue expr_stmt expr call name argument_list argument expr name argument expr name function type name name parameter_list block expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr sizeof argument_list argument expr name expr_stmt expr call name argument_list argument expr name for control init decl type specifier name name init expr literal type number condition expr name operator literal type number incr expr name operator block for control init decl type specifier name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr name name index expr name index expr name for control init decl type specifier name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name decl type ref prev name expr_stmt expr call name argument_list argument expr name expr_stmt expr call name argument_list argument expr name expr_stmt expr operator name name index expr name expr_stmt expr operator name name index expr name expr_stmt expr call name argument_list argument expr name argument expr name for control init decl type specifier name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name operator literal type number then block expr_stmt expr call name argument_list argument expr operator literal type number argument expr literal type char return expr literal type number for control init decl type specifier name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name operator literal type number then block expr_stmt expr name operator name break expr_stmt expr call name argument_list argument expr name argument expr literal type number for control init decl type specifier name name init expr literal type number condition expr name operator literal type number incr expr name operator block for control init decl type specifier name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr name operator name then block type pseudo continue expr_stmt expr name name index expr literal type number index expr name index expr name operator call name argument_list argument expr name name index expr literal type number index expr name index expr name argument expr operator name operator name name index expr name index expr name name index expr literal type number operator name name index expr name index expr name name index expr literal type number for control init decl type specifier name name init expr literal type number condition expr name operator name incr expr name operator block for control init decl type specifier name name init expr literal type number condition expr name operator literal type number incr expr name operator block for control init decl type specifier name name init expr literal type number condition expr name operator literal type number incr expr name operator block for control init decl type specifier name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr name operator name operator name operator name operator name operator name then block type pseudo continue if condition expr name name index expr name index expr name index expr name operator name name index expr name operator literal type number index expr name index expr name operator name name index expr name index expr name name index expr name then block expr_stmt expr name name index expr name index expr name index expr name operator name name index expr name operator literal type number index expr name index expr name operator name name index expr name index expr name name index expr name expr_stmt expr name name index expr name index expr name index expr name operator name expr_stmt expr name operator name name index expr literal type number index expr literal type number index expr literal type number for control init decl type specifier name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo for control init decl type specifier name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr name name index expr name index expr name index expr name operator name then block expr_stmt expr name operator name name index expr name index expr name index expr name expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name name index expr name name index expr name operator literal type number operator name expr_stmt expr name name index expr name name index expr name operator name for control init decl type specifier name name init expr name condition expr name operator literal type number incr expr name operator block decl_stmt decl type name name init expr name name index expr name index expr name index expr name expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name name index expr name name index expr name operator literal type number operator name expr_stmt expr call name argument_list argument expr name argument expr literal type char for control init decl type specifier name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr name name index expr name argument expr ternary condition expr name operator name then expr literal type char else expr literal type char return expr literal type number 
