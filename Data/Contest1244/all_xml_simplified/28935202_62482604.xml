include directive file using name init type name name decl_stmt decl type name name operator name name argument_list type generic argument expr name name operator name name argument_list type generic argument expr name name decl_stmt decl type name name name index expr literal type number index expr literal type number function type name name parameter_list block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name expr_stmt expr call name name operator name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name expr_stmt expr name name index expr name index expr name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name decl type ref prev name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name expr_stmt expr operator name expr_stmt expr operator name expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name if condition expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr lambda capture parameter_list parameter decl ref_qualifier name then block return expr call name name operator name argument_list operator literal type number block expr_stmt expr call name argument_list argument expr literal type string return expr literal type number decl_stmt decl type name name init expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr lambda capture parameter_list parameter decl type specifier specifier modifier name block return expr call name name operator name argument_list operator literal type number operator call name name operator name argument_list decl_stmt decl type name name operator name name argument_list argument expr name argument expr name name index expr name operator macro name argument_list while condition expr name name index expr call name name operator name argument_list operator call name argument_list operator literal type number block decl_stmt decl type name name init expr call name name operator name argument_list decl_stmt decl type name name init expr name name index expr name index expr literal type number operator name name index expr name index expr literal type number operator name name index expr call name name operator name argument_list operator literal type number expr_stmt expr call name name operator name argument_list argument expr name decl_stmt decl type name name init expr call name name operator name name argument_list type generic argument expr name operator name argument_list decl_stmt decl type name name operator name name argument_list type generic argument expr name argument expr name name for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo if condition expr name operator name then block decl_stmt decl type name name name index argument_list argument expr name argument expr name argument expr literal type number operator name operator name decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name operator name name index expr name name index expr name index expr name name index expr name operator literal type number if condition expr name operator name then block expr_stmt expr name operator name expr_stmt expr name operator call name name operator name argument_list argument expr name argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr name decl_stmt decl type name name name index argument_list argument expr name name operator name argument expr name name operator name argument expr literal type number operator name name operator name operator name name operator name function_decl type name name operator name name argument_list type generic argument expr name name parameter_list parameter decl type name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name name index expr name operator name name index expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name operator literal type number expr_stmt expr call name argument_list argument expr literal type string return expr literal type number 
