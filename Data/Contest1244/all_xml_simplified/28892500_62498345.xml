include directive file using namespace name function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type number operator expr call name name operator name argument_list argument expr literal type number decl_stmt decl type name name decl_stmt decl type name name name expr_stmt expr name operator name operator name decl_stmt decl type name name argument_list type generic argument expr name name argument_list argument expr name decl_stmt decl type name name argument_list type generic argument expr name name name argument_list argument expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name operator name name index expr name expr_stmt expr call name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name name index expr name operator literal type number operator name name index expr name operator name name index expr name decl_stmt decl type name name init expr lambda capture argument modifier parameter_list parameter decl type name name name block decl_stmt decl type name name init expr literal type number decl type ref prev name init expr name name index expr name operator literal type number while condition expr name operator literal type number operator name block decl_stmt decl type name name init expr name operator name operator literal type number decl_stmt decl type name name init expr call name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr name operator call name name operator name argument_list if condition expr name name index expr name operator name name index expr name operator literal type number operator operator name operator name operator operator name operator name then block expr_stmt expr name operator name else block expr_stmt expr name operator name return expr name decl_stmt decl type name name init expr lambda capture argument modifier parameter_list parameter decl type name name name block decl_stmt decl type name name init expr name name index expr literal type number decl type ref prev name init expr name name index expr name operator literal type number while condition expr name operator literal type number operator name block decl_stmt decl type name name init expr name operator name operator literal type number decl_stmt decl type name name init expr call name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr name operator call name name operator name argument_list if condition expr literal type number operator name operator name operator name name index expr name operator name then block expr_stmt expr name operator name else block expr_stmt expr name operator name return expr name decl_stmt decl type name name init expr name name index expr name operator literal type number operator name name index expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block decl_stmt decl type name name name init expr literal type number operator name name index expr name operator name operator name name index expr name if condition expr name operator name then block break expr_stmt expr name operator call name argument_list argument expr name argument expr call name argument_list argument expr literal type number argument expr call name argument_list argument expr name operator name operator name name index expr name for control init decl type name name init expr name operator literal type number condition expr name operator literal type number incr expr operator name block decl_stmt decl type name name name init expr name name index expr name operator name name index expr name operator literal type number operator literal type number operator name name index expr name operator operator name operator name operator literal type number operator if condition expr name operator name then block break expr_stmt expr name operator call name argument_list argument expr name argument expr call name argument_list argument expr literal type number argument expr name name index expr name operator call name argument_list argument expr name operator name expr_stmt expr name operator name return expr literal type number 
