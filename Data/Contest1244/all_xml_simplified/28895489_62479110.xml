include directive file using namespace name define directive macro name value define directive macro name value decl_stmt decl type specifier name name init expr literal type number operator literal type number decl type ref prev name init expr literal type number operator literal type number decl_stmt decl type name name argument_list argument expr call name name operator name operator name argument_list operator call name argument_list operator call name argument_list function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name name operator name argument_list argument expr name decl_stmt decl type name name expr_stmt expr name operator name while condition expr name operator block decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name init expr literal type string expr_stmt expr name operator name decl_stmt decl type name name argument_list type generic argument expr name name if condition expr name operator literal type number operator name name index expr literal type number operator literal type char then block expr_stmt expr name operator literal type number operator name continue elseif if condition expr name operator literal type number operator name name index expr literal type number operator literal type char then block expr_stmt expr name operator literal type number operator name continue for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr call name name operator name argument_list argument expr name if condition expr call name name operator name argument_list operator literal type number then block expr_stmt expr name operator name operator name continue decl_stmt decl type name name init expr name if condition expr call name name operator name argument_list operator literal type number then block decl_stmt decl type name name init expr literal type number operator name name index expr literal type number operator literal type number expr_stmt expr name operator call name argument_list argument expr name argument expr name expr_stmt expr name name index expr literal type number operator operator name operator literal type number operator name name index expr literal type number operator expr_stmt expr name operator literal type number operator name name index expr literal type number operator literal type number expr_stmt expr name operator call name argument_list argument expr name argument expr name expr_stmt expr name operator name operator name continue decl_stmt decl type name name init expr call name name operator name argument_list decl_stmt decl type name name init expr name name index expr literal type number decl type ref prev name init expr name name index expr name operator literal type number decl_stmt decl type name name init expr literal type number operator name operator literal type number expr_stmt expr name operator operator name operator literal type number operator name operator expr_stmt expr name operator call name argument_list argument expr name argument expr literal type number operator name operator literal type number expr_stmt expr name operator call name argument_list argument expr name argument expr literal type number operator name operator literal type number expr_stmt expr name operator operator name operator literal type number operator name operator expr_stmt expr name operator call name argument_list argument expr name argument expr literal type number operator name operator literal type number expr_stmt expr name operator call name argument_list argument expr name argument expr name expr_stmt expr name operator name operator name return expr literal type number 
