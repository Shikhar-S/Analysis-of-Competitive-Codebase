include directive file define directive macro name value define directive macro name value using namespace name function type name name parameter_list block decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name init expr call name argument_list while condition expr name name argument_list type generic argument expr literal type char operator name literal type char block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator literal type number expr_stmt expr name operator call name argument_list while condition expr name operator literal type char operator name operator literal type char block expr_stmt expr name operator name operator literal type number operator name operator literal type char expr_stmt expr name operator call name argument_list return expr name operator name decl_stmt decl type name name decl type ref prev name name index expr literal type number decl_stmt decl type name name decl_stmt decl type name name name index expr literal type number decl_stmt decl type name name name index expr literal type number function type name name parameter_list parameter decl type name name parameter decl type name name block return expr name operator name function type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr name decl type ref prev name init expr name operator name decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr literal type number decl type ref prev name init expr name decl_stmt decl type name name while condition expr name operator name block if condition expr name operator name operator literal type number then block if condition expr name name index expr name operator name then block type pseudo expr_stmt expr name operator name else block type pseudo expr_stmt expr name operator name break decl_stmt decl type name name init expr operator name operator name operator operator literal type number if condition expr name name index expr name operator name then block type pseudo expr_stmt expr name operator name else block type pseudo expr_stmt expr name operator name expr_stmt expr name operator name operator literal type number operator name operator name operator name name index expr name expr_stmt expr name operator literal type number operator expr name operator name while condition expr name operator name block if condition expr name operator name operator literal type number then block if condition expr name name index expr name operator name then block type pseudo expr_stmt expr name operator name else block type pseudo expr_stmt expr name operator name break decl_stmt decl type name name init expr operator name operator name operator operator literal type number if condition expr name name index expr name operator name then block type pseudo expr_stmt expr name operator name else block type pseudo expr_stmt expr name operator name expr_stmt expr name operator name operator name name index expr name operator literal type number operator literal type number operator operator name operator name operator operator name return expr name function type name name parameter_list parameter decl type name name block decl_stmt decl type name name init expr name name index expr literal type number decl type ref prev name init expr name name index expr name decl_stmt decl type name name decl type ref prev name decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name decl type ref prev name init expr call name argument_list argument expr name argument expr name while condition expr name operator name block if condition expr name operator name operator name operator name then block type pseudo return expr literal type number if condition expr name operator name operator literal type number then block if condition expr call name argument_list argument expr name argument expr name operator name then block type pseudo return expr literal type number elseif if condition expr call name argument_list argument expr name argument expr name operator name then block type pseudo return expr literal type number elseif if condition expr call name argument_list argument expr operator name operator name operator operator literal type number argument expr name operator name then block type pseudo return expr literal type number return expr literal type number expr_stmt expr name operator name operator operator name operator name operator operator literal type number expr_stmt expr name operator name operator operator name operator name operator operator literal type number decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name decl type ref prev name init expr call name argument_list argument expr name argument expr name if condition expr name operator name then block expr_stmt expr name operator name expr_stmt expr name operator name else block expr_stmt expr name operator name expr_stmt expr name operator name comment type line comment type line function type name name parameter_list block expr_stmt expr name operator call name argument_list expr_stmt expr name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name operator call name argument_list expr_stmt expr call name argument_list argument expr name operator literal type number argument expr name operator name operator literal type number argument expr name decl_stmt decl type name name init expr literal type number decl type ref prev name init expr name name index expr name operator name name index expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name operator name name index expr name operator literal type number operator name name index expr name for control init decl type name name init expr name condition expr name operator literal type number incr expr name operator block type pseudo expr_stmt expr name name index expr name operator name name index expr name operator literal type number operator name name index expr name while condition expr name operator name block if condition expr name operator name then block expr_stmt expr call name argument_list argument expr literal type string argument expr name break elseif if condition expr name operator name operator literal type number then block if condition expr call name argument_list argument expr name then block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name else block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name break decl_stmt decl type name name init expr operator name operator name operator operator literal type number if condition expr call name argument_list argument expr name then block type pseudo expr_stmt expr name operator name else block type pseudo expr_stmt expr name operator name return expr literal type number 
