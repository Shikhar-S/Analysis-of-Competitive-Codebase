include directive file using namespace name decl_stmt decl type name name decl type ref prev name decl_stmt decl type name name name index expr literal type number decl_stmt decl type name name name index expr literal type number decl type ref prev name name index expr literal type number decl_stmt decl type name name argument_list type generic argument expr name name function type name name parameter_list block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name expr_stmt expr call name argument_list argument expr literal type string argument expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator name name index expr name operator name operator literal type number then block expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name name operator name argument_list argument expr name operator name operator literal type number if condition expr operator call name name operator name argument_list then block for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name operator literal type number then block expr_stmt expr call name argument_list argument expr literal type string argument expr literal type char operator literal type char operator name name index expr name else block expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name return expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name name argument_list type generic argument expr name operator name name init expr call name name operator name argument_list argument expr name decl_stmt decl type name name name argument_list type generic argument expr name operator name name init expr name if condition expr name operator call name name operator name argument_list then block expr_stmt expr name operator call name name operator name argument_list expr_stmt expr name operator if condition expr name operator call name name operator name argument_list then block expr_stmt expr name operator call name name operator name argument_list decl_stmt decl type name name decl type ref prev name if condition expr operator name operator name then block expr_stmt expr name operator call name argument_list argument expr operator name operator name argument expr name operator name operator operator name else block expr_stmt expr name operator call name argument_list argument expr name operator operator name argument expr operator name operator name operator name if condition expr operator name operator name then block expr_stmt expr name operator call name argument_list argument expr operator name operator name argument expr name operator name operator operator name else block expr_stmt expr name operator call name argument_list argument expr name operator operator name argument expr operator name operator name operator name if condition expr call name argument_list argument expr name argument expr name operator name then block if condition expr name operator literal type number then block expr_stmt expr call name argument_list argument expr literal type string argument expr literal type char operator literal type char operator name name index expr name else block expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name continue if condition expr name operator name then block expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr operator name else block expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr operator name return expr literal type number 
