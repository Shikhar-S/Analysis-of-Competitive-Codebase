include directive file define directive macro name value define directive macro name parameter_list parameter type name value comment type line using namespace name typedef type name name name using name init type name name argument_list type generic argument expr name argument expr name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name decl_stmt decl type name name name index expr name decl_stmt decl type name name argument_list type generic argument expr name name name index expr name decl_stmt decl type name name name index expr name index expr literal type number decl_stmt decl type name name name index expr name index expr literal type number index expr literal type number function type name name parameter_list parameter decl type name name parameter decl type name name block for control init decl type name name range expr name name index expr name block if condition expr name operator name then block type pseudo continue expr_stmt expr call name argument_list argument expr name argument expr name expr_stmt expr name name index expr name index expr literal type number index expr literal type number operator name name index expr name index expr literal type number index expr literal type number operator expr name name index expr name index expr literal type number index expr literal type number operator name name index expr name index expr literal type number index expr literal type number expr_stmt expr name name index expr name index expr literal type number index expr literal type number operator name name index expr name index expr literal type number index expr literal type number operator expr name name index expr name index expr literal type number index expr literal type number operator name name index expr name index expr literal type number index expr literal type number expr_stmt expr name name index expr name index expr literal type number index expr literal type number operator name name index expr name index expr literal type number index expr literal type number operator expr name name index expr name index expr literal type number index expr literal type number operator name name index expr name index expr literal type number index expr literal type number function type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name block expr_stmt expr name name index expr name operator name for control init decl type name name range expr name name index expr name block if condition expr name operator name then block type pseudo continue expr_stmt expr name name index expr name operator name decl_stmt decl type name name if condition expr name operator name operator literal type number then block type pseudo expr_stmt expr name operator literal type number if condition expr name operator name operator literal type number then block type pseudo expr_stmt expr name operator literal type number if condition expr name operator name operator literal type number then block type pseudo expr_stmt expr name operator literal type number expr_stmt expr call name argument_list argument expr name argument expr name argument expr name argument expr name function type name name parameter_list block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr operator name name index expr name index expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name decl type ref prev name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr call name argument_list argument expr name name index expr name operator call name argument_list operator literal type number then block expr_stmt expr call name argument_list argument expr literal type string return expr literal type number elseif if condition expr name name index expr name operator call name argument_list operator literal type number then block type pseudo expr_stmt expr name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr name operator name then block type pseudo continue expr_stmt expr name name index expr name index expr name index expr name operator name name index expr name index expr name expr_stmt expr call name argument_list argument expr name argument expr literal type number decl_stmt decl type name name init expr literal type number decl_stmt decl type name name decl type ref prev name for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr name operator name then block type pseudo continue if condition expr name name index expr name index expr name index expr name operator name then block type pseudo expr_stmt expr name operator name operator expr name operator name expr_stmt expr name operator call name argument_list argument expr name argument expr name name index expr name index expr name index expr name expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr name argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name argument expr ternary condition expr name operator name then expr literal type char else expr literal type char 
