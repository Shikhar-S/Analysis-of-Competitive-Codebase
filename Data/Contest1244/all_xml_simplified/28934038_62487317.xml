include directive file using namespace name struct name block public type default constructor name parameter_list block expr_stmt expr call name name operator name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr name operator name operator call name argument_list argument expr literal type number decl name using name init type name name using name init type name name argument_list type generic argument expr name using name init type name name argument_list type generic argument expr name using name init type name name argument_list type generic argument expr name argument expr name using name init type name name argument_list type generic argument expr name name using name init type name name argument_list type generic argument expr name using name init type name name argument_list type generic argument expr name argument expr name using name init type name name name using template parameter_list parameter type name name name init type name name argument_list type generic argument expr name using template parameter_list parameter type name name name init type name name argument_list type generic argument expr name argument expr name name argument_list type generic argument expr name argument expr name name argument_list type generic argument expr name define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value function template parameter_list parameter type name name type name name parameter_list parameter decl type name modifier name parameter decl type specifier name modifier name block if condition expr name operator name then block expr_stmt expr name operator name return expr literal type number return expr literal type number function template parameter_list parameter type name name type name name parameter_list parameter decl type name modifier name parameter decl type specifier name modifier name block if condition expr name operator name then block expr_stmt expr name operator name return expr literal type number return expr literal type number decl_stmt decl specifier type name name name init expr literal type number comment type line comment type line decl_stmt decl specifier type name name init expr literal type number decl_stmt decl specifier type name name init expr literal type number using name init type name name decl_stmt decl type name name decl type ref prev name decl type ref prev name decl_stmt decl type name name name index expr literal type number index expr literal type number decl_stmt decl type name name name index expr literal type number function type name name parameter_list block expr_stmt expr name operator name macro name argument_list argument argument literal type number macro name argument_list argument argument expr_stmt expr name operator name name index expr name index expr name macro name argument_list argument argument literal type number block expr_stmt expr name operator name operator name expr_stmt expr name operator operator expr name operator expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name decl_stmt decl type name name init expr literal type boolean macro name argument_list argument argument block if condition expr name name index expr name operator call name argument_list operator literal type number then block expr_stmt expr name operator literal type boolean break if condition expr name name index expr name operator call name argument_list operator literal type number then block type pseudo expr_stmt expr name operator name if condition expr operator name then block expr_stmt expr name operator operator literal type number operator name return expr literal type number decl_stmt decl type name name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name name operator name argument_list argument expr name name index expr name index expr literal type number for control init decl type name name init expr literal type number condition expr name operator name operator literal type number incr expr name operator block for control init decl type name name range expr name name index expr name name index expr name block if condition expr name operator name name index expr name operator literal type number then block type pseudo continue else block expr_stmt expr call name name operator name argument_list argument expr name break decl_stmt decl type name name init expr name decl_stmt decl type name name decl type ref prev name macro name argument_list argument argument literal type number macro name argument_list argument argument literal type number block decl_stmt decl type name name init expr literal type number macro name argument_list argument argument block expr_stmt expr name operator name name index expr operator name operator operator name operator literal type number operator operator name operator operator literal type number index expr name name index expr name if condition expr call name argument_list argument expr name argument expr name then block expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name operator name operator name decl_stmt decl type name name argument_list argument expr name argument expr literal type number macro name argument_list argument argument block expr_stmt expr name name index expr name name index expr name operator operator name operator operator name operator literal type number operator operator name operator operator literal type number operator literal type number macro name argument_list argument argument expr_stmt expr name operator name name index expr name operator literal type string expr_stmt expr name operator name 
