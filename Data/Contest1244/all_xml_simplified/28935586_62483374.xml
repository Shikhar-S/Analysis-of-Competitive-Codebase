include directive file define directive macro name value define directive macro name value define directive macro name value using namespace name function type name name parameter_list block decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name init expr call name argument_list while condition expr name name argument_list type generic argument expr literal type char operator name literal type char block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator literal type number expr_stmt expr name operator call name argument_list while condition expr name operator literal type char operator name operator literal type char block expr_stmt expr name operator operator name operator literal type number operator operator operator name operator literal type number operator operator operator name operator literal type number operator expr_stmt expr name operator call name argument_list return expr ternary condition expr name operator operator literal type number then expr operator name else expr name decl_stmt decl type name name decl_stmt decl type name name name index expr literal type number index expr name struct name block public type default decl_stmt decl type name name decl type ref prev name decl name name index expr name operator literal type number decl_stmt decl type name name name index expr name decl type ref prev name function type name name parameter_list parameter decl type name name parameter decl type name name block expr_stmt expr name name index expr name operator name operator name expr_stmt expr name name index expr name operator name operator name name index expr name expr_stmt expr name name index expr name operator name operator function type name name parameter_list block expr_stmt expr call name argument_list argument expr name argument expr operator literal type number argument expr sizeof argument_list argument expr name decl_stmt decl type name name name index expr name index expr literal type number index expr literal type number function type name name parameter_list parameter decl type name name parameter decl type name name block return expr literal type number operator name operator name function type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr literal type boolean for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr name operator name then block type pseudo continue expr_stmt expr name name index expr name index expr name index expr name operator literal type number operator name name index expr name index expr name for control init decl type name name init expr name name index expr name condition expr name operator operator literal type number incr expr name operator name name index expr name operator name block decl_stmt decl type name name init expr name name index expr name operator name if condition expr name operator name then block type pseudo continue expr_stmt expr name operator literal type boolean expr_stmt expr call name argument_list argument expr name argument expr name for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr name operator name then block type pseudo continue decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name expr_stmt expr name name index expr name index expr name index expr name operator name name index expr name index expr name index expr name decl_stmt decl type name name name index expr name function type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name block expr_stmt expr name name index expr name operator name for control init decl type name name init expr name name index expr name condition expr name operator operator literal type number incr expr name operator name name index expr name operator name block decl_stmt decl type name name init expr name name index expr name operator name if condition expr name operator name then block type pseudo continue expr_stmt expr call name argument_list argument expr name argument expr name argument expr name argument expr call name argument_list argument expr name argument expr name decl_stmt decl type name name name index expr name function type name name parameter_list block expr_stmt expr call name argument_list expr_stmt expr name operator call name argument_list for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr name name index expr name index expr name operator call name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name init expr call name argument_list decl type ref prev name init expr call name argument_list expr_stmt expr name name index expr name operator expr_stmt expr name name index expr name operator expr_stmt expr call name argument_list argument expr name argument expr name expr_stmt expr call name argument_list argument expr name argument expr name decl_stmt decl type name name init expr literal type boolean decl_stmt decl type name name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator literal type number then block type pseudo expr_stmt expr name operator name if condition expr name name index expr name operator literal type number then block expr_stmt expr name operator literal type boolean break if condition expr operator name then block expr_stmt expr name operator operator literal type number return expr literal type number expr_stmt expr call name argument_list argument expr name argument expr literal type number decl_stmt decl type name name init expr name decl_stmt decl type name name decl type ref prev name for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr name operator name then block type pseudo continue if condition expr name name index expr name index expr name index expr name operator name then block expr_stmt expr name operator name name index expr name index expr name index expr name expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name operator name operator name expr_stmt expr call name argument_list argument expr name argument expr literal type number argument expr name argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr name operator name name index expr name operator literal type string expr_stmt expr name operator name 
