include directive file using namespace name define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name value define directive macro name value function specifier type name name parameter_list block decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name init expr call name argument_list while condition expr operator call name argument_list argument expr name block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator literal type number expr_stmt expr name operator call name argument_list while condition expr call name argument_list argument expr name block type pseudo expr_stmt expr name operator name operator literal type number operator name operator literal type char operator expr name operator call name argument_list return expr name operator name function specifier type name name parameter_list parameter decl type name name block if condition expr name operator literal type number then block expr_stmt expr call name argument_list argument expr literal type char expr_stmt expr call name argument_list argument expr call name argument_list argument expr name return if condition expr name operator literal type number then block type pseudo expr_stmt expr call name argument_list argument expr name operator literal type char else block expr_stmt expr call name argument_list argument expr name operator literal type number expr_stmt expr call name argument_list argument expr name operator literal type number operator literal type char decl_stmt decl type name name decl type ref prev name name index expr literal type number index expr literal type number decl_stmt decl type name name argument_list type generic argument expr name name name index expr literal type number decl_stmt decl type name name decl_stmt decl type name name argument_list type generic argument expr name name function specifier type name name parameter_list parameter decl type name name parameter decl type name name block for control init decl type name name init expr literal type number condition expr name operator name name index expr name operator call name argument_list incr expr name operator block decl_stmt decl type name name init expr name name index expr name index expr name if condition expr name operator name then block type pseudo continue expr_stmt expr call name argument_list argument expr name argument expr name expr_stmt expr call name name operator name argument_list argument expr name comment type line decl_stmt decl type name name name index expr literal type number function type name name parameter_list block expr_stmt expr name operator name for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name operator name name index expr name index expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name operator call name argument_list operator literal type number then block expr_stmt expr call name argument_list argument expr literal type string return expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name operator call name argument_list operator literal type number then block type pseudo expr_stmt expr name operator name expr_stmt expr call name argument_list argument expr name argument expr literal type number decl_stmt decl type name name init expr literal type number operator literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr name operator name then block type pseudo continue decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr name operator block decl_stmt decl type name name init expr name name index expr name decl_stmt decl type name name if condition expr name operator literal type number operator literal type number then block type pseudo expr_stmt expr name operator name elseif if condition expr name operator literal type number operator literal type number then block type pseudo expr_stmt expr name operator name else block type pseudo expr_stmt expr name operator literal type number operator name operator name expr_stmt expr name operator name name index expr name index expr name if condition expr name operator name then block type pseudo expr_stmt expr name operator name operator expr name operator name operator expr name operator name expr_stmt expr name operator name operator name for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr name operator block decl_stmt decl type name name if condition expr name operator literal type number operator literal type number then block type pseudo expr_stmt expr name operator name elseif if condition expr name operator literal type number operator literal type number then block type pseudo expr_stmt expr name operator name else block type pseudo expr_stmt expr name operator literal type number operator name operator name expr_stmt expr name name index expr name name index expr name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name operator name name index expr name operator literal type string return expr literal type number comment type block 
