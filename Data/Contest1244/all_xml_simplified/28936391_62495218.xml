include directive file using namespace name typedef type name name name define directive macro name value decl_stmt decl type name name name index expr name decl_stmt decl type name name name index expr name decl type ref prev name name index expr name struct name block public type default decl_stmt decl type name name decl type ref prev name decl name name index expr literal type number index expr name operator literal type number function type name name parameter_list parameter decl type name name block return expr name operator literal type char decl_stmt decl type name name name index expr name decl type ref prev name function type name name parameter_list block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name decl_stmt decl type name name init expr operator literal type number decl type ref prev name init expr name decl type ref prev name init expr literal type number expr_stmt expr call name argument_list argument expr literal type string argument expr name if condition expr name name index expr literal type number operator name name index expr name operator literal type number then block expr_stmt expr name name index expr literal type number operator name name index expr name operator literal type number operator literal type number expr_stmt expr name name index expr literal type number operator name name index expr name operator literal type number operator call name argument_list argument expr name name index expr literal type number while condition expr name operator literal type number operator name operator name name index expr name operator literal type number operator name name index expr literal type number block type pseudo expr_stmt expr name operator operator expr name name index expr name operator literal type number operator expr name name index expr name operator call name argument_list argument expr name name index expr literal type number while condition expr name operator literal type number operator literal type number operator name name index expr name operator literal type number operator name name index expr name operator literal type number block type pseudo expr_stmt expr name operator operator expr name name index expr name operator literal type number operator expr name name index expr name operator call name argument_list argument expr name name index expr literal type number if condition expr name operator name then block type pseudo return expr call name argument_list argument expr literal type string argument expr name operator expr literal type number expr_stmt expr name name index expr literal type number index expr operator name operator operator name operator block expr name expr literal type number expr_stmt expr name name index expr literal type number index expr operator name operator operator name operator block expr name expr operator literal type number for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name init expr name while condition expr name operator literal type number operator name operator name name index expr name operator literal type number operator name name index expr name block type pseudo expr_stmt expr name operator if condition expr name operator name then block for control init decl type name name init expr name condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name operator literal type number operator expr name name index expr name operator call name argument_list argument expr name name index expr name expr_stmt expr name name index expr literal type number index expr operator name operator operator name operator block expr name expr operator literal type number expr_stmt expr name name index expr literal type number index expr operator name operator operator name operator block expr name expr literal type number expr_stmt expr name operator name decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number comment type line comment type line comment type line while condition expr name operator name block decl_stmt decl type name name init expr literal type number expr_stmt expr name operator for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name init expr operator name name index expr name index expr name operator name operator name name index expr name index expr name operator name operator name operator operator name if condition expr name name index expr name then block if condition expr name name index expr name operator name then block if condition expr name name index expr name operator name name index expr name name index expr name index expr name operator name then block type pseudo continue decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name operator name if condition expr name operator name name index expr name then block type pseudo expr_stmt expr name name index expr name operator name else block type pseudo expr_stmt expr name name index expr name operator name name index expr name name index expr name index expr name operator name else block type pseudo continue comment type line expr_stmt expr name name index expr name operator literal type number operator expr name name index expr name operator name expr_stmt expr name name index expr name operator name name index expr name name index expr name index expr name operator name expr_stmt expr name name index expr operator name index expr operator name operator operator name operator block expr name expr name name index expr name index expr name operator name expr_stmt expr name operator literal type number expr_stmt expr name operator name expr_stmt expr name operator literal type number comment type line expr_stmt expr name operator for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name then block if condition expr name name index expr name operator literal type number then block type pseudo expr_stmt expr call name argument_list argument expr literal type string else block type pseudo expr_stmt expr call name argument_list argument expr literal type string else block decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name operator name if condition expr name operator literal type number then block type pseudo expr_stmt expr call name argument_list argument expr literal type string else block type pseudo expr_stmt expr call name argument_list argument expr literal type string expr_stmt expr call name argument_list argument expr literal type string return expr literal type number 
