comment type line include directive file using namespace name decl_stmt decl type name name argument_list argument expr call name name operator name operator name argument_list operator call name argument_list operator call name argument_list define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value decl_stmt decl type specifier name name init expr literal type number operator literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number operator literal type number decl_stmt decl type name name decl_stmt decl type name name decl type ref prev name decl type ref prev name decl type ref prev name init expr name decl type ref prev name decl_stmt decl type name name argument_list type generic argument expr name name decl_stmt decl type name name name argument_list type generic argument expr name operator name name function type name name parameter_list block decl_stmt decl type name name init expr call name argument_list decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number while condition expr name name argument_list type generic argument expr literal type char operator name literal type char block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator name expr_stmt expr name operator call name argument_list while condition expr name operator literal type char operator name operator literal type char block expr_stmt expr name operator name operator literal type number operator name operator literal type char expr_stmt expr name operator call name argument_list return expr name operator name function type name name parameter_list parameter decl type name name block if condition expr name operator literal type number then block expr_stmt expr call name argument_list argument expr literal type char expr_stmt expr name operator operator name if condition expr name operator literal type number then block type pseudo expr_stmt expr call name argument_list argument expr name operator literal type number expr_stmt expr call name argument_list argument expr name operator literal type number operator literal type char return function type name name parameter_list block expr_stmt expr name operator name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block decl_stmt decl type name name expr_stmt expr name operator name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr name operator call name argument_list argument expr name argument expr name expr_stmt expr name operator call name argument_list argument expr name argument expr name function type name name parameter_list block expr_stmt expr name operator literal type number while condition expr name operator name block decl_stmt decl type name name init expr call name name operator name argument_list argument expr name decl type ref prev name init expr call name name operator name argument_list argument expr name decl type ref prev name if condition expr call name argument_list argument expr name operator name argument expr name operator name operator name then block type pseudo break if condition expr name operator name operator name operator name then block expr_stmt expr name operator call name name operator name argument_list argument expr name expr_stmt expr name operator call name argument_list argument expr name operator operator name operator name operator argument expr operator operator name operator operator name expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name operator name operator name else block expr_stmt expr name operator call name name operator name argument_list argument expr name expr_stmt expr operator name expr_stmt expr name operator call name argument_list argument expr name operator operator name operator name operator argument expr name operator operator operator name operator expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name operator name operator name expr_stmt expr name operator name operator name function name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type number ifndef directive name expr_stmt expr call name argument_list argument expr name argument expr literal type string argument expr name expr_stmt expr call name argument_list argument expr name argument expr literal type string argument expr name endif directive expr_stmt expr name operator literal type number comment type line while condition expr name operator block expr_stmt expr call name argument_list expr_stmt expr call name argument_list 
