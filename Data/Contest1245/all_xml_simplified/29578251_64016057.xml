comment type line include directive file define directive macro name value define directive macro name value using namespace name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name decl type ref prev name name index expr name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl type ref prev name decl type ref prev name decl_stmt decl type name name decl type ref prev name name index expr name index expr name decl_stmt decl type name name name index expr name decl_stmt decl type name name argument_list type generic argument expr name argument expr name name name index expr name decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name argument_list type generic argument expr name argument expr name name function specifier type name name parameter_list block decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name expr_stmt expr name operator call name argument_list while condition expr name name argument_list type generic argument expr literal type char operator name literal type char block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator literal type number expr_stmt expr name operator call name argument_list while condition expr name operator literal type char operator name operator literal type char block type pseudo expr_stmt expr name operator operator name operator literal type number operator operator operator name operator literal type number operator operator operator name operator literal type char operator operator expr name operator call name argument_list return expr name operator name function specifier type name name parameter_list block decl_stmt decl type name name init expr call name argument_list while condition expr name name argument_list type generic argument expr literal type char operator name literal type char block type pseudo expr_stmt expr name operator call name argument_list return expr name function type name name argument_list type generic argument expr name argument expr name name argument_list type generic argument expr name argument expr name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name block return expr call name argument_list argument expr name argument expr call name argument_list argument expr name argument expr name function type name name parameter_list parameter decl type name name block if condition expr name operator name name index expr name then block type pseudo return expr name return expr name name index expr name operator call name argument_list argument expr name name index expr name function type name name parameter_list block expr_stmt expr name operator call name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name operator name operator call name argument_list operator expr name name index expr name operator name operator call name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name operator call name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name operator call name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr name name index expr name index expr name operator operator literal type number operator call name argument_list argument expr name name index expr name operator name operator name name index expr name operator name operator literal type number operator call name argument_list argument expr name name index expr name operator name operator name name index expr name operator name operator operator operator literal type number operator name name index expr name operator literal type number operator name name index expr name operator expr_stmt expr call name name operator name argument_list argument expr call name argument_list argument expr operator name name index expr name index expr name argument expr name argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr call name name operator name argument_list argument expr call name argument_list argument expr operator name name index expr name argument expr name argument expr operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name operator name while condition expr operator call name name operator name argument_list block decl_stmt decl type name name init expr operator call name name operator name argument_list operator name decl_stmt decl type name name init expr call name name operator name argument_list operator name name operator name decl type ref prev name init expr call name name operator name argument_list operator name name operator name expr_stmt expr call name name operator name argument_list if condition expr name operator operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr name if condition expr name name index expr name then block type pseudo continue expr_stmt expr name name index expr name operator literal type boolean expr_stmt expr name name index expr name operator literal type boolean expr_stmt expr name operator expr_stmt expr name operator name else block decl_stmt decl type name name init expr call name argument_list argument expr name decl type ref prev name init expr call name argument_list argument expr name if condition expr name operator name then block type pseudo continue if condition expr name name index expr name operator name name index expr name then block type pseudo continue expr_stmt expr name name index expr name operator name expr_stmt expr name name index expr name operator name name index expr name expr_stmt expr name operator name expr_stmt expr name operator expr_stmt expr name name index expr name index expr name operator literal type boolean expr_stmt expr call name argument_list argument expr literal type string argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name then block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name if condition expr name then block type pseudo expr_stmt expr call name argument_list argument expr literal type string expr_stmt expr call name argument_list argument expr literal type string argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo if condition expr name name index expr name index expr name then block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name argument expr name if condition expr name then block type pseudo expr_stmt expr call name argument_list argument expr literal type string function type name name parameter_list block comment type line comment type line decl_stmt decl type name name init expr literal type number while condition expr name operator block type pseudo expr_stmt expr call name argument_list return expr literal type number 
