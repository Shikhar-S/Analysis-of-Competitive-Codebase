include directive file using namespace name decl_stmt decl type name name name index expr literal type number decl_stmt decl type name name name index expr literal type number decl_stmt decl type name name decl_stmt decl type name name name index expr literal type number init expr block expr literal type char expr literal type char expr literal type char decl_stmt decl type name name decl type ref prev name name index expr literal type number decl_stmt decl type name name name index expr literal type number function type name name parameter_list block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name while condition expr name operator block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr operator name name index expr name expr_stmt expr call name argument_list argument expr literal type string argument expr name operator literal type number decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name init expr literal type number if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr name operator literal type number elseif if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr name operator literal type number if condition expr name name index expr operator name operator literal type number operator operator literal type number then block expr_stmt expr operator name name index expr operator name operator literal type number operator operator literal type number expr_stmt expr operator name expr_stmt expr name name index expr name operator name name index expr operator name operator literal type number operator operator literal type number expr_stmt expr name name index expr name operator literal type boolean else block type pseudo expr_stmt expr name name index expr name operator literal type boolean for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator literal type boolean then block type pseudo continue if condition expr name name index expr literal type number then block expr_stmt expr operator name name index expr literal type number expr_stmt expr name name index expr name operator name name index expr literal type number elseif if condition expr name name index expr literal type number then block expr_stmt expr operator name name index expr literal type number expr_stmt expr name name index expr name operator name name index expr literal type number elseif if condition expr name name index expr literal type number then block expr_stmt expr operator name name index expr literal type number expr_stmt expr name name index expr name operator name name index expr literal type number expr_stmt expr name name index expr name operator literal type number operator literal type char if condition expr name operator operator name operator literal type number operator operator literal type number then block expr_stmt expr call name argument_list argument expr literal type string expr_stmt expr call name argument_list argument expr name operator literal type number else block type pseudo expr_stmt expr call name argument_list argument expr literal type string return expr literal type number 
