include directive file using namespace name decl_stmt decl type name name argument_list type generic argument expr name name argument expr name name argument_list type generic argument expr name argument expr name name name index expr literal type number decl_stmt decl type name name name index expr literal type number decl type ref prev name name index expr literal type number decl_stmt decl type name name argument_list type generic argument expr name argument expr name name name index expr literal type number decl_stmt decl type name name name index expr literal type number decl_stmt decl type name name decl type ref prev name decl_stmt decl type name name decl_stmt decl type name name name index expr literal type number decl_stmt decl type name name name index expr literal type number decl type ref prev name name index expr literal type number decl_stmt decl type name name function type name name parameter_list parameter decl type name name block return expr ternary condition expr operator operator name name index expr name operator then expr name else expr operator name name index expr name operator call name argument_list argument expr name name index expr name operator function type name name parameter_list block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name name index expr name argument expr operator name name index expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name name index expr name expr_stmt expr name name index expr operator name operator call name argument_list argument expr name name index expr name argument expr call name argument_list argument expr name argument expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr operator name name index expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr name operator block expr_stmt expr name name index expr operator name operator call name argument_list argument expr literal type number operator operator call name argument_list argument expr name name index expr name operator name name index expr name operator call name argument_list argument expr name name index expr name operator name name index expr name operator operator operator name name index expr name operator name name index expr name operator argument expr call name argument_list argument expr name argument expr name decl_stmt decl type name name name init expr literal type number expr_stmt expr call name argument_list argument expr name operator literal type number argument expr name operator literal type number operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name init expr name name index expr name operator name name operator name decl_stmt decl type name name init expr name name index expr name operator name name operator name decl_stmt decl type name name init expr call name argument_list argument expr name decl type ref prev name init expr call name argument_list argument expr name if condition expr name operator name then block type pseudo continue expr_stmt expr name name index expr name operator name expr_stmt expr name operator name name index expr name operator name if condition expr name operator name operator literal type number then block type pseudo expr_stmt expr name name index expr operator name operator name elseif if condition expr name operator name operator literal type number then block type pseudo expr_stmt expr name name index expr operator name operator name else block expr_stmt expr name name index expr operator name operator call name argument_list argument expr name argument expr name expr_stmt expr name operator name operator name expr_stmt expr call name argument_list argument expr literal type string argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name expr_stmt expr call name argument_list argument expr literal type string expr_stmt expr call name argument_list argument expr literal type string argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name operator name argument expr name name index expr name operator name return expr literal type number 
