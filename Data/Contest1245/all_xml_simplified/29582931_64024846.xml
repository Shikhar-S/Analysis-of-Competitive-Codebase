include directive file using namespace name define directive macro name parameter_list parameter type name value define directive macro name value typedef type name name name typedef type name name name decl_stmt decl type name name name index expr literal type number index expr literal type number decl_stmt decl type name name name index expr literal type number index expr literal type number function type name name parameter_list parameter decl type name modifier name parameter decl type name modifier name block if condition expr name operator literal type number then block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator else block type pseudo expr_stmt expr name operator else block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator else block type pseudo expr_stmt expr name operator function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type number for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo expr_stmt expr name operator name name index expr name index expr name expr_stmt expr name name index expr literal type number index expr literal type number operator literal type number for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block decl_stmt decl type name name if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type number elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type number else block type pseudo expr_stmt expr name operator literal type number while condition expr literal type boolean block decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr name decl type ref prev name init expr name for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr name operator literal type number operator name operator name then block type pseudo break expr_stmt expr name operator expr_stmt expr call name argument_list argument expr name argument expr name decl_stmt decl type name name init expr name operator name name index expr name index expr name decl_stmt decl type name name init expr name expr_stmt expr name operator call name argument_list argument expr name name index expr name index expr name argument expr name name index expr name index expr name expr_stmt expr name name index expr name index expr name operator operator name operator operator name operator literal type number operator operator operator name operator name if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator else block type pseudo expr_stmt expr name operator if condition expr name operator operator literal type number operator name operator literal type number then block type pseudo break expr_stmt expr name operator name operator call name argument_list argument expr literal type number operator name name index expr literal type number index expr literal type number return expr literal type number 
