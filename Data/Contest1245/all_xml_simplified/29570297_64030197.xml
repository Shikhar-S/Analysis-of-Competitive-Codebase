comment type block include directive file using namespace name using name init type name name function_decl specifier type name name parameter_list decl_stmt decl type specifier name name init expr literal type number decl type ref prev name init expr literal type number function type name name parameter_list parameter decl type name name block decl_stmt decl type name name init expr literal type number while condition expr name block expr_stmt expr operator name expr_stmt expr name operator literal type number return expr name function type name name parameter_list parameter decl type name name argument_list type generic argument expr name argument expr name name block decl_stmt decl type name name init expr name name operator name decl type ref prev name init expr name name operator name operator literal type number comment type line decl_stmt decl type name name decl type ref prev name comment type line while condition expr name block expr_stmt expr call name name operator name argument_list argument expr operator name operator literal type number operator operator literal type char expr_stmt expr name operator literal type number while condition expr name block expr_stmt expr call name name operator name argument_list argument expr operator name operator literal type number operator operator literal type char expr_stmt expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator operator name operator call name name operator name argument_list incr expr operator name block type pseudo if condition expr name name index expr name operator name name index expr name then block type pseudo expr_stmt expr name name index expr name operator literal type char comment type line return expr name function type name name parameter_list parameter decl type name name parameter decl type name name comment type line block comment type line if condition expr call name name operator name argument_list operator call name name operator name argument_list then block type pseudo return expr literal type number if condition expr call name name operator name argument_list operator call name name operator name argument_list then block type pseudo expr_stmt expr call name argument_list argument expr name argument expr name while condition expr call name name operator name argument_list operator call name name operator name argument_list block type pseudo expr_stmt expr call name name operator name argument_list argument expr literal type char decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator operator name operator call name name operator name argument_list incr expr operator name block decl_stmt decl type name name init expr name name index expr name decl type ref prev name init expr name name index expr name if condition expr name operator name then block type pseudo expr_stmt expr call name argument_list argument expr name argument expr name if condition expr name operator literal type char operator name operator literal type char then block type pseudo expr_stmt expr name operator literal type number if condition expr name operator literal type char operator name operator literal type char then block type pseudo expr_stmt expr name operator literal type number if condition expr name operator literal type char operator name operator literal type char then block type pseudo expr_stmt expr name operator literal type number comment type line comment type line return expr name function type name name parameter_list parameter decl type name block ifdef directive name expr_stmt expr call name argument_list argument expr literal type string argument expr literal type string argument expr name endif directive decl_stmt decl type name name init expr call name argument_list while condition expr name operator block decl_stmt decl type name name init expr call name argument_list decl type ref prev name init expr call name argument_list if condition expr name operator literal type number then block expr_stmt expr call name argument_list argument expr literal type string continue if condition expr call name argument_list argument expr name operator call name argument_list argument expr name then block expr_stmt expr call name argument_list argument expr literal type string continue decl_stmt decl type name name init expr literal type number if condition expr name operator literal type number then block expr_stmt expr name operator name operator literal type number operator literal type number expr_stmt expr name operator literal type number decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name for control init decl type name name init expr name condition incr block decl_stmt decl type name name init expr name operator operator name operator operator name operator expr_stmt expr call name name operator name argument_list argument expr block expr name expr name if condition expr call name argument_list argument expr name operator call name argument_list argument expr name then block type pseudo break expr_stmt expr name operator name for control init decl type name name init expr name condition incr block decl_stmt decl type name name init expr name operator operator name operator operator name operator if condition expr call name argument_list argument expr name operator call name argument_list argument expr name then block type pseudo break expr_stmt expr call name name operator name argument_list argument expr block expr name expr name expr_stmt expr name operator name expr_stmt expr call name name operator name argument_list argument expr block expr name expr name operator literal type number comment type line comment type line comment type line comment type line comment type line for control init decl type name name range expr name block type pseudo for control init decl type name name range expr name block type pseudo expr_stmt expr name operator call name argument_list argument expr call name argument_list argument expr name argument expr call name argument_list argument expr name expr_stmt expr name operator name operator name return expr literal type number function specifier type name name parameter_list block decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name init expr call name argument_list while condition expr name name argument_list type generic argument expr literal type char operator name literal type char block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator literal type number expr_stmt expr name operator call name argument_list while condition expr name operator literal type char operator name operator literal type char block expr_stmt expr name operator name operator literal type number operator name operator literal type char expr_stmt expr name operator call name argument_list return expr name operator name 
