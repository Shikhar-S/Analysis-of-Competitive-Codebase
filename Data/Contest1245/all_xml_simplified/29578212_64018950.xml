include directive file define directive macro name value using namespace name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name modifier name block decl_stmt decl type name name decl_stmt decl type name name if condition expr name operator call name argument_list operator expr name operator name then block type pseudo return expr literal type number comment type line while condition expr name operator literal type char operator operator name name argument_list type generic argument expr literal type char operator name literal type char operator block type pseudo expr_stmt expr name operator call name argument_list expr_stmt expr name operator ternary condition expr operator name operator literal type char operator then expr operator literal type number else expr literal type number expr_stmt expr name operator ternary condition expr operator name operator literal type char operator then expr literal type number else expr operator name operator literal type char operator while condition expr name operator call name argument_list operator expr name operator literal type char operator name operator literal type char block type pseudo expr_stmt expr name operator name operator literal type number operator operator name operator literal type char operator expr_stmt expr name operator name return expr literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number function type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr literal type number expr_stmt expr name operator name while condition expr name operator literal type number block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name operator name operator name expr_stmt expr name operator name operator name operator name expr_stmt expr name operator literal type number return expr name decl_stmt decl type name name name index expr name index expr literal type number index expr literal type number decl_stmt decl type name name name index expr name decl type ref prev name name index expr name function type name name parameter_list parameter decl type name modifier name parameter decl type name name block decl_stmt decl type name name init expr literal type number while condition expr name block expr_stmt expr name name index expr name operator operator name operator literal type number expr_stmt expr name operator literal type number function type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name block if condition expr name operator literal type number then block type pseudo return expr literal type number decl_stmt decl type name modifier name init expr name name index expr name index expr name index expr name if condition expr name operator operator literal type number then block type pseudo return expr name decl_stmt decl type name name init expr ternary condition expr name then expr name name index expr name else expr literal type number decl_stmt decl type name name init expr ternary condition expr name then expr name name index expr name else expr literal type number decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr name operator literal type number operator name operator literal type number then block type pseudo continue expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr name operator name operator name argument expr name operator name operator name return expr name operator name function type name name parameter_list parameter decl type name name parameter decl type name name block expr_stmt expr call name argument_list argument expr name argument expr operator literal type number argument expr sizeof name for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr operator name block type pseudo expr_stmt expr name name index expr name operator name name index expr name operator literal type number expr_stmt expr call name argument_list argument expr name argument expr name expr_stmt expr call name argument_list argument expr name argument expr name return expr call name argument_list argument expr literal type number argument expr literal type number argument expr literal type number function type name name parameter_list parameter decl type name name parameter decl type name modifier name name index block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name decl_stmt decl type name name decl type ref prev name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name operator literal type number operator call name argument_list argument expr name operator literal type number argument expr name operator call name argument_list argument expr name operator literal type number argument expr name operator literal type number expr_stmt expr call name argument_list argument expr literal type string argument expr name return expr literal type number 
