include directive file using namespace name ifdef directive name define directive macro name include directive file else directive define directive macro name parameter_list parameter type modifier endif directive define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value decl_stmt decl type specifier name name init expr ternary condition expr sizeof argument_list argument expr name operator operator name name operator then expr literal type number else expr literal type number decl_stmt decl type specifier name name init expr call name argument_list argument expr literal type number operator literal type number define directive macro name value define directive macro name value define directive macro name value define directive macro name value using name init type name name argument_list type generic argument expr name argument expr name comment type line function type operator template parameter_list parameter type name name parameter type name name type name modifier name name parameter_list parameter decl type name modifier name parameter decl type name name argument_list type generic argument expr name argument expr name modifier name block expr_stmt expr name operator name name operator name operator name name operator name return expr name comment type line function template parameter_list parameter type name name type name name parameter_list parameter decl type specifier name name argument_list type generic argument expr name name argument_list type generic argument expr name modifier name block expr_stmt expr name operator name macro name argument_list argument argument literal type number argument macro name argument_list argument argument literal type number argument block if condition expr typeid argument_list argument expr name name index expr name index expr name operator call name argument_list operator typeid argument_list argument expr name operator call name argument_list operator name name index expr name index expr name operator name then block expr_stmt expr name operator literal type string else block type pseudo expr_stmt expr name operator name name index expr name index expr name expr_stmt expr name operator operator ternary condition expr name operator name name index expr name operator call name argument_list operator literal type number then expr literal type char else expr literal type char operator expr_stmt expr name operator name ifndef directive name define directive macro name parameter_list parameter type modifier endif directive function type name name parameter_list parameter decl type name name block expr_stmt expr name operator operator ternary condition expr name then expr literal type string else expr literal type string operator operator name function type name name parameter_list parameter decl type name name block expr_stmt expr name operator operator ternary condition expr name then expr literal type string else expr literal type string operator operator name function template parameter_list parameter type name name parameter type name name type name name parameter_list parameter decl type name modifier name parameter decl type name name block if condition expr name operator name then block expr_stmt expr name operator name return expr literal type boolean return expr literal type boolean function template parameter_list parameter type name name parameter type name name type name name parameter_list parameter decl type name modifier name parameter decl type name name block if condition expr name operator name then block expr_stmt expr name operator name return expr literal type boolean return expr literal type boolean struct template parameter_list parameter type name name name block public type default decl_stmt decl specifier type specifier name name init expr name decl_stmt decl type name name constructor name parameter_list member_init_list call name argument_list argument expr literal type number block constructor name parameter_list parameter decl type name name block decl_stmt decl type name name init expr name operator name if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name expr_stmt expr name operator name constructor name parameter_list parameter decl type name name name name block decl_stmt decl type name name init expr name operator name if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name expr_stmt expr name operator name function type name name parameter_list specifier block return expr operator name operator name function type operator type name modifier name name parameter_list parameter decl type name name block if condition expr operator name operator name name operator name operator operator name then block type pseudo expr_stmt expr name operator name return expr operator name function type operator type name modifier name name parameter_list parameter decl type name name block if condition expr operator name operator name operator name name operator name operator operator name then block type pseudo expr_stmt expr name operator name return expr operator name function type operator type name modifier name name parameter_list parameter decl type name name block expr_stmt expr name operator operator name name name operator name operator name name operator name operator name return expr operator name function type operator type name modifier name name parameter_list parameter decl type name name block return expr operator name operator call name name operator name argument_list function type operator type name name name parameter_list parameter decl type name name specifier block return expr call name argument_list argument expr operator name operator name function type operator type name name name parameter_list parameter decl type name name specifier block return expr call name argument_list argument expr operator name operator name function type operator type name name name parameter_list parameter decl type name name specifier block return expr call name argument_list argument expr operator name operator name function type operator type name name name parameter_list parameter decl type name name specifier block return expr call name argument_list argument expr operator name operator name function type name name parameter_list specifier block decl_stmt decl type name name init expr name decl type ref prev name init expr name decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number while condition expr name block decl_stmt decl type name name init expr name operator name expr_stmt expr name operator name operator name expr_stmt expr call name name operator name argument_list argument expr name argument expr name expr_stmt expr name operator name operator name expr_stmt expr call name name operator name argument_list argument expr name argument expr name if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name decl_stmt decl type name name expr_stmt expr name name operator name operator operator name operator name return expr name function type operator template parameter_list parameter type name name type name modifier name name parameter_list parameter decl type name modifier name parameter decl type specifier name name argument_list type generic argument expr name modifier name block return expr name operator name name operator name function type operator template parameter_list parameter type name name type name modifier name name parameter_list parameter decl type name modifier name parameter decl type name name argument_list type generic argument expr name modifier name block decl_stmt decl type name name name name expr_stmt expr name operator name expr_stmt expr name operator call name name argument_list type generic argument expr name argument_list argument expr name return expr name empty_stmt comment type line function template parameter_list parameter type name name type name name argument_list type generic argument expr name name parameter_list parameter decl type name name argument_list type generic argument expr name name parameter decl type name name name name block decl_stmt decl type name name argument_list type generic argument expr name name init expr literal type number while condition expr name block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name operator literal type number return expr name comment type line using name init type name name argument_list type generic argument expr literal type number comment type line comment type line function type name name parameter_list parameter decl type name name parameter decl type name name block comment type line comment type line comment type line comment type line comment type line comment type line decl_stmt decl type name name argument_list type generic argument expr name argument expr name name decl_stmt decl type name name init expr call name argument_list argument expr name name operator name decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator operator expr operator name operator name operator operator name name operator name block expr_stmt expr name name index expr name operator name decl_stmt decl type name name init expr name decl_stmt decl type name name init expr call name argument_list argument expr name operator call name argument_list operator call name argument_list expr_stmt expr name operator literal type number decl_stmt decl type name name init expr literal type number while condition expr literal type number block decl_stmt decl type name name init expr name operator name operator name name operator name if condition expr call name name operator name argument_list argument expr name then block type pseudo return expr name operator name name index expr name expr_stmt expr name operator name operator name operator name name operator name expr_stmt expr name operator name function type name name parameter_list parameter decl type name name parameter decl type name name block return expr call name argument_list argument expr name argument expr call name name operator name argument_list comment type line decl_stmt decl type name name argument_list type generic argument expr name name decl type ref prev name comment type line function type name name parameter_list parameter decl type name name block expr_stmt expr name operator call name argument_list argument expr name argument expr name name operator name operator literal type number expr_stmt expr call name name operator name argument_list argument expr name operator literal type number expr_stmt expr call name name operator name argument_list argument expr name operator literal type number expr_stmt expr name name index expr literal type number operator literal type number macro name argument_list argument argument literal type number argument literal type number expr_stmt expr name name index expr name operator name name index expr name operator literal type number operator name expr_stmt expr name name index expr name operator name name index expr name operator call name argument_list for control init decl type name name init expr name condition expr name operator literal type number incr expr name operator block type pseudo expr_stmt expr name name index expr name operator literal type number operator name name index expr name operator name function type name name parameter_list parameter decl type name name parameter decl type name name block if condition expr name operator name name operator name then block type pseudo return expr call name argument_list argument expr name operator name name operator name argument expr name operator name name operator name operator call name argument_list argument expr name operator name name operator name argument expr name operator name name operator name return expr ternary condition expr name operator name then expr literal type number else expr name name index expr name operator name name index expr name operator name operator name name index expr name function type name name parameter_list parameter decl type name name parameter decl type name name block return expr ternary condition expr name operator literal type number then expr literal type number else expr call name argument_list argument expr name operator name operator literal type number argument expr name comment type line function type name name parameter_list parameter decl type name name block return expr call name argument_list argument expr literal type number operator name argument expr name operator operator name operator literal type number operator function template parameter_list parameter type name name type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name parameter_list parameter decl type specifier name name argument_list type generic argument expr name modifier name block decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name expr_stmt expr call name argument_list argument expr call name name operator name argument_list expr_stmt expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr literal type number for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr name operator block if condition expr name name index expr name operator call name name operator name argument_list operator name then block expr_stmt expr call name name operator name argument_list operator name operator else block expr_stmt expr call name name operator name argument_list argument expr name name index expr name argument expr literal type number return expr name function type name name parameter_list parameter decl type name name parameter decl type name modifier name name index block expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr name operator name operator call name argument_list argument expr literal type number decl_stmt decl type name name expr_stmt expr name operator name if condition expr call name argument_list argument expr call name argument_list argument expr name argument expr literal type char operator call name argument_list argument expr call name argument_list argument expr name argument expr literal type char then block expr_stmt expr name operator literal type number operator name return expr literal type number decl_stmt decl type name name init expr call name name operator name argument_list decl_stmt decl type name name argument_list type generic argument expr name name argument_list argument expr name operator literal type number expr_stmt expr name name index expr literal type number operator name name index expr literal type number operator literal type number macro name argument_list argument argument literal type number argument literal type number block expr_stmt expr name name index expr name operator name name index expr name operator literal type number operator name name index expr name operator literal type number decl_stmt decl type name name argument_list type generic argument expr name name argument_list argument expr call name argument_list argument expr name decl_stmt decl type name name init expr call name argument_list argument expr name decl_stmt decl type name name init expr literal type number for control init decl type name name range expr name block if condition expr name name operator name operator literal type char operator name name operator name operator literal type char then block expr_stmt expr name operator name name index expr name name operator name expr_stmt expr name operator name operator name return expr literal type number 
