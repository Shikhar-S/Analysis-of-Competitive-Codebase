include directive file using namespace name typedef type name name name name define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr operator name operator literal type number operator literal type number function specifier type name name parameter_list parameter decl type name name parameter decl type name name block return expr operator operator name operator name operator name operator operator name function specifier type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr name operator name if condition expr name operator name then block type pseudo expr_stmt expr name operator name return expr name comment type line function type name name parameter_list parameter decl type name name block if condition expr name operator literal type number then block type pseudo return expr literal type boolean for control init decl type name name init expr literal type number condition expr name operator name operator name operator name incr expr operator name block type pseudo if condition expr name operator name operator literal type number then block type pseudo return expr literal type boolean for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr operator name block decl_stmt decl type name name init expr call name argument_list operator operator name operator literal type number operator operator literal type number if condition expr call name argument_list argument expr name argument expr name operator literal type number then block type pseudo return expr literal type boolean comment type line return expr literal type boolean decl_stmt decl type name name argument_list type generic argument expr name name name index expr name function_decl type name name argument_list type generic argument expr name name parameter_list parameter decl type name function type name name parameter_list parameter decl type name name parameter decl type specifier name name block decl_stmt decl type name name argument_list type generic argument expr name name argument_list argument expr name argument expr name expr_stmt expr name name index expr name operator literal type number expr_stmt expr name name index expr literal type number operator literal type number decl_stmt decl type name name argument_list type generic argument expr name name decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr call name name operator name argument_list argument expr block expr name name index expr name expr name while condition expr operator call name name operator name argument_list block decl_stmt decl type name name init expr call name name operator name argument_list operator name expr_stmt expr name operator name name index expr name operator name name index expr name name index expr name expr_stmt expr call name name operator name argument_list argument expr call name name operator name argument_list for control init decl type name name range expr name name index expr name block decl_stmt decl type name name init expr name name operator name decl type ref prev name init expr name name operator name if condition expr name name index expr name operator operator name name index expr name operator name operator then block expr_stmt expr call name name operator name argument_list argument expr block expr name name index expr name expr name expr_stmt expr name name index expr name operator name expr_stmt expr name name index expr name operator name name index expr name operator name expr_stmt expr call name name operator name argument_list argument expr block expr name name index expr name expr name return expr name decl_stmt decl type name name name index expr literal type number index expr literal type number index expr literal type number index expr literal type number index expr literal type number decl_stmt decl type name name decl type ref prev name function type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name block if condition expr name operator literal type number then block type pseudo return expr literal type number decl_stmt decl type name modifier name init expr name name index expr name index expr name index expr name index expr name index expr name if condition expr name operator operator literal type number then block expr_stmt expr name operator literal type number comment type line decl_stmt decl type name name init expr operator name operator literal type number operator operator name name index expr name operator literal type char operator operator decl_stmt decl type name name init expr operator name operator literal type number operator operator name name index expr name operator literal type char operator operator decl_stmt decl type name name init expr ternary condition expr operator name operator name name index expr name operator literal type char operator then expr literal type number else expr literal type number decl_stmt decl type name name init expr ternary condition expr operator name operator name name index expr name operator literal type char operator then expr literal type number else expr literal type number decl_stmt decl type name name init expr ternary condition expr operator name operator name name index expr name operator literal type char operator then expr literal type number else expr literal type number decl_stmt decl type name name init expr ternary condition expr operator name operator name name index expr name operator literal type char operator then expr literal type number else expr literal type number comment type line if condition expr name operator name then block comment type line expr_stmt expr name operator operator name operator call name argument_list argument expr name argument expr name argument expr name argument expr name argument expr name operator literal type number operator operator name comment type line decl_stmt decl type name name init expr operator name operator literal type number operator name name index expr name operator literal type char operator decl_stmt decl type name name init expr operator name operator literal type number operator name name index expr name operator literal type char operator comment type line expr_stmt expr name operator ternary condition expr operator name operator name name index expr name operator literal type char operator then expr literal type number else expr literal type number expr_stmt expr name operator ternary condition expr operator name operator name name index expr name operator literal type char operator then expr literal type number else expr literal type number expr_stmt expr name operator ternary condition expr operator name operator name name index expr name operator literal type char operator then expr literal type number else expr literal type number expr_stmt expr name operator ternary condition expr operator name operator name name index expr name operator literal type char operator then expr literal type number else expr literal type number if condition expr name operator name then block comment type line expr_stmt expr name operator operator name operator call name argument_list argument expr name argument expr name argument expr name argument expr name argument expr name operator literal type number operator operator name comment type line expr_stmt expr name operator operator name operator literal type number operator name name index expr name operator literal type char operator expr_stmt expr name operator operator name operator literal type number operator name name index expr name operator literal type char operator expr_stmt expr name operator ternary condition expr operator name operator name name index expr name operator literal type char operator then expr literal type number else expr literal type number expr_stmt expr name operator ternary condition expr operator name operator name name index expr name operator literal type char operator then expr literal type number else expr literal type number expr_stmt expr name operator ternary condition expr operator name operator name name index expr name operator literal type char operator then expr literal type number else expr literal type number expr_stmt expr name operator ternary condition expr operator name operator name name index expr name operator literal type char operator then expr literal type number else expr literal type number if condition expr name operator name then block comment type line expr_stmt expr name operator operator name operator call name argument_list argument expr name argument expr name argument expr name argument expr name argument expr name operator literal type number operator operator name return expr name function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type number decl_stmt decl type name name expr_stmt expr name operator name while condition expr name operator block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name expr_stmt expr name operator name operator literal type string for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr operator literal type number operator name operator operator name then block type pseudo expr_stmt expr name operator literal type char else block type pseudo expr_stmt expr name operator literal type char if condition expr operator literal type number operator name operator operator name then block type pseudo expr_stmt expr name operator literal type char else block type pseudo expr_stmt expr name operator literal type char expr_stmt expr call name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list expr_stmt expr call name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list comment type line expr_stmt expr call name argument_list argument expr name argument expr operator literal type number argument expr sizeof argument_list argument expr name expr_stmt expr name operator operator call name argument_list argument expr literal type number argument expr literal type number argument expr literal type number argument expr literal type number argument expr literal type number operator operator name operator literal type char return expr literal type number 
