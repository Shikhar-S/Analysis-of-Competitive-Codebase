include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type specifier name name init expr literal type number function type name name parameter_list parameter decl type name name parameter decl type name name block if condition expr name then block type pseudo return expr call name argument_list argument expr name argument expr name operator name return expr name function type name name name parameter_list parameter decl type name name name parameter decl type name name name parameter decl type name name name block expr_stmt expr name operator name decl_stmt decl type name name name init expr literal type number while condition expr name block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name operator name operator name expr_stmt expr name operator name operator name operator name expr_stmt expr name operator literal type number return expr name class name block private type default public friend function type operator type name name name parameter_list parameter decl type specifier name modifier name parameter decl type specifier name modifier name block return expr name name operator name operator name name operator name decl_stmt decl type name name decl type ref prev name decl_stmt decl type name name name decl name decl type ref prev name decl_stmt decl type name name decl_stmt decl type name name name index expr name function type name name parameter_list parameter decl type specifier name modifier name block if condition expr name operator literal type number then block type pseudo return expr operator name return expr name decl_stmt decl type name name name index expr name decl_stmt decl type name name name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl type ref prev name name index expr name decl_stmt decl type name name operator name name argument_list type generic argument expr name name decl_stmt decl type name name operator name name argument_list type generic argument expr name name operator name name argument_list type generic argument expr name argument expr name name function type name name name parameter_list parameter decl type name name block decl_stmt decl type name name name init expr literal type number decl_stmt decl type name name operator name name argument_list type generic argument expr name name expr_stmt expr name name operator name operator name name operator name operator name expr_stmt expr name name operator name operator name name index expr name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name argument_list argument expr name argument expr literal type boolean argument expr sizeof argument_list argument expr name while condition expr operator call name name operator name argument_list block expr_stmt expr name operator call name name operator name argument_list expr_stmt expr call name name operator name argument_list if condition expr operator name name index expr name name operator name then block type pseudo continue expr_stmt expr name name index expr name name operator name operator literal type boolean expr_stmt expr name operator name name operator name if condition expr name name operator name operator name name index expr name name operator name then block type pseudo expr_stmt expr call name name operator name argument_list argument expr name name operator name else block type pseudo expr_stmt expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr name name operator name argument expr name name operator name expr_stmt expr name name operator name operator name name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo if condition expr name name index expr name then block expr_stmt expr name name operator name operator name expr_stmt expr name name operator name operator call name name operator name argument_list argument expr name name index expr name argument expr operator call name argument_list argument expr name name index expr name name operator name operator name name index expr name operator call name argument_list argument expr name name index expr name name operator name operator name name index expr name operator operator operator name name index expr name name operator name operator name name index expr name operator expr_stmt expr call name name operator name argument_list argument expr name return expr name function type name name parameter_list block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name operator name argument expr name operator name decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr call name argument_list argument expr literal type string argument expr name operator name if condition expr name name index expr name operator name name index expr name then block type pseudo expr_stmt expr name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name operator name expr_stmt expr call name argument_list argument expr literal type string argument expr call name argument_list argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr call name name operator name argument_list decl_stmt decl type name name init expr literal type boolean for control init decl type name name range expr name block if condition expr name then block type pseudo expr_stmt expr call name argument_list argument expr literal type string else block type pseudo expr_stmt expr name operator literal type boolean expr_stmt expr call name argument_list argument expr literal type string argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr call name name operator name argument_list for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr operator name block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name operator name argument expr name name index expr name operator name return expr literal type number 
