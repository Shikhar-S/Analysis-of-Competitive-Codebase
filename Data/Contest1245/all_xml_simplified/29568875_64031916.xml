include directive file using namespace name function type name name parameter_list parameter decl type name name block return expr literal type char operator name operator literal type char function type name name parameter_list parameter decl type specifier name modifier name block return expr call name argument_list argument expr operator name operator name function type name name parameter_list parameter decl type name name block return expr operator ternary condition expr name then expr literal type string else expr literal type string operator function template parameter_list parameter type name name parameter type name name type name name parameter_list parameter decl type name name argument_list type generic argument expr name argument expr name name block return expr literal type string operator call name argument_list argument expr name name operator name operator literal type string operator call name argument_list argument expr name name operator name operator literal type string function template parameter_list parameter type name name type name name parameter_list parameter decl type name name block decl_stmt decl type name name init expr literal type boolean decl_stmt decl type name name init expr literal type string for control init decl type specifier specifier modifier name range expr name block if condition expr operator name then block expr_stmt expr name operator literal type string expr_stmt expr name operator literal type boolean expr_stmt expr name operator call name argument_list argument expr name expr_stmt expr name operator literal type string return expr name function type name name parameter_list block expr_stmt expr name operator name function template parameter_list parameter type name name parameter type name modifier name type name name parameter_list parameter decl type name name parameter decl type name modifier name block expr_stmt expr name operator literal type string operator call name argument_list argument expr name expr_stmt expr call name argument_list argument expr name operator ifdef directive name define directive macro name parameter_list parameter type modifier value else directive define directive macro name parameter_list parameter type modifier value endif directive struct name block public type default decl_stmt decl type name name decl type ref prev name decl_stmt decl type name name name decl_stmt decl type specifier name name init expr literal type number decl type ref prev name init expr literal type number operator literal type number function type name name parameter_list block ifdef directive name expr_stmt expr call name argument_list argument expr literal type string argument expr literal type string argument expr name endif directive expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr call name name operator name argument_list argument expr literal type number decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name argument_list type generic argument expr name name decl_stmt decl type name name argument_list type generic argument expr name name argument_list argument expr name decl type ref prev name argument_list argument expr name decl type ref prev name argument_list argument expr name decl type ref prev name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr name operator name name index expr name operator name name index expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name name expr_stmt expr name operator name expr_stmt expr call name name operator name argument_list argument expr operator name operator block expr literal type number expr name expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr name operator name name index expr name expr_stmt expr name operator name call name argument_list argument expr name argument expr name operator name operator lambda capture argument modifier parameter_list parameter decl type name name parameter decl type name name block return expr call name name argument_list argument expr call name argument_list argument expr name name index expr name operator name name index expr name operator call name argument_list argument expr name name index expr name operator name name index expr name operator operator name name index expr name operator name name index expr name operator for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block for control init decl type name name init expr name operator literal type number condition expr name operator name incr expr name operator block expr_stmt expr call name name operator name argument_list argument expr operator name operator block expr name expr name macro name argument_list argument argument expr_stmt expr call name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr lambda capture parameter_list parameter decl type name name parameter decl type name name block return expr name name operator name operator name name operator name decl_stmt decl type name name argument_list type generic argument expr name name decl type ref prev name argument_list argument expr literal type number decl_stmt decl type name name argument_list type generic argument expr name operator name operator name init expr lambda capture argument modifier parameter_list parameter decl type name name block return expr ternary condition expr name name index expr name operator name then expr name else expr name name index expr name operator call name argument_list argument expr name name index expr name expr_stmt expr call name argument_list argument expr call name name operator name argument_list argument expr call name name operator name argument_list argument expr literal type number decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name decl_stmt decl type name name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr name operator block decl_stmt decl type name name init expr name name index expr name operator name decl type ref prev name init expr name name index expr name operator name decl_stmt decl type name name init expr name name index expr name operator name comment type line if condition expr call name argument_list argument expr name operator call name argument_list argument expr name then block type pseudo continue if condition expr name operator literal type number operator name operator literal type number then block if condition expr name operator literal type number then block type pseudo expr_stmt expr call name argument_list argument expr name argument expr name expr_stmt expr call name name operator name argument_list argument expr name else block expr_stmt expr call name name operator name argument_list argument expr block expr name expr name expr_stmt expr name name index expr call name argument_list argument expr name operator call name argument_list argument expr name expr_stmt expr name operator name expr_stmt expr name operator name operator name expr_stmt expr name operator call name name operator name argument_list operator name for control init decl type name name range expr name block type pseudo expr_stmt expr name operator name operator literal type number operator literal type string expr_stmt expr name operator name operator call name name operator name argument_list operator name for control init decl type name name range expr name block type pseudo expr_stmt expr name operator name name operator name operator literal type number operator literal type string operator name name operator name operator literal type number operator name return expr literal type number 
