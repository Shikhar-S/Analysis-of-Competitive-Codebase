include directive file using namespace name decl_stmt decl type name name decl_stmt decl type name name argument_list type generic argument expr name name name decl type ref prev name decl type ref prev name decl type ref prev name struct name block public type default decl_stmt decl type name name decl_stmt decl type name name decl_stmt decl type name name name function type name name argument_list type generic argument expr name name parameter_list block decl_stmt decl type name name argument_list type generic argument expr name name argument_list argument expr name argument expr literal type boolean decl_stmt decl type name name init expr lambda capture parameter_list parameter decl type specifier name modifier name parameter decl type specifier name modifier name block return expr name name operator name operator name name operator name decl_stmt decl type name name argument_list type generic argument expr name argument expr name name argument_list type generic argument expr name argument expr decltype argument_list argument expr name name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr call name name operator name argument_list argument expr block expr operator literal type number expr name expr name name index expr name decl_stmt decl type name name argument_list type generic argument expr name name while condition expr operator call name name operator name argument_list block decl_stmt decl type name name init expr call name name operator name argument_list expr_stmt expr call name name operator name argument_list if condition expr name name index expr name name operator name then block type pseudo continue expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr name name index expr name name operator name operator literal type boolean for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name then block type pseudo continue expr_stmt expr call name name operator name argument_list argument expr block expr name name operator name expr name expr operator name name index expr name name operator name operator name name index expr name operator operator operator call name argument_list argument expr name name index expr name name operator name operator name name index expr name operator call name argument_list argument expr name name index expr name name operator name operator name name index expr name operator return expr name function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type null expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr name operator name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name name operator name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr name operator name name index expr name operator name name index expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr name operator name name index expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr name operator name name index expr name decl_stmt decl type name name init expr call name argument_list decl_stmt decl type name name name init expr literal type number for control init decl type name name range expr name block type pseudo expr_stmt expr name operator name name operator name expr_stmt expr name operator name operator literal type char decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number for control init decl type name name range expr name block if condition expr name name operator name operator operator literal type number then block type pseudo expr_stmt expr operator name else block type pseudo expr_stmt expr operator name expr_stmt expr name operator name operator literal type char for control init decl type name name range expr name block if condition expr name name operator name operator operator literal type number then block expr_stmt expr name operator name name operator name operator literal type number expr_stmt expr operator name expr_stmt expr name operator operator ternary condition expr name operator literal type number then expr literal type char else expr literal type char operator expr_stmt expr name operator name operator literal type char for control init decl type name name range expr name block if condition expr name name operator name operator operator literal type number then block type pseudo expr_stmt expr name operator name name operator name operator literal type number operator literal type char operator name name operator name operator literal type number operator literal type char 
