<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29604479_64036830.cpp">









<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2010</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (a) : (b))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>father</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>k</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>x</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>idx</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>tot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>N</name> <operator>*</operator> <name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl>;</decl_stmt>
<struct>struct <name>Node</name> <block>{<public type="default"><decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>val</name></decl>;</decl_stmt></public>}</block><decl><name><name>road</name><index>[<expr><name>N</name><operator>*</operator><name>N</name></expr>]</index></name></decl>;</struct>
<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name><name>father</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name>x</name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><name><name>father</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name><name>father</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Node</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Node</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>val</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>val</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name><name>father</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>road</name><index>[<expr><operator>++</operator> <name>tot</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Node</name><operator>)</operator> <block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>, <expr><literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>}</block></expr>;</expr_stmt></block></for></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>road</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>road</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>tot</name></expr></argument> , <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>tot</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>fx</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name><name>road</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>fy</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name><name>road</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>fx</name> <operator>==</operator> <name>fy</name> <operator>||</operator> <operator>(</operator><name>fx</name> <operator>!=</operator> <name>fy</name> <operator>&amp;&amp;</operator> <call><name>Max</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name><name>idx</name><index>[<expr><name>fx</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name><name>idx</name><index>[<expr><name>fy</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>road</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name><operator>)</operator></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name><name>father</name><index>[<expr><name>fx</name></expr>]</index></name> <operator>=</operator> <name>fy</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>road</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>c</name><index>[<expr><name><name>idx</name><index>[<expr><name>fx</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>c</name><index>[<expr><name><name>idx</name><index>[<expr><name>fy</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>idx</name><index>[<expr><name>fy</name></expr>]</index></name> <operator>=</operator> <name><name>idx</name><index>[<expr><name>fx</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>tot</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>tot</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>road</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>road</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
