<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610441_64026490.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><name>INT_MAX</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inff</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mkp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(v).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(),(v).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HNO2</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0);</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// HNO2</comment>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>p2</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>p3</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>IOS</name></type>
    <name><name>p2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>p3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">35</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>p2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>p2</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name><name>p3</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>p3</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ok</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>l</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>r</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if <condition>(<expr><name>l</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>l</name><operator>++</operator></expr><operator>,</operator><expr><name>ok</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>high1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>high2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">35</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><operator>(</operator><name>r</name><operator>&amp;</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>high1</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>high1</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><operator>(</operator><name>l</name><operator>&amp;</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>high2</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>high2</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <comment type="line">//cout&lt;&lt;high1&lt;&lt;' '&lt;&lt;high2&lt;&lt;endl;</comment>
        <if>if <condition>(<expr><name>high1</name><operator>==</operator><name>high2</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">2</literal><operator>*</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>now</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>high2</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
            <block>{
                <if>if <condition>(<expr><name>i</name><operator>==</operator><name>high2</name></expr>)</condition><then> <block type="pseudo"><empty_stmt>;</empty_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><name>l</name><operator>&amp;</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><empty_stmt>;</empty_stmt></block></then></if></elseif>
                <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><operator>(</operator><name>now</name><operator>&amp;</operator><name>l</name><operator>)</operator><operator>^</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
                <expr_stmt><expr><name>now</name><operator>|=</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>now</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>high1</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
            <block>{
                <if>if <condition>(<expr><name>i</name><operator>==</operator><name>high1</name></expr>)</condition><then> <block type="pseudo"><empty_stmt>;</empty_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><name>r</name><operator>&amp;</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><operator>(</operator><name>now</name><operator>&amp;</operator><name>r</name><operator>)</operator></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
                <else>else <block type="pseudo"><empty_stmt>;</empty_stmt></block></else></if>
                <expr_stmt><expr><name>now</name><operator>|=</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>high2</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>high1</name><operator>-</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <comment type="line">//cout&lt;&lt;sz(v)&lt;&lt;endl;</comment>

            <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>N</name><init>=<expr><call><name>sz</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <expr_stmt><expr><name>now</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                    <if>if <condition>(<expr><operator>(</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name><operator>&amp;</operator><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>F</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                    <if>if <condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>S</name></expr>)</condition><then>
                    <block>{
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>S</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                            <block type="pseudo"><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>k</name><operator>)</operator><operator>&amp;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>now</name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
                        <expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name><name>p2</name><index>[<expr><name>now</name></expr>]</index></name><operator>*</operator><name><name>p3</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                    }</block></then>
                    <else>else
                    <block>{
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>S</name></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                            <block type="pseudo"><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>k</name><operator>)</operator><operator>&amp;</operator><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>F</name><operator>)</operator><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>now</name><operator>++</operator></expr>;</expr_stmt></block></then></if></block></for>
                        <expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><name><name>p2</name><index>[<expr><name>now</name></expr>]</index></name><operator>*</operator><name><name>p3</name><index>[<expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>S</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                    }</block></else></if>
                    <comment type="line">//cout&lt;&lt;v[i].F&lt;&lt;' '&lt;&lt;v[i].S&lt;&lt;' '&lt;&lt;v[j].F&lt;&lt;' '&lt;&lt;v[j].S&lt;&lt;' '&lt;&lt;ans&lt;&lt;endl;</comment>
                }</block></for>
            }</block></for>
            <expr_stmt><expr><name>ans</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ok</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>r</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
}</block></function>

</unit>
