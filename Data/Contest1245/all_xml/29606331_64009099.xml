<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29606331_64009099.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name><name>B</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>bob</name></decl>, <decl><type ref="prev"/><name>alice</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>bob</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">256</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><name>bob</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>B</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>wins</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>B</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>wins</name> <operator>&lt;</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>char</name></type> <name>x</name> <range>: <expr><name>bob</name></expr></range></decl></init>)</control>
            <block>{
                <if>if <condition>(<expr><name>x</name><operator>==</operator><literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>alice</name> <operator>+=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> }</block></then>
                <elseif>else <if>if <condition>(<expr><name>x</name><operator>==</operator><literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>alice</name> <operator>+=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> }</block></then></if></elseif>
                <elseif>else <if>if <condition>(<expr><name>x</name><operator>==</operator><literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><operator>--</operator><name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>alice</name> <operator>+=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> }</block></then></if></elseif>
                <else>else <block type="pseudo"><expr_stmt><expr><name>alice</name> <operator>+=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block></else></if>
            }</block></for>
            <for>for <control>(<init><decl><type><name>char</name><modifier>&amp;</modifier></type> <name>x</name> <range>: <expr><name>alice</name></expr></range></decl></init>)</control>
            <block>{
                <if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> }</block></then>
                <elseif>else <if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> }</block></then></if></elseif>
                <elseif>else <if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><operator>--</operator><name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> }</block></then></if></elseif></if>
            }</block></for>
            <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>alice</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
