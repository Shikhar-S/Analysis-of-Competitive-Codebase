<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29584295_64020357.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>orta</name></cpp:macro> <cpp:value>((bas+son)/2)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>600005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_io</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>cin.tie(0),cout.tie(0),ios_base::sync_with_stdio(false)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">45</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>le</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>ri</name></decl></parameter>)</parameter_list> <block>{

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><literal type="number">0ll</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">31</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>b</name><init>=<expr><literal type="number">30</literal></expr></init></decl>;</init><condition><expr><name>b</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>b</name><operator>--</operator></expr></incr>)</control> <block>{

		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{

				<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{

					<for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{

						<decl_stmt><decl><type><name>bool</name></type> <name>dle</name><init>=<expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>b</name><operator>)</operator><operator>&amp;</operator><name>le</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>bool</name></type> <name>dri</name><init>=<expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>b</name><operator>)</operator><operator>&amp;</operator><name>ri</name><operator>)</operator><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

						<comment type="line">// 0,0</comment>

						<if>if<condition>(<expr><operator>(</operator><name>i</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>dle</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>dle</name><operator>)</operator></expr>)</condition><then> <block>{

							<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>|</operator><name>dri</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name><operator>|</operator><name>dri</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>

						}</block></then></if>

						<comment type="line">// 0,1</comment>

						<if>if<condition>(<expr><operator>(</operator><name>i</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>dle</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>l</name> <operator>||</operator> <name>dri</name><operator>)</operator></expr>)</condition><then> <block>{

							<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>|</operator><name>dri</name></expr>]</index><index>[<expr><name>k</name><operator>|</operator><operator>(</operator><operator>!</operator><name>dle</name><operator>)</operator></expr>]</index><index>[<expr><name>l</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>

						}</block></then></if>

						<comment type="line">// 1,0</comment>

						<if>if<condition>(<expr><operator>(</operator><name>j</name> <operator>||</operator> <name>dri</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>k</name><operator>!=</operator><literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>dle</name><operator>)</operator></expr>)</condition><then> <block>{

							<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>i</name><operator>|</operator><operator>(</operator><operator>!</operator><name>dle</name><operator>)</operator></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name><operator>|</operator><name>dri</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>

						}</block></then></if>

					}</block></for>

				}</block></for>

			}</block></for>

		}</block></for>

	}</block></for>

	<decl_stmt><decl><type><name>ll</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{

			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{

				<for>for<control>(<init><decl><type><name>int</name></type> <name>l</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>l</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{

					<expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>

				}</block></for>

			}</block></for>

		}</block></for>

	}</block></for>

	<return>return <expr><name>sum</name></expr>;</return>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{

		<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><call><name>solve</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	}</block></for>

}</block></function></unit>
