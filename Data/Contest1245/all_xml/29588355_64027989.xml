<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29588355_64027989.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>

<struct>struct <name>Edge</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>cost</name></decl>;</decl_stmt>
  <constructor><name>Edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>cost1</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>u</name> <operator>=</operator> <name>u1</name></expr>;</expr_stmt> <expr_stmt><expr><name>v</name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt> <expr_stmt><expr><name>cost</name> <operator>=</operator> <name>cost1</name></expr>;</expr_stmt>
  }</block></constructor>
</public>}</block>;</struct>

<struct>struct <name>Edge_cmp</name> <block>{<public type="default">
  <function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Edge</name><modifier>&amp;</modifier></type> <name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Edge</name><modifier>&amp;</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name><name>l</name><operator>.</operator><name>cost</name></name> <operator>&gt;</operator> <name><name>r</name><operator>.</operator><name>cost</name></name></expr>;</return>
  }</block></function>
</public>}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SIZE</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>parent</name><index>[<expr><name>MAX_SIZE</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>rankz</name><index>[<expr><name>MAX_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Make_Set</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>rankz</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>Find</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>Find</name><argument_list>(<argument><expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>Union</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>PX</name> <init>= <expr><call><name>Find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>PY</name> <init>= <expr><call><name>Find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    
    <if>if<condition>(<expr><name><name>rankz</name><index>[<expr><name>PX</name></expr>]</index></name> <operator>&gt;</operator> <name><name>rankz</name><index>[<expr><name>PY</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>parent</name><index>[<expr><name>PY</name></expr>]</index></name> <operator>=</operator> <name>PX</name></expr>;</expr_stmt></block></then>
    <else>else<block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>PX</name></expr>]</index></name> <operator>=</operator> <name>PY</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>rankz</name><index>[<expr><name>PX</name></expr>]</index></name><operator>==</operator><name><name>rankz</name><index>[<expr><name>PY</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>rankz</name><index>[<expr><name>PY</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
    }</block></else></if>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>nodes</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>power</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>power</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>wire</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>wire</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>real_n</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>Edge_cmp</name></expr></argument>&gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
  <comment type="line">// Add edges between normal nodes.</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>ll</name></type> <name>wire_len</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <name><name>nodes</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>km_cost</name> <init>= <expr><name><name>wire</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>wire</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>total_cost</name> <init>= <expr><name>wire_len</name> <operator>*</operator> <name>km_cost</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>total_cost</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></for>
  <comment type="line">// Add edges from supernode.</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>Edge</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>power</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <comment type="line">// while (!pq.empty()) {</comment>
  <comment type="line">//   cout &lt;&lt; pq.top().cost &lt;&lt; " " &lt;&lt; pq.top().u &lt;&lt; " " &lt;&lt; pq.top().v &lt;&lt; endl;</comment>
  <comment type="line">//   pq.pop();</comment>
  <comment type="line">// }</comment>

  <comment type="line">// unordered_set&lt;int&gt; included;</comment>
  <decl_stmt><decl><type><name>ll</name></type> <name>final_cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>power_stations_to_build</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edges_to_build</name></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><call><name>Make_Set</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>num_sets</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>num_sets</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>Edge</name></type> <name>e</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// cout &lt;&lt; pq.top().cost &lt;&lt; " " &lt;&lt; pq.top().u &lt;&lt; " " &lt;&lt; pq.top().v &lt;&lt; endl;</comment>
    <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// if (included.count(e.u) &amp;&amp; included.count(e.v)) {</comment>
    <comment type="line">//   // cout &lt;&lt; "skipping: " &lt;&lt; e.u &lt;&lt; " " &lt;&lt; e.v &lt;&lt; endl;</comment>
    <comment type="line">//   continue;</comment>
    <comment type="line">// }</comment>
    <comment type="line">// // cout &lt;&lt; "inserting: " &lt;&lt; e.u &lt;&lt; " " &lt;&lt; e.v &lt;&lt; " cost:" &lt;&lt; e.cost &lt;&lt; endl;</comment>
    <comment type="line">// included.insert(e.u);</comment>
    <comment type="line">// included.insert(e.v);</comment>
    <if>if <condition>(<expr><call><name>Find</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>Find</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <continue>continue;</continue>
    }</block></then></if>
    <expr_stmt><expr><call><name>Union</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>u</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>num_sets</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>final_cost</name> <operator>+=</operator> <name><name>e</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>

    <if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>u</name></name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>power_stations_to_build</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>edges_to_build</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>u</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></while>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>final_cost</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>power_stations_to_build</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <range>: <expr><name>power_stations_to_build</name></expr></range></decl></init>)</control> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>edges_to_build</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>p</name> <range>: <expr><name>edges_to_build</name></expr></range></decl></init>)</control> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></for>



  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
