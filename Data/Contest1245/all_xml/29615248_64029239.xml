<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615248_64029239.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>c</name><index>[<expr><literal type="number">2003</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>k</name><index>[<expr><literal type="number">2003</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vstd</name><index>[<expr><literal type="number">2003</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>solnodes</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>soledges</name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>dis</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>xx</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>yy</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name>xx</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>y</name><operator>-</operator><name>yy</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>t</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block>{
		<comment type="line">//if(vstd[t])continue;</comment>
		<comment type="block">/*
		long long mn = 1e9+1,idx = -1;
		for(int i=0;i&lt;n;i++){
			if(c[i] &lt; mn &amp;&amp; ! vstd[i]){
				mn = c[i];
				idx = i;
			}
		}
		if(vstd[idx] || idx == -1)continue;
		ans += mn;
		vstd[idx] = true;
		solnodes.push_back(idx);
		*/</comment>
		<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><operator>-</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><block>{<expr><name>i</name></expr>,<expr><name>i</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/*
			if(i == idx) continue;
			long long val = k[idx] + k[i];
			val *= dis(v[i].first,v[i].second,v[idx].first,v[idx].second);
			pq.push({-val,{idx,i}});
			*/</comment>
		}</block></for>
		
		<while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name> <init>= <expr><operator>-</operator><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>id1</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>id2</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>vstd</name><index>[<expr><name>id2</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><name>id1</name> <operator>==</operator> <name>id2</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>vstd</name><index>[<expr><name>id1</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>solnodes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>id1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
					<if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>id2</name> <operator>||</operator> <name><name>vstd</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
					<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name> <init>= <expr><name><name>k</name><index>[<expr><name>id2</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>val</name> <operator>*=</operator> <call><name>dis</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>id2</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>id2</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><operator>-</operator><name>val</name></expr>,<expr><block>{<expr><name>id2</name></expr>,<expr><name>i</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<continue>continue;</continue>
			}</block></then></if>
			<if>if<condition>(<expr><name>val</name> <operator>&lt;</operator> <name><name>c</name><index>[<expr><name>id2</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ans</name><operator>+=</operator> <name>val</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>soledges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>id1</name></expr>,<expr><name>id2</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>vstd</name><index>[<expr><name>id2</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
					<if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>id2</name> <operator>||</operator> <name><name>vstd</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
					<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name> <init>= <expr><name><name>k</name><index>[<expr><name>id2</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>val</name> <operator>*=</operator> <call><name>dis</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>id2</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>id2</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><operator>-</operator><name>val</name></expr>,<expr><block>{<expr><name>id2</name></expr>,<expr><name>i</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
			}</block></then></if>
		}</block></while>
	}</block></for>
	<comment type="line">//for(int i=0;i&lt;n;i++) cout&lt;&lt;vstd[i]&lt;&lt;" ";cout&lt;&lt;endl;</comment>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>solnodes</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><range>:<expr><name>solnodes</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>soledges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name><range>:<expr><name>soledges</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="block">/*
3
1 4
3 1
4 2
1 4 5
6 2 3
*/</comment>
<comment type="block">/*
4
1 4
1 4
3 1
4 2
16 1 4 5
3 1 2 3
*/</comment>
<comment type="block">/*
4
1 1
1 1
2 2
2 2
1 10 2 10
1 1 1 1
*/</comment>
</unit>
