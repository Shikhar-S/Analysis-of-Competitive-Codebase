<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29600558_64030361.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>;</decl_stmt> 

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>

<function><type><name>int</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>x</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>k</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>is</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ini</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>toc</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rc</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>rt</name></decl>, <decl><type ref="prev"/><name><name>pr</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>pt</name></decl>;</decl_stmt>

<struct>struct <name>EE</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>val</name></decl>;</decl_stmt>

    <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>EE</name> <modifier>&amp;</modifier></type><name>o</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name>val</name> <operator>&lt;</operator> <name><name>o</name><operator>.</operator><name>val</name></name></expr>;</return>
    }</block></function>
</public>}</block> <decl><name><name>Ee</name><index>[<expr><operator>(</operator><name>N</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>N</name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</struct> 
<decl_stmt><decl><type><name>int</name></type> <name>Etot</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
    <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

    <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return ;</return></block></then></if>
    <if>if <condition>(<expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>f</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>f</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>

    <return>return ;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt> 
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>   
        <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for> 

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> 
        <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for> 
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>   
        <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for> 

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>Ee</name><index>[<expr><operator>++</operator> <name>Etot</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name><name>Ee</name><index>[<expr><name>Etot</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name><name>Ee</name><index>[<expr><name>Etot</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>Ee</name><index>[<expr><operator>++</operator> <name>Etot</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name><name>Ee</name><index>[<expr><name>Etot</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> 
            <expr_stmt><expr><name><name>Ee</name><index>[<expr><name>Etot</name></expr>]</index></name><operator>.</operator><name>val</name> <operator>=</operator> <call>(<name>ll</name>) <argument_list>(<argument><expr><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
        }</block></for></block></for>
    
    <decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><name>Ee</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>Ee</name> <operator>+</operator> <name>Etot</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>Etot</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>Ee</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name><name>Ee</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><name><name>Ee</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr></init></decl>;</decl_stmt>
        <comment type="line">//a = find(a), b = find(b); </comment>
        <if>if <condition>(<expr><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
        <expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>val</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>rc</name><index>[<expr><operator>++</operator> <name>rt</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block></then> 
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>pr</name><index>[<expr><operator>++</operator> <name>pt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr><operator>,</operator> <expr><name><name>pr</name><index>[<expr><name>pt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block></else></if>
    }</block></for>

    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>cost</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>rt</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>rt</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> 
        <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>rc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name> <operator>&lt;&lt;</operator> <name>pt</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt> 
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>pt</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> 
        <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>pr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>pr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt></block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
