<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613577_64035072.cpp"><comment type="block">/*

Nasha rozpovid pro yizhachka
Pro malenkogo necluhnanogo,

Yak spitkala malogo bida
Vzhe ne zhvavogo ne rumyanogo.

V temnim lisi bagato prygod
Ptahy, ravlyky, ckunsy, oleni,

Ta chomus potyagnulo yogo
Na dorizhenku acphaltovanu.


YYIIZZHHAACCHHOOKK!!
Pidnimus, pidberys!

YYIIZZHHAACCHHOOKK!!
Razom z namy posmihnys!

YYIIZZHHAACCHHOOKK!!
Navkrugy, ozernys!

YYIIZZHHAACCHHOOKK!!
YYIIZZHHAACCHHOOKK!!

*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio();cin.tie();cout.tie();</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ops</name></cpp:macro> <cpp:value>cout&lt;&lt;"ops"&lt;&lt;endl;</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pllll</name>;</typedef>
<typedef>typedef <type><name>string</name></type> <name>str</name>;</typedef>
<typedef>typedef <type><name>char</name></type> <name>cr</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>DIM</name><init>=<expr><literal type="number">2e3</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>DIMM</name><init>=<expr><literal type="number">4005007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name><init>=<expr><literal type="number">1e18</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>X</name><init>=<expr><literal type="number">20</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MODULO</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>n1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>val</name></decl>,<decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pllll</name></expr></argument>&gt;</argument_list></name></type> <name>ed</name></decl>;</decl_stmt>
<struct>struct <name>z</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>v1</name></decl>,<decl><type ref="prev"/><name>v2</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>a</name><index>[<expr><name>DIMM</name></expr>]</index></name></decl>;</struct>

<function><type><name>ll</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><name><name>k</name><index>[<expr><name>v1</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>v2</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>v1</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>v2</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>v1</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>v2</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>z</name></type> <name>p1</name></decl></parameter>,<parameter><decl><type><name>z</name></type> <name>p2</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name><name>p1</name><operator>.</operator><name>w</name></name><operator>&lt;</operator><name><name>p2</name><operator>.</operator><name>w</name></name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>fb</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>b</name><index>[<expr><name>v</name></expr>]</index></name><operator>!=</operator><name>v</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><call><name>fb</name><argument_list>(<argument><expr><name><name>b</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name><name>b</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>vv1</name><init>=<expr><call><name>fb</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>vv2</name><init>=<expr><call><name>fb</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>vv1</name><operator>==</operator><name>vv2</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>vv1</name></expr>]</index></name><operator>=</operator><name>vv2</name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>vv2</name></expr>]</index></name><operator>=</operator><name>vv1</name></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("input.txt","r",stdin);</comment>
    <expr_stmt><expr><name>fast</name></expr>;</expr_stmt>
    <comment type="line">//ll x1,y1,x2,y2;</comment>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n1</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>val</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator> <block>{<expr><name>i</name></expr>,<expr><operator>(</operator><name>n1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>,<expr><name>val</name></expr>}</block></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>n1</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator> <block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>,<macro><name>dist</name><argument_list>(<argument>i</argument>,<argument>j</argument>)</argument_list></macro>}</block></expr>;</expr_stmt>
        }</block></for>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><operator>(</operator><name>n1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>n</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><call><name>join</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v1</name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>res</name><operator>+=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v2</name><operator>==</operator><operator>(</operator><name>n1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>ed</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v1</name></expr>,<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v2</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>e</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name><range>:<expr><name>e</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>p</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ed</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name><range>:<expr><name>ed</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
