include directive file define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name parameter type name value typedef type name name name using namespace name comment type line comment type line comment type line comment type line decl_stmt decl type specifier name name init expr operator literal type number function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name name parameter decl type name name block return expr ternary condition expr name operator name then expr name else expr name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name name parameter decl type name name block return expr ternary condition expr name operator name then expr name else expr name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name modifier name parameter decl type name modifier name block decl_stmt decl type name name init expr name expr_stmt expr name operator name expr_stmt expr name operator name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name name block return expr ternary condition expr name operator literal type number then expr operator name else expr name function specifier type name name parameter_list block decl_stmt decl type name name while condition expr operator name operator call name argument_list operator operator literal type char operator name operator literal type char operator name operator literal type char block type pseudo empty_stmt return expr name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name name block return expr name operator name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name name index expr name function specifier type name name parameter_list parameter decl type name name parameter decl type name name block return expr operator operator name operator name operator operator operator name operator name operator operator operator name function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr call name name operator name argument_list argument expr name operator expr call name name operator name argument_list argument expr name decl_stmt decl type name name expr_stmt expr name operator name expr_stmt expr name name index expr literal type number operator literal type number expr_stmt expr name name index expr literal type number operator literal type number operator expr name name index expr literal type number operator literal type number macro name argument_list argument argument literal type number argument expr_stmt expr name name index expr name operator operator name name index expr name operator literal type number operator name name index expr name operator literal type number operator operator name decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name init expr literal type boolean macro name argument_list argument argument literal type number argument block if condition expr name name index expr name operator literal type char then block expr_stmt expr operator name if condition expr name then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr name name index expr name expr_stmt expr name operator literal type number elseif if condition expr name name index expr name operator literal type char then block expr_stmt expr operator name if condition expr name then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr name name index expr name expr_stmt expr name operator literal type number else block if condition expr name name index expr name operator literal type char operator name name index expr name operator literal type char then block expr_stmt expr name operator literal type boolean break if condition expr name then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr name name index expr name if condition expr name then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr name name index expr name expr_stmt expr name operator name operator literal type number if condition expr operator name then block expr_stmt expr name operator literal type number return expr literal type number if condition expr name then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr name name index expr name if condition expr name then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr name name index expr name expr_stmt expr name operator name return expr literal type number 
