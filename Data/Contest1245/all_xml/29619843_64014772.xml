<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619843_64014772.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rnt</name></cpp:macro> <cpp:value>register int</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>string</name></type> <name>A</name></decl>,<decl><type ref="prev"/><name>B</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>num</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
	<label><name>Work</name>:</label><if>if<condition>(<expr><name>T</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name><operator>&gt;&gt;</operator><name>A</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>B</name><operator>=</operator><name>A</name></expr>;</expr_stmt><expr_stmt><expr><name>num</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>rnt</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><operator>-</operator><operator>~</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></for>
		<for>for<control>(<init><decl><type><name>rnt</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><operator>-</operator><operator>~</operator><name>i</name></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>b</name></expr><operator>,</operator><expr><name><name>B</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr><operator>,</operator><expr><name><name>vis</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr><operator>,</operator><expr><name>num</name><operator>=</operator><operator>-</operator><operator>~</operator><name>num</name></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>c</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>c</name></expr><operator>,</operator><expr><name><name>B</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr><operator>,</operator><expr><name><name>vis</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr><operator>,</operator><expr><name>num</name><operator>=</operator><operator>-</operator><operator>~</operator><name>num</name></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>a</name></expr><operator>,</operator><expr><name><name>B</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr><operator>,</operator><expr><name><name>vis</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr><operator>,</operator><expr><name>num</name><operator>=</operator><operator>-</operator><operator>~</operator><name>num</name></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<for>for<control>(<init><decl><type><name>rnt</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><operator>-</operator><operator>~</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><if>if<condition>(<expr><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>a</name></expr><operator>,</operator><expr><name><name>B</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>b</name></expr><operator>,</operator><expr><name><name>B</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if></elseif>
		<else>else <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>c</name></expr><operator>,</operator><expr><name><name>B</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt></block></else></if></block></then></if></block></for>
		<if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><name>B</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><operator>--</operator><name>T</name></expr>;</expr_stmt><goto>goto <name>Work</name>;</goto>
	}</block></then></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
