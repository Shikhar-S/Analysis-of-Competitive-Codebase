<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616048_64023966.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>X</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Y</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>C</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>K</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>D</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>V</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>P</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>COMP</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>COMPF</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>Link</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <constructor><name>Link</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>a</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call>, <call><name>b</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Link</name></expr></argument>&gt;</argument_list></name></type> <name>LINKS</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>)</condition> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
            <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>    
            <expr_stmt><expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> 
            <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>K</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>    
        
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>COMP</name></expr></argument>, <argument><expr><literal type="number">0x3f</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>COMP</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>D</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>LINKS</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>int</name></type> <name>comps</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>minn</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if <condition>(<expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>minn</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>D</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>D</name><index>[<expr><name>minn</name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>minn</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
            }</block></for>
            
            <if>if <condition>(<expr><name><name>D</name><index>[<expr><name>minn</name></expr>]</index></name> <operator>==</operator> <name><name>C</name><index>[<expr><name>minn</name></expr>]</index></name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>V</name><index>[<expr><name>minn</name></expr>]</index></name> <operator>=</operator> <operator>++</operator><name>comps</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>COMP</name><index>[<expr><name>comps</name></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><name>minn</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>COMPF</name><index>[<expr><name>comps</name></expr>]</index></name> <operator>=</operator> <name>minn</name></expr>;</expr_stmt>
<comment type="line">//                cout &lt;&lt; " NEW " &lt;&lt; minn &lt;&lt; " " &lt;&lt; D[minn] &lt;&lt; " " &lt;&lt; C[minn] &lt;&lt; endl;</comment>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name><name>V</name><index>[<expr><name>minn</name></expr>]</index></name> <operator>=</operator> <name><name>V</name><index>[<expr><name><name>P</name><index>[<expr><name>minn</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>D</name><index>[<expr><name>minn</name></expr>]</index></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>C</name><index>[<expr><name>minn</name></expr>]</index></name> <operator>&lt;</operator> <name><name>COMP</name><index>[<expr><name>comps</name></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>COMP</name><index>[<expr><name>comps</name></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><name>minn</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>COMPF</name><index>[<expr><name>comps</name></expr>]</index></name> <operator>=</operator> <name>minn</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><call><name><name>LINKS</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>Link</name><argument_list>(<argument><expr><name>minn</name></expr></argument>, <argument><expr><name><name>P</name><index>[<expr><name>minn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//                cout &lt;&lt; " LIN " &lt;&lt; minn &lt;&lt; " " &lt;&lt; P[minn] &lt;&lt; " " &lt;&lt; D[minn] &lt;&lt; " " &lt;&lt; C[minn] &lt;&lt;endl;</comment>
            }</block></else></if>
            
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dist</name> <init>= <expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>X</name><index>[<expr><name>minn</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>Y</name><index>[<expr><name>minn</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>K</name><index>[<expr><name>minn</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>dist</name> <operator>&lt;</operator> <name><name>D</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>dist</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>minn</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>comps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>total</name> <operator>+=</operator> <name><name>COMP</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>total</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>comps</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>comps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>COMPF</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>LINKS</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>LINKS</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>LINKS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>LINKS</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></for>

        
        
        
    }</block></while>
}</block></function></unit>
