<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29589148_63998135.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>bb</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>bb</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>ans</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name><name>bb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
                <block type="pseudo"><if>if <condition>(<expr><name>p</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name>p</name><operator>--</operator></expr><operator>,</operator> <expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block></else></if></block></then>
            <elseif>else <if>if <condition>(<expr><name><name>bb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then>
                <block type="pseudo"><if>if <condition>(<expr><name>s</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name>s</name><operator>--</operator></expr><operator>,</operator> <expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block></else></if></block></then></if></elseif>
            <elseif>else
                <if>if <condition>(<expr><name>r</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name>r</name><operator>--</operator></expr><operator>,</operator> <expr><name>w</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block></else></if></block></for>

        <if>if <condition>(<expr><name>w</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>n</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><name>p</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block></then>
                    <elseif>else <if>if <condition>(<expr><name>s</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name>s</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
                    <else>else
                        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
                }</block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if></block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>


    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="line">//      *   *  *****  *   *  *   *</comment>
<comment type="line">//     *   *  *      **  *  *   *</comment>
<comment type="line">//    *****  *****  * * *  *   *</comment>
<comment type="line">//   *   *      *  *  **  *   *</comment>
<comment type="line">//  *   *  *****  *   *   ***</comment>
<comment type="line">//     *****  *****  *****</comment>
<comment type="line">//    *      *   *  *</comment>
<comment type="line">//   *      *****  *</comment>
<comment type="line">//  *      *  *   *</comment>
<comment type="line">//  ***** *   *   *****</comment>
</unit>
