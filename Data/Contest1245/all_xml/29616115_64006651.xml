<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616115_64006651.cpp"><comment type="block">/* ****TCIITB**** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>io</name></cpp:macro>          <cpp:value>ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>          <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>          <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>endl</name></cpp:macro>		<cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro>         <cpp:value>pair&lt;ll int,ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro>          <cpp:value>vector&lt;ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>           <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>           <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(ll int)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hell</name></cpp:macro>        <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>for(ll int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lbnd</name></cpp:macro>        <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ubnd</name></cpp:macro>        <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bs</name></cpp:macro>          <cpp:value>binary_search</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>          <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>time</name></cpp:macro>        <cpp:value>cerr &lt;&lt; "\nTime elapsed: " &lt;&lt; 1000 * clock() / CLOCKS_PER_SEC &lt;&lt; "ms\n";</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro>  <cpp:value>100005</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	
	<decl_stmt><decl><type><name>io</name>
	<name>string</name></type> <name>x</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>,<argument>N</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>hell</name></expr>;</expr_stmt>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>x.length()</argument>)</argument_list></macro>
	<block>{
		
		<if>if<condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal> <operator>||</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"0"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<while>while<condition>(<expr><name>i</name><operator>&lt;</operator><call><name><name>x</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition>
			<block>{
				<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			}</block></while>
			<expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>%</operator><name>hell</name><operator>*</operator><name><name>dp</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>%</operator><name>hell</name><operator>)</operator><operator>%</operator><name>hell</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
			<continue>continue;</continue>

		}</block></then></if>
		<if>if<condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<while>while<condition>(<expr><name>i</name><operator>&lt;</operator><call><name><name>x</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition>
			<block>{
				<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			}</block></while>
			<expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>%</operator><name>hell</name><operator>*</operator><name><name>dp</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>%</operator><name>hell</name><operator>)</operator><operator>%</operator><name>hell</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
	}</block>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>%</operator><name>hell</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	
}</block></function></unit>
