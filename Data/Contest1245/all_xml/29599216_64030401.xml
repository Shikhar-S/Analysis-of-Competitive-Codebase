<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29599216_64030401.cpp"><comment type="line">//{ &lt;defines&gt;</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_LOCAL</name></cpp:ifndef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"-O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ft</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro> <cpp:value>return</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forb</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a = b; a != c; a += ((~~(b&lt;c))&lt;&lt;1)-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ifn</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(!(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ef</name></cpp:macro> <cpp:value>else if</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ve</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int(x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name></cpp:macro>  <cpp:value>&lt;&lt; ' ' &lt;&lt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bnd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pw</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1ll &lt;&lt; x)</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>ve</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>OO</name> <init>= <expr><literal type="number">4e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>pi</name> <init>= <expr><literal type="number">3.1415926535897932384626433832</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>md</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>,
          <decl><type ref="prev"/><name>oo</name> <init>= <expr><literal type="number">2e9</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//} &lt;/defines&gt;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><operator>+</operator><literal type="number">100500</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>l</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>r</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>L</name></decl>, <decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>L</name> <operator>&gt;&gt;</operator> <name>R</name></expr>;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>pL</name> <init>= <expr><name>L</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>!</operator><name>L</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>R</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>re</name></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>!</operator><name>L</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>f</name> <operator>=</operator> <name>R</name><operator>+</operator><name>R</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>L</name></expr>;</expr_stmt>
    }</block></then></if>
    <macro><name>fo</name><argument_list>(<argument><literal type="number">31</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>l</name><index>[<expr><literal type="number">30</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&amp;</operator> <operator>(</operator><name>L</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
    <macro><name>fo</name><argument_list>(<argument><literal type="number">31</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">30</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&amp;</operator> <operator>(</operator><name>R</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <macro><name>fo</name><argument_list>(<argument><literal type="number">32</literal></argument>)</argument_list></macro> <macro><name>fr</name><argument_list>(<argument>t</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>fr</name><argument_list>(<argument>d0</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>fr</name><argument_list>(<argument>d1</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{
        <if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">31</literal></expr>)</condition><then> <block type="pseudo"><macro><name>fr</name><argument_list>(<argument>p0</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>fr</name><argument_list>(<argument>p1</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{
            <if>if<condition>(<expr><name>p0</name> <operator>&amp;&amp;</operator> <name>p1</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><operator>!</operator><name>t</name> <operator>&amp;&amp;</operator> <name>p0</name> <operator>&gt;</operator> <name>p1</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><operator>!</operator><name>d0</name> <operator>&amp;&amp;</operator> <name>p0</name> <operator>&lt;</operator> <name><name>l</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><operator>!</operator><name>d1</name> <operator>&amp;&amp;</operator> <name>p1</name> <operator>&gt;</operator> <name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>nt</name> <init>= <expr><ternary><condition><expr><name>p0</name> <operator>&lt;</operator> <name>p1</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>t</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nd0</name> <init>= <expr><ternary><condition><expr><name>p0</name> <operator>&gt;</operator> <name><name>l</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>d0</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>nd1</name> <init>= <expr><ternary><condition><expr><name>p1</name> <operator>&lt;</operator> <name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>d1</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>nt</name></expr>]</index><index>[<expr><name>nd0</name></expr>]</index><index>[<expr><name>nd1</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>d0</name></expr>]</index><index>[<expr><name>d1</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></block></then></if>
        <if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">31</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>t</name></expr>]</index><index>[<expr><name>d0</name></expr>]</index><index>[<expr><name>d1</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
    }</block>
    <expr_stmt><expr><name>ans</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_LOCAL</name></cpp:ifdef>
    <if>if<condition>(<expr><name>R</name> <operator>-</operator> <name>L</name> <operator>&lt;=</operator> <literal type="number">5000</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><name>pL</name></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <name>R</name></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>pL</name></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;=</operator> <name>R</name></expr>;</condition> <incr><expr><operator>++</operator><name>r</name></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><operator>(</operator><name>l</name> <operator>&amp;</operator> <name>r</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>e</name></expr>;</expr_stmt></block></then></if></block></for></block></for>
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>ans</name> <operator>==</operator> <name>e</name></expr> ?</condition><then> <expr><literal type="string">"correct\n"</literal></expr> </then><else>: <expr><literal type="string">"incorrect\n"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>e</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_LOCAL</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name><name>ios_base</name> <operator>::</operator> <name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//    int tt = 1;</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tt</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>tt</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function>
</unit>
