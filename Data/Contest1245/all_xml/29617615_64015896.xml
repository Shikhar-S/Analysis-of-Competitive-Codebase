<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617615_64015896.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>pst</name><index>[<expr><literal type="number">2069</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pr</name><index>[<expr><literal type="number">2069</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>d</name><index>[<expr><literal type="number">2069</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sz</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>sz2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name><name>a</name><index>[<expr><literal type="number">2002069</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>bitset</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2069</literal></expr></argument>&gt;</argument_list></name></type> <name>spc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>sq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>sq2</name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>fd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name><name>pr</name><index>[<expr><name>x</name></expr>]</index></name><operator>!=</operator><name>x</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>pr</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>fd</name><argument_list>(<argument><expr><name><name>pr</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name><name>pr</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>ii</name></decl>,<decl><type ref="prev"/><name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>ii</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>pst</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>ii</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name>pr</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>c</name></expr>]</index></name><operator>=</operator><block>{<expr><name>k</name></expr>,<expr><block>{<expr><name>i</name></expr>,<expr><name>i</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><name>d</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>a</name><index>[<expr><name>c</name></expr>]</index></name><operator>=</operator><block>{<expr><operator>(</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>d</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>pst</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>pst</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>pst</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>pst</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>,<expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
			<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>c</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>w</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>k</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sc</name><operator>.</operator><name>fr</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>l</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sc</name><operator>.</operator><name>sc</name></name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>k</name><operator>==</operator><name>l</name></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><operator>!</operator><name><name>spc</name><index>[<expr><call><name>fd</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>spc</name><index>[<expr><call><name>fd</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>z</name><operator>+=</operator><name>w</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>sq</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sz</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then>
		<else>else
		<block>{
			<if>if<condition>(<expr><call><name>fd</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name>fd</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><operator>!</operator><operator>(</operator><name><name>spc</name><index>[<expr><call><name>fd</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>&amp;&amp;</operator><name><name>spc</name><index>[<expr><call><name>fd</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><name><name>spc</name><index>[<expr><call><name>fd</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>pr</name><index>[<expr><call><name>fd</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><call><name>fd</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name><name>pr</name><index>[<expr><call><name>fd</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><call><name>fd</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
				<expr_stmt><expr><name>z</name><operator>+=</operator><name>w</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>sq2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>k</name></expr>,<expr><name>l</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>sz2</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n%lld\n"</literal></expr></argument>,<argument><expr><name>z</name></expr></argument>,<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>sz</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld%c"</literal></expr></argument>,<argument><expr><name><name>sq</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">" \n"</literal><index>[<expr><name>i</name><operator>==</operator><name>sz</name><operator>-</operator><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>sz2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>sz2</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument>,<argument><expr><name><name>sq2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr</name></expr></argument>,<argument><expr><name><name>sq2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
</unit>
