<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617604_64016594.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1</literal><literal type="char">'000'</literal><literal type="number">000</literal><literal type="char">'007;

int mul(int a, int b) {
  return (1ll * a * b) % MOD;
}

int add(int a, int b) {
  return (0ll + a + b) % MOD;
}

int main() {
  string s;
  cin &gt;&gt; s;
  vector&lt;int&gt; fib(s.size() + 1);
  fib[0] = 1;
  fib[1] = 1;
  for (int i = 2; i &lt; s.size() + 1; ++i) {
    fib[i] = add(fib[i - 1], fib[i - 2]);
  }

  for (auto ch : s) {
    if (ch == '</literal><name>m</name><literal type="char">' || ch == '</literal><name>w</name><literal type="char">') {
      cout &lt;&lt; 0 &lt;&lt; endl;
      return 0;
    }
  }

  int res = 1;
  int begind = 0;
  while (begind &lt; s.size()) {
    int first = begind;
    while (begind + 1 &lt; s.size() &amp;&amp; s[begind] == s[begind + 1]) {
      ++begind;
    }
    ++begind;
    if (s[first] == '</literal><literal type="string">u'</literal> || s[first] == '<name>n</name><literal type="char">'</literal></expr></init></decl></decl_stmt>) {
      res = mul(res, fib[begind - first]);
    }
  }

  cout &lt;&lt; res &lt;&lt; endl;
  return 0;
}</unit>
