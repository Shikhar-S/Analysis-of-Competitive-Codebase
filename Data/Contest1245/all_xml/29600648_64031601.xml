<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29600648_64031601.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
  <decl_stmt><decl><specifier>constexpr</specifier> <type><name>int</name></type> <name>N</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>L</name></decl>, <decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>L</name> <operator>&gt;&gt;</operator> <name>R</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>L</name> <operator>==</operator> <name>R</name></expr>)</condition><then><block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
      <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
          <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control>
              <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for></block></for></block></for></block></for></block></for>
            
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
      <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block>{
          <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control><block>{
              <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
              <for>for<control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control><block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>o</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>o</name></expr></incr>)</control><block>{
                  <if>if<condition>(<expr><name>o</name><operator>&amp;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                  <if>if<condition>(<expr><name>j</name> <operator>and</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>L</name><operator>&gt;&gt;</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>n</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                  <if>if<condition>(<expr><name>k</name> <operator>and</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>R</name><operator>&gt;&gt;</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>n</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                  <if>if<condition>(<expr><name>l</name> <operator>and</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>L</name><operator>&gt;&gt;</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>&gt;</operator> <name>o</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                  <if>if<condition>(<expr><name>m</name> <operator>and</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>R</name><operator>&gt;&gt;</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>o</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                  <decl_stmt><decl><type><name>int</name></type> <name>j_</name> <init>= <expr><name>j</name><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>L</name><operator>&gt;&gt;</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>n</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>int</name></type> <name>k_</name> <init>= <expr><name>k</name><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>R</name><operator>&gt;&gt;</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>n</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>int</name></type> <name>l_</name> <init>= <expr><name>l</name><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>L</name><operator>&gt;&gt;</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>o</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                  <decl_stmt><decl><type><name>int</name></type> <name>m_</name> <init>= <expr><name>m</name><operator>&amp;</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>R</name><operator>&gt;&gt;</operator><operator>(</operator><name>N</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>i</name><operator>)</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <name>o</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j_</name></expr>]</index><index>[<expr><name>k_</name></expr>]</index><index>[<expr><name>l_</name></expr>]</index><index>[<expr><name>m_</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></for>
              }</block></for>
            }</block></for>
          }</block></for>
        }</block></for>
      }</block></for>
    }</block></for>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
      <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block>{
          <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>
          }</block></for>
        }</block></for>
      }</block></for>
    }</block></for>
    
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></while>
}</block></function>
</unit>
