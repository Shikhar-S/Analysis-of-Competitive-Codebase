<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618933_64001194.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>10039</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>20070831</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>A</name></decl>,<decl><type ref="prev"/><name>B</name></decl>,<decl><type ref="prev"/><name>C</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>,<decl><type ref="prev"/><name>now</name></decl>,<decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>A</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>B</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>now</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>a</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">" %c"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ans</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>B</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>B</name><operator>--</operator></expr><operator>,</operator><expr><name>now</name><operator>++</operator></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>C</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>C</name><operator>--</operator></expr><operator>,</operator><expr><name>now</name><operator>++</operator></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>A</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>A</name><operator>--</operator></expr><operator>,</operator><expr><name>now</name><operator>++</operator></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>now</name><operator>&lt;</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>a</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>a</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>a</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt></block></then>
				<elseif>else <if>if<condition>(<expr><name>A</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>A</name><operator>--</operator></expr><operator>,</operator><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'R'</literal></expr>;</expr_stmt></block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name>B</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>B</name><operator>--</operator></expr><operator>,</operator><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if></elseif>
				<else>else <block type="pseudo"><expr_stmt><expr><name>C</name><operator>--</operator></expr><operator>,</operator><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'S'</literal></expr>;</expr_stmt></block></else></if>
			}</block></for>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*Kamii_Sinogi*/</comment></unit>
