<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619309_64032789.cpp"><comment type="line">//Aleksander Åukasiewicz</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1000000009</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>seq</name><index>[<expr><name>MAXN</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>mapping</name><index>[<expr><literal type="number">265</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>enemy</name><index>[<expr><literal type="number">265</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>mv</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'R'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name><name>mapping</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mapping</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mapping</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">250</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>enemy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cnt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cnt</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cnt</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cnt</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>ans</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>enemy</name><index>[<expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name><name>mapping</name><index>[<expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>mapping</name><index>[<expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>mapping</name><index>[<expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                    <if>if<condition>(<expr><name><name>enemy</name><index>[<expr><name><name>mv</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>cnt</name><index>[<expr><name><name>mapping</name><index>[<expr><name><name>mv</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>mapping</name><index>[<expr><name><name>mv</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>mapping</name><index>[<expr><name><name>mv</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                        <break>break;</break>
                    }</block></then></if>
                }</block></for>
            }</block></else></if>
            <expr_stmt><expr><name><name>enemy</name><index>[<expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
        }</block></for>
        
        <if>if<condition>(<expr><name>res</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name><name>ans</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></while>
    
    
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
