<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618299_64035054.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name>tot</name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>root</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>res</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>u</name><index>[<expr><literal type="number">4444444</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>v</name><index>[<expr><literal type="number">4444444</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>lmz</name><block>{<public type="default"><decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt></public>}</block><decl><name><name>q</name><index>[<expr><literal type="number">4444444</literal></expr>]</index></name></decl>;</struct>
<function><type><name>int</name></type> <name>ROOT</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name><name>root</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><name>a</name></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name><name>root</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><call><name>ROOT</name><argument_list>(<argument><expr><name><name>root</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>lmz</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>lmz</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>a</name><operator>.</operator><name>w</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>w</name></name></expr>;</return>}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>root</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>root</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>=<expr><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>q</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>.</operator><name>u</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>q</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>v</name><operator>=</operator><name>j</name></expr><operator>,</operator><expr><name><name>q</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>w</name><operator>=</operator><name>w</name></expr>;</expr_stmt>
	}</block></then></if></block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>q</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>.</operator><name>u</name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>q</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>v</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>q</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>w</name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>q</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>q</name><operator>+</operator><name>cnt</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>cnt</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ru</name><init>=<expr><call><name>ROOT</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>rv</name><init>=<expr><call><name>ROOT</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>ru</name><operator>!=</operator><name>rv</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>root</name><index>[<expr><name>rv</name></expr>]</index></name><operator>=</operator><name>ru</name></expr><operator>,</operator><expr><name>ans</name><operator>+=</operator><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>=</operator><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name><name>u</name><index>[<expr><operator>++</operator><name>e</name></expr>]</index></name><operator>=</operator><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr><operator>,</operator><expr><name><name>v</name><index>[<expr><name>e</name></expr>]</index></name><operator>=</operator><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>;</expr_stmt></block></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>tot</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>sort</name><argument_list>(<argument><expr><name>res</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>res</name><operator>+</operator><name>tot</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>tot</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d "</literal></expr></argument>,<argument><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%I64d\n"</literal></expr></argument>,<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>e</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d\n"</literal></expr></argument>,<argument><expr><name><name>u</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function></unit>
