<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29564844_64031679.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #a &lt;&lt; " = " &lt;&lt; a &lt;&lt; endl</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cerr</name></cpp:macro> <cpp:value>false &amp;&amp; cerr</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dforsn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=int(n-1);i&gt;=int(s);i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forsn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=int(s);i&lt;int(n);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dforn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dforsn(i,0,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>forsn(i,0,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int((a).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fst</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<using>using <name>pii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>

<struct>struct <name>UF</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>vi</name></type> <name>par</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
    <constructor><name>UF</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><member_init_list>: <call><name>par</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call>, <call><name>size</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{ <expr_stmt><expr><call><name>iota</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>
    <function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <name>u</name></expr> ?</condition><then> <expr><name>u</name></expr> </then><else>: <expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> }</block></function>
    <function><type><name>bool</name></type> <name>connected</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>find</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function><type><name>bool</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><call><name>connected</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>v</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><name><name>size</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;</operator> <name><name>size</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr><operator>,</operator> <expr><name><name>size</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+=</operator> <name><name>size</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>par</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr><operator>,</operator> <expr><name><name>size</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+=</operator> <name><name>size</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<using>using <name>Point</name> <init>= <type><name>pii</name></type></init>;</using>
<using>using <name>Edge</name> <init>= <type><name>pii</name></type></init>;</using>
<using>using <name>CostEdge</name> <init>= <type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>Comp</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<function><type><name>int</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>q</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>fst</name></name> <operator>-</operator> <name><name>q</name><operator>.</operator><name>fst</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>snd</name></name> <operator>-</operator> <name><name>q</name><operator>.</operator><name>snd</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>fastio</name></expr>;</expr_stmt>
	
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Point</name></expr></argument>&gt;</argument_list></name></type> <name>pos</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt> <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><index>[<expr><name>x</name></expr><operator>,</operator> <name>y</name>]</index> <operator>:</operator> <name>pos</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>vi</name></type> <name>power_cost</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt> <for>for <control>(<init><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>c</name> <range>: <expr><name>power_cost</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>vi</name></type> <name>wire_factor</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt> <for>for <control>(<init><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>w</name> <range>: <expr><name>wire_factor</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>w</name></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>CostEdge</name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
    <macro><name>forn</name><argument_list>(<argument>u</argument>, <argument>n</argument>)</argument_list></macro> <macro><name>forsn</name><argument_list>(<argument>v</argument>, <argument>u + <literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator> <call><name>dist</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pos</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name><name>wire_factor</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name><name>wire_factor</name><index>[<expr><name>v</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>cost</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>UF</name></type> <name>uf</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Comp</name></expr></argument>&gt;</argument_list></name></type> <name>comp_info</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>forn</name><argument_list>(<argument>u</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>comp_info</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>u</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>used_edges</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>auto</name> <index>[<expr><name>cost</name></expr><operator>,</operator> <name>u</name><operator>,</operator> <name>v</name>]</index> <operator>:</operator> <name>edges</name></expr></init>)</control> <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><call><name><name>uf</name><operator>.</operator><name>connected</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>auto</name> <index>[<expr><name>station_u</name></expr><operator>,</operator> <name>connection_u</name>]</index> <operator>=</operator> <name><name>comp_info</name><index>[<expr><call><name><name>uf</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>power_u</name> <init>= <expr><name><name>power_cost</name><index>[<expr><name>station_u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>auto</name> <index>[<expr><name>station_v</name></expr><operator>,</operator> <name>connection_v</name>]</index> <operator>=</operator> <name><name>comp_info</name><index>[<expr><call><name><name>uf</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>power_v</name> <init>= <expr><name><name>power_cost</name><index>[<expr><name>station_v</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>cost</name> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>power_u</name></expr></argument>, <argument><expr><name>power_v</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>power_u</name> <operator>+</operator> <name>power_v</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>uf</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name><name>uf</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>comp_info</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>power_u</name> <operator>&lt;</operator> <name>power_v</name> <operator>?</operator> <name>station_u</name> <operator>:</operator> <name>station_v</name></expr>, <expr><name>connection_u</name> <operator>+</operator> <name>connection_v</name> <operator>+</operator> <name>cost</name></expr>}</block></expr>;</expr_stmt>

            <expr_stmt><expr><call><name><name>used_edges</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if></block></for>

    <decl_stmt><decl><type><name>ll</name></type> <name>total_cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vi</name></type> <name>built_stations</name></decl>;</decl_stmt>
    <macro><name>forn</name><argument_list>(<argument>u</argument>, <argument>n</argument>)</argument_list></macro> <if>if <condition>(<expr><call><name><name>uf</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>u</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>auto</name> <index>[<expr><name>station</name></expr><operator>,</operator> <name>connection</name>]</index> <operator>=</operator> <name><name>comp_info</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>total_cost</name> <operator>+=</operator> <name>connection</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name><name>built_stations</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>station</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>total_cost</name> <operator>+=</operator> <name><name>power_cost</name><index>[<expr><name>station</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then></if>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>total_cost</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>si</name><argument_list>(<argument><expr><name>built_stations</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>k</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>k</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>built_stations</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" \n"</literal><index>[<expr><name>i</name> <operator>==</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>si</name><argument_list>(<argument><expr><name>used_edges</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>auto</name> <index>[<expr><name>u</name></expr><operator>,</operator> <name>v</name>]</index> <operator>:</operator> <name>used_edges</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>u</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name>v</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
