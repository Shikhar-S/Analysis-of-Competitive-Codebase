<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615689_64027910.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p</name><parameter_list>(<parameter><type><name>n</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n&gt;&gt;i-1)&amp;1)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>f</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name>n</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>m</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>lim</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>x</name></expr>;</condition><incr><expr><name>x</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>lim</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>lim</name></expr></argument>,<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>m</name></expr></init></decl>;</init><condition><expr><name>x</name></expr>;</condition><incr><expr><name>x</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>lim</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>lim</name></expr></argument>,<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><name>lim</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>lim</name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>k1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k1</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>k1</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>k2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k2</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>k2</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index><index>[<expr><name>k2</name></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>k3</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k3</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>k3</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>k4</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k4</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>k4</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><operator>(</operator><name>k3</name><operator>&amp;</operator><name>k4</name><operator>)</operator><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator>
				<operator>!</operator><operator>(</operator> <operator>(</operator><name>k3</name><operator>&gt;</operator><call><name>p</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><name>k1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>k4</name><operator>&gt;</operator><call><name>p</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><name>k2</name><operator>)</operator><operator>)</operator></expr> )</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>k1</name><operator>&amp;</operator><operator>(</operator><name>k3</name><operator>==</operator><call><name>p</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>]</index><index>[<expr><name>k2</name><operator>&amp;</operator><operator>(</operator><name>k4</name><operator>==</operator><call><name>p</name><argument_list>(<argument><expr><name>m</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index><index>[<expr><name>k2</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></block></for></block></for></block></then></if></block></for></block></for></block></for>
	<return>return <expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>get</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal><operator>+</operator><call><name>get</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function>
</unit>
