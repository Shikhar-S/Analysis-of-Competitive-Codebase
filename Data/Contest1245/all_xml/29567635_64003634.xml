<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29567635_64003634.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rd</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>Rand</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>L</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>R</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><name>L</name> <operator>+</operator> <call><name>rd</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>R</name> <operator>-</operator> <name>L</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>MUL</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>MOD</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><while>while <condition>(<expr><name>B</name></expr>)</condition> <block>{<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>+</operator> <operator>(</operator><name>A</name> <operator>*</operator> <operator>(</operator><name>B</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>%</operator> <name>MOD</name><operator>)</operator><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt><expr_stmt><expr><name>A</name> <operator>=</operator> <operator>(</operator><name>A</name> <operator>+</operator> <name>A</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt><expr_stmt><expr><name>B</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>r</name></expr>;</return>}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>POW</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>MOD</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>RES</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>A</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt><expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>B</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><for>for<control>(<init>;</init> <condition><expr><name>B</name></expr>;</condition> <incr><expr><name>B</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<if>if <condition>(<expr><name>B</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>RES</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>RES</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></for><return>return <expr><name>RES</name></expr>;</return>}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>GCD</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>B</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>A</name></expr> </then><else>: <expr><call><name>GCD</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>A</name> <operator>%</operator> <name>B</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,  <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__gcd</name></cpp:macro> <cpp:value>GCD</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name></cpp:macro> <cpp:value>({int x=0,n=0,c=getchar();for(;!isdigit(c);c=getchar())n=(c=='-');for(;isdigit(c);c=getchar())x=x*10+c-'0';(n)?-x:x;})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inc</name></cpp:macro> <cpp:value>({char c=0;for(;c=='\n'||c==' ';c=getchar());c=getchar();c;})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ins</name></cpp:macro> <cpp:value>({string x;char c=getchar();for(;c==' '||c=='\n';c=getchar());for(;c!=' '&amp;&amp;c!='\n';c=getchar()) x+=c;x;})</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair &lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector &lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro> <cpp:value>vector &lt;ii&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reset</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(f, x, sizeof(f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mask &amp; (1ll &lt;&lt; i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onbit</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mask | (1ll &lt;&lt; i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>offbit</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(mask &amp;~ (1ll &lt;&lt; i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int) v.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #a &lt;&lt; " = " &lt;&lt; a &lt;&lt; ";"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug1l</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #a &lt;&lt; " = " &lt;&lt; a &lt;&lt; ";" &lt;&lt; '\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #a &lt;&lt; " = " &lt;&lt; a &lt;&lt; "; " &lt;&lt; #b &lt;&lt; " = " &lt;&lt; b &lt;&lt; "; "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug2l</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #a &lt;&lt; " = " &lt;&lt; a &lt;&lt; "; " &lt;&lt; #b &lt;&lt; " = " &lt;&lt; b &lt;&lt; ";" &lt;&lt; '\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #a &lt;&lt; " = " &lt;&lt; a &lt;&lt; "; " &lt;&lt; #b &lt;&lt; " = " &lt;&lt; b &lt;&lt; "; " &lt;&lt; #c &lt;&lt; " = " &lt;&lt; c &lt;&lt; "; "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug3l</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #a &lt;&lt; " = " &lt;&lt; a &lt;&lt; "; " &lt;&lt; #b &lt;&lt; " = " &lt;&lt; b &lt;&lt; ";" &lt;&lt; #c &lt;&lt; " = " &lt;&lt; c &lt;&lt; "; " &lt;&lt; '\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #a &lt;&lt; " = " &lt;&lt; a &lt;&lt; "; " &lt;&lt; #b &lt;&lt; " = " &lt;&lt; b &lt;&lt; "; " &lt;&lt; #c &lt;&lt; " = " &lt;&lt; c &lt;&lt; "; " &lt;&lt; #d &lt;&lt; " = " &lt;&lt; d &lt;&lt; "; "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug4l</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #a &lt;&lt; " = " &lt;&lt; a &lt;&lt; "; " &lt;&lt; #b &lt;&lt; " = " &lt;&lt; b &lt;&lt; ";" &lt;&lt; #c &lt;&lt; " = " &lt;&lt; c &lt;&lt; "; " &lt;&lt; #d &lt;&lt; " = " &lt;&lt; d &lt;&lt; "; " &lt;&lt; '\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FASTIOS</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TASK</name></cpp:macro> <cpp:value>"1245A"</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<function><name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>FASTIOS</name></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><name>TASK</name><literal type="string">".inp"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><name>TASK</name><literal type="string">".out"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>t</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>in</name></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <name>in</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name>__gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Finite"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Infinite"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
