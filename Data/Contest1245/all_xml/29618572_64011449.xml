<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618572_64011449.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int64_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>ra</name></decl>,<decl><type ref="prev"/><name>pa</name></decl>,<decl><type ref="prev"/><name>sa</name></decl>,<decl><type ref="prev"/><name>rb</name></decl>,<decl><type ref="prev"/><name>pb</name></decl>,<decl><type ref="prev"/><name>sb</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>pp</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list></name></type> <name>f</name><argument_list>(<argument><expr><literal type="number">111111</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>f</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>pp</name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int64_t</name></type> <name>cn</name></decl>, <decl><type ref="prev"/><name>cu</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>cu</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>*</operator> <name><name>f</name><index>[<expr><name>cu</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>pp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>cu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cn</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then> <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>cn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>*</operator> <name><name>f</name><index>[<expr><name>cn</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>pp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>cn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cu</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal><operator>)</operator></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if></elseif> <else>else <block>{
			<if>if <condition>(<expr><name>cn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>*</operator> <name><name>f</name><index>[<expr><name>cn</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>pp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>cn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>cu</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>*</operator> <name><name>f</name><index>[<expr><name>cu</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>pp</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>cn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<if>if <condition>(<expr><name>cn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>*</operator> <name><name>f</name><index>[<expr><name>cn</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>pp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>cn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>cu</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name> <operator>*</operator> <name><name>f</name><index>[<expr><name>cu</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>pp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name>cn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name></expr>;</expr_stmt>

}</block></function></unit>
