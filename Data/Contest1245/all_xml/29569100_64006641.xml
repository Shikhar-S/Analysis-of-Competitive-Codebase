<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29569100_64006641.cpp"><comment type="line">//Author - Rahil Malhotra</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>double</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>ss1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>IOS</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>r</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>ss1</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>p1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>s1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ss1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name><name>ss1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>r1</name><operator>++</operator></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name><name>ss1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>s1</name><operator>++</operator></expr>;</expr_stmt></block></else></if></block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>count</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>r1</name><operator>&gt;=</operator><name>p</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>count</name><operator>+=</operator><name>p</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>count</name><operator>+=</operator><name>r1</name></expr>;</expr_stmt>
        }</block></else></if>
        <if>if<condition>(<expr><name>p1</name><operator>&gt;=</operator><name>s</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>count</name><operator>+=</operator><name>s</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>count</name><operator>+=</operator><name>p1</name></expr>;</expr_stmt>
        }</block></else></if>
        <if>if<condition>(<expr><name>s1</name><operator>&gt;=</operator><name>r</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>count</name><operator>+=</operator><name>r</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>count</name><operator>+=</operator><name>s1</name></expr>;</expr_stmt>
        }</block></else></if>
        <if>if<condition>(<expr><name>count</name><operator>*</operator><literal type="number">2</literal><operator>&gt;=</operator><name>n</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></else></if>
        <decl_stmt><decl><type><name>string</name></type> <name>ans</name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ss1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>ss1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>p</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'F'</literal></expr>;</expr_stmt></block></else></if>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>ss1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>s</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'F'</literal></expr>;</expr_stmt></block></else></if>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>ss1</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>r</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'F'</literal></expr>;</expr_stmt></block></else></if>
            }</block></then></if>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ans</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'F'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>r</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then>
                <elseif>else <if>if<condition>(<expr><name>p</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name>s</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
}</block></function></unit>
