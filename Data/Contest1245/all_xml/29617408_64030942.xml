<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617408_64030942.cpp"><comment type="line">//In the name of God</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>


<decl_stmt><decl><type><name>ld</name></type> <name><name>dp</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>pii</name></type> <name>nxt</name><parameter_list>(<parameter><decl><type><name>pii</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{	
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>i</name> <operator>--</operator></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>j</name> <operator>++</operator></expr>;</expr_stmt></block></else></if>
	}</block></then>
	<else>else<block>{
		<if>if<condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>i</name> <operator>--</operator></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>j</name> <operator>--</operator></expr>;</expr_stmt></block></else></if>
	}</block></else></if>
	<return>return <expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr>;</return>	
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</init> <condition><expr><operator>~</operator><name>j</name></expr>;</condition> <incr><expr><operator>--</operator> <name>j</name></expr></incr>)</control><block>{
				<decl_stmt><decl><type><name>pii</name></type> <name>p</name> <init>= <expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control><block>{
					<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>nxt</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<decl_stmt><decl><type><name>ld</name></type> <name>now</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>ld</name><operator>)</operator><name><name>dp</name><index>[<expr><name><name>p</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>p</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>ld</name><operator>)</operator><name><name>dp</name><index>[<expr><name><name>p</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>c</name><index>[<expr><name><name>p</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>p</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr>]</index><index>[<expr><name><name>p</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>ld</name><operator>)</operator><literal type="number">1</literal> <operator>/</operator> <operator>(</operator><name>ld</name><operator>)</operator><literal type="number">6</literal> <operator>*</operator> <name>now</name></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>ld</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></for></block></then>
		<else>else
			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>	<block type="pseudo"><continue>continue;</continue></block></then></if>
				<decl_stmt><decl><type><name>pii</name></type> <name>p</name> <init>= <expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
				<for>for<control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>k</name> <operator>++</operator></expr></incr>)</control><block>{
					<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>nxt</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>first</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>	<block type="pseudo"><break>break;</break></block></then></if> 
					<decl_stmt><decl><type><name>ld</name></type> <name>now</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><name>ld</name><operator>)</operator><name><name>dp</name><index>[<expr><name><name>p</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>p</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name>ld</name><operator>)</operator><name><name>dp</name><index>[<expr><name><name>p</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>c</name><index>[<expr><name><name>p</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>p</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr>]</index><index>[<expr><name><name>p</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>ld</name><operator>)</operator><literal type="number">1</literal> <operator>/</operator> <operator>(</operator><name>ld</name><operator>)</operator><literal type="number">6</literal> <operator>*</operator> <name>now</name></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>ld</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<if>if<condition>(<expr><name>k</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <literal type="number">6</literal> <operator>/</operator> <operator>(</operator><name>ld</name><operator>)</operator><name>j</name></expr>;</expr_stmt></block></then></if>
			}</block></for></block></else></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
