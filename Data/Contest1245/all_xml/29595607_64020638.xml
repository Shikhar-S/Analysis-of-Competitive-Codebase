<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29595607_64020638.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line" format="doxygen">/// 0 - prefix =</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>dig_l</name> <init>= <expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>dig_r</name> <init>= <expr><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>al</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>al</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>al</name></expr></incr>)</control> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>ar</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ar</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>ar</name></expr></incr>)</control> <block>{
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>bl</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bl</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>bl</name></expr></incr>)</control> <block>{
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>br</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>br</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>br</name></expr></incr>)</control> <block>{
                            <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>al</name></expr>]</index><index>[<expr><name>ar</name></expr>]</index><index>[<expr><name>bl</name></expr>]</index><index>[<expr><name>br</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                            <for>for <control>(<init><decl><type><name>int</name></type> <name>d1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>d1</name></expr></incr>)</control> <block>{
                                <if>if <condition>(<expr><name>al</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>&lt;</operator> <name>dig_l</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                                <if>if <condition>(<expr><name>ar</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>&gt;</operator> <name>dig_r</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                                <for>for <control>(<init><decl><type><name>int</name></type> <name>d2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d2</name> <operator>&lt;=</operator> <operator>!</operator><name>d1</name></expr>;</condition> <incr><expr><operator>++</operator><name>d2</name></expr></incr>)</control> <block>{
                                    <if>if <condition>(<expr><name>bl</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>&lt;</operator> <name>dig_l</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                                    <if>if <condition>(<expr><name>br</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>&gt;</operator> <name>dig_r</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

                                    <expr_stmt><expr><name><name>dp</name><index>[<expr><ternary><condition><expr><name>al</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <name>dig_l</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index><index>[<expr><ternary><condition><expr><name>ar</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <name>dig_r</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index>
                                      <index>[<expr><ternary><condition><expr><name>bl</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <name>dig_l</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index><index>[<expr><ternary><condition><expr><name>br</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <name>dig_r</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>]</index><index>[<expr><name>i</name></expr>]</index></name>
                                        <operator>+=</operator> <name><name>dp</name><index>[<expr><name>al</name></expr>]</index><index>[<expr><name>ar</name></expr>]</index><index>[<expr><name>bl</name></expr>]</index><index>[<expr><name>br</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                                }</block></for>
                            }</block></for>
                        }</block></for>
                    }</block></for>
                }</block></for>
            }</block></for>
        }</block></for>

        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>a</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>d</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>d</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></for></block></for></block></for></block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></while>
}</block></function>
</unit>
