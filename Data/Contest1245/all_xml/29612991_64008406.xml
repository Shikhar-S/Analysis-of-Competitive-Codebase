<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29612991_64008406.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>


<function><type><name>int</name></type> <name>up</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>a</name><operator>%</operator><name>b</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>a</name><operator>/</operator><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><name>a</name><operator>/</operator><name>b</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>_i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_i</name> <operator>&lt;</operator> <name>q</name></expr>;</condition> <incr><expr><operator>++</operator><name>_i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>seq</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>ans</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>seq</name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>seq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>char</name></type> <name>t</name> <init>= <expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>t</name><operator>==</operator><literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>p</name></expr><operator>,</operator> <expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>t</name><operator>==</operator><literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>s</name></expr><operator>,</operator> <expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>t</name><operator>==</operator><literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>r</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>r</name></expr><operator>,</operator> <expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>r</name><operator>+</operator><name>p</name><operator>+</operator><name>s</name> <operator>&gt;=</operator> <call><name>up</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block>{
                <decl_stmt><decl><type><name>char</name></type> <name>t</name> <init>= <expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><operator>++</operator><name>r</name></expr>;</expr_stmt></block></then>
                    <elseif>else <if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><operator>++</operator><name>p</name></expr>;</expr_stmt></block></then></if></elseif>
                    <elseif>else <if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><operator>++</operator><name>s</name></expr>;</expr_stmt></block></then></if></elseif></if>
                }</block></then></if>
            }</block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></then>

        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>









</unit>
