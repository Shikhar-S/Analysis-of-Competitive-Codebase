<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617408_64033016.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include> 
<using>using <namespace>namespace <name>std</name> ;</namespace></using> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl> , <decl><type ref="prev"/><name>r</name></decl> ;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> ;</decl_stmt> 

<function><type><name>int</name></type> <name>ans</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>l0</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>r0</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>l1</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>r1</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr> ;</return></block></then></if> 
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>l0</name></expr>]</index><index>[<expr><name>r0</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>r1</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>l0</name></expr>]</index><index>[<expr><name>r0</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>r1</name></expr>]</index></name></expr> ;</return></block></then></if> 
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>can0</name></decl> ;</decl_stmt> 
	<if>if<condition>(<expr><name>l0</name></expr>)</condition><then> <block>{ 
		<if>if<condition>(<expr><name>r0</name></expr>)</condition><then> <block>{ 
			<expr_stmt><expr><call><name><name>can0</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
			<expr_stmt><expr><call><name><name>can0</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		}</block></then> <else>else <block>{ 
			<expr_stmt><expr><call><name><name>can0</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
			<if>if<condition>(<expr><name>r</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>can0</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then></if> 
		}</block></else></if>
	}</block></then> <else>else <block>{ 
		<if>if<condition>(<expr><name>r0</name></expr>)</condition><then> <block>{ 
			<if>if<condition>(<expr><name>l</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>can0</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then> 
			<else>else <block>{ 
				<expr_stmt><expr><call><name><name>can0</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
				<expr_stmt><expr><call><name><name>can0</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
			}</block></else></if>
		}</block></then> <else>else <block>{ 
			<decl_stmt><decl><type><name>int</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt> 
			<decl_stmt><decl><type><name>int</name></type> <name>b1</name> <init>= <expr><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt> 
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>b0</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>b1</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><call><name><name>can0</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></for> 
		}</block></else></if>
	}</block></else></if>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>can1</name></decl> ;</decl_stmt> 
	<if>if<condition>(<expr><name>l1</name></expr>)</condition><then> <block>{ 
		<if>if<condition>(<expr><name>r1</name></expr>)</condition><then> <block>{ 
			<expr_stmt><expr><call><name><name>can1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
			<expr_stmt><expr><call><name><name>can1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		}</block></then> <else>else <block>{ 
			<expr_stmt><expr><call><name><name>can1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
			<if>if<condition>(<expr><name>r</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>can1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then></if> 
		}</block></else></if>
	}</block></then> <else>else <block>{ 
		<if>if<condition>(<expr><name>r1</name></expr>)</condition><then> <block>{ 
			<if>if<condition>(<expr><name>l</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>can1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then> 
			<else>else <block>{ 
				<expr_stmt><expr><call><name><name>can1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
				<expr_stmt><expr><call><name><name>can1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
			}</block></else></if>
		}</block></then> <else>else <block>{ 
			<decl_stmt><decl><type><name>int</name></type> <name>b0</name> <init>= <expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt> 
			<decl_stmt><decl><type><name>int</name></type> <name>b1</name> <init>= <expr><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl> ;</decl_stmt> 
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>b0</name></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>b1</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><call><name><name>can1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></for> 
		}</block></else></if>
	}</block></else></if>
	<decl_stmt><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>cur</name> <init>= <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>l0</name></expr>]</index><index>[<expr><name>r0</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>r1</name></expr>]</index></name></expr></init></decl> ;</decl_stmt> 
	<expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt> 
	<for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <range>: <expr><name>can0</name></expr></range></decl></init>)</control> <block>{ 
		<for>for<control>(<init><decl><type><name>int</name></type> <name>y</name> <range>: <expr><name>can1</name></expr></range></decl></init>)</control> <block>{ 
			<if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>y</name> <operator>&amp;&amp;</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if> 
			<decl_stmt><decl><type><name>int</name></type> <name>nl0</name> <init>= <expr><name>l0</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&gt;</operator> <operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt> 
			<decl_stmt><decl><type><name>int</name></type> <name>nr0</name> <init>= <expr><name>r0</name> <operator>|</operator> <operator>(</operator><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt> 
			<decl_stmt><decl><type><name>int</name></type> <name>nl1</name> <init>= <expr><name>l1</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&gt;</operator> <operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt> 
			<decl_stmt><decl><type><name>int</name></type> <name>nr1</name> <init>= <expr><name>r1</name> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <name>pos</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl> ;</decl_stmt> 
			<expr_stmt><expr><name>cur</name> <operator>+=</operator> <call><name>ans</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>nl0</name></expr></argument> , <argument><expr><name>nr0</name></expr></argument> , <argument><expr><name>nl1</name></expr></argument> , <argument><expr><name>nr1</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
		}</block></for>
	}</block></for>
	<return>return <expr><name>cur</name></expr> ;</return> 
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{ 
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>ans</name><argument_list>(<argument><expr><literal type="number">33</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt> 
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{ 
	<decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl> ;</decl_stmt> 
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tc</name></expr> ;</expr_stmt> 
	<while>while<condition>(<expr><name>tc</name><operator>--</operator></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr> ;</expr_stmt></block></while> 
}</block></function>
</unit>
