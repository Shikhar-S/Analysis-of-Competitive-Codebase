<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29573217_64034187.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (a=b; a&lt;=c; a++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (a=b; a&gt;=c; a--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a&lt;b?a:b)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>h</name><index>[<expr><literal type="number">11</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>f</name><index>[<expr><literal type="number">11</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>tot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name>sum</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>work</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>sum</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>tot</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
	<macro><name>fo</name><argument_list>(<argument>k</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro>
	<block>{
		<if>if <condition>(<expr><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>==</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>y</name><operator>==</operator><name>n</name><operator>)</operator></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><operator>--</operator><name>x</name></expr>;</expr_stmt></block></then>
		<else>else
		<block>{
			<if>if <condition>(<expr><name>x</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><operator>--</operator><name>y</name></expr>;</expr_stmt></block></then>
			<else>else
			<block type="pseudo"><expr_stmt><expr><operator>++</operator><name>y</name></expr>;</expr_stmt></block></else></if>
		}</block></else></if>
		
		<if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then>
		<block type="pseudo"><break>break;</break></block></then></if>
		
		<expr_stmt><expr><operator>++</operator><name>tot</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>sum</name><operator>+=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>x</name><operator>-</operator><name><name>h</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	
	<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>sum</name><operator>+</operator><literal type="number">6</literal><operator>)</operator><operator>/</operator><name>tot</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//	freopen("e.in","r",stdin);</comment>
	
	<expr_stmt><expr><name>n</name><operator>=</operator><literal type="number">10</literal></expr>;</expr_stmt>
	<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<macro><name>fo</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	
	<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<if>if <condition>(<expr><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
		<block>{
			<macro><name>fo</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
			<if>if <condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">1</literal> <operator>||</operator> <name>j</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>work</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></then>
		<else>else
		<block>{
			<macro><name>fd</name><argument_list>(<argument>j</argument>,<argument>n</argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>work</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block>
	
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%0.10lf\n"</literal></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
