<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29607946_64035234.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pbb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>

<function><type><name>ll</name></type> <name>read</name><parameter_list>()</parameter_list><block>{ 
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
 	<for>for<control>(<init><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0x30</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="number">0x39</literal></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
 	<decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><name>ch</name> <operator>-</operator> <literal type="number">0x30</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name>ch</name><operator>&gt;=</operator><literal type="number">0x30</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="number">0x39</literal></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="number">0x30</literal></expr>;</expr_stmt></block></for>
 	<return>return <expr><name>x</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>X</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Y</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>A</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>C</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>vis</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name>type</name></decl>;</decl_stmt><comment type="line">// -1 alone, </comment>
	<decl_stmt><decl><type><name>ll</name></type> <name>cost</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>id</name></decl>;</decl_stmt>
	<friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>node</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><name><name>a</name><operator>.</operator><name>cost</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>cost</name></name></expr>;</return>
	}</block></function></friend>
</public>}</block>;</struct>
<function><type><name>node</name></type> <name>mk</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{ <comment type="line">// id,type,cost</comment>
	<decl_stmt><decl><type><name>node</name></type> <name>re</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>re</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>re</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>q</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>re</name><operator>.</operator><name>cost</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<return>return <expr><name>re</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>AA</name></decl>,<decl><type ref="prev"/><name>P</name></decl>,<decl><type ref="prev"/><name>Q</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 	<decl_stmt><decl><type><name>ll</name></type> <name>n</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>	
 	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
 		<expr_stmt><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 		<expr_stmt><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 	}</block></for>
 	<decl_stmt><decl><type><name>ll</name></type> <name>mip</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
 		<expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 	}</block></for>
 	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 		<block type="pseudo"><expr_stmt><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
 	<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type><name>que</name></decl>;</decl_stmt>
 	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
 		<expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mk</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	}</block></for>
 	<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 	<while>while<condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><block>{
 		<decl_stmt><decl><type><name>node</name></type> <name>tp</name> <init>= <expr><call><name><name>que</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name><name>tp</name><operator>.</operator><name>id</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
 		<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
 		<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>tp</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
 		<expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>tp</name><operator>.</operator><name>id</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
 		<comment type="line">// cout &lt;&lt; tp.id &lt;&lt; "--" &lt;&lt; endl;</comment>
 		<if>if<condition>(<expr><name><name>tp</name><operator>.</operator><name>type</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>AA</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>tp</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
 		<else>else <block>{<expr_stmt><expr><call><name><name>P</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>tp</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>tp</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></else></if>
 		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
 			<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
 			<decl_stmt><decl><type><name>ll</name></type> <name>co</name> <init>= <expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>X</name><index>[<expr><name><name>tp</name><operator>.</operator><name>id</name></name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>Y</name><index>[<expr><name><name>tp</name><operator>.</operator><name>id</name></name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>C</name><index>[<expr><name><name>tp</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
 			<if>if<condition>(<expr><name>co</name> <operator>&lt;</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
 				<expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mk</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name><name>tp</name><operator>.</operator><name>id</name></name></expr></argument>,<argument><expr><name>co</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 			}</block></then></if>
 		}</block></for>
 	}</block></while>
 	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>sum</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
 	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>AA</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
 	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>AA</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
 		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>AA</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
 	}</block></for>
 	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator> <call><name><name>P</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
 	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>P</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
 		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>P</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>Q</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal>	 <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
 	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
