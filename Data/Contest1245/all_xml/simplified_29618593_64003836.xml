include directive file using namespace name typedef type name name name typedef type name name name name typedef type name name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name argument_list type generic argument expr name argument expr name argument expr name name typedef type name name argument_list type generic argument expr name argument expr name argument expr name argument expr name name typedef type name name argument_list type generic argument expr name name typedef type name name argument_list type generic argument expr name argument expr name name typedef type name name argument_list type generic argument expr name name typedef type name name argument_list type generic argument expr name name typedef type name name argument_list type generic argument expr name name argument_list type generic argument expr name name define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr call name name operator name argument_list argument expr name ifdef directive name expr_stmt expr call name argument_list argument expr literal type string argument expr literal type string argument expr name expr_stmt expr call name argument_list argument expr literal type string argument expr literal type string argument expr name endif directive decl_stmt decl type name name expr_stmt expr name operator name macro name argument_list argument block decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name decl type ref prev name decl type ref prev name expr_stmt expr name operator name operator name operator name decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name init expr literal type string macro name argument_list argument argument literal type number argument block decl_stmt decl type name name expr_stmt expr name operator name expr_stmt expr name operator name if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name decl_stmt decl type name name init expr name operator name operator name decl_stmt decl type name name init expr operator ternary condition expr name operator literal type number then expr name operator literal type number operator literal type number else expr name operator literal type number operator if condition expr name operator name then block expr_stmt expr name operator literal type string else block expr_stmt expr name operator literal type string continue expr_stmt expr name operator name expr_stmt expr name operator name expr_stmt expr name operator name macro name argument_list argument argument literal type number argument literal type number block if condition expr name name index expr name operator literal type char operator name then block expr_stmt expr name operator literal type char expr_stmt expr name operator continue if condition expr name name index expr name operator literal type char operator name then block expr_stmt expr name operator literal type string expr_stmt expr name operator continue if condition expr name name index expr name operator literal type char operator name then block expr_stmt expr name operator literal type string expr_stmt expr name operator continue if condition expr name then block expr_stmt expr name operator literal type string expr_stmt expr name operator continue if condition expr name then block expr_stmt expr name operator literal type string expr_stmt expr name operator continue if condition expr name then block expr_stmt expr name operator literal type string expr_stmt expr name operator continue expr_stmt expr name operator literal type char return expr literal type number 
