<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29620115_64022101.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><type><name>int</name> <specifier>const</specifier></type> <name>maxn</name> <init>= <expr><literal type="number">2020</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Point</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

	<function><type><name>ll</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>Point</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
		<return>return <expr><operator>(</operator><name>k</name> <operator>+</operator> <name><name>rhs</name><operator>.</operator><name>k</name></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name><name>rhs</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>y</name><operator>-</operator><name><name>rhs</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<struct>struct <name>Edge</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>cost</name></decl>;</decl_stmt>

	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><name>Edge</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
		<return>return <expr><name>cost</name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>cost</name></name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<struct>struct <name>DSU</name> <block>{<public type="default">
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pai</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl>;</decl_stmt>

	<constructor><name>DSU</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>pai</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call>, <call><name>w</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call>, <call><name>c</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call>, <call><name>ans</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{
		<expr_stmt><expr><call><name>iota</name><argument_list>(<argument><expr><call><name><name>pai</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>pai</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name><name>pai</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
		<return>return <expr><name><name>pai</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>pai</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><type><name>bool</name></type> <name>con</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<function><type><name>ll</name></type> <name>cost</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><name><name>c</name><index>[<expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>ff</name></expr>;</return>
	}</block></function>

	<function><type><name>void</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>cost</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name><name>w</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name><name>w</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>pai</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>w</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>w</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>cost</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>-=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>.</operator><name>ff</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>Point</name></type> <name><name>v</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name></expr>;</expr_stmt></block></for>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>ed</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>ed</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Edge</name><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>, <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><macro><name>dist</name><argument_list>(<argument>v[j]</argument>)</argument_list></macro></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>

	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>ed</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ed</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>DSU</name></type> <name>dsu</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dsu</name><operator>.</operator><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ii</name><block>{<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>, <expr><name>i</name></expr>}</block></expr><operator>,</operator> <expr><name><name>dsu</name><operator>.</operator><name>ans</name></name> <operator>+=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt></block></for>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>res</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name> <range>: <expr><name>ed</name></expr></range></decl></init>)</control> <block>{
		<if>if <condition>(<expr><operator>!</operator><call><name><name>dsu</name><operator>.</operator><name>con</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <call><name>max</name><argument_list>(<argument><expr><call><name><name>dsu</name><operator>.</operator><name>cost</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>dsu</name><operator>.</operator><name>cost</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>dsu</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>cost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Edge</name><block>{<expr><name><name>e</name><operator>.</operator><name>x</name></name></expr>, <expr><name><name>e</name><operator>.</operator><name>y</name></name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></for>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>dsu</name><operator>.</operator><name>ans</name></name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>n</name><operator>-</operator><operator>(</operator><name>int</name><operator>)</operator><call><name><name>res</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mrk</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>mrk</name><index>[<expr><name><name>dsu</name><operator>.</operator><name>c</name><index>[<expr><call><name><name>dsu</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>ss</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>mrk</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>res</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>p</name> <range>: <expr><name>res</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>x</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator><literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>y</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block></for>
}</block></function></unit>
