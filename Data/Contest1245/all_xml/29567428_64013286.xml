<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29567428_64013286.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cd</name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><literal type="number">2300</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cur</name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">2340</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>kq</name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">2340</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><literal type="number">2340</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>lab</name><index>[<expr><literal type="number">2340</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>pair&lt;long long,pair&lt;long long,long long&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi1</name></cpp:macro> <cpp:value>pair&lt;long long,long long&gt;</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pi1</name></expr></argument>&gt;</argument_list></name></type> <name>kq1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pi</name></type> <name><name>a</name><index>[<expr><literal type="number">3000000</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>dad</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
		<while>while <condition>(<expr><name><name>lab</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{
				<expr_stmt><expr><name>u</name> <operator>=</operator> <name><name>lab</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></while>
		<return>return <expr><name>u</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>united</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>u</name></decl></parameter> , <parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
		<if>if <condition>(<expr><name><name>lab</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&gt;</operator> <name><name>lab</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
		<block>{
				<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name></expr></argument> , <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name><name>lab</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+=</operator> <name><name>lab</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>lab</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
        <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>cd</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
				<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
				<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>lab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lab</name><index>[<expr><name>cd</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>a</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <call><name>pi</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>cd</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
				<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
				<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>e</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>e</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control>
				<block>{
						<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cost</name> <init>= <expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>e</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator><name><name>x</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name><name>a</name><index>[<expr><name>cur</name></expr>]</index></name> <operator>=</operator> <call><name>pi</name><argument_list>(<argument><expr><name>cost</name></expr></argument> , <argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument> , <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
		}</block></for>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>a</name> <operator>+</operator> <name>cur</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cur</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>u</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>v</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dadu</name> <init>= <expr><call><name>dad</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl> , <decl><type ref="prev"/><name>dadv</name> <init>= <expr><call><name>dad</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>dadu</name> <operator>!=</operator> <name>dadv</name></expr>)</condition><then>
				<block>{
						<expr_stmt><expr><call><name>united</name><argument_list>(<argument><expr><name>dadu</name></expr></argument> , <argument><expr><name>dadv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>kq</name> <operator>+=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
						<if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>cd</name> <operator>+</operator> <literal type="number">1</literal> <operator>||</operator> <name>v</name> <operator>==</operator> <name>cd</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then>
						<block>{
								<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
						<else>else
						<block>{
								<expr_stmt><expr><call><name><name>kq1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pi1</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></else></if>
				}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>kq</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><call><name><name>result</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><call><name><name>result</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><call><name><name>kq1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
		<while>while <condition>(<expr><call><name><name>kq1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><call><name><name>kq1</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><call><name><name>kq1</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><name>second</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>kq1</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></while>

}</block></function>
</unit>
