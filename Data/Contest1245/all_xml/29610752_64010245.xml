<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610752_64010245.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>void</name></type> <name>LSH</name><parameter_list>()</parameter_list>
<block>{
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
		<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"1245B.INP"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"1245B.OUT"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// ONLINE_JUDGE</comment>
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>o</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>ks</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>LSH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>o</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>p</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ks</name><operator>=</operator><literal type="string">""</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>o</name> <operator>=</operator> <name>o</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>d</name> <operator>=</operator> <name>d</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <expr_stmt><expr><name>k</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>o</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>( <expr><name>k</name><operator>*</operator><literal type="number">2</literal> <operator>&lt;</operator> <name>n</name></expr> )</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
            <block>{
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>ks</name><operator>=</operator><name>ks</name><operator>+</operator><literal type="string">"P"</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block type="pseudo"><expr_stmt><expr><name>ks</name><operator>=</operator><name>ks</name><operator>+</operator><literal type="string">"*"</literal></expr>;</expr_stmt></block></else></if>
                }</block></then></if>
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>ks</name><operator>=</operator><name>ks</name><operator>+</operator><literal type="string">"S"</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block type="pseudo"><expr_stmt><expr><name>ks</name><operator>=</operator><name>ks</name><operator>+</operator><literal type="string">"*"</literal></expr>;</expr_stmt></block></else></if>
                }</block></then></if>
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>ks</name><operator>=</operator><name>ks</name><operator>+</operator><literal type="string">"R"</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    }</block></then>
                    <else>else <block type="pseudo"><expr_stmt><expr><name>ks</name><operator>=</operator><name>ks</name><operator>+</operator><literal type="string">"*"</literal></expr>;</expr_stmt></block></else></if>
                }</block></then></if>
            }</block></for>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ks</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
                <block type="pseudo"><if>if <condition>(<expr><name><name>ks</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'*'</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then>
                <else>else
                <block>{
                    <if>if <condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then>
                    <else>else
                    <block>{
                        <if>if <condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                        }</block></then>
                        <elseif>else <if>if <condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                        <block>{
                            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                        }</block></then></if></elseif></if>
                    }</block></else></if>
                }</block></else></if></block></for>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
}</block></function></unit>
