<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29563714_64027233.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>SZ</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>SZ</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index><index>[<expr><name>SZ</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>path</name><index>[<expr><name>SZ</name> <operator>*</operator> <name>SZ</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pos</name><index>[<expr><name>SZ</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index><index>[<expr><name>SZ</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name><name>f</name><index>[<expr><name>SZ</name> <operator>*</operator> <name>SZ</name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>fixed</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SZ</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>SZ</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SZ</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>SZ</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>path</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
			}</block></for>
		}</block></then>
		<else>else <block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>SZ</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>path</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pos</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>cnt</name></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>SZ</name> <operator>*</operator> <name>SZ</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>dice</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>dice</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>dice</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><name>i</name> <operator>-</operator> <name>dice</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>out</name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><literal type="number">1</literal> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>x</name> <init>= <expr><name><name>path</name><index>[<expr><name>i</name> <operator>-</operator> <name>dice</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>lad</name> <init>= <expr><name><name>pos</name><index>[<expr><name><name>x</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>a</name><index>[<expr><name><name>x</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>x</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr>]</index><index>[<expr><name><name>x</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>long</name> <name>double</name><operator>)</operator><literal type="number">1</literal> <operator>/</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name> <operator>-</operator> <name>dice</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>f</name><index>[<expr><name>lad</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>out</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>out</name><operator>)</operator></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>f</name><index>[<expr><name>SZ</name> <operator>*</operator> <name>SZ</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
