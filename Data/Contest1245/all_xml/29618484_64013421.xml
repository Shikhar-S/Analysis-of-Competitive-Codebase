<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618484_64013421.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cfloat&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<class>class <name>UnionFind</name> <block>{<private type="default">
	<decl_stmt><decl><type><specifier>mutable</specifier> <name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>vec</name></decl>;</decl_stmt>
</private><public>public:
	<constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>vec</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor><empty_stmt>;</empty_stmt>
	<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
		<if>if <condition>(<expr><name><name>vec</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then>
		<else>else <block type="pseudo"><return>return <expr><name><name>vec</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
	}</block></function>
	<function><type><name>bool</name></type> <name>same</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
	<function><type><name>void</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name><name>vec</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&lt;</operator> <name><name>vec</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name><name>vec</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+=</operator> <name><name>vec</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>vec</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<expr_stmt><expr><name><name>vec</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+=</operator> <name><name>vec</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>vec</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
	}</block></function>
</public>}</block>;</class>
<struct>struct <name>Coordinate</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<function><type><name>int</name></type> <name>manhattan_distance</name><parameter_list>(<parameter><decl><type><name>Coordinate</name></type> <name>that</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
		<return>return <expr><call><name><name>std</name><operator>::</operator><name>abs</name></name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>that</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>abs</name></name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>that</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
</public>}</block>;</struct>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Coordinate</name></expr></argument>&gt;</argument_list></name></name></type> <name>cities</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt> <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>c</name> <operator>:</operator> <name>cities</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>.</operator><name>x</name></name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>build_cost</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt> <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>b</name> <operator>:</operator> <name>build_cost</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>connect_cost</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt> <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>k</name> <operator>:</operator> <name>connect_cost</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>auto</name></type> <name>comparator</name> <init>= <expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><name><name>a</name><operator>.</operator><name>second</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>second</name></name></expr>;</return> }</block></lambda></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>, <argument><expr><name>long</name> <name>long</name> <name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name></name></expr></argument>, <argument><expr><decltype>decltype<argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></decltype></expr></argument>&gt;</argument_list></name></name></type> <name>queue</name><argument_list>(<argument><expr><name>comparator</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>build_cost</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>auto</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name><name>connect_cost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>connect_cost</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name><name>cities</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>manhattan_distance</name><argument_list>(<argument><expr><name><name>cities</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<decl_stmt><decl><type><name>UnionFind</name></type> <name>uft</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>for_build</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name></name></type> <name>for_connect</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>sum_cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<while>while <condition>(<expr><call><name><name>uft</name><operator>.</operator><name>same</name></name><argument_list>(<argument><expr><call><name><name>queue</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>first</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><call><name><name>queue</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>first</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>queue</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
		<decl_stmt><decl><type><name>auto</name></type> <name>top</name> <init>= <expr><call><name><name>queue</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>uft</name><operator>.</operator><name>unite</name></name><argument_list>(<argument><expr><name><name>top</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>top</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sum_cost</name> <operator>+=</operator> <name><name>top</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>top</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>for_build</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>top</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><call><name><name>for_connect</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name><name>top</name><operator>.</operator><name>first</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>top</name><operator>.</operator><name>first</name><operator>.</operator><name>second</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>sum_cost</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <call><name><name>for_build</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<if>if <condition>(<expr><operator>!</operator><call><name><name>for_build</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
		<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>for_build</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>for_build</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <call><name><name>for_connect</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<if>if <condition>(<expr><operator>!</operator><call><name><name>for_connect</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
		<for>for <control>(<init><decl><type><name>auto</name></type> <name>p</name> <range>: <expr><name>for_connect</name></expr></range></decl></init>)</control> <block>{
			<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		}</block></for>
	}</block></then></if>
}</block></function>
</unit>
