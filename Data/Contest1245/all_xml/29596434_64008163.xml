<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29596434_64008163.cpp"><comment type="block" format="doxygen">/** Header .. **/</comment> <comment type="line">//{</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DO</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for ( int ____n ## __line__ = n; ____n ## __line__ -- ; )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>A.begin(), A.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int(A.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(A, B)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rush</name></cpp:macro> <cpp:value>for(int ____T=RD(); ____T--;)</cpp:value></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/STACK:36777216"</cpp:literal><name>)</name></cpp:pragma>
<comment type="line">//#pragma GCC optimize ("O2")</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ruby</name></cpp:macro> <cpp:value>system("ruby main.rb")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Haskell</name></cpp:macro> <cpp:value>system("runghc main.hs")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Python</name></cpp:macro> <cpp:value>system("python main.py")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pascal</name></cpp:macro> <cpp:value>system("fpc main.pas")</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<comment type="line">//typedef long double DB;</comment>
<typedef>typedef <type><name>double</name></type> <name>DB</name>;</typedef>
<typedef>typedef <type><name>unsigned</name></type> <name>UINT</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ULL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>

<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>
<function_decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name><modifier>&amp;</modifier></type> <name>RD</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>OT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>RD</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>LL</name></type> <name>x</name></decl>;</decl_stmt> <return>return <expr><call><name>RD</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function_decl><specifier>inline</specifier> <type><name>DB</name><modifier>&amp;</modifier></type> <name>RF</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function><specifier>inline</specifier> <type><name>DB</name></type> <name>RF</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>DB</name></type> <name>x</name></decl>;</decl_stmt> <return>return <expr><call><name>RF</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function_decl><specifier>inline</specifier> <type><name>char</name><modifier>*</modifier></type> <name>RS</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>


<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T0</name><modifier>&amp;</modifier></type> <name>RD</name><parameter_list>(<parameter><decl><type><name>T0</name> <modifier>&amp;</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>T1</name> <modifier>&amp;</modifier></type><name>x1</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RD</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>x0</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T0</name><modifier>&amp;</modifier></type> <name>RD</name><parameter_list>(<parameter><decl><type><name>T0</name> <modifier>&amp;</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>T1</name> <modifier>&amp;</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>T2</name> <modifier>&amp;</modifier></type><name>x2</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RD</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>x0</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>T3</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T0</name><modifier>&amp;</modifier></type> <name>RD</name><parameter_list>(<parameter><decl><type><name>T0</name> <modifier>&amp;</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>T1</name> <modifier>&amp;</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>T2</name> <modifier>&amp;</modifier></type><name>x2</name></decl></parameter>, <parameter><decl><type><name>T3</name> <modifier>&amp;</modifier></type><name>x3</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RD</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>x0</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>T3</name></parameter>, <parameter><type><name>class</name></type> <name>T4</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T0</name><modifier>&amp;</modifier></type> <name>RD</name><parameter_list>(<parameter><decl><type><name>T0</name> <modifier>&amp;</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>T1</name> <modifier>&amp;</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>T2</name> <modifier>&amp;</modifier></type><name>x2</name></decl></parameter>, <parameter><decl><type><name>T3</name> <modifier>&amp;</modifier></type><name>x3</name></decl></parameter>, <parameter><decl><type><name>T4</name> <modifier>&amp;</modifier></type><name>x4</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RD</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>x0</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>T3</name></parameter>, <parameter><type><name>class</name></type> <name>T4</name></parameter>, <parameter><type><name>class</name></type> <name>T5</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T0</name><modifier>&amp;</modifier></type> <name>RD</name><parameter_list>(<parameter><decl><type><name>T0</name> <modifier>&amp;</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>T1</name> <modifier>&amp;</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>T2</name> <modifier>&amp;</modifier></type><name>x2</name></decl></parameter>, <parameter><decl><type><name>T3</name> <modifier>&amp;</modifier></type><name>x3</name></decl></parameter>, <parameter><decl><type><name>T4</name> <modifier>&amp;</modifier></type><name>x4</name></decl></parameter>, <parameter><decl><type><name>T5</name> <modifier>&amp;</modifier></type><name>x5</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RD</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x4</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>x0</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>T3</name></parameter>, <parameter><type><name>class</name></type> <name>T4</name></parameter>, <parameter><type><name>class</name></type> <name>T5</name></parameter>, <parameter><type><name>class</name></type> <name>T6</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T0</name><modifier>&amp;</modifier></type> <name>RD</name><parameter_list>(<parameter><decl><type><name>T0</name> <modifier>&amp;</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><name>T1</name> <modifier>&amp;</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><name>T2</name> <modifier>&amp;</modifier></type><name>x2</name></decl></parameter>, <parameter><decl><type><name>T3</name> <modifier>&amp;</modifier></type><name>x3</name></decl></parameter>, <parameter><decl><type><name>T4</name> <modifier>&amp;</modifier></type><name>x4</name></decl></parameter>, <parameter><decl><type><name>T5</name> <modifier>&amp;</modifier></type><name>x5</name></decl></parameter>, <parameter><decl><type><name>T6</name> <modifier>&amp;</modifier></type><name>x6</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RD</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x4</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x5</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RD</name><argument_list>(<argument><expr><name>x6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>x0</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>OT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name> <modifier>&amp;</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name> <modifier>&amp;</modifier></type><name>x1</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>OT</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>OT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name> <modifier>&amp;</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name> <modifier>&amp;</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name> <modifier>&amp;</modifier></type><name>x2</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>OT</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>T3</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>OT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name> <modifier>&amp;</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name> <modifier>&amp;</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name> <modifier>&amp;</modifier></type><name>x2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T3</name> <modifier>&amp;</modifier></type><name>x3</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>OT</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>T3</name></parameter>, <parameter><type><name>class</name></type> <name>T4</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>OT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name> <modifier>&amp;</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name> <modifier>&amp;</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name> <modifier>&amp;</modifier></type><name>x2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T3</name> <modifier>&amp;</modifier></type><name>x3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T4</name> <modifier>&amp;</modifier></type><name>x4</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>OT</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>T3</name></parameter>, <parameter><type><name>class</name></type> <name>T4</name></parameter>, <parameter><type><name>class</name></type> <name>T5</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>OT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name> <modifier>&amp;</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name> <modifier>&amp;</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name> <modifier>&amp;</modifier></type><name>x2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T3</name> <modifier>&amp;</modifier></type><name>x3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T4</name> <modifier>&amp;</modifier></type><name>x4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T5</name> <modifier>&amp;</modifier></type><name>x5</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>OT</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x4</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T0</name></parameter>, <parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>, <parameter><type><name>class</name></type> <name>T3</name></parameter>, <parameter><type><name>class</name></type> <name>T4</name></parameter>, <parameter><type><name>class</name></type> <name>T5</name></parameter>, <parameter><type><name>class</name></type> <name>T6</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>OT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T0</name> <modifier>&amp;</modifier></type><name>x0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name> <modifier>&amp;</modifier></type><name>x1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name> <modifier>&amp;</modifier></type><name>x2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T3</name> <modifier>&amp;</modifier></type><name>x3</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T4</name> <modifier>&amp;</modifier></type><name>x4</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T5</name> <modifier>&amp;</modifier></type><name>x5</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T6</name> <modifier>&amp;</modifier></type><name>x6</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>OT</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x4</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x5</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>OT</name><argument_list>(<argument><expr><name>x6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>DB</name><modifier>&amp;</modifier></type> <name>RF</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>DB</name><modifier>&amp;</modifier></type> <name>RF</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>DB</name><modifier>&amp;</modifier></type> <name>RF</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>d</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>DB</name><modifier>&amp;</modifier></type> <name>RF</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>e</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>DB</name><modifier>&amp;</modifier></type> <name>RF</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>f</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>DB</name><modifier>&amp;</modifier></type> <name>RF</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>e</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>g</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RF</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RF</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>RS</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RS</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RS</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>RS</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s3</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>RS</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RS</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>RS</name><argument_list>(<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>RST</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>FLC</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name><modifier>&amp;</modifier></type> <name>SRT</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>ALL</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>A</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name><modifier>&amp;</modifier></type> <name>SRT</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>B</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>ALL</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>A</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name><modifier>&amp;</modifier></type> <name>UNQ</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name>unique</name><argument_list>(<argument><expr><call><name>ALL</name><argument_list>(<argument><expr><call><name>SRT</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><call><name><name>A</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>A</name></expr>;</return>}</block></function>

<comment type="line">//}</comment>

<comment type="block" format="doxygen">/** Constant List .. **/</comment> <comment type="line">//{</comment>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dx4</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dy4</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dx8</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><literal type="number">1</literal></expr> , <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dy8</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dxhorse</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">2</literal></expr> , <expr><operator>-</operator><literal type="number">2</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><literal type="number">1</literal></expr> , <expr><literal type="number">1</literal></expr> , <expr><literal type="number">2</literal></expr> , <expr><literal type="number">2</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dyhorse</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr> ,  <expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><literal type="number">2</literal></expr>  , <expr><operator>-</operator><literal type="number">2</literal></expr> , <expr><literal type="number">2</literal></expr> ,<expr><operator>-</operator><literal type="number">2</literal></expr> , <expr><literal type="number">1</literal></expr> ,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//int MOD = 99990001;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>INFF</name> <init>= <expr><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DB</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DB</name></type> <name>OO</name> <init>= <expr><literal type="number">1e15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>DB</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="line">//M_PI;</comment>

<comment type="line">//}</comment>

<comment type="block" format="doxygen">/** Add On .. **/</comment> <comment type="line">//{</comment>
<comment type="line">// &lt;&lt;= '0. Nichi Joo ., //{</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>checkMin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if <condition>(<expr><name>b</name><operator>&lt;</operator><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>checkMax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if <condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>checkMin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>checkMin</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>checkMin</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>checkMax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>checkMax</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>checkMax</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>checkMin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<if>if <condition>(<expr><call><name>c</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>checkMax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<if>if <condition>(<expr><call><name>c</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>max</name><argument_list>(<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>min</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>d</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>max</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>d</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>max</name><argument_list>(<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>sqr</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>*</operator><name>a</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>cub</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>*</operator><name>a</name><operator>*</operator><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>ceil</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>sgn</name><parameter_list>(<parameter><decl><type><name>DB</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <operator>-</operator><name>EPS</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>x</name> <operator>&gt;</operator> <name>EPS</name></expr></else></ternary></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>sgn</name><parameter_list>(<parameter><decl><type><name>DB</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>DB</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<comment type="line">//}</comment>
<comment type="line">// &lt;&lt;= '1. Bitwise Operation ., //{</comment>
<namespace>namespace <name>BO</name><block>{

<function><specifier>inline</specifier> <type><name>bool</name></type> <name>_1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>bool</name><argument_list>(<argument><expr><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>_1</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>bool</name><argument_list>(<argument><expr><name>x</name><operator>&amp;</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>_1</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{<return>return <expr><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>i</name></expr>;</return>}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>odd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>x</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>even</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>!</operator><call><name>odd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>low_bit</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><name>x</name> <operator>&amp;</operator> <operator>-</operator><name>x</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>count_bits</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>__builtin_popcount</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>count_bits</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>__builtin_popcountll</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

}</block></namespace> <using>using <namespace>namespace <name>BO</name>;</namespace></using><comment type="line">//}</comment>
<comment type="line">// &lt;&lt;= '2. Number Theory .,//{</comment>
<namespace>namespace <name>NT</name><block>{
<comment type="line">//inline LL __lcm(LL a, LL b){return a*b/__gcd(a,b);}</comment>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>INC</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt> <if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt> <if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>DEC</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name> <operator>-=</operator> <name>b</name></expr>;</expr_stmt> <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>dff</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name> <operator>-=</operator> <name>b</name></expr>;</expr_stmt> <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name>  <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>a</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>MUL</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>LL</name><operator>)</operator><name>a</name> <operator>*</operator> <name>b</name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>pdt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>LL</name><operator>)</operator><name>a</name> <operator>*</operator> <name>b</name> <operator>%</operator> <name>MOD</name></expr>;</return>}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>sum</name><argument_list>(<argument><expr><call><name>sum</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>sum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>sum</name><argument_list>(<argument><expr><call><name>sum</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sum</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>pdt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>pdt</name><argument_list>(<argument><expr><call><name>pdt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>pdt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>pdt</name><argument_list>(<argument><expr><call><name>pdt</name><argument_list>(<argument><expr><call><name>pdt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>c</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <while>while <condition>(<expr><name>b</name></expr>)</condition><block>{
        <if>if <condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>MUL</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name>MUL</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>c</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>c</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <while>while <condition>(<expr><name>b</name></expr>)</condition><block>{
        <if>if <condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>MUL</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name>MUL</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>c</name></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>T</name></type> <name>c</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <while>while <condition>(<expr><name>b</name></expr>)</condition><block>{
        <if>if <condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr><operator>,</operator> <expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>c</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>_I</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>MOD</name></expr></init></decl>, <decl><type ref="prev"/><name>x1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>x2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>q</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{
        <expr_stmt><expr><name>q</name> <operator>=</operator> <name>a</name> <operator>/</operator> <name>b</name></expr><operator>,</operator> <expr><name>a</name> <operator>%=</operator> <name>b</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><name>x2</name> <operator>+</operator> <name>MOD</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</return></block></then></if>
        <expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><call><name>pdt</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>q</name> <operator>=</operator> <name>b</name> <operator>/</operator> <name>a</name></expr><operator>,</operator> <expr><name>b</name> <operator>%=</operator> <name>a</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><name>x1</name> <operator>+</operator> <name>MOD</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</return></block></then></if>
        <expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><call><name>pdt</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>DIV</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>MUL</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>_I</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>qtt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>pdt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name>_I</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>phi</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><call><name>sqr</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>n</name><operator>%</operator><name>i</name><operator>)</operator></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>qtt</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <do>do<block>{<expr_stmt><expr><name>n</name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt>}</block> while<condition>(<expr><operator>!</operator><operator>(</operator><name>n</name><operator>%</operator><name>i</name><operator>)</operator></expr>)</condition>;</do>
    }</block></then></if></block></for>
    <if>if <condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>DEC</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>qtt</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

}</block></namespace> <using>using <namespace>namespace <name>NT</name>;</namespace></using><comment type="line">//}</comment>
<comment type="line">//}</comment>

<comment type="line">//}</comment>
<comment type="line">//}</comment>

<comment type="block" format="doxygen">/** Algorithm    .. */</comment> <comment type="line">//{</comment>
<comment type="line">// &lt;&lt;= '-. Math .,//{</comment>

<namespace>namespace <name>Math</name><block>{
	<typedef>typedef <type><name>long</name> <name>long</name></type> <name>typec</name>;</typedef>
	<comment type="line" format="doxygen">///Lib functions</comment>
	<function><type><name>typec</name></type> <name>GCD</name><parameter_list>(<parameter><decl><type><name>typec</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>typec</name></type> <name>b</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><call><name>GCD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr>;</return>
	}</block></function>
	<function><type><name>typec</name></type> <name>extendGCD</name><parameter_list>(<parameter><decl><type><name>typec</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>typec</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>typec</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>typec</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>a</name></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>typec</name></type> <name>res</name> <init>= <expr><call><name>extendGCD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>tmp</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <name>tmp</name> <operator>-</operator> <operator>(</operator><name>a</name> <operator>/</operator> <name>b</name><operator>)</operator> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
		<return>return <expr><name>res</name></expr>;</return>
	}</block></function>
	<comment type="line" format="doxygen">///for x^k</comment>
	<function><type><name>typec</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>typec</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>typec</name></type> <name>k</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>typec</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>k</name></expr>)</condition>
		<block>{
			<if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>x</name> <operator>*=</operator> <name>x</name></expr><operator>,</operator> <expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></while>
		<return>return <expr><name>res</name></expr>;</return>
	}</block></function>
	<comment type="line" format="doxygen">///for x^k mod m</comment>
	<function><type><name>typec</name></type> <name>powerMod</name><parameter_list>(<parameter><decl><type><name>typec</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>typec</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>typec</name></type> <name>m</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>typec</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>x</name> <operator>%=</operator> <name>m</name></expr><operator>,</operator> <expr><name>k</name></expr>)</condition>
		<block>{
			<if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>*=</operator> <name>x</name></expr><operator>,</operator> <expr><name>res</name> <operator>%=</operator> <name>m</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>x</name> <operator>*=</operator> <name>x</name></expr><operator>,</operator> <expr><name>k</name> <operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></while>
		<return>return <expr><name>res</name></expr>;</return>
	}</block></function>
	<comment type="block" format="doxygen">/***************************************
	Inverse in mod p^t system
	***************************************/</comment>
	<function><type><name>typec</name></type> <name>inverse</name><parameter_list>(<parameter><decl><type><name>typec</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>typec</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>typec</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>typec</name></type> <name>pt</name> <init>= <expr><call><name>power</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>typec</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	    <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>extendGCD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>x</name> <operator>+=</operator> <name>pt</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return>
	}</block></function>
	<comment type="block" format="doxygen">/***************************************
	Linear congruence theorem
	x = a (mod p)
	x = b (mod q)
	for gcd(p, q) = 1, 0 &lt;= x &lt; pq
	***************************************/</comment>
	<function><type><name>typec</name></type> <name>linearCongruence</name><parameter_list>(<parameter><decl><type><name>typec</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>typec</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>typec</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>typec</name></type> <name>q</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>typec</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>extendGCD</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>b</name> <operator>&lt;</operator> <name>a</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>b</name> <operator>+=</operator> <name>q</name> <operator>/</operator> <name>y</name></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name>x</name> <operator>*=</operator> <name>b</name> <operator>-</operator> <name>a</name></expr><operator>,</operator> <expr><name>x</name> <operator>=</operator> <name>p</name> <operator>*</operator> <name>x</name> <operator>+</operator> <name>a</name></expr><operator>,</operator> <expr><name>x</name> <operator>%=</operator> <name>p</name> <operator>*</operator> <name>q</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>+=</operator> <name>p</name> <operator>*</operator> <name>q</name></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name>x</name></expr>;</return>
	}</block></function>
	<comment type="block" format="doxygen">/***************************************
	prime table
	O(n)
	***************************************/</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>PRIMERANGE</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>prime</name><index>[<expr><name>PRIMERANGE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<function><type><name>int</name></type> <name>getPrime</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>prime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>PRIMERANGE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>PRIMERANGE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>prime</name><index>[<expr><operator>++</operator><name><name>prime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name><name>prime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;=</operator> <name>PRIMERANGE</name> <operator>/</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<expr_stmt><expr><name><name>prime</name><index>[<expr><name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>i</name> <operator>%</operator> <name><name>prime</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			}</block></for>
		}</block></for>
		<return>return <expr><name><name>prime</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
	}</block></function>
	<comment type="block" format="doxygen">/***************************************
	get factor of n
	O(sqrt(n))
	factor[][0] is prime factor
	factor[][1] is factor generated by this prime
	factor[][2] is factor counter

	need: Prime Table
	***************************************/</comment>
	<comment type="line" format="doxygen">///you should init the prime table before</comment>
	<decl_stmt><decl><type><name>int</name></type> <name><name>factor</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>facCnt</name></decl>;</decl_stmt>
	<function><type><name>int</name></type> <name>getFactors</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name>facCnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;=</operator> <name>tmp</name> <operator>/</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>factor</name><index>[<expr><name>facCnt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name><name>factor</name><index>[<expr><name>facCnt</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>tmp</name> <operator>%</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>factor</name><index>[<expr><name>facCnt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
			<while>while<condition>(<expr><name>tmp</name> <operator>%</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block type="pseudo"><expr_stmt><expr><name><name>factor</name><index>[<expr><name>facCnt</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>++</operator></expr><operator>,</operator> <expr><name><name>factor</name><index>[<expr><name>facCnt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><name>tmp</name> <operator>/=</operator> <name><name>prime</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></while>
			<if>if<condition>(<expr><name><name>factor</name><index>[<expr><name>facCnt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>facCnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>tmp</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>factor</name><index>[<expr><name>facCnt</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr><operator>,</operator> <expr><name><name>factor</name><index>[<expr><name>facCnt</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr><operator>,</operator> <expr><name><name>factor</name><index>[<expr><name>facCnt</name><operator>++</operator></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name>facCnt</name></expr>;</return>
	}</block></function>
	<function><type><name>typec</name></type> <name>combinationModP</name><parameter_list>(<parameter><decl><type><name>typec</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>typec</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>typec</name></type> <name>p</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><name>k</name> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>n</name> <operator>-</operator> <name>k</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>k</name></expr>;</expr_stmt></block></then></if>
		<decl_stmt><decl><type><name>typec</name></type> <name>a</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pcnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<while>while<condition>(<expr><name>x</name> <operator>%</operator> <name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>/=</operator> <name>p</name></expr><operator>,</operator> <expr><name>pcnt</name><operator>++</operator></expr>;</expr_stmt></block></while>
			<while>while<condition>(<expr><name>y</name> <operator>%</operator> <name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>y</name> <operator>/=</operator> <name>p</name></expr><operator>,</operator> <expr><name>pcnt</name><operator>--</operator></expr>;</expr_stmt></block></while>
			<expr_stmt><expr><name>x</name> <operator>%=</operator> <name>p</name></expr><operator>,</operator> <expr><name>y</name> <operator>%=</operator> <name>p</name></expr><operator>,</operator> <expr><name>a</name> <operator>*=</operator> <name>x</name></expr><operator>,</operator> <expr><name>b</name> <operator>*=</operator> <name>y</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> <operator>%=</operator> <name>p</name></expr><operator>,</operator> <expr><name>a</name> <operator>%=</operator> <name>p</name></expr>;</expr_stmt>
		}</block></for>
		<if>if<condition>(<expr><name>pcnt</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<expr_stmt><expr><call><name>extendGCD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>+=</operator> <name>p</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>a</name> <operator>*=</operator> <name>x</name></expr><operator>,</operator> <expr><name>a</name> <operator>%=</operator> <name>p</name></expr>;</expr_stmt>
		<return>return <expr><name>a</name></expr>;</return>
	}</block></function>
}</block></namespace><empty_stmt>;</empty_stmt><comment type="line">//using namespace Math;</comment>
<comment type="line">//}</comment>
<comment type="line">// &lt;&lt;= '-. Geo ,.//{</comment>
<namespace>namespace <name>Geo</name><block>{
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>typec</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
    <decl_stmt><decl><type><specifier>const</specifier> <name>typec</name></type> <name>eps</name><init>=<expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>
    <function><type><name>int</name></type> <name>dblcmp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><ternary><condition><expr><name>d</name> <operator>&lt;</operator> <operator>-</operator><name>eps</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>d</name> <operator>&gt;</operator> <name>eps</name></expr></else></ternary></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>sgn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>a</name><operator>&lt;</operator><operator>-</operator><name>eps</name></expr>?</condition><then><expr><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><name>a</name><operator>&gt;</operator><name>eps</name></expr></else></ternary></expr>;</return>}</block></function>
    <function><specifier>inline</specifier> <type><name>double</name></type> <name>sqr</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>x</name><operator>*</operator><name>x</name></expr>;</return>}</block></function>
}</block></namespace><empty_stmt>;</empty_stmt><comment type="line">//using namespace Geo;</comment>
<comment type="line">//}</comment>
<comment type="line">//}</comment>
<comment type="block">/*
namespace IO {
    const int MT = 100 * 1024 * 1024;  /// 10MB è¯·æ³¨æè¾å¥æ°æ®çå¤§å°ï¼ï¼ï¼
    char IO_BUF[MT];
    int IO_PTR, IO_SZ;
    /// è¦è®°å¾æè¿ä¸è¡æ·»å å°mainå½æ°ç¬¬ä¸è¡ï¼ï¼ï¼
    void begin() {
        IO_PTR = 0;
        IO_SZ = fread (IO_BUF, 1, MT, stdin);
    }
    template&lt;typename T&gt;
    inline bool scan_d (T &amp; t) {
        while (IO_PTR &lt; IO_SZ &amp;&amp; IO_BUF[IO_PTR] != '-' &amp;&amp; (IO_BUF[IO_PTR] &lt; '0' || IO_BUF[IO_PTR] &gt; '9'))
            IO_PTR ++;
        if (IO_PTR &gt;= IO_SZ) return false;
        bool sgn = false;
        if (IO_BUF[IO_PTR] == '-') sgn = true, IO_PTR ++;
        for (t = 0; IO_PTR &lt; IO_SZ &amp;&amp; '0' &lt;= IO_BUF[IO_PTR] &amp;&amp; IO_BUF[IO_PTR] &lt;= '9'; IO_PTR ++)
            t = t * 10 + IO_BUF[IO_PTR] - '0';
        if (sgn) t = -t;
        return true;
    }
    inline bool scan_s (char s[]) {
        while (IO_PTR &lt; IO_SZ &amp;&amp; (IO_BUF[IO_PTR] == ' ' || IO_BUF[IO_PTR] == '\n') ) IO_PTR ++;
        if (IO_PTR &gt;= IO_SZ) return false;
        int len = 0;
        while (IO_PTR &lt; IO_SZ &amp;&amp; IO_BUF[IO_PTR] != ' ' &amp;&amp; IO_BUF[IO_PTR] != '\n')
            s[len ++] = IO_BUF[IO_PTR], IO_PTR ++;
        s[len] = '\0';
        return true;
    }
    template&lt;typename T&gt;
    void print(T x) {
        static char s[33], *s1; s1 = s;
        if (!x) *s1++ = '0';
        if (x &lt; 0) putchar('-'), x = -x;
        while(x) *s1++ = (x % 10 + '0'), x /= 10;
        while(s1-- != s) putchar(*s1);
    }
    template&lt;typename T&gt;
    void println(T x) {
        print(x); putchar('\n');
    }
};
*/</comment>
<comment type="block" format="doxygen">/** I/O Accelerator Interface .. **/</comment> <comment type="line">//{</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name><modifier>&amp;</modifier></type> <name>RD</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
    <comment type="line">//cin &gt;&gt; x;</comment>
    <comment type="line">//scanf("%d", &amp;x);</comment>
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt> <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="char">'-'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
    <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="char">'0'</literal> <operator>-</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="char">'0'</literal> <operator>-</operator> <name>c</name></expr>;</expr_stmt></block></for>}</block></then>
    <else>else <block>{<expr_stmt><expr><name>x</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt> <for>for <control>(<init><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</init> <condition><expr><literal type="char">'0'</literal> <operator>&lt;=</operator> <name>c</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></for>}</block></else></if>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>DB</name><modifier>&amp;</modifier></type> <name>RF</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
    <comment type="line">//cin &gt;&gt; x;</comment>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*char t; while ((t=getchar())==' '||t=='\n'); x = t - '0';
    while ((t=getchar())!=' '&amp;&amp;t!='\n'&amp;&amp;t!='.')x*=10,x+=t-'0';
    if (t=='.'){DB l=1; while ((t=getchar())!=' '&amp;&amp;t!='\n')l*=0.1,x += (t-'0')*l;}*/</comment>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>char</name><modifier>*</modifier></type> <name>RS</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{
    <comment type="line">//gets(s);</comment>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>Case</name></decl>;</decl_stmt> <function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>OT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
    <comment type="line">//printf("Case %d: %d\n", ++Case, x);</comment>
    <comment type="line">//printf("%.2lf\n", x);</comment>
    <comment type="line">//printf("%d\n", x);</comment>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
<comment type="line">//}</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>

<comment type="block">/* .................................................................................................................................. */</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>INC</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument> , <argument><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>OT</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>RS</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
