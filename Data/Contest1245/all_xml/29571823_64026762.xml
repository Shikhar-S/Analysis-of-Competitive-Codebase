<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29571823_64026762.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int i=s;i&lt;=t;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PER</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int i=s;i&gt;=t;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREDGE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=fir[x],v=to[i];i;i=nex[i],v=to[i])</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>T</name></type> <name>in</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>T</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>b</name><operator>=</operator><operator>(</operator><name>ch</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <while>while<condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="number">48</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><operator>-</operator><name>ans</name></expr></then><else>:<expr><name>ans</name></expr></else></ternary></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>II</name></cpp:macro> <cpp:value>in&lt;int&gt;()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IL</name></cpp:macro> <cpp:value>in&lt;LL&gt;()</cpp:value></cpp:define>
<comment type="line">//&lt;-----QAQ-----&gt;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>Mx</name><init>=<expr><literal type="number">2005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>INF</name><init>=<expr><name>LLONG_MAX</name><operator>/</operator><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<struct>struct <name>City</name><block>{<public type="default"><decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt><decl_stmt><decl><type><name>LL</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt></public>}</block><decl><name><name>C</name><index>[<expr><name>Mx</name></expr>]</index></name></decl>;</struct>
<function><type><name>LL</name></type> <name>dis</name><parameter_list>(<parameter><decl><type><name>City</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>City</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name><name>std</name><operator>::</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>x</name></name><operator>-</operator><name><name>y</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>+</operator><call><name><name>std</name><operator>::</operator><name>abs</name></name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>y</name></name><operator>-</operator><name><name>y</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<struct>struct <name>Edge</name><block>{<public type="default"><decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt><decl_stmt><decl><type><name>LL</name></type> <name>v</name></decl>;</decl_stmt></public>}</block><decl><name><name>E</name><index>[<expr><name>Mx</name><operator>*</operator><name>Mx</name></expr>]</index></name></decl>;</struct> 
<decl_stmt><decl><type><name>int</name></type> <name>top</name></decl>,<decl><type ref="prev"/><name><name>fa</name><index>[<expr><name>Mx</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type><name>bld</name></decl>,<decl><type ref="prev"/><name>lnk</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>addEdge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>LL</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>E</name><index>[<expr><operator>++</operator><name>top</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>Edge</name><operator>)</operator><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>,<expr><name>v</name></expr>}</block></expr>;</expr_stmt>
}</block></function>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>Edge</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>v</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>v</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>ask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><ternary><condition><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name>x</name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>ask</name><argument_list>(<argument><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>addEdge</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
			<expr_stmt><expr><call><name>addEdge</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><call><name>dis</name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>C</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name><operator>+</operator><name><name>C</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>k</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
	}</block>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><name>E</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>E</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>top</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>sum</name></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>top</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>xx</name><init>=<expr><call><name>ask</name><argument_list>(<argument><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>yy</name><init>=<expr><call><name>ask</name><argument_list>(<argument><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>xx</name><operator>==</operator><name>yy</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name><name>fa</name><index>[<expr><name>xx</name></expr>]</index></name><operator>=</operator><name>yy</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>bld</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>lnk</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>sum</name><operator>==</operator><name>n</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name><name>bld</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>bld</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>bld</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name><name>lnk</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>lnk</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>E</name><index>[<expr><name><name>lnk</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><name><name>E</name><index>[<expr><name><name>lnk</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function></unit>
