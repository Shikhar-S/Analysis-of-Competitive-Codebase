<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619931_64027749.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro> <cpp:value>return</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>i</name></type> <name><name>p</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>t</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>i</name></type> <name>w</name><parameter_list>(<parameter><decl><type><name>i</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>i</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>i</name></type> <name>l</name></decl></parameter>)</parameter_list><block>{
<if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><name>l</name></expr>)</condition><then><block type="pseudo"><decl_stmt><decl><type><name>re</name></type> <name><name>p</name><index>[<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt></block></then></if>
<if>if<condition>(<expr><name>x</name><operator>+</operator><name><name>t</name><index>[<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name>l</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
<decl_stmt><decl><type><name>re</name></type> <name>w</name><argument_list>(<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list><modifier>*</modifier>2+<name>w</name><argument_list>(<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>b</name><operator>)</operator></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></decl>;</decl_stmt>
}</block></function>
<function><type><name>i</name></type> <name>q</name><parameter_list>(<parameter><decl><type><name>i</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>i</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>i</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
<if>if<condition>(<expr><name>y</name><operator>+</operator><name><name>t</name><index>[<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;=</operator><name>r</name></expr>)</condition><then><block type="pseudo"><decl_stmt><decl><type><name>re</name></type> <name><name>p</name><index>[<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt></block></then></if>
<if>if<condition>(<expr><name>y</name><operator>&gt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
<decl_stmt><decl><type><name>re</name></type> <name>q</name><argument_list>(<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list><modifier>*</modifier>2+<name>q</name><argument_list>(<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>b</name><operator>)</operator></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></decl>;</decl_stmt>
}</block></function>
<function><type><name>i</name></type> <name>a</name><parameter_list>(<parameter><decl><type><name>i</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>i</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>i</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>i</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>i</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
<if>if<condition>(<expr><name>x</name><operator>+</operator><name><name>t</name><index>[<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;</operator><name>l</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><name>y</name><operator>&gt;</operator><name>r</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>re</name> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><decl_stmt><decl><type><name>re</name></type> <name>q</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></decl>;</decl_stmt></block></then></if>
<if>if<condition>(<expr><name>y</name><operator>+</operator><name><name>t</name><index>[<expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>&lt;=</operator><name>r</name></expr>)</condition><then> <block type="pseudo"><decl_stmt><decl><type><name>re</name></type> <name>w</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>l</name></expr></argument>)</argument_list></decl>;</decl_stmt></block></then></if>
<return>return <expr><call><name>a</name><argument_list>(<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>a</name><argument_list>(<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>b</name><operator>)</operator></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>a</name><argument_list>(<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>b</name><operator>)</operator></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><name>main</name><parameter_list>()</parameter_list><block>{
<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>i</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">50</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>p</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>j</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
<decl_stmt><decl><type><name>i</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name></expr>;</expr_stmt>
<decl_stmt><decl><type><name>i</name></type> <name>s</name><init>=<expr><operator>(</operator><ternary><condition><expr><name>l</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>i</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">30</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>s</name><operator>+=</operator><call><name>a</name><argument_list>(<argument><expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>j</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt></block></for>
<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>s</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></while>
}</block></function>
</unit>
