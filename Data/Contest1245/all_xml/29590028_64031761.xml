<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29590028_64031761.cpp"><comment type="line">//besmellah</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>h</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>p</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name><name>E</name><index>[<expr><literal type="number">150</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>G</name><index>[<expr><literal type="number">150</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>P</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
	<return>return <expr><name><name>p</name><index>[<expr><call><name>P</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name> <operator>--</operator></expr></incr>)</control><block>{
				<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>h</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">9</literal> <operator>-</operator> <name>j</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></for>
		}</block></then>
		<else>else<block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control><block>{
				<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>h</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>j</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">9</literal> <operator>-</operator> <name>j</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">99</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>G</name><index>[<expr><literal type="number">99</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">98</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>G</name><index>[<expr><literal type="number">98</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">97</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>G</name><index>[<expr><literal type="number">97</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">96</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>G</name><index>[<expr><literal type="number">96</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">95</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>G</name><index>[<expr><literal type="number">95</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">94</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>G</name><index>[<expr><literal type="number">94</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">93</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>--</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>R</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name>R</name> <operator>+=</operator> <name><name>E</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.00</literal> <operator>+</operator> <literal type="number">1.00</literal> <operator>/</operator> <literal type="number">6.00</literal> <operator>*</operator> <name>R</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><call><name>P</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>G</name><index>[<expr><name>q</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></function>
</unit>
