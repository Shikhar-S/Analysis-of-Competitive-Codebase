<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29588846_64012369.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>

<struct>struct <name>UnionFind</name> <block>{<public type="default">
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>data</name></decl>;</decl_stmt>

	<constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><call><name><name>data</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>

	<function><type><name>bool</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>y</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><literal type="boolean">false</literal><operator>)</operator></expr>;</return></block></then></if>
		<if>if <condition>(<expr><name><name>data</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>data</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>data</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>data</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><literal type="boolean">true</literal><operator>)</operator></expr>;</return>
	}</block></function>

	<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name><name>data</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><name>k</name><operator>)</operator></expr>;</return></block></then></if>
		<return>return <expr><operator>(</operator><name><name>data</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
	}</block></function>

	<function><type><name>int</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>(</operator><operator>-</operator><name><name>data</name><index>[<expr><call><name>find</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<struct><template>template<parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template>
struct <name>edge</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>src</name></decl>, <decl><type ref="prev"/><name>to</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>T</name></type> <name>cost</name></decl>;</decl_stmt>

	<constructor><name>edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>cost</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>src</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call>, <call><name>to</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call>, <call><name>cost</name><argument_list>(<argument><expr><name>cost</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>

	<constructor><name>edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>cost</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>src</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call>, <call><name>to</name><argument_list>(<argument><expr><name>to</name></expr></argument>)</argument_list></call>, <call><name>cost</name><argument_list>(<argument><expr><name>cost</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>

	<function type="operator"><type><name>edge</name><modifier>&amp;</modifier></type> <name>operator<name>=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>to</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
	}</block></function>

	<function type="operator"><name>operator <name>int</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>to</name></expr>;</return> }</block></function>
</public>}</block>;</struct>

<using><template>template<parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template>
using <name>Edges</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>edge</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using><template>template<parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template>
using <name>WeightedGraph</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>Edges</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using>using <name>UnWeightedGraph</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using><template>template<parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template>
using <name>Matrix</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type></init>;</using>

<decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>cities</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>C</name></decl>, <decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>plants</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>conns</name></decl>;</decl_stmt>

<function><template>template<parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template>
<type><name>T</name></type> <name>kruskal</name><parameter_list>(<parameter><decl><type><name><name>Edges</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name><modifier>&amp;</modifier></type> <name>edges</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>V</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>(<argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>(<argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>edge</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>edge</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>cost</name></name><operator>)</operator></expr>;</return>
	}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>UnionFind</name></type> <name>tree</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>T</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>e</name> <operator>:</operator> <name>edges</name></expr></init>)</control> <block>{
		<if>if <condition>(<expr><call><name><name>tree</name><operator>.</operator><name>unite</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>src</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name><name>e</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>src</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>plants</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<expr_stmt><expr><call><name><name>conns</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pll</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>src</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
	}</block></for>
	<return>return <expr><operator>(</operator><name>ret</name><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cities</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>cities</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;&gt;</operator> <name><name>cities</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name><name>C</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>K</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>C</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>K</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name><name>Edges</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>G</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name><name>G</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><name>n</name></expr>,<expr><name><name>C</name><index>[<expr><name>n</name></expr>]</index></name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>s</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>s</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>dis</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>cities</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>cities</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>cities</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <name><name>cities</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>G</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{ <expr><name>s</name></expr>,<expr><name>t</name></expr>,<expr><name>dis</name> <operator>*</operator> <operator>(</operator><name><name>K</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name><name>K</name><index>[<expr><name>t</name></expr>]</index></name><operator>)</operator></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>kruskal</name><argument_list>(<argument><expr><name>G</name></expr></argument>, <argument><expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>plants</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>p</name> <range>: <expr><name>plants</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>p</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>conns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>pll</name></type> <name>c</name> <range>: <expr><name>conns</name></expr></range></decl></init>)</control> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>c</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
