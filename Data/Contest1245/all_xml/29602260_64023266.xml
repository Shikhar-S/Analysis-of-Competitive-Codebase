<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29602260_64023266.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,b,sizeof a);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &lt;= b; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &gt;= b; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0);cin.tie(0);cout.tie(0)</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>db</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2000</literal><operator>*</operator><literal type="number">2000</literal><operator>+</operator><literal type="number">5000</literal></expr></init></decl>;</decl_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>void</name></type> <name>dbg</name><parameter_list>()</parameter_list> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>A</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>dbg</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>A</name><modifier>...</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><name>x</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logs</name><parameter_list>(<parameter><type><name>x</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{cout &lt;&lt; #x &lt;&lt; " -&gt; "; dbg(x);}</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>tot</name></decl>,<decl><type ref="prev"/><name><name>fa</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>light</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>X</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Y</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>v2</name></decl>;</decl_stmt>
<struct>struct <name>Node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>w</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><name>Node</name></type> <name>xx</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
		<return>return <expr><name>w</name> <operator>&lt;</operator> <name><name>xx</name><operator>.</operator><name>w</name></name></expr>;</return>
	}</block></function>
</public>}</block><decl><name><name>e</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</struct>

<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><ternary><condition><expr><name>x</name> <operator>==</operator> <name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><operator>(</operator><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr><operator>,</operator> <expr><name><name>light</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>i</name></expr>,<expr><name>i</name></expr>,<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>w</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>X</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>Y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>w</name> <operator>*=</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>,<expr><name>w</name></expr>}</block></expr>;</expr_stmt>
		}</block>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>e</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>tot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>tot</argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>hp</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><operator>!</operator><name><name>light</name><index>[<expr><name>hp</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>light</name><index>[<expr><name>hp</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then>
		<else>else<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>fx</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>fy</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>fx</name> <operator>!=</operator> <name>fy</name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><operator>!</operator><name><name>light</name><index>[<expr><name>fx</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>light</name><index>[<expr><name>fy</name></expr>]</index></name></expr>)</condition><then><block>{
					<expr_stmt><expr><name><name>fa</name><index>[<expr><name>fx</name></expr>]</index></name> <operator>=</operator> <name>fy</name></expr>;</expr_stmt>
					<if>if<condition>(<expr><name><name>light</name><index>[<expr><name>fx</name></expr>]</index></name> <operator>||</operator> <name><name>light</name><index>[<expr><name>fy</name></expr>]</index></name></expr>)</condition><then><block>{
						<expr_stmt><expr><name>fx</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>fx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>light</name><index>[<expr><name>fx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></else></if>
	}</block>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>s1</name> <init>= <expr><call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>s2</name> <init>= <expr><call><name><name>v2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>s1-<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%c"</literal></expr></argument>,<argument><expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">" \n"</literal><index>[<expr><name>i</name><operator>==</operator><name>s1</name><operator>-</operator><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>s2-<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
