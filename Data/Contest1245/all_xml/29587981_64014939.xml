<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29587981_64014939.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>base</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>d</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>Fibo</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>base</name></expr>;</expr_stmt></block></for>
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Fibo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>ok</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>h</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>h</name><operator>&lt;</operator><name>n</name></expr>)</condition>
    <block>{
        <comment type="line">//cout&lt;&lt;h&lt;&lt;endl;</comment>
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>h</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>h</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
        <if>if <condition>(<expr><name>h</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>h</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>h</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>h</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal><operator>)</operator></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>d</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <while>while <condition>(<expr><name>h</name><operator>&lt;</operator><name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>h</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>h</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{ <expr_stmt><expr><operator>++</operator><name><name>d</name><index>[<expr><name>cnt</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><operator>++</operator><name>h</name></expr>;</expr_stmt>}</block></while>
            }</block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>h</name></expr>;</expr_stmt></block></else></if>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>h</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>}</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>cnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>%</operator><name>base</name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
}</block></function></unit>
