<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618620_64004789.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dump.hpp"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&lt;(b);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(b)-1;i&gt;=(a);i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>begin(c),end(c)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> sizeof<operator>(</operator><name>long</name> <name>long</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0x3f3f3f3f3f3f3f3fLL</literal></expr> </then><else>: <expr><literal type="number">0x3f3f3f3f</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>gen_v</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name> <modifier>...</modifier></type><name>Ts</name></parameter>&gt;</parameter_list></template>
<type><name>auto</name></type> <name>gen_v</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Ts</name><modifier>...</modifier></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><decltype>decltype<argument_list>(<argument><expr><call><name><name>gen_v</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ts</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decltype></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><call><name><name>gen_v</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>ts</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template>
<type><name><typename>typename</typename> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_class</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type>
<name>fill_v</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>V</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>t</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template>
<type><name><typename>typename</typename> <name><name>enable_if</name><argument_list type="generic">&lt;<argument><expr><name><name><name>is_class</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></type>
<name>fill_v</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>V</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>e</name> <operator>:</operator> <name>t</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name>fill_v</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> }</block></function>

<struct><template>template<parameter_list>&lt;<parameter><type><name>int</name></type> <name>MOD</name></parameter>&gt;</parameter_list></template>
struct <name>ModInt</name> <block>{<public type="default">
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>int</name></type> <name>kMod</name> <init>= <expr><name>MOD</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>;</decl_stmt>
	<constructor><name>ModInt</name><parameter_list>()</parameter_list> <member_init_list>:<call><name>x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
	<constructor><name>ModInt</name><parameter_list>(<parameter><decl><type><name>signed</name></type> <name>x_</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>x_</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt> <if>if <condition>(<expr><name>x_</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x_</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x_</name></expr>;</expr_stmt> }</block></constructor>
	<constructor><name>ModInt</name><parameter_list>(<parameter><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>x_</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>x_</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt> <if>if <condition>(<expr><name>x_</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x_</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x_</name></expr>;</expr_stmt> }</block></constructor>
	<function><type><name>int</name></type> <name>get</name><parameter_list>()</parameter_list><specifier>const</specifier> <block>{ <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><name>x</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><name>ModInt</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>+=</operator> <name><name>m</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><name>ModInt</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><operator>(</operator><name>x</name> <operator>+=</operator> <name>MOD</name> <operator>-</operator> <name><name>m</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><name>ModInt</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>long</name> <name>long</name><operator>)</operator><name>x</name><operator>*</operator><name><name>m</name><operator>.</operator><name>x</name></name><operator>%</operator><name>MOD</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><name>ModInt</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>*=</operator> <call><name><name>m</name><operator>.</operator><name>inverse</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
	<function type="operator"><type><name>ModInt</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>ModInt</name></type> <name>m</name></decl></parameter>)</parameter_list><specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>m</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>ModInt</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>ModInt</name></type> <name>m</name></decl></parameter>)</parameter_list><specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>m</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>ModInt</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>ModInt</name></type> <name>m</name></decl></parameter>)</parameter_list><specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>m</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>ModInt</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>ModInt</name></type> <name>m</name></decl></parameter>)</parameter_list><specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>m</name></expr>;</return> }</block></function>
	<function type="operator"><type><name>ModInt</name></type> <name>operator<name>-</name></name><parameter_list>()</parameter_list><specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><name>MOD</name> <operator>-</operator> <operator>(</operator><name>signed</name><operator>)</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><name>ModInt</name></type> <name>m</name></decl></parameter>)</parameter_list><specifier>const</specifier> <block>{ <return>return <expr><name>x</name> <operator>==</operator> <name><name>m</name><operator>.</operator><name>x</name></name></expr>;</return> }</block></function>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><name>ModInt</name></type> <name>m</name></decl></parameter>)</parameter_list><specifier>const</specifier> <block>{ <return>return <expr><name>x</name> <operator>!=</operator> <name><name>m</name><operator>.</operator><name>x</name></name></expr>;</return> }</block></function>
	<function><type><name>ModInt</name></type> <name>inverse</name><parameter_list>()</parameter_list><specifier>const</specifier> <block>{
		<decl_stmt><decl><type><name>signed</name></type> <name>a</name> <init>= <expr><name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>MOD</name></expr></init></decl>, <decl><type ref="prev"/><name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{
			<decl_stmt><decl><type><name>signed</name></type> <name>t</name> <init>= <expr><name>a</name> <operator>/</operator> <name>b</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>a</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>u</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>u</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
		<return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
</public>}</block>;</struct>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>int</name></type> <name>MOD</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>ModInt</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>m</name><operator>.</operator><name>x</name></name></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>int</name></type> <name>MOD</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name> <modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name><name>ModInt</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>m</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>signed</name> <name>long</name> <name>long</name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt> <expr_stmt><expr><name>m</name> <operator>=</operator> <call><name><name>ModInt</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>is</name></expr>;</return> }</block></function><empty_stmt>;</empty_stmt>

<function><template>template<parameter_list>&lt;<parameter><type><name>int</name></type> <name>MOD</name></parameter>&gt;</parameter_list></template>
<type><name><name>ModInt</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name><name>ModInt</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name><name>ModInt</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name></type> <name>r</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>k</name></expr>)</condition> <block>{
		<if>if <condition>(<expr><name>k</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>r</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>r</name></expr>;</return>
}</block></function>

<using>using <name>mint</name> <init>= <type><name><name>ModInt</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name></type></init>;</using>


<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mint</name></expr></argument>&gt;</argument_list></name></type> <name>dp</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>count</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>count</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></then>
	<else>else <block>{
		<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
			<if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then>
			<elseif>else <if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if></elseif></if>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></else></if>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
