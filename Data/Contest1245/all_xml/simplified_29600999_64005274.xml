comment type line comment type block include directive file typedef type name name name typedef type name name name using namespace name define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name parameter_list parameter type modifier value function type operator template parameter_list parameter type name name parameter type name name type name modifier name name parameter_list parameter decl type name modifier name parameter decl type name name argument_list type generic argument expr name argument expr name specifier modifier name block expr_stmt expr name operator literal type char operator name name operator name operator literal type string operator name name operator name operator literal type char return expr name function type operator template parameter_list parameter type name name type name modifier name name parameter_list parameter decl type name modifier name parameter decl type name name argument_list type generic argument expr name specifier modifier name block decl_stmt decl type name name init expr call name name operator name argument_list for control init decl type name name init expr literal type number condition expr name operator name operator literal type number incr expr name operator block type pseudo expr_stmt expr name operator name name index expr name operator literal type char if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name name index expr name operator literal type number return expr name function template parameter_list parameter type name name type name name parameter_list parameter decl type specifier name modifier name parameter decl type name modifier name block expr_stmt expr name operator name operator literal type string operator name operator name function template parameter_list parameter type name name parameter type name modifier name type name name parameter_list parameter decl type specifier name modifier name parameter decl type name modifier name parameter decl type name modifier modifier name block decl_stmt decl type specifier name modifier name init expr call name argument_list argument expr name operator literal type number argument expr literal type char expr_stmt expr call name name operator name argument_list argument expr name argument expr name operator name operator literal type string operator name operator literal type string expr_stmt expr call name argument_list argument expr name operator literal type number argument expr name operator define directive macro name value decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name name index expr name function type name name parameter_list block decl_stmt decl type name name name expr_stmt expr name operator name decl_stmt decl type name name init expr call name name operator name argument_list expr_stmt expr name name index expr literal type number operator literal type number expr_stmt expr name name index expr literal type number operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr name name index expr name operator operator name name index expr name operator literal type number operator name name index expr name operator literal type number operator operator name decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr literal type number if condition expr name name index expr literal type number operator literal type char operator name name index expr literal type number operator literal type char then block expr_stmt expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator literal type char operator name name index expr name operator literal type char then block expr_stmt expr name operator literal type number if condition expr name name index expr name operator name name index expr name operator literal type number then block expr_stmt expr name operator elseif if condition expr name name index expr name operator literal type number operator literal type char operator name name index expr name operator literal type number operator literal type char then block expr_stmt expr name operator operator name operator name name index expr name operator operator name expr_stmt expr name operator literal type number else block expr_stmt expr name operator literal type number if condition expr call name name operator name argument_list operator literal type char operator call name name operator name argument_list operator literal type char then block expr_stmt expr name operator operator name operator name name index expr name operator operator name if condition expr name then block expr_stmt expr name operator literal type number operator name else block expr_stmt expr name operator name operator name 
