<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29566299_64011364.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>w</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>w</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>br</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name> <range>: <expr><name>w</name></expr></range></decl></init>)</control> <block>{
      <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>br</name><operator>++</operator></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>bp</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
      <else>else
        <block type="pseudo"><expr_stmt><expr><name>bs</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>wr</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>wp</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ws</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name>wr</name> <operator>+</operator> <name>wp</name> <operator>+</operator> <name>ws</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>can</name> <init>= <expr><name>cnt</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>can</name></expr> ?</condition><then> <expr><literal type="string">"YES"</literal></expr> </then><else>: <expr><literal type="string">"NO"</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>can</name></expr>)</condition><then> <block>{
      <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>c</name> <operator>:</operator> <name>w</name></expr></init>)</control> <block>{
        <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>wp</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>wp</name><operator>--</operator></expr>;</expr_stmt>
          }</block></then> <elseif>else <if>if <condition>(<expr><name>wr</name> <operator>!=</operator> <name>r</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
          }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
          }</block></else></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>ws</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>ws</name><operator>--</operator></expr>;</expr_stmt>
          }</block></then> <elseif>else <if>if <condition>(<expr><name>wr</name> <operator>!=</operator> <name>r</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
          }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
          }</block></else></if>
        }</block></then></if></elseif> <else>else <block>{
          <if>if <condition>(<expr><name>wr</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>wr</name><operator>--</operator></expr>;</expr_stmt>
          }</block></then> <elseif>else <if>if <condition>(<expr><name>ws</name> <operator>!=</operator> <name>s</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
          }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
          }</block></else></if>
        }</block></else></if>
      }</block></for>
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>w</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></then></if>
  }</block></while>
}</block></function></unit>
