<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29592403_64007652.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdio.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stdlib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&lt;(y)?(x):(y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&gt;(y)?(x):(y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;0?-(a):(a))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>LLONG</name> <init>= <expr><literal type="number">9223372036854775807</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">250000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">0.0001</literal></expr></init></decl>;</decl_stmt>

<comment type="line">//std::vector&lt;std::vector&lt;int&gt;&gt; v;</comment>
<function><type><name>void</name></type> <name>mult22</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name><name>matrres</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name><name>matrmult</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>mod</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>tmatr</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>tmatr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>matrres</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>matrmult</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name> <operator>+</operator> <operator>(</operator><name><name>matrres</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>matrmult</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmatr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>matrres</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>matrmult</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name> <operator>+</operator> <operator>(</operator><name><name>matrres</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>matrmult</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmatr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>matrres</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>matrmult</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name> <operator>+</operator> <operator>(</operator><name><name>matrres</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>matrmult</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmatr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>matrres</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>matrmult</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name> <operator>+</operator> <operator>(</operator><name><name>matrres</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>matrmult</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>matrres</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tmatr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>matrres</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tmatr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>matrres</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tmatr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>matrres</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tmatr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>fibo</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>mod</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>matr</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>matr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>matr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>matr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>matr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>multmatr</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>multmatr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>multmatr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>multmatr</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>multmatr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>mult22</name><argument_list>(<argument><expr><name>matr</name></expr></argument>, <argument><expr><name>multmatr</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>mult22</name><argument_list>(<argument><expr><name>multmatr</name></expr></argument>, <argument><expr><name>multmatr</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return<expr><operator>(</operator><name><name>matr</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>myNpow</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>mod</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>multi</name> <init>= <expr><name>a</name> <operator>%</operator> <name>mod</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>res</name> <operator>*=</operator> <name>multi</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>res</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>multi</name> <operator>*=</operator> <name>multi</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>multi</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>issqr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>sqrt</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name>t</name> <operator>*</operator> <name>t</name><operator>)</operator> <operator>==</operator> <name>k</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>multNN</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name><modifier>*</modifier></type> <name>matrres</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name><modifier>*</modifier></type> <name>matrmult</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>mod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name><modifier>*</modifier></type> <name>tmatr</name> <init>= <expr><operator>(</operator><name>long</name> <name>long</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <name>n</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>tmatr</name><index>[<expr><name>i</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<expr_stmt><expr><name><name>tmatr</name><index>[<expr><name>i</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>matrres</name><index>[<expr><name>i</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>k</name></expr>]</index></name> <operator>*</operator> <name><name>matrmult</name><index>[<expr><name>k</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tmatr</name><index>[<expr><name>i</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
			}</block></for>
		}</block></for></block></for>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>matrres</name><index>[<expr><name>i</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>tmatr</name><index>[<expr><name>i</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmatr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>matrPOW</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name><modifier>*</modifier></type> <name>matrres</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>pow</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>mod</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name><modifier>*</modifier></type> <name>multmatr</name> <init>= <expr><operator>(</operator><name>long</name> <name>long</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <name>n</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>multmatr</name><index>[<expr><name>i</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>matrres</name><index>[<expr><name>i</name> <operator>*</operator> <name>n</name> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
	<expr_stmt><expr><name>pow</name> <operator>=</operator> <name>pow</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>pow</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><name>pow</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>multNN</name><argument_list>(<argument><expr><name>matrres</name></expr></argument>, <argument><expr><name>multmatr</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>multNN</name><argument_list>(<argument><expr><name>multmatr</name></expr></argument>, <argument><expr><name>multmatr</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>pow</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<function><type><name>double</name></type> <name>calcdet33</name><parameter_list>(<parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>matr</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>matr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>matr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>matr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>matr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>matr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>matr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>matr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>matr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>matr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>-=</operator> <name><name>matr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>matr</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>matr</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>-=</operator> <name><name>matr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>matr</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>matr</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>res</name> <operator>-=</operator> <name><name>matr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>matr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>matr</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<class>class <name>Longnum</name>
<block>{<private type="default">
</private><public>public:

	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>long</name> <name>long</name></expr></argument> &gt;</argument_list></name></type> <name>c</name></decl>;</decl_stmt>

	<constructor><name>Longnum</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></constructor>
	<constructor><name>Longnum</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></constructor>

	<destructor><name>~<name>Longnum</name></name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>shrink_to_fit</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></destructor>

	<function><type><name>int</name></type> <name>slongsub</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>temp</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>carry</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>carry</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>carry</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>carry</name></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>slongbase</name></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<if>if <condition>(<expr><name>carry</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then>
		<else>else
		<block>{
			<while>while <condition>(<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>a</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block type="pseudo"><expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
			<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></function>

	<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>carry</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>carry</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>b</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>carry</name> <operator>=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <name>slongbase</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>carry</name></expr>)</condition><then>  <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>slongbase</name></expr>;</expr_stmt></block></then></if>
		}</block></for>
	}</block></function>

	<function><type><name>void</name></type> <name>mult</name><parameter_list>( <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>carry</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cur</name> <init>= <expr><name>carry</name> <operator>+</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><name>b</name> <operator>%</operator> <name>slongbase</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>cur</name> <operator>/</operator> <name>slongbase</name> <operator>+</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>b</name> <operator>/</operator> <name>slongbase</name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>int</name><argument_list>(<argument><expr><name>cur</name> <operator>%</operator> <name>slongbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<while>while <condition>(<expr><call><name><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>c</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	}</block></function>

	<function><type><name>void</name></type> <name>longmult</name><parameter_list>(<parameter><decl><type><name>Longnum</name></type> <name>b</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>Longnum</name></type> <name>n</name><argument_list>(<argument><expr><call><name><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>b</name><operator>.</operator><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

		<for>for <control>(<init><decl><type><name>size_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>b</name><operator>.</operator><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name>carry</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cur</name> <init>= <expr><name><name>n</name><operator>.</operator><name>c</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>b</name><operator>.</operator><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name><name>b</name><operator>.</operator><name>c</name><index>[<expr><name>j</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>carry</name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>n</name><operator>.</operator><name>c</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <call><name>int</name><argument_list>(<argument><expr><name>cur</name> <operator>%</operator> <name>slongbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>carry</name> <operator>=</operator> <call><name>int</name><argument_list>(<argument><expr><name>cur</name> <operator>/</operator> <name>slongbase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for></block></for>
		<while>while <condition>(<expr><call><name><name>n</name><operator>.</operator><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>n</name><operator>.</operator><name>c</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><call><name><name>n</name><operator>.</operator><name>c</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>n</name><operator>.</operator><name>c</name></name></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>int</name></type> <name>slongcomp</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>(</operator><ternary><condition><expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block></then>
		<else>else
		<block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
				<block type="pseudo"><if>if <condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><return>return <expr><operator>(</operator><ternary><condition><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return></block></then></if></block></for>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></else></if>
	}</block></function>

	<comment type="block">/*void slongdel(vector&lt;int&gt;&amp; b)
	{
		vector&lt;int&gt; temp, temp2;
		vector&lt;int&gt; res;
		for (int i = 0; i &lt; c.size() - b.size(); i++)
		{
			temp.push_back(0);
			res.push_back(0);
		}
		res.push_back(0);
		for (int i = 0; i &lt; b.size(); i++)
			temp.push_back(b[i]);

		for (int i = c.size() - b.size(); i &gt;= 0; i--)
		{
			temp2 = temp;
			res[i] = (c[c.size() - 1] / temp[temp.size() - 1]);
			slongmult(temp, c[c.size() - 1] / temp[temp.size() - 1]);
			if (slongcomp(temp, c) &gt; 0)
			{
				slongsub(temp, temp2);
				res[i]--;
			}
			slongsub(c, temp);
			temp.clear();
			for (int j = 1; j &lt; temp2.size(); j++)
				temp.push_back(temp2[i + 1]);
		}
		if (c.size() &gt; 1 || c[0] &gt; 0)
		{
			res[0] += 1;
			int carry = res[0] / slongbase;
			int i = 0;
			while (carry)
			{
				res[i] %= slongbase;
				i++;
				if (i == res.size())
					res.push_back(0);
				res[i] += carry;
				carry = res[i] / slongbase;
			}
		}
		c = res;
		return;
	}*/</comment>

	<function><type><name>void</name></type> <name>slongprint</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lldd"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name><name>c</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name><name>c</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>c</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%09lld"</literal></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>

</public><private>private:

	<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>slongbase</name> <init>= <expr><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
</private>}</block>;</class>

<class>class <name>SeTree</name>
<block>{<private type="default">
</private><public>public:
	<constructor><name>SeTree</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
	<destructor><name>~<name>SeTree</name></name><parameter_list>()</parameter_list> <block>{}</block></destructor>
	<function><type><name>void</name></type> <name>build</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type><name>inp</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>vup</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>l</name> <operator>!=</operator> <name>r</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>inp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>build</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>inp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>a</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>v</name><index>[<expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>m</name> <operator>-</operator> <name>l</name><operator>)</operator><operator>)</operator> <operator>/</operator> <call>(<name>double</name>)<argument_list>(<argument><expr><name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <call>(<name>double</name>)<argument_list>(<argument><expr><name><name>inp</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></function>
	<function><type><name>void</name></type>  <name>update</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rr</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><operator>(</operator><name>lr</name> <operator>==</operator> <name>l</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>rr</name> <operator>==</operator> <name>r</name><operator>)</operator></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vup</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name><name>vup</name><index>[<expr><name>a</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>v</name><index>[<expr><name>a</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>vup</name><index>[<expr><name>a</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>v</name><index>[<expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>vup</name><index>[<expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>vup</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><name>rr</name> <operator>&lt;</operator> <name>m</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<if>if <condition>(<expr><name>lr</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>update</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></else></if>
			<expr_stmt><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>v</name><index>[<expr><name>a</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name><name>v</name><index>[<expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>m</name> <operator>-</operator> <name>l</name><operator>)</operator><operator>)</operator> <operator>/</operator> <call>(<name>double</name>)<argument_list>(<argument><expr><name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
	<function><type><name>double</name></type> <name>getav</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rr</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><name><name>vup</name><index>[<expr><name>a</name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name>l</name> <operator>==</operator> <name>lr</name> <operator>&amp;&amp;</operator> <name>r</name> <operator>==</operator> <name>rr</name><operator>)</operator></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</return></block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>rr</name> <operator>&lt;</operator> <name>m</name></expr>)</condition><then>
			<block>{
				<return>return <expr><call><name>getav</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else>else
			<block>{
				<if>if <condition>(<expr><name>lr</name> <operator>&gt;=</operator> <name>m</name></expr>)</condition><then>
					<block type="pseudo"><return>return <expr><call><name>getav</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
				<else>else
				<block>{
					<return>return <expr><operator>(</operator><call><name>getav</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>rr</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>rr</name> <operator>-</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <call><name>getav</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lr</name></expr></argument>, <argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>m</name> <operator>-</operator> <name>lr</name><operator>)</operator><operator>)</operator> <operator>/</operator> <call>(<name>double</name>)<argument_list>(<argument><expr><name>rr</name> <operator>-</operator> <name>lr</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
				}</block></else></if>
			}</block></else></if>
		}</block></else></if>
	}</block></function>
	<function><type><name>double</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><name><name>vup</name><index>[<expr><name>a</name></expr>]</index></name><operator>||</operator><operator>(</operator><name>l</name><operator>==</operator><name>r</name><operator>)</operator></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</return></block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>l</name> <operator>+</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>)</condition><then>
			<block>{
				<return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></then>
			<else>else
			<block>{
				<return>return <expr><call><name>get</name><argument_list>(<argument><expr><name>a</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
			}</block></else></if>
		}</block></else></if>
	}</block></function>

</public><private>private:

	<decl_stmt><decl><type><name>bool</name></type> <name><name>vup</name><index>[<expr><name>N</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name><name>v</name><index>[<expr><name>N</name> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
</private>}</block>;</class>

<function><type><name>long</name> <name>long</name></type>  <name>gcd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>a</name></expr></else></ternary></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>eratosfen</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>erat</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>sr</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>erat</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>erat</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>erat</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>erat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>i</name><operator>*</operator><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>i</name> <operator>*</operator> <name>i</name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>erat</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for></block></for>
}</block></function>


<function><type><name>long</name> <name>long</name></type> <name>findp</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>r</name> <init>= <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><call><name>sqrt</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l</name> <init>= <expr><name>r</name> <operator>-</operator> <literal type="number">2000</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>l</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	<while>while <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>l</name></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>m</name> <init>= <expr><operator>(</operator><name>r</name> <operator>+</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>m</name> <operator>*</operator> <name>m</name> <operator>&gt;</operator> <name>a</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>m</name> <operator>-</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<elseif>else
			<if>if <condition>(<expr><name>m</name> <operator>*</operator> <name>m</name> <operator>==</operator> <name>a</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<return>return <expr><name>m</name></expr>;</return>
			}</block></then></if></elseif>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>l</name> <operator>=</operator> <name>m</name> <operator>+</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<if>if <condition>(<expr><name>l</name> <operator>*</operator> <name>l</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <name>l</name> <operator>*</operator> <name>l</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>
	<return>return <expr><name>l</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>popcount32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m1</name> <init>= <expr><literal type="number">0x55555555</literal></expr></init></decl>;</decl_stmt> <comment type="line">//binary: 0101...</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m2</name> <init>= <expr><literal type="number">0x33333333</literal></expr></init></decl>;</decl_stmt> <comment type="line">//binary: 00110011..</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m4</name> <init>= <expr><literal type="number">0x0f0f0f0f</literal></expr></init></decl>;</decl_stmt> <comment type="line">//binary:  4 zeros,  4 ones ...</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m8</name> <init>= <expr><literal type="number">0x00ff00ff</literal></expr></init></decl>;</decl_stmt> <comment type="line">//binary:  8 zeros,  8 ones ...</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>m16</name> <init>= <expr><literal type="number">0x0000ffff</literal></expr></init></decl>;</decl_stmt> <comment type="line">//binary: 16 zeros, 16 ones ...</comment>
	<expr_stmt><expr><name>x</name> <operator>-=</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>m1</name></expr>;</expr_stmt>             <comment type="line">//put count of each 2 bits into those 2 bits</comment>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <name>m2</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <name>m2</name><operator>)</operator></expr>;</expr_stmt> <comment type="line">//put count of each 4 bits into those 4 bits </comment>
	<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <name>m4</name></expr>;</expr_stmt>        <comment type="line">//put count of each 8 bits into those 8 bits </comment>
	<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>  <comment type="line">//put count of each 16 bits into their lowest 8 bits</comment>
	<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>  <comment type="line">//put count of each 32 bits into their lowest 8 bits</comment>
	<return>return <expr><name>x</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>GUsolve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>f</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tp</name></decl>, <decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>T</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
	<block>{

		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i %i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>k</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>sum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<expr_stmt><expr><name>tp</name> <operator>=</operator> <call><name>myNpow</name><argument_list>(<argument><expr><operator>(</operator><call><name>myNpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><name>n</name> <operator>/</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <name>n</name> <operator>%</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>i</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><call><name>myNpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><call><name>myNpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
					<if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <name>i</name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>m</name> <operator>=</operator> <operator>(</operator><call><name>myNpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>myNpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><name>p</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>myNpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><call><name>myNpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>-</operator> <name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then>
					<elseif>else
						<if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><call><name>myNpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <call><name>myNpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>i</name> <operator>-</operator> <name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block></then></if></elseif><comment type="line">//todo: top platoe, bottom ones</comment>
						<else>else
							<block type="pseudo"><expr_stmt><expr><name>m</name> <operator>=</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt></block></else></if>
				}</block></else></if>
				<expr_stmt><expr><name>tp</name> <operator>*=</operator> <name>m</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>tp</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>tp</name></expr>;</expr_stmt>

			}</block></for>
			<expr_stmt><expr><name>sum</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
}</block></function>
<comment type="block">/*
3
2 1
2 2
3 2

1
1000 6

76279056

590626098
*/</comment>

<decl_stmt><decl><type><name>int</name></type> <name><name>pars</name><index>[<expr><literal type="number">10000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>pacou</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>cm</name></decl>,<decl><type ref="prev"/><name>rc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>deg</name><index>[<expr><literal type="number">10000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>frags</name><index>[<expr><literal type="number">10000</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>treeparse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>topar</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name><name>topar</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{ <expr><literal type="number">0</literal></expr>,<expr><name>i</name></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<while>while <condition>(<expr><call><name><name>topar</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>&amp;&amp;</operator><operator>(</operator><name>rc</name><operator>&lt;</operator><literal type="number">2</literal><operator>*</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name><name>topar</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name><name>topar</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"? %i\n"</literal></expr></argument>, <argument><expr><name>v</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>u</name><operator>--</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><operator>!</operator><name><name>pars</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>pars</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>frags</name><index>[<expr><name>rc</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>frags</name><index>[<expr><name>rc</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>rc</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></while>
}</block></function>

<function><type><name>void</name></type> <name>C8solve</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i %i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>pacou</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>pars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>deg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>pars</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>treeparse</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>pacou</name> <operator>==</operator> <name>n</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"+\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>B8solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>lo</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>csum</name></decl>,<decl><type ref="prev"/><name>targ</name></decl>,<decl><type ref="prev"/><name><name>cards</name><index>[<expr><literal type="number">70</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>nplus</name></decl>, <decl><type ref="prev"/><name>nminus</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>csum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><name>cards</name><operator>+</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name><name>cards</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>csum</name> <operator>^=</operator> <name>j</name></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'M'</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>targ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>targ</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>nplus</name> <operator>=</operator><name>targ</name><operator>^</operator><name>csum</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>cards</name><index>[<expr><name>nplus</name></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%i "</literal></expr></argument>, <argument><expr><name><name>cards</name><index>[<expr><name>j</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"---\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%i\n"</literal></expr></argument>, <argument><expr><name>csum</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>lo</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
}</block></function>

<function><type><name>void</name></type> <name>K9solve</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">//map&lt;int,int&gt;sticks;</comment>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>stickstemp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>T</name></decl>,<decl><type ref="prev"/><name><name>triangles</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ntria</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name><name>mindiff</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>fl</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>sticks</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>nstick</name></decl>,<decl><type ref="prev"/><name><name>taken</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ntriangles</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>nntria</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <name>T</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>ntria</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>stickstemp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="block">/*if (sticks.find(a) == sticks.end())
				sticks[a] = 1;
			else
				sticks[a]++;*/</comment>
			<comment type="line">//a = rand() % 1000000000;</comment>
			<expr_stmt><expr><call><name><name>stickstemp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>stickstemp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>stickstemp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><name><name>mindiff</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name>MOD</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>mindiff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>stickstemp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>stickstemp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>mindiff</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>fl</name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>nstick</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><name><name>stickstemp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>mindiff</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><name>fl</name></expr>)</condition><then>
			<block>{
					<expr_stmt><expr><name><name>sticks</name><index>[<expr><name>nstick</name></expr>]</index></name> <operator>=</operator> <name><name>stickstemp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name>nstick</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name><name>sticks</name><index>[<expr><name>nstick</name></expr>]</index></name> <operator>=</operator> <name><name>stickstemp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nstick</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sticks</name><index>[<expr><name>nstick</name></expr>]</index></name> <operator>=</operator> <name><name>stickstemp</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>nstick</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>sticks</name><index>[<expr><name>nstick</name></expr>]</index></name> <operator>-</operator> <name><name>sticks</name><index>[<expr><name>nstick</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>sticks</name><index>[<expr><name>nstick</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><name>nstick</name><operator>--</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name>nstick</name><operator>++</operator></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>nstick</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstick</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name><name>taken</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstick</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name><name>sticks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sticks</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name><operator>&amp;&amp;</operator><operator>!</operator><name>fl</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<if>if <condition>(<expr><operator>!</operator><name><name>taken</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>sticks</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>c</name></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name><name>taken</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>taken</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>taken</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>triangles</name><index>[<expr><name>ntria</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sticks</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>triangles</name><index>[<expr><name>ntria</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sticks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>triangles</name><index>[<expr><name>ntria</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sticks</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>ntria</name><operator>++</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>fl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			}</block></for>
			<if>if <condition>(<expr><operator>(</operator><name>nstick</name> <operator>&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>ntria</name> <operator>&lt;</operator> <operator>(</operator><name>nstick</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator></expr>)</condition><then>
			<block>{

				<decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>possib</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nstick</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>nstick</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
					<block>{
						<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name><name>sticks</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <name><name>sticks</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
						<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
						<block>{
							<if>if <condition>(<expr><name><name>sticks</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name>c</name></expr>)</condition><then>
							<block>{
								<expr_stmt><expr><name><name>possib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><block>{ <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr>,<expr><literal type="number">0</literal></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then></if>
						}</block></for>
					}</block></for>
				}</block></for>
				<decl_stmt><decl><type><name>int</name></type> <name>mn</name></decl>;</decl_stmt>
				<if>if <condition>(<expr><name><name>possib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>mn</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>mn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name><name>possib</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>possib</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <name><name>possib</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control>
					<block>{
						<for>for <control>(<init><decl><type><name>auto</name></type> <name>it2</name> <init>= <expr><name><name>possib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it2</name> <operator>!=</operator> <name><name>possib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it2</name><operator>++</operator></expr></incr>)</control>
						<block>{
							<if>if <condition>(<expr><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>first</name></name> <operator>^</operator> <name><name>it2</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator> <operator>==</operator> <operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>first</name></name> <operator>|</operator> <name><name>it2</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator></expr>)</condition><then>
							<block>{
								<expr_stmt><expr><name><name>possib</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name><name>it</name><operator>-&gt;</operator><name>first</name></name> <operator>|</operator> <name><name>it2</name><operator>-&gt;</operator><name>first</name></name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>it</name><operator>-&gt;</operator><name>first</name></name></expr>;</expr_stmt>
								<expr_stmt><expr><name>mn</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
							}</block></then></if>
						}</block></for>
					}</block></for>
				}</block></for>
				<if>if <condition>(<expr><name>mn</name> <operator>&gt;=</operator> <name>ntria</name></expr>)</condition><then>
				<block>{
					<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>cur</name></decl>;</decl_stmt>
					<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>possib</name><index>[<expr><name>mn</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>first</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>ntria</name> <operator>=</operator> <name>mn</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

					<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>mn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block>{
						<expr_stmt><expr><name>cur</name> <operator>=</operator> <name>sum</name> <operator>^</operator> <name><name>possib</name><index>[<expr><name>mn</name> <operator>-</operator> <name>i</name></expr>]</index><index>[<expr><name>sum</name></expr>]</index></name></expr>;</expr_stmt>
						<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
						<block>{
							<if>if <condition>(<expr><name>cur</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr>)</condition><then>
							<block>{
								<expr_stmt><expr><name><name>triangles</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name><name>sticks</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
								<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
							}</block></then></if>
						}</block></for>
						<expr_stmt><expr><name>sum</name> <operator>^=</operator> <name>cur</name></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>possib</name><index>[<expr><name>mn</name> <operator>-</operator> <name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></for>
				}</block></then></if>

			}</block></then></if>

			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Case #%i: %i\n"</literal></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>ntria</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ntria</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%i %i %i\n"</literal></expr></argument>, <argument><expr><name><name>triangles</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>triangles</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>triangles</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Case #%i: 0\n"</literal></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<comment type="block">/*for (int i = 0; i &lt; 12; i++)
		{
			scanf("%i", &amp;a);
			if (sticks.find(a) == sticks.end())
				sticks[a] = 1;
			else
				sticks[a]++;
		}
		while (sticks.size() &gt; 0)
		{
			a = sticks.rbegin()-&gt;first;
			sticks[a]--;
			if (sticks.rbegin()-&gt;second &gt; 0)
				b = sticks.rbegin()-&gt;first;
			else
			{
				if (sticks.size() &gt; 1)
				{
					auto it = sticks.rbegin();
					it++;
					b = it-&gt;first;
				}
				else
					break;
			}
			sticks[b]--;
			if (sticks[a] &lt; 1)
				sticks.erase(a);
			if (a != b &amp;&amp; sticks[b] &lt; 1)
				sticks.erase(b);
			auto it = sticks.upper_bound(a - b);
			if (it != sticks.end())
			{
				c = it-&gt;first;
				it-&gt;second--;
				if (it-&gt;second &lt; 1)
					sticks.erase(it);
				triangles[ntria][0] = a;
				triangles[ntria][1] = b;
				triangles[ntria][2] = c;
				ntria++;
			}
			else
			{
				if (sticks.find(b) == sticks.end())
					sticks[b] = 1;
				else
					sticks[b]++;
			}
		}
		printf("Case #%i: %i\n", t + 1, ntria);
		for (int i = 0; i &lt; ntria; i++)
		{
			printf("%i %i %i\n", triangles[i][0], triangles[i][1], triangles[i][2]);
		}
		sticks.clear();*/</comment>
	}</block></for>
}</block></function>

<comment type="block">/*
5
1 2 1 3 1 4 1 5 1 6 1 7
1 2 3 4 5 6 7 8 9 10 11 12
1 2 3 5 8 13 21 34 55 89 144 233
2 3 6 15 27 59 72 83 121 159 201 234
2 2 4 8 16 32 64 128 256 512 1024 1281
*/</comment>

<function><type><name>int</name></type> <name>lprcomp</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>au</name> <init>= <expr><name>a</name> <operator>/</operator> <literal type="number">1000000000</literal></expr></init></decl>, <decl><type ref="prev"/><name>ab</name> <init>= <expr><name>a</name> <operator>%</operator> <literal type="number">1000000000</literal></expr></init></decl>,<decl><type ref="prev"/><name>bu</name><init>= <expr><name>b</name> <operator>/</operator> <literal type="number">1000000000</literal></expr></init></decl>, <decl><type ref="prev"/><name>bb</name> <init>= <expr><name>b</name> <operator>%</operator> <literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ru</name> <init>= <expr><name>au</name> <operator>*</operator> <name>bu</name> <operator>+</operator> <operator>(</operator><name>ab</name> <operator>*</operator> <name>bu</name> <operator>+</operator> <name>au</name> <operator>*</operator> <name>bb</name><operator>)</operator> <operator>/</operator> <literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>rb</name> <init>= <expr><operator>(</operator><operator>(</operator><name>ab</name> <operator>*</operator> <name>bu</name> <operator>+</operator> <name>au</name> <operator>*</operator> <name>bb</name><operator>)</operator> <operator>%</operator> <literal type="number">1000000000</literal><operator>)</operator> <operator>*</operator> <literal type="number">1000000000</literal> <operator>+</operator> <name>ab</name> <operator>*</operator> <name>bb</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><operator>(</operator><name>ru</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>rb</name><operator>&gt;</operator><name>c</name><operator>)</operator></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
	<elseif>else
		<if>if <condition>(<expr><name>rb</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if></elseif>
		<else>else
			<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>funcmax</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>t</name> <operator>&lt;</operator> <name>n</name></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><call><name>lprcomp</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>t</name> <operator>*=</operator> <name>k</name></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>t</name> <operator>+</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
		<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return  <expr><call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>funclm</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>n</name> <operator>%</operator> <name>k</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>/=</operator> <name>k</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></while>
	<expr_stmt><expr><name>ans</name><operator>--</operator></expr>;</expr_stmt>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>funcfind</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>r</name><operator>&gt;</operator><name>l</name><operator>&amp;&amp;</operator><name>r</name><operator>&gt;</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>r</name> <operator>%</operator> <name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
	<if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>l</name></expr>)</condition><then>
	<block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>lm</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><call><name>funcfind</name><argument_list>(<argument><expr><name>l</name> <operator>/</operator> <name>k</name></expr></argument>, <argument><expr><name>r</name> <operator>/</operator> <name>k</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>k</name> <operator>+</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>lm1</name> <init>= <expr><call><name>funclm</name><argument_list>(<argument><expr><name>lm</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><name>lm</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><call><name>funclm</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>lm1</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>lm</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>lm1</name> <init>= <expr><call><name>funclm</name><argument_list>(<argument><expr><name>lm</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			}</block></then></if></block></for>
		<return>return <expr><name>lm</name></expr>;</return>
	}</block></then>
	<else>else
		<block type="pseudo"><return>return <expr><name>l</name></expr>;</return></block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>HGsolve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>miny</name></decl>,<decl><type ref="prev"/><name>maxy</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>max</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>cur</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>lefts</name></decl>, <decl><type ref="prev"/><name>rights</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>miny</name> <operator>=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>maxy</name> <operator>=</operator> <operator>-</operator><literal type="number">1000000</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i %i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <name>miny</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>miny</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <name>maxy</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>maxy</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<if>if <condition>(<expr><call><name><name>lefts</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>miny</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>lefts</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>lefts</name><index>[<expr><name>miny</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>lefts</name><index>[<expr><name>miny</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		<if>if <condition>(<expr><call><name><name>rights</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>maxy</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>rights</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>rights</name><index>[<expr><name>maxy</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name><name>rights</name><index>[<expr><name>maxy</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<expr_stmt><expr><name>cur</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>maxy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1000000</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">1000000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><call><name><name>lefts</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>lefts</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>lefts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>cur</name> <operator>&gt;</operator> <name>max</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>max</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>maxy</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><call><name><name>rights</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>rights</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cur</name> <operator>-=</operator> <name><name>rights</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%i\n"</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>HHsolve</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type>  <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>q</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>q</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
	}</block></for>

	<if>if <condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt> <return>return;</return> }</block></then></if>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>a</name><index>[<expr><name>n</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><name>p</name><operator>*</operator><name>i</name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>+</operator> <operator>(</operator><name><name>q</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <call><name>myNpow</name><argument_list>(<argument><expr><operator>(</operator><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>q</name><index>[<expr><name>n</name> <operator>-</operator> <name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>MOD</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>max</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">1LL</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>t</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>HIsolve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>mod</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mult</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"/><name><name>res</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">2</literal></expr>,<expr><name>a</name></expr>}</block></expr>,<expr><block>{<expr><literal type="number">2</literal></expr>,<expr><name>a</name></expr>}</block></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>mult</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name><name>res</name><index>[<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>mult</name> <operator>*</operator> <name><name>res</name><index>[<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal> <operator>^</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>res</name><index>[<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>mult</name> <operator>*</operator> <name><name>res</name><index>[<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>res</name><index>[<expr><literal type="number">1</literal> <operator>^</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mult</name> <operator>=</operator> <name>mult</name> <operator>*</operator> <name>mult</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><name><name>res</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name><name>unordered_set</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>strings</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>parsd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>base</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>stringgen</name><parameter_list>()</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>base</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>base</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>pars</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>pars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>base</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>stringgen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>pars</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then></if></block></for>
	}</block></then>
	<else>else
		<block type="pseudo"><expr_stmt><expr><call><name><name>strings</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>solve10</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>strings</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>base</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>parsd</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><call><name><name>base</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>stringgen</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>itn</name> <init>= <expr><call><name><name>strings</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name>itn</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>itn</name><operator>!=</operator><call><name><name>strings</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>it</name> <operator>=</operator> <name>itn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>itn</name><operator>++</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><call><name><name>it</name><operator>-&gt;</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>==</operator> <operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>strings</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			}</block></then></if>
		}</block></for>

	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%i\n"</literal></expr></argument>, <argument><expr><call><name><name>strings</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>Bsolve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>re</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>pe</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>se</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i %i %i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>pe</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>re</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>se</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<if>if <condition>(<expr><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>re</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>pe</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>se</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
			<block>{
				<if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'N'</literal></expr>;</expr_stmt></block></else></if>
			}</block></then>
			<elseif>else <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then>
			<block>{
				<if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'N'</literal></expr>;</expr_stmt></block></else></if>
			}</block></then></if></elseif>
			<elseif>else <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then>
				<block type="pseudo"><if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'N'</literal></expr>;</expr_stmt></block></else></if></block></then></if></elseif></if>
		}</block></for>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal></expr>)</condition><then>
				<block type="pseudo"><if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then>
				<elseif>else <if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then></if></elseif>
				<elseif>else <if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then></if></elseif></if></block></then></if>
		}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else>else
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%i"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>t</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>Bsolve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
