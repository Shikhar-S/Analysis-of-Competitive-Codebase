<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616482_64033713.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//#include "testlib.h"</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>qi</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>bool</name></type> <name>debug</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/*    *************************************
	  * Written in New Computer           *
	  * The following code belongs to     *
	  * XiaoGeNintendo of HellHoleStudios *
	  *************************************
*/</comment>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>,<parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></type> <name>ptt</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><name><name>ptt</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="string">","</literal><operator>&lt;&lt;</operator><name><name>ptt</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
	<return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>vt</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"{"</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><name><name>vt</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"}"</literal></expr>;</expr_stmt>
	<return>return <expr><name>os</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>l</name><index>[<expr><literal type="number">13</literal></expr>]</index><index>[<expr><literal type="number">13</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>SIX</name><init>=<expr><literal type="number">1</literal><operator>/</operator><literal type="number">6.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>TOTAL</name><init>=<expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>pii</name></type> <name>getNext</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	
	<if>if<condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">9</literal></expr>)</condition><then><block>{
			<return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then><else>else<block>{
		<if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
		}</block></then></if>
		<return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></else></if>
}</block></function>

<decl_stmt><decl><type><name>double</name></type> <name><name>dp</name><index>[<expr><literal type="number">15</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stk</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>double</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
<comment type="line">//	cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;</comment>
	
	<comment type="line">//roll some shit</comment>
	<if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<return>return <expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</return>
	}</block></then></if>
	
	<expr_stmt><expr><name>stk</name><operator>++</operator></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>stk</name><operator>&gt;=</operator><literal type="number">50000</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>stk</name><operator>--</operator></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	
	<if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>&lt;=</operator><literal type="number">6</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>double</name></type> <name>xw</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>y</name><operator>&gt;=</operator><name>i</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>xw</name><operator>+=</operator><name>SIX</name><operator>*</operator><operator>(</operator><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><name>i</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			}</block></then><else>else<block>{
				<expr_stmt><expr><name>xw</name><operator>+=</operator><name>SIX</name><operator>*</operator><operator>(</operator><call><name>dfs</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>
		<expr_stmt><expr><name>stk</name><operator>--</operator></expr>;</expr_stmt>
		<return>return <expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>xw</name></expr>;</return>
	}</block></then></if>
	
	<decl_stmt><decl><type><name>pii</name></type> <name>nxt</name><init>=<expr><call><name>getNext</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>prob</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>double</name></type> <name>v</name></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>l</name><index>[<expr><name><name>nxt</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>nxt</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>v</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>nxt</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>nxt</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>nxt</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>l</name><index>[<expr><name><name>nxt</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>nxt</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>nxt</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><else>else<block>{
			<expr_stmt><expr><name>v</name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name><name>nxt</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>nxt</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>prob</name><operator>+=</operator><name>SIX</name><operator>*</operator><operator>(</operator><name>v</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>nxt</name><operator>=</operator><call><name>getNext</name><argument_list>(<argument><expr><name><name>nxt</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>nxt</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	
<comment type="line">//	cout&lt;&lt;x&lt;&lt;' '&lt;&lt;y&lt;&lt;" ="&lt;&lt;prob&lt;&lt;endl;</comment>
	<expr_stmt><expr><name>stk</name><operator>--</operator></expr>;</expr_stmt>
	<return>return <expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>prob</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>l</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.010f"</literal></expr></argument>,<argument><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
