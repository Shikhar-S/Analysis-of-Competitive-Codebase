<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618468_64022413.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int ngtkana_is_genius = 0; ngtkana_is_genius &lt; int(n); ngtkana_is_genius++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>begin</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = int(begin); i &lt; int(end); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rand</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::uniform_int_distribution&lt;&gt;(l, r)(mt)</cpp:value></cpp:define>
<using>using <name>lint</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><name>auto</name></type> <name>mt</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>mt19937_64</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>random_device</name></name><block>{}</block><operator>(</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>cmn</name> <init>= <expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl/></parameter></parameter_list>auto<ref_qualifier>&amp;</ref_qualifier> <name>a</name></lambda></expr></init></decl>, auto <decl><type ref="prev"/><name>b</name></decl>)<block>{<if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>cmx</name> <init>= <expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl/></parameter></parameter_list>auto<ref_qualifier>&amp;</ref_qualifier> <name>a</name></lambda></expr></init></decl>, auto <decl><type ref="prev"/><name>b</name></decl>)<block>{<if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block></decl_stmt><empty_stmt>;</empty_stmt>
<function><type><name>void</name></type> <name>debug_impl</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Head</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Tail</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>debug_impl</name><parameter_list>(<parameter><decl><type><name>Head</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>Tail</name><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list><block>{
  <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>head</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>debug_impl</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STOPIT</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>do {\
  std::cerr &lt;&lt; std::boolalpha &lt;&lt; "[" &lt;&lt; #__VA_ARGS__ &lt;&lt; "]:";\
  debug_impl(__VA_ARGS__);\
  std::cerr &lt;&lt; std::noboolalpha;\
} while (false)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>Container</name></parameter>, <parameter><type><name>typename</name></type> <name>Value</name> <init>= <expr><name><name>typename</name> <name>Container</name><operator>::</operator><name>value_type</name></name></expr></init></parameter>, <parameter><type><name><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt; <argument><expr><name>Container</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>nullptr_t</name></name></expr></argument>&gt;</argument_list></name></name></type> <init>= <expr><literal type="null">nullptr</literal></expr></init></parameter>&gt;</parameter_list></template>
<type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>Container</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
  <block>{ <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator> <name>x</name> <operator>:</operator> <name>v</name></expr></init>)</control> <block>{ <expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt> }</block></for> <return>return <expr><name>is</name></expr>;</return> }</block></function>

<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>Container</name></parameter>, <parameter><type><name>typename</name></type> <name>Value</name> <init>= <expr><name><name>typename</name> <name>Container</name><operator>::</operator><name>value_type</name></name></expr></init></parameter>, <parameter><type><name><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><operator>!</operator><name><name>std</name><operator>::</operator><name><name>is_same</name><argument_list type="generic">&lt; <argument><expr><name>Container</name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>string</name></name></expr></argument> &gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>nullptr_t</name></name></expr></argument>&gt;</argument_list></name></name></type> <init>= <expr><literal type="null">nullptr</literal></expr></init></parameter> &gt;</parameter_list></template>
<type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name>Container</name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
 <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control>
    <block>{<expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">","</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>}</block></for>
  <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><name>n</name> <operator>*</operator> <name>n</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>auto</name></type> <name>encode</name> <init>= <expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>i</name> <operator>*</operator> <name>n</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>j</name></expr> </then><else>: <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>j</name></expr></else></ternary><operator>)</operator></expr>;</return>
  }</block></lambda></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></name></type> <name>a</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <macro><name>rep</name><argument_list>(<argument>j</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>h</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><call><name>encode</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>encode</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>h</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>

  <decl_stmt><decl><type><name>int</name></type> <name>dice</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>double</name></expr></argument> &gt;</argument_list></name></name></type> <name>dp</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>double</name></expr></argument> &gt;</argument_list></name></name></type> <name>ep</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>crr</argument>, <argument><literal type="number">1</literal></argument>, <argument>dice + <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
    <expr_stmt><expr><call><name><name>dp</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>crr</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>dice</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ep</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>crr</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>dice</name></expr>;</expr_stmt>
  }</block>

  <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument>dice + <literal type="number">1</literal></argument>, <argument>N</argument>)</argument_list></macro> <block>{
    <macro><name>rep</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument>dice + <literal type="number">1</literal></argument>)</argument_list></macro> <block>{
      <expr_stmt><expr><call><name><name>dp</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>+=</operator> <call><name><name>ep</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name><name>dp</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>dice</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>dp</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>ep</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><call><name><name>dp</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>dp</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <comment type="line">// debug(dp);</comment>
  <comment type="line">// debug(ep);</comment>

  <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>setprecision</name></name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name><name>ep</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
