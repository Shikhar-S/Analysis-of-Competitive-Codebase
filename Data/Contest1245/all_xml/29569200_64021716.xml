<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29569200_64021716.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>(int)(1e18 + 7)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name>  <init>= <expr><literal type="number">110</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>F</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>getbit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><literal type="number">1</literal> <operator>&amp;</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>cal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pre</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>bit</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal> <operator>+</operator> <name>pre</name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name> <modifier>&amp;</modifier></type> <name>ans</name> <init>= <expr><name><name>F</name><index>[<expr><name>bit</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>pre</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>ans</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ans</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>getbit</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><call><name>getbit</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>a</name> <operator>||</operator> <operator>(</operator><name>u</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <call><name>cal</name><argument_list>(<argument><expr><name>bit</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>||</operator> <operator>(</operator><name>v</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>b</name> <operator>||</operator> <operator>(</operator><name>v</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <call><name>cal</name><argument_list>(<argument><expr><name>bit</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
    }</block></then></if>
    <if>if<condition>(<expr><name>pre</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>+</operator> <call><name>cal</name><argument_list>(<argument><expr><name>bit</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name> <operator>||</operator> <operator>(</operator><name>u</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name>b</name> <operator>||</operator> <operator>(</operator><name>v</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line">//if(bit &lt; 3) cout &lt;&lt; (a || (u == 0)) &lt;&lt; " " &lt;&lt; bit &lt;&lt; " " &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " " &lt;&lt; pre &lt;&lt; " " &lt;&lt; ans &lt;&lt; endl;</comment>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">//cout &lt;&lt;getbit(4, 1) &lt;&lt; endl;</comment>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>F</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>cal</name><argument_list>(<argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">//freopen("a.txt", "r", stdin);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>nT</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>nT</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>nT</name><operator>--</operator></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function>
</unit>
