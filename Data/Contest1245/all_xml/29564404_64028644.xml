<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29564404_64028644.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>double</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(v,x,sizeof(v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>frr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=j;i&lt;=k;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>td</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define> <comment type="line">// 1e9</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro>   <cpp:value>1000000007</cpp:value></cpp:define> <comment type="line">// 1e9 + 7</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>mod</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>n</name><operator>%</operator><name>m</name></expr></init></decl>;</decl_stmt> <if>if<condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>ret</name></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><ternary><condition><expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>a</name><operator>*</operator><name>b</name><operator>)</operator><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>exp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1LL</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>mod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>mod</name><argument_list>(<argument><expr><call><name>exp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
        <return>return <expr><call><name>mod</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><call><name>mod</name><argument_list>(<argument><expr><name>k</name><operator>*</operator><name>k</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then>
    <else>else <block type="pseudo"><return>return <expr><call><name>mod</name><argument_list>(<argument><expr><name>k</name><operator>*</operator><name>k</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pw</name></decl>;</decl_stmt>
<class>class <name>DisjointSet</name><block>{<private type="default"> </private><public>public:
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>sz</name></decl>;</decl_stmt>
    <constructor><name>DisjointSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><member_init_list>: <call><name>parent</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call>, <call><name>sz</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> </member_init_list><block>{ <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr><operator>,</operator><expr><name><name>sz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for> }</block></constructor>
    <function><type><name>void</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>sz</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&lt;</operator> <name><name>sz</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name><name>parent</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>sz</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+=</operator> <name><name>sz</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    <function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><ternary><condition><expr><name>a</name> <operator>==</operator> <name><name>parent</name><index>[<expr><name>a</name></expr>]</index></name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name><name>parent</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>parent</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return> }</block></function>
    <function><type><name>bool</name></type> <name>same_set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
</public>}</block>;</class>
<function><type><name>int</name></type> <name>mh</name><parameter_list>(<parameter><decl><type><name>pii</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>pii</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>ff</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>ff</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>ss</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<struct>struct <name>edge</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>edge</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{
        <return>return <expr><operator>(</operator><name>c</name> <operator>&lt;</operator> <name><name>y</name><operator>.</operator><name>c</name></name><operator>)</operator></expr>;</return>
    }</block></function>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pai</name><argument_list>(<argument><expr><literal type="number">2020</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cst</name><argument_list>(<argument><expr><literal type="number">2020</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>find_set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>pai</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>v</name></expr>;</return></block></then></if>
    <return>return <expr><name><name>pai</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>find_set</name><argument_list>(<argument><expr><name><name>pai</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>make_set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>pai</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>union_sets</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>find_set</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>find_set</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>cst</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&gt;</operator> <name><name>cst</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>pai</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>
<function><name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>fastio</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>k</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>pw</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>pii</name> <modifier>&amp;</modifier></type><name>x</name> <range>: <expr><name>v</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>x</name><operator>.</operator><name>ff</name></name> <operator>&gt;&gt;</operator> <name><name>x</name><operator>.</operator><name>ss</name></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name> <range>: <expr><name>c</name></expr></range></decl></init>)</control><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name>e</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>DisjointSet</name></type> <name>dsu</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name> <range>: <expr><name>k</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt></block></for>  
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>cst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pai</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>, <expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <macro><name>mh</name><argument_list>(<argument>v[i]</argument>,<argument>v[j]</argument>)</argument_list></macro></expr>}</block></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>td</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name>mst</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>e</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><operator>!</operator><call><name><name>dsu</name><operator>.</operator><name>same_set</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr></argument>,<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>dsu</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr></argument>,<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>mst</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>cn</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>mst</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>mst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name><name>mst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><name><name>mst</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name><name>cst</name><index>[<expr><call><name>find_set</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>,<argument><expr><name><name>cst</name><index>[<expr><call><name>find_set</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><operator>(</operator><name><name>k</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>b</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <call><name>mh</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>w</name></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>w</name><operator>==</operator><name><name>cst</name><index>[<expr><call><name>find_set</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>pw</name><index>[<expr><call><name>find_set</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name><name>pw</name><index>[<expr><call><name>find_set</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><call><name>union_sets</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>b</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <call><name>mh</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>w</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>cn</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr>,<expr><name>b</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>accumulate</name><argument_list>(<argument><expr><call><name>td</name><argument_list>(<argument><expr><name>pw</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>pw</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>cn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>pii</name> <modifier>&amp;</modifier></type><name>x</name> <range>: <expr><name>cn</name></expr></range></decl></init>)</control><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>ff</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>x</name><operator>.</operator><name>ss</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></for>
}</block></function></unit>
