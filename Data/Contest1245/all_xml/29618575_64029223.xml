<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618575_64029223.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lp</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>start</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll var = start; var &lt;end ; ++var)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rlp</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>start</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll var = start; var&gt;=end ; var--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vld</name></cpp:macro> <cpp:value>vector&lt;ld&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pld</name></cpp:macro> <cpp:value>pair&lt;ld,ld&gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpll</name></cpp:macro> <cpp:value>vector&lt;pll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpld</name></cpp:macro> <cpp:value>vector&lt;pld&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X.begin(),X.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mo</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><literal type="number">2002</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name><name>y</name><index>[<expr><literal type="number">2002</literal></expr>]</index></name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl> ;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">2002</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name><name>k</name><index>[<expr><literal type="number">2002</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><literal type="number">2002</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>bu</name></decl> ;</decl_stmt> <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>p</name></decl> ;</decl_stmt> 
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl> ;</decl_stmt> 


<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr> ;</expr_stmt> 
  <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{
  	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
  }</block></for>
  <comment type="line">//cerr&lt;&lt;"A"; </comment>
  <macro><name>lp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
  <block>{
  	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
  }</block>
  <macro><name>lp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
  <block>{
  	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> 
  }</block>
  
  
 <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>pq</name></decl>;</decl_stmt> 
 <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 <block type="pseudo"><expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><operator>-</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> 
 <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 
 <while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
 <block>{
 	<decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>se</name><operator>.</operator><name>se</name></name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>par</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>se</name><operator>.</operator><name>fi</name></name></expr></init></decl> ;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><operator>-</operator><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>fi</name></expr></init></decl>;</decl_stmt>
	 <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>  
	<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>ind</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block type="pseudo"><continue>continue;</continue></block></then></if> 
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>ind</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>  <expr_stmt><expr><name>ans</name><operator>+=</operator><name>temp</name></expr>;</expr_stmt> 
	<if>if<condition>(<expr><name>par</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	<block>{  
		<expr_stmt><expr><call><name><name>bu</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	}</block></then>
	<else>else
	<block>{
		<expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>ind</name></expr></argument>,<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
	}</block></else></if>
 	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
 	<block>{
 		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
 		<block>{
 			<decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>ind</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>ind</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>ind</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt> 
 			<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><operator>-</operator><name>cost</name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>ind</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		 }</block></then></if>
	 }</block></for>
 }</block></while>
	
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> 
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>bu</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> 
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>bu</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>bu</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for> 
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> 
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for> 
  
}</block></function>
		

 
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{ <expr_stmt><expr><name>ios</name></expr>;</expr_stmt> 
	<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt> 
	
	}</block></while>
	<return>return<expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr>;</return> 
}</block></function>
</unit>
