<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29563414_64016471.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>UFDS</name><index>[<expr><literal type="number">2100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>sz</name><index>[<expr><literal type="number">2100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>power</name><index>[<expr><literal type="number">2100</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>p</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>n</name><operator>==</operator><name><name>UFDS</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name>n</name></expr>;</return></block></then>
	<else>else
		<block type="pseudo"><return>return <expr><call><name>p</name><argument_list>(<argument><expr><name><name>UFDS</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>

<function><type><name>bool</name></type> <name>ss</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><call><name>p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>p</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>hasPower</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name><name>power</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><call><name>hasPower</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>hasPower</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
		<comment type="line">//result also has power</comment>
		<if>if<condition>(<expr><name><name>sz</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&gt;</operator> <name><name>sz</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>power</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>UFDS</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<if>if<condition>(<expr><name><name>sz</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><name><name>sz</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>sz</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name><name>power</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>UFDS</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>p</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then> <else>else <block>{
		<if>if<condition>(<expr><name><name>sz</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>&gt;</operator><name><name>sz</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>UFDS</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<if>if<condition>(<expr><name><name>sz</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><name><name>sz</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name><name>sz</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name><name>UFDS</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>p</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
	}</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>makePower</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>power</name><index>[<expr><call><name>p</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>x</name><index>[<expr><literal type="number">2100</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">2100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>k</name><index>[<expr><literal type="number">2100</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>iostream</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><literal type="number">228</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>power</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>power</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>N</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>UFDS</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sz</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>n</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<comment type="line">// cost, type of action (0=power station, 1=road) one or two numbers showing cities</comment>
	<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><operator>-</operator><name>c</name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><block>{<expr><name>n</name></expr>, <expr><name>n</name></expr>}</block></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>m</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block>{
<comment type="line">//			cout &lt;&lt; k[n] &lt;&lt; " " &lt;&lt; k[m] &lt;&lt; endl;</comment>
<comment type="line">//			cout &lt;&lt; x[n] &lt;&lt; " " &lt;&lt; x[m] &lt;&lt; " " &lt;&lt; y[n] &lt;&lt; " " &lt;&lt; y[m] &lt;&lt; endl;</comment>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><operator>-</operator><operator>(</operator><name><name>k</name><index>[<expr><name>n</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>n</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><block>{<expr><name>n</name></expr>, <expr><name>m</name></expr>}</block></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>totc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>pows</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>cit</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>c</name> <init>= <expr><operator>-</operator><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>fr</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>se</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//	cout &lt;&lt; c &lt;&lt; " " &lt;&lt; t &lt;&lt;  " " &lt;&lt; fr &lt;&lt; " " &lt;&lt; se &lt;&lt; endl;</comment>
		<if>if<condition>(<expr><name>t</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><call><name>ss</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<continue>continue;</continue>
			}</block></then></if>
			<if>if<condition>(<expr><call><name>hasPower</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>hasPower</name><argument_list>(<argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>fr</name></expr></argument>, <argument><expr><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>cit</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>fr</name></expr>, <expr><name>se</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>totc</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
	<comment type="line">//		cout &lt;&lt; fr &lt;&lt; " " &lt;&lt; hasPower(fr) &lt;&lt; endl;</comment>
			<if>if<condition>(<expr><call><name>hasPower</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
				<continue>continue;</continue>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name>makePower</name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//			cout &lt;&lt; hasPower(fr) &lt;&lt; " AA" &lt;&lt; endl;</comment>
	<comment type="line">//			cout &lt;&lt; power[0] &lt;&lt; endl;</comment>
	<comment type="line">//			cout &lt;&lt; fr &lt;&lt; " p" &lt;&lt;  p(fr) &lt;&lt; endl;</comment>
				<expr_stmt><expr><name>totc</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>pows</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>totc</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>pows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name><operator>&lt;</operator><call><name><name>pows</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>n</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>pows</name><index>[<expr><name>n</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>cit</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name><operator>&lt;</operator><call><name><name>cit</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>cit</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>cit</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>second</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
