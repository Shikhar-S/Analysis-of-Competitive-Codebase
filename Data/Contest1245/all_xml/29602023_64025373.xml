<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29602023_64025373.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><literal type="number">65</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>add</name> <parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>x</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>string</name></type> <name>toBinary</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>string</name></type> <name>ans</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>rem</name> <init>= <expr><name>x</name> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call>(<name>char</name>)<argument_list>(<argument><expr><name>rem</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>ans</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ans</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>toBinary</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>toBinary</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <call><name><name>b</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="string">"0"</literal> <operator>+</operator> <name>a</name></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>l1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>l1</name><operator>++</operator></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>h1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>h1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>h1</name><operator>++</operator></expr></incr>)</control> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>l2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l2</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>l2</name><operator>++</operator></expr></incr>)</control> <block>{
                    <for>for <control>(<init><decl><type><name>int</name></type> <name>h2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>h2</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>h2</name><operator>++</operator></expr></incr>)</control> <block>{
                        <comment type="line">//cout &lt;&lt; i &lt;&lt; " " &lt;&lt; l1 &lt;&lt; " " &lt;&lt; h1 &lt;&lt; " " &lt;&lt; l2 &lt;&lt; " " &lt;&lt; h2 &lt;&lt; " " &lt;&lt; dp[i][l1][h1][l2][h2] &lt;&lt; "\n";</comment>
                        <decl_stmt><decl><type><name>int</name></type> <name>limlow1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>limhigh1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>limlow2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>limhigh2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                        <if>if <condition>(<expr><name>l1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>limlow1</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></then></if>
                        <if>if <condition>(<expr><name>h1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>limhigh1</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></then></if>
                        <if>if <condition>(<expr><name>l2</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>limlow2</name> <operator>=</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></then></if>
                        <if>if <condition>(<expr><name>h2</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>limhigh2</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></then></if>

                        <for>for <control>(<init><decl><type><name>int</name></type> <name>nxt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nxt</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>nxt</name><operator>++</operator></expr></incr>)</control> <block>{
                            <decl_stmt><decl><type><name>int</name></type> <name>cnxt</name> <init>= <expr><name>nxt</name> <operator>^</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
                            <if>if <condition>(<expr><name><name>nxt</name> <argument_list type="generic">&lt; <argument><expr><name>limlow1</name> <operator>||</operator> <name>nxt</name></expr></argument> &gt;</argument_list></name> <name>limhigh1</name> <operator>||</operator> <name><name>cnxt</name> <argument_list type="generic">&lt; <argument><expr><name>limlow2</name> <operator>||</operator> <name>cnxt</name></expr></argument> &gt;</argument_list></name> <name>limhigh2</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
                            <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
                                <decl_stmt><decl><type><name>int</name></type> <name>nl1</name> <init>= <expr><operator>(</operator><name>l1</name> <operator>&amp;&amp;</operator> <name>nxt</name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>int</name></type> <name>nh1</name> <init>= <expr><operator>(</operator><name>h1</name> <operator>&amp;&amp;</operator> <name>nxt</name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>int</name></type> <name>nl2</name> <init>= <expr><operator>(</operator><name>l2</name> <operator>&amp;&amp;</operator> <name>cnxt</name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>int</name></type> <name>nh2</name> <init>= <expr><operator>(</operator><name>h2</name> <operator>&amp;&amp;</operator> <name>cnxt</name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>nl1</name></expr>]</index><index>[<expr><name>nh1</name></expr>]</index><index>[<expr><name>nl2</name></expr>]</index><index>[<expr><name>nh2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>h1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index><index>[<expr><name>h2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>

                            <if>if <condition>(<expr><operator>!</operator><name>nxt</name></expr>)</condition><then> <block>{
                                <expr_stmt><expr><name>cnxt</name> <operator>=</operator> <name>nxt</name></expr>;</expr_stmt>
                                <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                                <if>if <condition>(<expr><name><name>nxt</name> <argument_list type="generic">&lt; <argument><expr><name>limlow1</name> <operator>||</operator> <name>nxt</name></expr></argument> &gt;</argument_list></name> <name>limhigh1</name> <operator>||</operator> <name><name>cnxt</name> <argument_list type="generic">&lt; <argument><expr><name>limlow2</name> <operator>||</operator> <name>cnxt</name></expr></argument> &gt;</argument_list></name> <name>limhigh2</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
                                <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block>{
                                    <decl_stmt><decl><type><name>int</name></type> <name>nl1</name> <init>= <expr><operator>(</operator><name>l1</name> <operator>&amp;&amp;</operator> <name>nxt</name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                                    <decl_stmt><decl><type><name>int</name></type> <name>nh1</name> <init>= <expr><operator>(</operator><name>h1</name> <operator>&amp;&amp;</operator> <name>nxt</name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                                    <decl_stmt><decl><type><name>int</name></type> <name>nl2</name> <init>= <expr><operator>(</operator><name>l2</name> <operator>&amp;&amp;</operator> <name>cnxt</name> <operator>==</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                                    <decl_stmt><decl><type><name>int</name></type> <name>nh2</name> <init>= <expr><operator>(</operator><name>h2</name> <operator>&amp;&amp;</operator> <name>cnxt</name> <operator>==</operator> <name><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
                                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>nl1</name></expr>]</index><index>[<expr><name>nh1</name></expr>]</index><index>[<expr><name>nl2</name></expr>]</index><index>[<expr><name>nh2</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>h1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index><index>[<expr><name>h2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                }</block></then></if>
                            }</block></then></if>
                        }</block></for>
                    }</block></for>
                }</block></for>
            }</block></for>
        }</block></for>
    }</block></for>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
                <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{
                    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><call><name><name>a</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></for>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
