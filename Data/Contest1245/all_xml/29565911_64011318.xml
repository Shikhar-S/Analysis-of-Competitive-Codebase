<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29565911_64011318.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>(a / __gcd(a,b) ) *b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>__gcd(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dist</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>,<parameter><type><name>y1</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>,<parameter><type><name>y2</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>distl</name><parameter_list>(<parameter><type><name>x1</name></type></parameter>,<parameter><type><name>y1</name></type></parameter>,<parameter><type><name>x2</name></type></parameter>,<parameter><type><name>y2</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>sqrtl((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fRead</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>freopen(x,"r",stdin)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fWrite</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>freopen (x,"w",stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro>                      <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ULL</name></cpp:macro>                     <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>                      <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tcase</name></cpp:macro>                   <cpp:value>cout&lt;&lt;"Case "&lt;&lt;C++&lt;&lt;": ";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>                  <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Unique</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>               <cpp:value>sort(all(a)),a.erase(unique(all(a)),a.end</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>                  <cpp:value>((x)&lt;0?-(x):(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>min(a,min(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>min(a,min(b,min(c,d)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>max(a,max(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>max(a,max(b,max(c,d)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro>                      <cpp:value>acos(-1.0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro>                      <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro>                      <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro>                 <cpp:value>fixed&lt;&lt;setprecision((y))&lt;&lt;(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FastRead</name></cpp:macro>                <cpp:value>ios_base::sync_with_stdio(0);cin.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>for (int x = l; x&lt;=r; ++x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro>                <cpp:value>for (int x = 0; x &lt;r; ++x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NN</name></cpp:macro>                      <cpp:value>cout&lt;&lt;"\n";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NNN</name></cpp:macro>                     <cpp:value>cout&lt;&lt;"\n------------------------------\n";</cpp:value></cpp:define>

<comment type="line">//***********************************************************************//</comment>
<comment type="line">//                      SHAHED AHMED, CSE'15, IUT                        //</comment>
<comment type="line">//***********************************************************************//</comment>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>r</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>string</name></type> <name>S</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>S</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>LL</name></type> <name>win</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>ans</name></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name><range>:<expr><name>S</name></expr></range></decl></init>)</control>
        <block>{
            <if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="char">'R'</literal><operator>&amp;&amp;</operator><name>p</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>win</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>}</block></then>
            <elseif>else <if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="char">'P'</literal><operator>&amp;&amp;</operator><name>s</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>win</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>}</block></then></if></elseif>
            <elseif>else <if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="char">'S'</literal><operator>&amp;&amp;</operator><name>r</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>win</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>}</block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'-'</literal></expr>;</expr_stmt></block></else></if>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>need</name> <init>= <expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>n</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>need</name><operator>++</operator></expr>;</expr_stmt></block></then></if>

        <if>if<condition>(<expr><name>win</name><operator>&gt;=</operator><name>need</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>

            <for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name><range>:<expr><name>ans</name></expr></range></decl></init>)</control>
            <block>{
                <if>if<condition>(<expr><name>u</name><operator>!=</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>u</name></expr>;</expr_stmt></block></then>
                <else>else
                <block>{
                    <if>if<condition>(<expr><name>p</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"P"</literal></expr>;</expr_stmt><expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>}</block></then>
                    <elseif>else <if>if<condition>(<expr><name>s</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"S"</literal></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if></elseif>
                    <elseif>else <if>if<condition>(<expr><name>r</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"R"</literal></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if></elseif></if>
                }</block></else></if>
            }</block></for>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>


    }</block></while>


}</block></function>
</unit>
