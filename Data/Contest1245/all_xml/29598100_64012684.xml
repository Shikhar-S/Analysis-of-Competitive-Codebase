<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29598100_64012684.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{	
	<decl_stmt><decl><type><name>int</name></type> <name>z</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>x</name><operator>%</operator><name>y</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>z</name> <operator>=</operator> <name>x</name><operator>%</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>	
	}</block></while>
	<return>return <expr><name>z</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>command</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>command</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>win</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>seq</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>char</name></type> <name>ch</name> <range>: <expr><name>command</name></expr></range></decl></init>)</control>
        <block>{
            <if>if<condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>p</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>win</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>r</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>win</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></elseif>
            <elseif>else <if>if<condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>s</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>win</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></elseif></if>
            <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
        <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>p</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>        
                }</block></then>
                <elseif>else <if>if<condition>(<expr><name>s</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                }</block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name>r</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>seq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>win</name> <operator>&gt;=</operator> <call><name>ceil</name><argument_list>(<argument><expr><name>n</name> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <name>seq</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
