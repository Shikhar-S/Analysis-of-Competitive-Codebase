<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29597072_64026007.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; n; i++)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pow</name></cpp:macro> <cpp:value>CHANGETHENAMESTUPID</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">2010</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>k</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>par</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cost</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>minPower</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>parent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><ternary><condition><expr><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>parent</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>mbJoin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>weight</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>parent</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>parent</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name><name>par</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>newMinPower</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>minPower</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>minPower</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>newCost</name> <init>= <expr><name><name>cost</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <name><name>minPower</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>y</name></expr>]</index></name> <operator>-</operator> <name><name>minPower</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <name>newMinPower</name> <operator>+</operator> <name>weight</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>cost</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>y</name></expr>]</index></name> <operator>&gt;</operator> <name>newCost</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>par</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>par</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cost</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>newCost</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>minPower</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>newMinPower</name></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></then></if>
	<return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>weight</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>weight</name> <operator>*=</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>weight</name></expr>, <expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>minPower</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>cons</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>edges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>edges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>edge</name> <range>: <expr><name>edges</name></expr></range></decl></init>)</control> <block>{
		<if>if <condition>(<expr><call><name>mbJoin</name><argument_list>(<argument><expr><name><name>edge</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>edge</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>edge</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> 
			<block type="pseudo"><expr_stmt><expr><call><name><name>cons</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>edge</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>sol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>powers</name></decl>;</decl_stmt> 
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
		<if>if <condition>(<expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>sol</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument>n</argument>)</argument_list></macro> <block>{
				<if>if <condition>(<expr><call><name>parent</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name> <operator>&amp;&amp;</operator> <name><name>c</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>minPower</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>powers</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>
			}</block>
		}</block></then></if>
	}</block>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>sol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>powers</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name> <range>: <expr><name>powers</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>cons</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>pii</name></type> <name>par</name> <range>: <expr><name>cons</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>par</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>par</name><operator>.</operator><name>second</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
