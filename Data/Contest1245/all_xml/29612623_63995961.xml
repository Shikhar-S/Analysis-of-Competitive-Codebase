<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29612623_63995961.cpp"><comment type="line">// 17:30</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)x.size()</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ON</name></cpp:macro></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ON</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; endl</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name> <init>= <expr><name>int</name></expr></init></parameter>&gt;</parameter_list></template>
<type><name>T</name></type> <name>input</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>T</name></type> <name>res</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>res</name></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>It</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>input_seq</name><parameter_list>(<parameter><decl><type><name>It</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>It</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name> <init>= <expr><name>cin</name></expr></init></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>generate</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name><name>input</name><argument_list type="generic">&lt;<argument><expr><name><typename>typename</typename> <name><name>remove_reference</name><argument_list type="generic">&lt;<argument><expr><decltype>decltype<argument_list>(<argument><expr><operator>*</operator><name>begin</name></expr></argument>)</argument_list></decltype></expr></argument>&gt;</argument_list></name><operator>::</operator><name>type</name></name></expr></argument>&gt;</argument_list></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>It</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>output</name><parameter_list>(<parameter><decl><type><name>It</name></type> <name>begin</name></decl></parameter>, <parameter><decl><type><name>It</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name> <init>= <expr><name>cerr</name></expr></init></decl></parameter>)</parameter_list> <block>{
    <while>while <condition>(<expr><name>begin</name> <operator>!=</operator> <name>end</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <operator>*</operator><operator>(</operator><name>begin</name><operator>++</operator><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>


<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ON</name></cpp:ifdef>
<comment type="line">//    freopen("../in.txt", "r", stdin);</comment>
<comment type="line">//    freopen("../out.txt", "w", stdout);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>input</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>input</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>input</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><call><name>gcd</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">"Finite"</literal></expr> </then><else>: <expr><literal type="string">"Infinite"</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></while>
}</block></function>
</unit>
