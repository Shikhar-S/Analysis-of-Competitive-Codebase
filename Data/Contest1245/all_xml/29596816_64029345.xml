<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29596816_64029345.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>q</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int q=a,q##_end_=b;q&lt;=q##_end_;++q)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dep</name><parameter_list>(<parameter><type><name>q</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int q=a,q##_end_=b;q&gt;=q##_end_;--q)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,b,sizeof a )</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>void</name></type> <name>in</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>r</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>r</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></while>
	<do>do <block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><operator>(</operator><name>r</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>r</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>c</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt></block>
	while<condition>(<expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
	<if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><operator>-</operator><name>r</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>L</name></decl>,<decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>mul_3</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>lim_l</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>lim_r</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>now</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><operator>!</operator><name>lim_l</name><operator>&amp;&amp;</operator><operator>!</operator><name>lim_r</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>mul_3</name><index>[<expr><name>now</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>lim_l</name></expr>]</index><index>[<expr><name>lim_r</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>lim_l</name></expr>]</index><index>[<expr><name>lim_r</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>lim_l</name></expr>]</index><index>[<expr><name>lim_r</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>lim_l</name><operator>&amp;&amp;</operator><name>lim_r</name></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>L</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>now</name><operator>)</operator></expr>)</condition><then><block>{
			<expr_stmt><expr><name>s</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>now</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><operator>!</operator><operator>(</operator><name>R</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>now</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>R</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>now</name><operator>)</operator></expr>)</condition><then><block>{
			<expr_stmt><expr><name>s</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>now</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>!</operator><operator>(</operator><name>L</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>now</name><operator>)</operator><operator>)</operator></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>s</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>now</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>!</operator><operator>(</operator><name>L</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>now</name><operator>)</operator><operator>)</operator></expr></argument>,<argument><expr><operator>!</operator><operator>(</operator><name>R</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>now</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name><name>dp</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>lim_l</name></expr>]</index><index>[<expr><name>lim_r</name></expr>]</index></name><operator>=</operator><name>s</name></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>lim_l</name></expr>)</condition><then><block>{
		<if>if<condition>(<expr><name>L</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>now</name><operator>)</operator></expr>)</condition><then><block>{
			<return>return <expr><name><name>dp</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>lim_l</name></expr>]</index><index>[<expr><name>lim_r</name></expr>]</index></name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>now</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>dfs</name><argument_list>(<argument><expr><name>now</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr>;</return>
		}</block></then></if>
		<return>return <expr><name><name>dp</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>lim_l</name></expr>]</index><index>[<expr><name>lim_r</name></expr>]</index></name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>now</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>R</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>now</name><operator>)</operator></expr>)</condition><then><block>{
		<return>return <expr><name><name>dp</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>lim_l</name></expr>]</index><index>[<expr><name>lim_r</name></expr>]</index></name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>now</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>dfs</name><argument_list>(<argument><expr><name>now</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr>;</return>
	}</block></then></if>
	<return>return <expr><name><name>dp</name><index>[<expr><name>now</name></expr>]</index><index>[<expr><name>lim_l</name></expr>]</index><index>[<expr><name>lim_r</name></expr>]</index></name><operator>=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>now</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr>;</return>
}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>l</name><operator>==</operator><operator>-</operator><literal type="number">1</literal><operator>||</operator><name>r</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name>mem</name><argument_list>(<argument><expr><name>vis</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>L</name><operator>=</operator><name>l</name></expr><operator>,</operator><expr><name>R</name><operator>=</operator><name>r</name></expr>;</expr_stmt>
<comment type="line" format="doxygen">////	cout&lt;&lt;l&lt;&lt;' '&lt;&lt;r&lt;&lt;' '&lt;&lt;dfs(30,1,1)&lt;&lt;endl;</comment>
	<return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name><name>mul_3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>q</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">35</literal></argument>)</argument_list></macro><expr_stmt><expr><name><name>mul_3</name><index>[<expr><name>q</name></expr>]</index></name><operator>=</operator><name><name>mul_3</name><index>[<expr><name>q</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>in</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><call><name>get</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>get</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal><operator>+</operator><call><name>get</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function> </unit>
