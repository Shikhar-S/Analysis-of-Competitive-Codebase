<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618873_64015790.cpp"><comment type="block">/*input
nnnuuu

*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll, ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>firstw</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>INT_MAX / 2ll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; fixed &lt;&lt; #a &lt;&lt; " = " &lt;&lt; a &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">// #define int ll</comment>
<comment type="line">// #pragma GCC optimize("Ofast")</comment>

<comment type="line">//coding in car is hard</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>fpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <comment type="line">//a ^ b</comment>
    <if>if<condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>(</operator><name>a</name> <operator>%</operator> <name>mod</name><operator>)</operator></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>ll</name></type> <name>pow</name> <init>= <expr><call><name>fpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>rez</name> <init>= <expr><operator>(</operator><name>pow</name> <operator>*</operator> <name>pow</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr></init></decl>;</decl_stmt>

    <if>if<condition>(<expr><name>b</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>rez</name> <operator>=</operator> <operator>(</operator><name>rez</name> <operator>*</operator> <name>a</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>

    <return>return <expr><name>rez</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>inverse</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>fpow</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>mod</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>dv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><operator>(</operator><name>a</name> <operator>*</operator> <call><name>inverse</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</return>
}</block></function>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>fact</name><index>[<expr><name>maxn</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>C</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><call><name>dv</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><name><name>fact</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>fact</name><index>[<expr><name>n</name> <operator>-</operator> <name>k</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>maxn</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fact</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
	}</block></for>

	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>n</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>char</name></type> <name>t</name> <init>= <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>kiek</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>t</name></expr>)</condition><block>{
				<expr_stmt><expr><name>kiek</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			}</block></while>
			<comment type="line">// db(kiek);</comment>

			<decl_stmt><decl><type><name>ll</name></type> <name>vars</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>ll</name></type> <name>lets</name> <init>= <expr><operator>(</operator><name>kiek</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>lets</name> <operator>&lt;=</operator> <name>kiek</name></expr>;</condition> <incr><expr><name>lets</name><operator>++</operator></expr></incr>)</control><block>{
				<expr_stmt><expr><name>vars</name> <operator>+=</operator> <call><name>C</name><argument_list>(<argument><expr><name>lets</name></expr></argument>, <argument><expr><name>kiek</name> <operator>-</operator> <name>lets</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>vars</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><name>ans</name> <operator>*=</operator> <name>vars</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

		}</block></then></if>

		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if>

	}</block></for>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

}</block></function>
</unit>
