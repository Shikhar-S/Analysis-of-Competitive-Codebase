<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29606316_63996034.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<comment type="line">//#include &lt;math.h&gt;</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/STACK:36777216"</cpp:literal><name>)</name></cpp:pragma>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>flu</name></cpp:macro> <cpp:value>fflush(stdout)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gg</name></cpp:macro> <cpp:value>return 0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mod</name> <init>= <comment type="block">/*27449*/</comment><comment type="block">/*998244353*/</comment> <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl> <comment type="block">/*1e9 + 9*/</comment>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>pi</name> <init>= <expr><call><name>acosl</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ifstream</name></type> <name>in</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ofstream</name></type> <name>out</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name> <operator>%</operator> <name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"Finite\n"</literal></expr> </then><else>: <expr><literal type="string">"Infinite\n"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>gg</name></expr>;</expr_stmt>
}</block></function></unit>
