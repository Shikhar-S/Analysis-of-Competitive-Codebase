<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29596834_64003232.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>int</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>maxn</name><init>=<expr><literal type="number">1e3</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<function><type><name>LL</name></type> <name>Read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>LL</name></type> <name>x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>LL</name></type> <name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>sta</name><index>[<expr><literal type="number">300</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Ans</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>T</name><operator>=</operator><call><name>Read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>n</name><init>=<expr><call><name>Read</name><argument_list>()</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>a</name><argument_list>(<argument><expr><call><name>Read</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>b</name><argument_list>(<argument><expr><call><name>Read</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>c</name><argument_list>(<argument><expr><call><name>Read</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">" %s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>S</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>P</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>R</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>sta</name><index>[<expr><name>S</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>sta</name><index>[<expr><name>P</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>sta</name><index>[<expr><name>R</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>sta</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<decl_stmt><decl><type><name>LL</name></type> <name>s1</name><argument_list>(<argument><expr><name><name>sta</name><index>[<expr><name>S</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>s2</name><argument_list>(<argument><expr><name><name>sta</name><index>[<expr><name>R</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>s3</name><argument_list>(<argument><expr><name><name>sta</name><index>[<expr><name>P</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>ans</name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>s1</name></expr></argument>)</argument_list></call><operator>+</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>)</argument_list></call><operator>+</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>ans</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>Ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
			<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>up</name><init>=<expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>up</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
				<expr_stmt><expr><name><name>Ans</name><index>[<expr><name><name>sta</name><index>[<expr><name>S</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>R</name></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><name>a</name><operator>-=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>up</name><init>=<expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>up</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
				<expr_stmt><expr><name><name>Ans</name><index>[<expr><name><name>sta</name><index>[<expr><name>R</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>P</name></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><name>b</name><operator>-=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>up</name><init>=<expr><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>up</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
				<expr_stmt><expr><name><name>Ans</name><index>[<expr><name><name>sta</name><index>[<expr><name>P</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>S</name></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><name>c</name><operator>-=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>s3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name><name>Ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>Ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else<block>{
					<if>if<condition>(<expr><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>a</name></expr><operator>,</operator><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
					<elseif>else <if>if<condition>(<expr><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>b</name></expr><operator>,</operator><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
					<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
				}</block></else></if>
			}</block></for>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></while>
}</block></function></unit>
