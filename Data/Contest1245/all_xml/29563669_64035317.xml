<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29563669_64035317.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ini</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>dir</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>now</name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>now</name><operator>!=</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name><name>now</name><operator>.</operator><name>second</name></name><operator>+</operator><name>dir</name><operator>==</operator><literal type="number">10</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>now</name><operator>.</operator><name>first</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name><name>now</name><operator>.</operator><name>second</name></name><operator>+</operator><name>dir</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>now</name><operator>.</operator><name>first</name></name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>now</name><operator>.</operator><name>second</name></name><operator>+=</operator><name>dir</name></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>ini</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name><name>dp</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>h</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>o</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>o</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>o</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>h</name><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">6</literal></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">7</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name><init>=<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><name><name>v</name><index>[<expr><name>i</name><operator>-</operator><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>d</name><init>=<expr><name><name>v</name><index>[<expr><name>i</name><operator>-</operator><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>+=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>c</name><operator>-</operator><name><name>h</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>/</operator><literal type="number">6.0</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>+=</operator><literal type="number">1.0</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
