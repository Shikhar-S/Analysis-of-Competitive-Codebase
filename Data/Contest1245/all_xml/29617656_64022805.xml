<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617656_64022805.cpp"><comment type="block">/*
 * "Voce acha que esta um passo a minha frente, mas na verdade,
 * estou uma volta ao mundo menos um passo a frente de voce", ppA, Lo (Jan, 2018)
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>dp</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>go</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
  <if>if<condition>(<expr><name>i</name> <operator>&gt;=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>

  <if>if<condition>(<expr><call><name><name>dp</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><call><name>ii</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>r</name> <init>= <expr><name><name>dp</name><index>[<expr><call><name>ii</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if>if<condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">2</literal> <operator>&lt;=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>+</operator> <call><name>go</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
  }</block></then></if>

  <if>if<condition>(<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>+</operator> <call><name>go</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>go</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>no</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name>last</name> <init>= <expr><literal type="char">'@'</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>c</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control> <block>{
    <if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'w'</literal> <operator>or</operator> <name>c</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><call><name>no</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>last</name> <operator>==</operator> <literal type="char">'u'</literal> <operator>or</operator> <name>last</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
      <if>if<condition>(<expr><name>last</name> <operator>==</operator> <name>c</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>cnt</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if>
    <expr_stmt><expr><name>last</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
  }</block></for>

  <if>if<condition>(<expr><name>cnt</name></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>cnt</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>go</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
