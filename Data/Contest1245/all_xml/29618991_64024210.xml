<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618991_64024210.cpp"><comment type="line">// dile a la jardinera que traigo flores</comment>
<comment type="line">// corner cases // int vs ll // cin vs scanf // clear structures</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int(x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x,v,sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FER</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = int(a); i &lt; int(b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>trace</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>

<struct>struct <name>UF</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>power</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
	<constructor><name>UF</name><parameter_list>()</parameter_list><block>{ <macro><name>FER</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro> <expr_stmt><expr><name><name>power</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> }</block></constructor>
	<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i</name><operator>)</operator></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr>;</return> }</block></function>
	<function><type><name>void</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{	
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>power</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>power</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>power</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>power</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> 
	}</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>UF</name></type> <name>uf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>stat</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>getCost</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dx</name> <init>= <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dy</name> <init>= <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>dx</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name>dy</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>kruskal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>edges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>edges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>tup</name> <range>: <expr><name>edges</name></expr></range></decl></init>)</control><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><name><name>tup</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>tup</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>tup</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name><name>uf</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><call><name><name>uf</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>uf</name><operator>.</operator><name>power</name><index>[<expr><name>a</name></expr>]</index></name> <operator>and</operator> <name><name>uf</name><operator>.</operator><name>power</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<if>if<condition>(<expr><name>u</name> <operator>==</operator> <name>v</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>stat</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>cost</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>uf</name><operator>.</operator><name>power</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then><elseif>else <if>if<condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>cost</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>uf</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>uf</name><operator>.</operator><name>power</name><index>[<expr><call><name><name>uf</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

	<expr_stmt><expr><name>fastio</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
			<expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><call><name>getCost</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>ii</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>kruskal</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>sz</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <range>: <expr><name>stat</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>sz</name><argument_list>(<argument><expr><name>conn</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>ii</name></type> <name>par</name> <range>: <expr><name>conn</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>par</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>par</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
