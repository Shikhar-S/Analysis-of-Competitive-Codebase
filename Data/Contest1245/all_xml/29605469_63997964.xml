<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29605469_63997964.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pie</name></cpp:macro> <cpp:value>acos(-1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sii</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d %d",&amp;a,&amp;b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>siii</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d %d %d",&amp;a,&amp;b,&amp;c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sll</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld %lld",&amp;a,&amp;b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>slll</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld %lld %lld",&amp;a,&amp;b,&amp;c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name><parameter_list>(<parameter><type><name>st</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%s",st)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sch</name><parameter_list>(<parameter><type><name>ch</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%ch",&amp;ch)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ps</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%s",a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>newLine</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>printf("\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d",a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d %d",a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>piii</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d %d %d",a,b,c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pl</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld",a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld %lld",a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>plll</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld %lld %lld",a,b,c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lf",a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pdd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lf %lf",a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pddd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lf %lf %lf",a,b,c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pch</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%ch",c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug1</name><parameter_list>(<parameter><type><name>str</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%s=%d\n",str,a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug2</name><parameter_list>(<parameter><type><name>str1</name></type></parameter>,<parameter><type><name>str2</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%s=%d %s=%d\n",str1,a,str2,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug3</name><parameter_list>(<parameter><type><name>str1</name></type></parameter>,<parameter><type><name>str2</name></type></parameter>,<parameter><type><name>str3</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%s=%d %s=%d %s=%d\n",str1,a,str2,b,str3,c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug4</name><parameter_list>(<parameter><type><name>str1</name></type></parameter>,<parameter><type><name>str2</name></type></parameter>,<parameter><type><name>str3</name></type></parameter>,<parameter><type><name>str4</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%s=%d %s=%d %s=%d %s=%d\n",str1,a,str2,b,str3,c,str4,d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=0;i&lt;n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=1;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forab</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forstl</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (__typeof ((s).end ()) i = (s).begin (); i != (s).end (); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl</name></cpp:macro> <cpp:value>puts("")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lf",&amp;a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sdd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lf %lf",&amp;a,&amp;b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sddd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lf %lf %lf",&amp;a,&amp;b,&amp;c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sp</name></cpp:macro> <cpp:value>printf(" ")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mpr</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pub</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pob</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>pop_back(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>ara</name></type></parameter>,<parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(ara,value,sizeof(ara))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>INT_MAX</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>checkbit</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(n &amp; (1&lt;&lt;pos))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setbit</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>pos</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(n  (1&lt;&lt;pos))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>para</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>ara</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=a;i&lt;=b;i++){\
    if(i!=0){printf(" ");}\
    cout&lt;&lt;ara[i];\
}\
printf("\n");</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pvec</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=0;i&lt;vec.size();i++){\
    if(i!=0){printf(" ");}\
    cout&lt;&lt;vec[i];\
}\
printf("\n");</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppara</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>ara</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=0;i&lt;n;i++){\
    for(j=0;j&lt;m;j++){\
        if(j!=0){printf(" ");}\
        cout&lt;&lt;ara[i][j];\
    }\
    printf("\n");\
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppstructara</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>ara</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=0;i&lt;n;i++){\
    printf("%d:\n",i);\
    for(j=0;j&lt;m;j++){\
        cout&lt;&lt;ara[i][j];printf("\n");\
    }\
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppvec</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=0;i&lt;n;i++){\
    printf("%d:",i);\
    for(j=0;j&lt;vec[i].size();j++){\
        if(j!=0){printf(" ");}\
        cout&lt;&lt;vec[i][j];\
    }\
    printf("\n");\
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppstructvec</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=0;i&lt;n;i++){\
    printf("%d:",i);\
    for(j=0;j&lt;vec[i].size();j++){\
        cout&lt;&lt;vec[i][j];printf("\n");\
    }\
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sara</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>ara</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=a;i&lt;=b;i++){\
    scanf("%d",&amp;ara[i]);\
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pstructara</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>ara</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=a;i&lt;=b;i++){\
    cout&lt;&lt;ara[i];nl;\
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pstructvec</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=0;i&lt;vec.size();i++){\
    cout&lt;&lt;vec[i];nl;\
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pstructstl</name><parameter_list>(<parameter><type><name>stl</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(__typeof(stl.begin()) it=stl.begin();it!=stl.end();++it){\
    x=*it;\
    cout&lt;&lt;x;nl;\
}\
nl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pstl</name><parameter_list>(<parameter><type><name>stl</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(__typeof(stl.begin()) it=stl.begin();it!=stl.end();++it){\
    if(it!=stl.begin()){sp;}\
    pi(*it);\
}\
nl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppairvec</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=0;i&lt;vec.size();i++){\
    cout&lt;&lt;vec[i].first;sp;cout&lt;&lt;vec[i].second;printf("\n");\
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppairara</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>ara</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=a;i&lt;=b;i++){\
    cout&lt;&lt;ara[i].first;sp;cout&lt;&lt;ara[i].second;printf("\n");\
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pppairvec</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>vec</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=0;i&lt;n;i++){\
    printf("%d:\n",i);\
    for(j=0;j&lt;vec[i].size();j++){\
        cout&lt;&lt;vec[i][j].first;sp;cout&lt;&lt;vec[i][j].second;nl;\
    }\
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pppairara</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>ara</name></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>for(i=0;i&lt;n;i++){\
    printf("%d:\n",i);\
    for(j=0;j&lt;m;j++){\
        cout&lt;&lt;ara[i][j].first;printf(" ");cout&lt;&lt;ara[i][j].second;nl;\
    }\
}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name></cpp:macro> <cpp:value>2 * 100010</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//bool status[100010];</comment>
<comment type="line">//vector &lt;int&gt; prime;</comment>
<comment type="line">//void siv(){</comment>
<comment type="line">//    int N = 100005, i, j; prime.clear();</comment>
<comment type="line">//    int sq = sqrt(N);</comment>
<comment type="line">//    for(i = 4; i &lt;= N; i += 2){ status[i] = true; }</comment>
<comment type="line">//    for(i = 3; i &lt;= sq; i+= 2){</comment>
<comment type="line">//        if(status[i] == false){</comment>
<comment type="line">//            for(j = i * i; j &lt;= N; j += i){ status[j] = true; }</comment>
<comment type="line">//        }</comment>
<comment type="line">//    }</comment>
<comment type="line">//    status[1] = true;</comment>
<comment type="line">//    for1(i, N){ if(!status[i]){ prime.pub(i); } }</comment>
<comment type="line">//}</comment>
<function><type><name>int</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_b</name></decl></parameter>)</parameter_list><block>{
   <expr_stmt><expr><name>_a</name> <operator>=</operator> <operator>(</operator><name>_a</name> <operator>+</operator> <name>MOD</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>_b</name> <operator>=</operator> <operator>(</operator><name>_b</name> <operator>+</operator> <name>MOD</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
   <return>return <expr><operator>(</operator><name>_a</name> <operator>+</operator> <name>_b</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_b</name></decl></parameter>)</parameter_list><block>{
   <expr_stmt><expr><name>_a</name> <operator>=</operator> <operator>(</operator><name>_a</name> <operator>+</operator> <name>MOD</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>_b</name> <operator>=</operator> <operator>(</operator><name>_b</name> <operator>+</operator> <name>MOD</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
   <return>return <expr><operator>(</operator><call>(<name>ll</name>)<argument_list>(<argument><expr><operator>(</operator><name>ll</name><operator>)</operator><name>_a</name> <operator>*</operator> <operator>(</operator><name>ll</name><operator>)</operator><name>_b</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>input</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sii</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>g</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>__gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>g</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name>ps</name><argument_list>(<argument><expr><literal type="string">"Finite\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{ <expr_stmt><expr><call><name>ps</name><argument_list>(<argument><expr><literal type="string">"Infinite\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
<comment type="line">//    freopen("input.txt","r",stdin);</comment>
<comment type="line">//    freopen("output.txt", "w", stdout);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>cs</name></decl>, <decl><type ref="prev"/><name>ts</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>si</name><argument_list>(<argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>for0</name><argument_list>(<argument>cs</argument>, <argument>ts</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><call><name>input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block>
}</block></function>
</unit>
