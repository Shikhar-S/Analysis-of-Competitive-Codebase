<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610768_64014707.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000*1000*1000+7</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>      <comment type="line">// Initialize result</comment>
    
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>%</operator> <name>p</name></expr>;</expr_stmt>  <comment type="line">// Update x if it is more than or</comment>
    <comment type="line">// equal to p</comment>
    
    <while>while <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{
        <comment type="line">// If y is odd, multiply x with result</comment>
        <if>if <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name><operator>*</operator><name>x</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt></block></then></if>
        
        <comment type="line">// y must be even now</comment>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// y = y/2</comment>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>ss</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>ss</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>fac</name><index>[<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">1e5</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>fac</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <if>if<condition>(<expr><call><name><name>ss</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call><operator>&lt;=</operator><call><name><name>ss</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>||</operator><call><name><name>ss</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call><operator>&lt;=</operator><call><name><name>ss</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"0\n"</literal></expr>;</expr_stmt>
    }</block></then>
    <else>else
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ss</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>tans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>count</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <while>while<condition>(<expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition>
                <block>{
                    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                }</block></while>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>count</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>kk</name><init>=<expr><name><name>fac</name><index>[<expr><name>count</name><operator>-</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>kk</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>kk</name><operator>*=</operator><call><name>power</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>kk</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>kk</name><operator>*=</operator><call><name>power</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>count</name><operator>-</operator><name>i</name><operator>-</operator><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>kk</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tans</name><operator>+=</operator><name>kk</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><name>ans</name><operator>*=</operator><name>tans</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>count</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>tans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <while>while<condition>(<expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition>
                <block>{
                    <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
                }</block></while>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>count</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>kk</name><init>=<expr><name><name>fac</name><index>[<expr><name>count</name><operator>-</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>kk</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>kk</name><operator>*=</operator><call><name>power</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>kk</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>kk</name><operator>*=</operator><call><name>power</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>count</name><operator>-</operator><name>i</name><operator>-</operator><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>kk</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tans</name><operator>+=</operator><name>kk</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>tans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                }</block></for>
                <expr_stmt><expr><name>ans</name><operator>*=</operator><name>tans</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
