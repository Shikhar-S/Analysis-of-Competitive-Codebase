<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29566635_64023712.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repeat</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a),i##__end=(b);i&lt;i##__end;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repeat_back</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(b)-1,i##__end=(a);i&gt;=i##__end;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mst</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a),(x),sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>100010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1e9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<struct>struct <name>DSU</name><block>{<public type="default"><comment type="line">//åå¹¶ï¼d[x]=d[y]ï¼æ¥æ¾ï¼d[x]==d[y]</comment>
	<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">2010</literal></expr>]</index></name></decl>;</decl_stmt>
	<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
		<macro><name>repeat</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>int</name></type> <name>fa</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><ternary><condition><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name>x</name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>fa</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>int</name><modifier>&amp;</modifier></type> <name>operator<name>[]</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><name><name>a</name><index>[<expr><call><name>fa</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
	}</block></function>
</public>}</block><decl><name>d</name></decl>;</struct>
<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>a</name><index>[<expr><literal type="number">2010</literal></expr>]</index></name></decl>;</struct>
<struct>struct <name>node2</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>cost</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><name>node2</name></type> <name>b</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{<return>return <expr><name>cost</name><operator>&gt;</operator><name><name>b</name><operator>.</operator><name>cost</name></name></expr>;</return>}</block></function>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>node2</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ansbuild</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>anspath</name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>init</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>repeat</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
	<macro><name>repeat</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
	<macro><name>repeat</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name></expr>;</expr_stmt>
	<macro><name>repeat</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<macro><name>repeat</name><argument_list>(<argument>j</argument>,<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>(</operator><name>node2</name><operator>)</operator><block>{<expr><name>i</name></expr>,<expr><name>i</name></expr>,<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>(</operator><name>node2</name><operator>)</operator><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>,
		<expr><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name><operator>+</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>k</name><operator>)</operator><operator>*</operator>
		<operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>u</name></expr></init></decl>,<decl><type ref="prev"/><name>v</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>v</name></expr></init></decl>,<decl><type ref="prev"/><name>cost</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>cost</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>u</name><operator>==</operator><name>v</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><name><name>d</name><index>[<expr><name>n</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then>
			<else>else<block>{
				<expr_stmt><expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name><name>d</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>ansbuild</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>+=</operator><name>cost</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>!=</operator><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>d</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name><name>d</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>anspath</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>pii</name><operator>)</operator><block>{<expr><name>u</name></expr>,<expr><name>v</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>+=</operator><name>cost</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ansbuild</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<macro><name>repeat</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>ansbuild.size()</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ansbuild</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><call><name><name>anspath</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<macro><name>repeat</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>anspath.size()</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>anspath</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal>
		<operator>&lt;&lt;</operator><name><name>anspath</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
