<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615668_64029201.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">1000001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>k</name><index>[<expr><literal type="number">1000001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fa</name><index>[<expr><literal type="number">1000001</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>fuck</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>a</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</struct>
<struct>struct <name>edge</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>v</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>e</name><index>[<expr><literal type="number">5000001</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>tot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tot1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tot2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ans1</name><index>[<expr><literal type="number">1000001</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>aaaa</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>ans2</name><index>[<expr><literal type="number">1000001</literal></expr>]</index></name></decl>;</struct>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>edge</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>edge</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name><name>x</name><operator>.</operator><name>v</name></name><operator>&lt;</operator><name><name>y</name><operator>.</operator><name>v</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><ternary><condition><expr><name>x</name><operator>==</operator><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>get</name><argument_list>(<argument><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>
<function><name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	  <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	  <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>=</operator><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>,<expr><operator>(</operator><literal type="number">1LL</literal><operator>*</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1LL</literal><operator>*</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><literal type="number">1LL</literal><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>}</block></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	  <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>=</operator><block>{<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>i</name></expr>,<expr><literal type="number">1LL</literal><operator>*</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>e</name><operator>+</operator><name>tot</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	  <block type="pseudo"><expr_stmt><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>tot</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>X</name><init>=<expr><call><name>get</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>Y</name><init>=<expr><call><name>get</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>X</name><operator>==</operator><name>Y</name></expr>)</condition><then>
		  <block type="pseudo"><continue>continue;</continue></block></then></if>
		<if>if<condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>ans1</name><index>[<expr><operator>++</operator><name>tot1</name></expr>]</index></name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr>;</expr_stmt></block></then>
	  <else>else
	    <block type="pseudo"><expr_stmt><expr><name><name>ans2</name><index>[<expr><operator>++</operator><name>tot2</name></expr>]</index></name><operator>=</operator><block>{<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr>,<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>r</name></expr>}</block></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name><name>fa</name><index>[<expr><name>X</name></expr>]</index></name><operator>=</operator><name>Y</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name><operator>+=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name>s</name><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name><operator>&lt;&lt;</operator><name>tot1</name><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>tot1</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	  <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name><name>ans1</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name><operator>&lt;&lt;</operator><name>tot2</name><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>tot2</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	  <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><name><name>ans2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>ans2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>&lt;&lt;</operator><name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
