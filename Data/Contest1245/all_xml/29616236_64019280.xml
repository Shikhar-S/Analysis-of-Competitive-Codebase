<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616236_64019280.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fasty</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false), cin.tie(0), cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>task</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a = b; a &lt;= c; ++a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ford</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a = b; a &gt;= c; --a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fv</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto &amp;a : b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reset</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(f, x, sizeof(f))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vt</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpi</name></cpp:macro> <cpp:value>vector&lt;pair&lt;int, int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>two</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1ll &lt;&lt; x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &gt;&gt; i &amp; 1ll)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>onbit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x | (1ll &lt;&lt; i))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>offbit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x &amp; ~(1ll &lt;&lt; i))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>dd</name><index>[<expr><literal type="number">1005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>test</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>test</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>test</name><operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>reset</name><argument_list>(<argument><expr><name>dd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="char">' '</literal> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <macro><name>For</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c</name><operator>--</operator></expr><operator>,</operator> <expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>dd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name><operator>--</operator></expr><operator>,</operator> <expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>dd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>b</name><operator>--</operator></expr><operator>,</operator> <expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>dd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
        }</block>
        <if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>a1</name><init>=<expr><name>a</name></expr></init></decl>,<decl><type ref="prev"/><name>b1</name><init>=<expr><name>b</name></expr></init></decl>,<decl><type ref="prev"/><name>c1</name><init>=<expr><name>c</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>dd</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>a1</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dd</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>a1</name><operator>--</operator></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>(<expr><name>b1</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dd</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name>b1</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
                <else>else <block type="pseudo"><expr_stmt><expr><name><name>dd</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name>c1</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
            }</block></then></if>
            <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
            <block>{
                <if>if<condition>(<expr><name><name>dd</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><name><name>dd</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"P"</literal></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><name><name>dd</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr>;</expr_stmt></block></then></if>
            }</block>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
}</block></function>
</unit>
