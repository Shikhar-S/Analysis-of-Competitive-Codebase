<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29609982_64012009.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>vt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>vt.begin(),vt.end()</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>maxn</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>,<decl><type ref="prev"/><name>inf</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>aa</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("ss.inp","r",stdin);</comment>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>t</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>ch</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>aa</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <elseif>else <if>if <condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>aa</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><name><name>aa</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name><name>aa</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>b</name><operator>--</operator></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>d</name><operator>++</operator></expr>;</expr_stmt></block></then>
            <elseif>else <if>if <condition>(<expr><name><name>aa</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>c</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c</name><operator>--</operator></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr><operator>,</operator><expr><name>d</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
            <elseif>else <if>if <condition>(<expr><name><name>aa</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name><operator>--</operator></expr><operator>,</operator><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr><operator>,</operator><expr><name>d</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if></block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>a</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
                }</block></then>
                <elseif>else <if>if <condition>(<expr><name>b</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                }</block></then></if></elseif>
                <else>else <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></else></if>
            }</block></then></if></block></for>
        <if>if <condition>(<expr><name>d</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"P"</literal></expr>;</expr_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"S"</literal></expr>;</expr_stmt></block></then></if></elseif>
                <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"R"</literal></expr>;</expr_stmt></block></else></if></block></for>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
