<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29575936_64016641.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>S</name></parameter>, <parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">","</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>a</name><range>: <expr><name>v</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>a</name><range>: <expr><name>S</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>a</name><range>: <expr><name>S</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>S</name></parameter>, <parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>M</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>m</name><range>: <expr><name>M</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>m</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">"-&gt;"</literal> <operator>&lt;&lt;</operator> <name><name>m</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">") "</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>S</name></parameter>, <parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>first</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>second</name></name> <operator>+</operator> <name><name>b</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>S</name></parameter>, <parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>S</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>a</name><operator>.</operator><name>second</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<struct><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
struct <name>WeightedGraph</name> <block>{<public type="default">
    <struct>struct <name>Edge</name> <block>{<public type="default">
        <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>T</name></type> <name>w</name></decl>;</decl_stmt>
        <constructor><name>Edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>w</name></decl></parameter>)</parameter_list><member_init_list>: <call><name>s</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call>, <call><name>t</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call>, <call><name>w</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    </public>}</block>;</struct>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>src</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>edge</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>E</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vis</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>dist</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>T</name></type> <name>inf</name> <init>= <expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>negative_cycle</name></decl>;</decl_stmt>

    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator> <name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>edge</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name>negative_cycle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>add_directed_edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>w</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>edge</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>E</name><index>[<expr><name>s</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><call><name><name>edge</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>void</name></type> <name>source_dijkstra</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>S</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vis</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dist</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vis</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dist</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>!</operator><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vis</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>e</name><range>: <expr><name><name>E</name><index>[<expr><name>s</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>edge</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>t</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>T</name></type> <name>w</name> <init>= <expr><name><name>edge</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>w</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>vis</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name>w</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>parent</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>t</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&gt;</operator> <name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name>w</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name>w</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if></elseif></if>
            }</block></for>
        }</block></while>
    }</block></function>

    <function><type><name>void</name></type> <name>source_prim</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>S</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>vis</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dist</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vis</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dist</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>src</name></expr>]</index></name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>!</operator><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call><operator>-&gt;</operator><name>second</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vis</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>e</name><range>: <expr><name><name>E</name><index>[<expr><name>s</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>edge</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>t</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>T</name></type> <name>w</name> <init>= <expr><name><name>edge</name><index>[<expr><name>e</name></expr>]</index></name><operator>.</operator><name>w</name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>t</name></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>vis</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>parent</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>t</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&gt;</operator> <name>w</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if></elseif></if>
            }</block></for>
        }</block></while>
    }</block></function>

    <function><type><name>void</name></type> <name>source_bellman_ford</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set_infinity</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>src</name></name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vis</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>dist</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>inf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>vis</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dist</name><index>[<expr><name>src</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name><range>: <expr><name>edge</name></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>e</name><operator>.</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>e</name><operator>.</operator><name>t</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>T</name></type> <name>w</name> <init>= <expr><name><name>e</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;</operator> <name>inf</name> <operator>&amp;&amp;</operator> <name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&gt;</operator> <name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name>w</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>vis</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name>w</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>parent</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
        }</block></for>

        <expr_stmt><expr><name>negative_cycle</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cnt</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name><range>: <expr><name>edge</name></expr></range></decl></init>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>e</name><operator>.</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>e</name><operator>.</operator><name>t</name></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>T</name></type> <name>w</name> <init>= <expr><name><name>e</name><operator>.</operator><name>w</name></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><name>inf</name> <operator>&amp;&amp;</operator> <name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name> <operator>&lt;</operator> <name>inf</name> <operator>&amp;&amp;</operator> <name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name> <operator>&gt;</operator> <name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name> <operator>+</operator> <name>w</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>negative_cycle</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block></for>
            <if>if <condition>(<expr><operator>!</operator><name>set_infinity</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block></for>
            <expr_stmt><expr><name><name>dist</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>inf</name></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
                <for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name><range>: <expr><name>edge</name></expr></range></decl></init>)</control> <block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>e</name><operator>.</operator><name>s</name></name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name><name>e</name><operator>.</operator><name>t</name></name></expr></init></decl>;</decl_stmt>
                    <if>if <condition>(<expr><name><name>dist</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><name>inf</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>dist</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>inf</name></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></for>
        }</block></for>
    }</block></function>


    <function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>query_dist</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>dist</name></expr>;</return>
    }</block></function>

    <function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>query_route</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>A</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>s</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>A</name></expr>;</return></block></then></if>
        <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>s</name> <operator>!=</operator> <name>src</name></expr>)</condition> <block>{
            <expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>parent</name><index>[<expr><name>s</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>A</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>n</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
        }</block></while>
        <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>A</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>A</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>A</name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>query_negative_cycle</name><parameter_list>()</parameter_list> <block>{
        <return>return <expr><name>negative_cycle</name></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>dump_edge</name><parameter_list>()</parameter_list> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>edge</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"edge["</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">"]: ("</literal> <operator>&lt;&lt;</operator> <name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name>  <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>E</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"E["</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">"]: "</literal> <operator>&lt;&lt;</operator> <name><name>E</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for>
    }</block></function>

    <function><type><name>void</name></type> <name>dump</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"n: "</literal> <operator>&lt;&lt;</operator> <name>n</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"src: "</literal> <operator>&lt;&lt;</operator> <name>src</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"negative_cycle: "</literal> <operator>&lt;&lt;</operator> <name>negative_cycle</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>vis</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"vis["</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">"]: "</literal> <operator>&lt;&lt;</operator> <name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">", dist["</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">"]: "</literal> <operator>&lt;&lt;</operator> <name><name>dist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">", parent["</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">"]: "</literal> <operator>&lt;&lt;</operator> <name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"path["</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="string">"]: "</literal> <operator>&lt;&lt;</operator> <call><name>query_route</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for>
    }</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>WeightedGraph</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>graph</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>, <decl><type ref="prev"/><name>D</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>B</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name><name>C</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name><name>D</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>D</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <comment type="block">/*
    cout &lt;&lt; "n:"  &lt;&lt; n &lt;&lt; endl;
    cout &lt;&lt; "A: " &lt;&lt; A &lt;&lt; endl;
    cout &lt;&lt; "B: " &lt;&lt; B &lt;&lt; endl;
    cout &lt;&lt; "C: " &lt;&lt; C &lt;&lt; endl;
    cout &lt;&lt; "D; " &lt;&lt; D &lt;&lt; endl;
    */</comment>
    <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>add_directed_edge</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name> <init>= <expr><operator>(</operator><literal type="number">0ll</literal> <operator>+</operator> <name><name>D</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>D</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>A</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>B</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>add_directed_edge</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>add_directed_edge</name></name><argument_list>(<argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <comment type="line">// graph.dump_edge();</comment>
    <expr_stmt><expr><call><name><name>graph</name><operator>.</operator><name>source_prim</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// graph.dump();</comment>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>weight</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>dist</name> <init>= <expr><name><name>graph</name><operator>.</operator><name>dist</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>parent</name> <init>= <expr><name><name>graph</name><operator>.</operator><name>parent</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>weight</name> <operator>+=</operator> <name><name>dist</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>weight</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>P</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>E</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>P</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>P</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name><name>P</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>P</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>E</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name><range>: <expr><name>E</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
