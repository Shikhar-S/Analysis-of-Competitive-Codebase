<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29580509_64003438.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifdef>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/stack:200000000"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/detail/standard_policies.hpp&gt;</cpp:file></cpp:include>
<using><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>KeyType</name><init>=<expr><name>int</name></expr></init></parameter>,<parameter><type><name>typename</name></type> <name>Mapped</name><init>=<expr><name><name>__gnu_pbds</name><operator>::</operator><name>null_type</name></name></expr></init></parameter>,<parameter><type><name>typename</name></type> <name>Cmp_Fn</name><init>=<expr><name><name>std</name><operator>::</operator><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>KeyType</name></expr></argument>&gt;</argument_list></name></name></expr></init></parameter>,<parameter><type><name>typename</name></type> <name>Tag</name><init>=<expr><name><name>__gnu_pbds</name><operator>::</operator><name>rb_tree_tag</name></name></expr></init></parameter>,<parameter><type><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Const_Node_Iterator</name></parameter>,<parameter><type><name>typename</name></type> <name>Node_Iterator</name></parameter>,<parameter><type><name>typename</name></type> <name>Cmp_Fn_</name></parameter>,<parameter><type><name>typename</name></type> <name>Allocator_</name></parameter>&gt;</parameter_list></template><name>class</name></type> <name>Node_Update</name><init>=<expr><name><name>__gnu_pbds</name><operator>::</operator><name>tree_order_statistics_node_update</name></name></expr></init></parameter>,<parameter><type><name>typename</name></type> <name>Allocator</name><init>=<expr><name><name>std</name><operator>::</operator><name><name>allocator</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></name></expr></init></parameter>&gt;</parameter_list></template>using <name>ordered_set_t</name><init>=<type><name><name>__gnu_pbds</name><operator>::</operator><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>KeyType</name></expr></argument>,<argument><expr><name>Mapped</name></expr></argument>,<argument><expr><name>Cmp_Fn</name></expr></argument>,<argument><expr><name>Tag</name></expr></argument>,<argument><expr><name>Node_Update</name></expr></argument>,<argument><expr><name>Allocator</name></expr></argument>&gt;</argument_list></name></name></type></init>;</using><decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>GRANDOM</name><init>=<expr><call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>high_resolution_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><struct>struct <name>ghash</name><block>{<public type="default"><function type="operator"><type><name>int</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>std</name><operator>::</operator><name><name>hash</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name><block>{}</block><operator>(</operator><name>x</name><operator>^</operator><name>GRANDOM</name><operator>)</operator></expr>;</return>}</block></function></public>}</block>;</struct><using><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>KeyType</name></parameter>&gt;</parameter_list></template>using <name>hash_table_t</name><init>=<type><name><name>__gnu_pbds</name><operator>::</operator><name><name>gp_hash_table</name><argument_list type="generic">&lt;<argument><expr><name>KeyType</name></expr></argument>,<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ghash</name></expr></argument>&gt;</argument_list></name></name></type></init>;</using><namespace>namespace <name>vn16</name><block>{<struct><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>struct <name>like_array</name><super>:<name><name>is_array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></super><block>{<public type="default"/>}</block>;</struct><struct><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>,<parameter><type><name>size_t</name></type> <name>N</name></parameter>&gt;</parameter_list></template>struct <name><name>like_array</name><argument_list type="generic">&lt;<argument><expr><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>N</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><super>:<name>true_type</name></super><block>{<public type="default"/>}</block>;</struct><struct><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>struct <name><name>like_array</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><super>:<name>true_type</name></super><block>{<public type="default"/>}</block>;</struct><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>is_like_array</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name><name>like_array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr>;</return>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_R</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>}</block></function><function><specifier>inline</specifier> <type><name>void</name></type> <name>_R</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><specifier>inline</specifier> <type><name>void</name></type> <name>_R</name><parameter_list>(<parameter><decl><type><name>int64_t</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>SCNd64</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><specifier>inline</specifier> <type><name>void</name></type> <name>_R</name><parameter_list>(<parameter><decl><type><name>double</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><specifier>inline</specifier> <type><name>void</name></type> <name>_R</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">" %c"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><specifier>inline</specifier> <type><name>void</name></type> <name>_R</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>_R</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>,<parameter><decl><type><name>size_t</name></type> <name>ie</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>ie</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>_R</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>_R</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>_R</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><specifier>inline</specifier> <type><name>void</name></type> <name>R</name><parameter_list>()</parameter_list><block>{}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>,<parameter><type><name>class</name><modifier>...</modifier></type> <name>U</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>R</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>head</name></decl></parameter>,<parameter><decl><type><name>U</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>_R</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>R</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_W</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name></expr>;</expr_stmt>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>_W</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>,<parameter><decl><type><name>size_t</name></type> <name>ie</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>ie</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<if>if<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>_W</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if><expr_stmt><expr><call><name>_W</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></for><expr_stmt><expr><call><name>_W</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>_W</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>_W</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>_W</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><init>=<expr><call><name><name>x</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init><condition><expr><name>i</name><operator>!=</operator><call><name><name>x</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><call><name>_W</name><argument_list>(<argument><expr><operator>*</operator><name>i</name><operator>++</operator></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><call><name><name>x</name><operator>.</operator><name>cbegin</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>}</block></function><function><specifier>inline</specifier> <type><name>void</name></type> <name>W</name><parameter_list>()</parameter_list><block>{}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>,<parameter><type><name>class</name><modifier>...</modifier></type> <name>U</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>W</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type><name>head</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>_W</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><if>if<condition>(<expr><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></sizeof></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>W</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>,<parameter><type><name>class</name><modifier>...</modifier></type> <name>U</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>WL</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type><name>head</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>_W</name><argument_list>(<argument><expr><name>head</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><ternary><condition><expr><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>tail</name></expr></argument>)</argument_list></sizeof></expr>?</condition><then> <expr><literal type="char">' '</literal></expr></then><else>:<expr><literal type="char">'\n'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>}</block></function><function_decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>Arg</name></parameter>,<parameter><type><name>class</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name>Arg</name><modifier>&amp;</modifier></type><name>first</name></decl></parameter>,<parameter><decl><type><name>Args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>rest</name></decl></parameter>)</parameter_list>;</function_decl><function><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name>double</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>string</name></type> <name>t</name></decl>;</decl_stmt><expr_stmt><expr><call><name>_RE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><call><name>stod</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>string</name></type> <name>t</name></decl>;</decl_stmt><expr_stmt><expr><call><name>_RE</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><call><name>stold</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function_decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list>;</function_decl><function_decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>,<parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list>;</function_decl><function_decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl><function_decl><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>,<parameter><type><name>size_t</name></type> <name>SZ</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>SZ</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>;</function_decl><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>Arg</name></parameter>,<parameter><type><name>class</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name>Arg</name><modifier>&amp;</modifier></type><name>first</name></decl></parameter>,<parameter><decl><type><name>Args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>rest</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>_RE</name><argument_list>(<argument><expr><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>_RE</name><argument_list>(<argument><expr><name>rest</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt><expr_stmt><expr><call><name>_RE</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><call><name>cd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>,<parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><call><name>_RE</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>f</name></name></expr></argument>,<argument><expr><name><name>p</name><operator>.</operator><name>s</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ie</name><init>=<expr><call><name>sz</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>ie</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>_RE</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>,<parameter><type><name>size_t</name></type> <name>SZ</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_RE</name><parameter_list>(<parameter><decl><type><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>SZ</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>SZ</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>_RE</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>}</block></function>}</block></namespace><empty_stmt>;</empty_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>prec</name></cpp:macro> <cpp:value>setprecision</cpp:value></cpp:define>
<namespace>namespace <name>vn16</name><block>{<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef><typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>llu</name>;</typedef><function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>m</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<while>while<condition>(<expr><name>n</name></expr>)</condition><block>{<decl_stmt><decl><type><name>T</name></type> <name>t</name><init>=<expr><name>m</name><operator>%</operator><name>n</name></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>m</name><operator>=</operator><name>n</name></expr>;</expr_stmt><expr_stmt><expr><name>n</name><operator>=</operator><name>t</name></expr>;</expr_stmt>}</block></while><empty_stmt>;</empty_stmt><return>return <expr><name>m</name></expr>;</return>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>exgcd</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>sa</name></decl></parameter>,<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>ta</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>q</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>sb</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>tb</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>sc</name></decl>,<decl><type ref="prev"/><name>tc</name></decl>;</decl_stmt><expr_stmt><expr><name>sa</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>ta</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><if>if<condition>(<expr><name>b</name></expr>)</condition><then><block type="pseudo"><do>do <block type="pseudo"><expr_stmt><expr><name>q</name><operator>=</operator><name>a</name><operator>/</operator><name>b</name></expr><operator>,</operator><expr><name>r</name><operator>=</operator><name>a</name><operator>-</operator><name>q</name><operator>*</operator><name>b</name></expr><operator>,</operator><expr><name>a</name><operator>=</operator><name>b</name></expr><operator>,</operator><expr><name>b</name><operator>=</operator><name>r</name></expr><operator>,</operator><expr><name>sc</name><operator>=</operator><name>sa</name><operator>-</operator><name>q</name><operator>*</operator><name>sb</name></expr><operator>,</operator><expr><name>sa</name><operator>=</operator><name>sb</name></expr><operator>,</operator><expr><name>sb</name><operator>=</operator><name>sc</name></expr><operator>,</operator><expr><name>tc</name><operator>=</operator><name>ta</name><operator>-</operator><name>q</name><operator>*</operator><name>tb</name></expr><operator>,</operator><expr><name>ta</name><operator>=</operator><name>tb</name></expr><operator>,</operator><expr><name>tb</name><operator>=</operator><name>tc</name></expr>;</expr_stmt></block>while<condition>(<expr><name>b</name></expr>)</condition>;</do></block></then></if><return>return <expr><name>a</name></expr>;</return>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>mul_inv</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>t1</name><init>=<expr><name>a</name></expr></init></decl>,<decl><type ref="prev"/><name>t2</name><init>=<expr><name>b</name></expr></init></decl>,<decl><type ref="prev"/><name>t3</name></decl>;</decl_stmt><decl_stmt><decl><type><name>T</name></type> <name>v1</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>v2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>v3</name></decl>;</decl_stmt><decl_stmt><decl><type><name>T</name></type> <name>x</name></decl>;</decl_stmt><while>while<condition>(<expr><name>t2</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>t1</name><operator>/</operator><name>t2</name></expr><operator>,</operator><expr><name>t3</name><operator>=</operator><name>t1</name><operator>-</operator><name>x</name><operator>*</operator><name>t2</name></expr><operator>,</operator><expr><name>v3</name><operator>=</operator><name>v1</name><operator>-</operator><name>x</name><operator>*</operator><name>v2</name></expr><operator>,</operator><expr><name>t1</name><operator>=</operator><name>t2</name></expr><operator>,</operator><expr><name>t2</name><operator>=</operator><name>t3</name></expr><operator>,</operator><expr><name>v1</name><operator>=</operator><name>v2</name></expr><operator>,</operator><expr><name>v2</name><operator>=</operator><name>v3</name></expr>;</expr_stmt></block></while><return>return<expr><operator>(</operator><name>v2</name><operator>+</operator><name>b</name><operator>)</operator><operator>%</operator><name>b</name></expr>;</return>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>powmod</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>MOD</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>b</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if><decl_stmt><decl><type><name>T</name></type> <name>rv</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>b</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>(</operator><name>b</name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>rv</name><operator>=</operator><operator>(</operator><name>rv</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator></expr><operator>,</operator><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name><operator>%</operator><name>MOD</name></expr><operator>,</operator><expr><name>b</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></while><return>return <expr><name>rv</name></expr>;</return>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>T</name></type> <name>isqrt</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>r</name><init>=<expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>k</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>r</name><operator>*</operator><name>r</name><operator>&gt;</operator><name>k</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></while><while>while<condition>(<expr><operator>(</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><operator>(</operator><name>r</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;=</operator><name>k</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt></block></while><return>return <expr><name>r</name></expr>;</return>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>T</name></type> <name>icbrt</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>T</name></type> <name>r</name><init>=<expr><call><name>cbrt</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>k</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>r</name><operator>*</operator><name>r</name><operator>*</operator><name>r</name><operator>&gt;</operator><name>k</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></while><return>return <expr><name>r</name></expr>;</return>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>mul_overflow</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type><name>r</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>__builtin_mul_overflow</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function><struct><template>template<parameter_list>&lt;<parameter><type><name>ll</name></type> <name>n</name></parameter>&gt;</parameter_list></template>struct <name>BitSize</name><block>{<public type="default"><enum>enum<block>{<decl><name>Size</name><init>=<expr><name><name><name>BitSize</name><argument_list type="generic">&lt;<argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><operator>::</operator><name>Size</name></name><operator>+</operator><literal type="number">1</literal></expr></init></decl>}</block>;</enum></public>}</block>;</struct><struct><template>template<parameter_list>&lt;&gt;</parameter_list></template>struct <name><name>BitSize</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><block>{<public type="default"><enum>enum<block>{<decl><name>Size</name><init>=<expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum></public>}</block>;</struct><struct><template>template<parameter_list>&lt;&gt;</parameter_list></template>struct <name><name>BitSize</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><block>{<public type="default"><enum>enum<block>{<decl><name>Size</name><init>=<expr><literal type="number">1</literal></expr></init></decl>}</block>;</enum></public>}</block>;</struct>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSIZE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BitSize&lt;n&gt;::Size)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TREESIZE</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((1&lt;&lt;(BitSize&lt;n&gt;::Size + 1))+7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITMAX</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(BitSize&lt;n&gt;::Size - 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>!defined(ONLINE_JUDGE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>begin(x), end(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).rbegin(),(x).rend()</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>TH</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_dbg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type><name>sdbg</name></decl></parameter>,<parameter><decl><type><name>TH</name></type> <name>h</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><name>sdbg</name><operator>&lt;&lt;</operator><literal type="string">"="</literal><operator>&lt;&lt;</operator><name>h</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>}</block></function><function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>TH</name></parameter>,<parameter><type><name>typename</name><modifier>...</modifier></type> <name>TA</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>_dbg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type><name>sdbg</name></decl></parameter>,<parameter><decl><type><name>TH</name></type> <name>h</name></decl></parameter>,<parameter><decl><type><name>TA</name><modifier>...</modifier></type> <name>t</name></decl></parameter>)</parameter_list><block>{<while>while<condition>(<expr><operator>*</operator><name>sdbg</name><operator>!=</operator><literal type="char">','</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><operator>*</operator><name>sdbg</name><operator>++</operator></expr>;</expr_stmt></block></while><expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><literal type="string">"="</literal><operator>&lt;&lt;</operator><name>h</name><operator>&lt;&lt;</operator><literal type="string">","</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>_dbg</name><argument_list>(<argument><expr><name>sdbg</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>t</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_dbg(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugv</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{{cerr &lt;&lt;#x &lt;&lt;" = "; for(auto itt: x) cerr &lt;&lt;*itt &lt;&lt;", "; cerr &lt;&lt;"\n"; }}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugv</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cerr</name></cpp:macro> <cpp:value>if(0)cout</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></namespace><namespace>namespace <name>vn16</name><block>{<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>int</name></type> <name>min_rotation</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>s</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>N</name><init>=<expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><for>for<control>(<init><decl><type><name>int</name></type> <name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>b</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<if>if<condition>(<expr><name>a</name><operator>+</operator><name>i</name><operator>==</operator><name>b</name><operator>||</operator><name><name>s</name><index>[<expr><operator>(</operator><name>a</name><operator>+</operator><name>i</name><operator>)</operator><operator>%</operator><name>N</name></expr>]</index></name><operator>&lt;</operator><name><name>s</name><index>[<expr><operator>(</operator><name>b</name><operator>+</operator><name>i</name><operator>)</operator><operator>%</operator><name>N</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><name>b</name><operator>+=</operator><call><name>max</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><break>break;</break>}</block></then></if><if>if<condition>(<expr><name><name>s</name><index>[<expr><operator>(</operator><name>a</name><operator>+</operator><name>i</name><operator>)</operator><operator>%</operator><name>N</name></expr>]</index></name><operator>&gt;</operator><name><name>s</name><index>[<expr><operator>(</operator><name>b</name><operator>+</operator><name>i</name><operator>)</operator><operator>%</operator><name>N</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt><break>break;</break>}</block></then></if>}</block></for></block></for><return>return <expr><name>a</name></expr>;</return>}</block></function><empty_stmt>;</empty_stmt><class><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>class <name>StackGuard</name><block>{<private>private:<decl_stmt><decl><type><name>T</name></type> <name>x</name></decl>;</decl_stmt></private><public>public:<constructor><name>StackGuard</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>x</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor><destructor><name>~<name>StackGuard</name></name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name>x</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></destructor></public>}</block>;</class>}</block></namespace><namespace>namespace <name>vn16</name><block>{}</block></namespace><empty_stmt>;</empty_stmt>
<namespace>namespace <name>vn16</name><block>{
  <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><name>GRANDOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
      <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <if>if<condition>(<expr><call><name>__gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Infinite\n"</literal></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Finite\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></function>
}</block></namespace><empty_stmt>;</empty_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>char</name><modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list><block>{
  <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name><name>vn16</name><operator>::</operator><name>main</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>
</unit>
