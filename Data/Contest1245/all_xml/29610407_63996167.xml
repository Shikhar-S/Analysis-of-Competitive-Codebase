<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610407_63996167.cpp"><comment type="line">//ÃÂ­Â·ÃÂ²Â»Â¹Ã¦Â·Â¶Â£Â¬Â±Â¬ÃÃ£ÃÂ½ÃÃÃÃ¡</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int i=0;i&lt;(n);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int i=(x);i&lt;=(y);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod_int</name></cpp:macro> <cpp:value>quick_num</cpp:value></cpp:define>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>md</name><init>=<expr><literal type="number">19260817</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>quick_num</name><block>{<public type="default">
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>num</name></decl>;</decl_stmt>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>num</name></expr>;</expr_stmt>}</block></function>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>num</name></expr>;</expr_stmt>}</block></function>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>_write</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>num</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt>}</block></function>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>print</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>num</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
</public>}</block>;</struct>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>quick_num</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>quick_num</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>_write</name><parameter_list>(<parameter><decl><type><name>quick_num</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>num</name></name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>quick_num</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>num</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function>
<function><specifier>inline</specifier> <type><name>long</name> <name>long</name></type> <name>qp</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>rt</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init><condition><expr><name>y</name></expr>;</condition><incr><expr><name>y</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><operator>(</operator><name>x</name><operator>*=</operator><name>x</name><operator>)</operator><operator>%=</operator><name>md</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>(</operator><name>rt</name><operator>*=</operator><name>x</name><operator>)</operator><operator>%=</operator><name>md</name></expr>;</expr_stmt></block></then></if></block></for>
	<return>return <expr><name>rt</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>long</name> <name>long</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>qp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>md</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function type="operator"><specifier>inline</specifier> <type><name>quick_num</name></type> <name>operator <name>+</name></name><parameter_list>(<parameter><decl><type><name>quick_num</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>quick_num</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>quick_num</name></type> <name>c</name></decl>;</decl_stmt><expr_stmt><expr><name><name>c</name><operator>.</operator><name>num</name></name><operator>=</operator><name><name>a</name><operator>.</operator><name>num</name></name><operator>+</operator><name><name>b</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>c</name><operator>.</operator><name>num</name></name><operator>&gt;=</operator><name>md</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>c</name><operator>.</operator><name>num</name></name><operator>-=</operator><name>md</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function type="operator"><specifier>inline</specifier> <type><name>quick_num</name></type> <name>operator <name>-</name></name><parameter_list>(<parameter><decl><type><name>quick_num</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>quick_num</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>quick_num</name></type> <name>c</name></decl>;</decl_stmt><expr_stmt><expr><name><name>c</name><operator>.</operator><name>num</name></name><operator>=</operator><name><name>a</name><operator>.</operator><name>num</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name><name>c</name><operator>.</operator><name>num</name></name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>c</name><operator>.</operator><name>num</name></name><operator>+=</operator><name>md</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function type="operator"><specifier>inline</specifier> <type><name>quick_num</name></type> <name>operator <name>*</name></name><parameter_list>(<parameter><decl><type><name>quick_num</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>quick_num</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>quick_num</name></type> <name>c</name></decl>;</decl_stmt><expr_stmt><expr><name><name>c</name><operator>.</operator><name>num</name></name><operator>=</operator><name><name>a</name><operator>.</operator><name>num</name></name><operator>*</operator><name><name>b</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><operator>.</operator><name>num</name></name><operator>%=</operator><name>md</name></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function type="operator"><specifier>inline</specifier> <type><name>quick_num</name></type> <name>operator <name>/</name></name><parameter_list>(<parameter><decl><type><name>quick_num</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>quick_num</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>quick_num</name></type> <name>c</name></decl>;</decl_stmt><expr_stmt><expr><name><name>c</name><operator>.</operator><name>num</name></name><operator>=</operator><name><name>a</name><operator>.</operator><name>num</name></name><operator>*</operator><call><name>inv</name><argument_list>(<argument><expr><name><name>b</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call><operator>%</operator><name>md</name></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<function type="operator"><specifier>inline</specifier> <type><name>quick_num</name></type> <name>operator <name>%</name></name><parameter_list>(<parameter><decl><type><name>quick_num</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>quick_num</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>quick_num</name></type> <name>c</name></decl>;</decl_stmt><expr_stmt><expr><name><name>c</name><operator>.</operator><name>num</name></name><operator>=</operator><name><name>a</name><operator>.</operator><name>num</name></name><operator>%</operator><name><name>b</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>
	<return>return <expr><name>c</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>S</name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>T</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>char</name></type> <name>Get_Char</name><parameter_list>()</parameter_list><block>{
    <if>if<condition>(<expr><name>S</name><operator>==</operator><name>T</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>T</name><operator>=</operator><operator>(</operator><name>S</name><operator>=</operator><name>buffer</name><operator>)</operator><operator>+</operator><call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>maxn</name></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>S</name><operator>==</operator><name>T</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>EOF</name></expr>;</return></block></then></if>
    }</block></then></if>
    <return>return <expr><operator>*</operator><name>S</name><operator>++</operator></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>re</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>c</name><operator>=</operator><call><name>Get_Char</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>or</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>Get_Char</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
    <for>for<control>(<init>;</init><condition><expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>and</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition><incr/>)</control><block type="pseudo"><expr_stmt><expr><name>re</name><operator>=</operator><operator>(</operator><name>re</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>re</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>Get_Char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
    <if>if<condition>(<expr><name>f</name></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><name>re</name></expr>;</return></block></then></if>
    <return>return <expr><name>re</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>re</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>c</name><operator>=</operator><call><name>Get_Char</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>or</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>Get_Char</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if></block></for>
    <for>for<control>(<init>;</init><condition><expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>and</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition><incr/>)</control><block type="pseudo"><expr_stmt><expr><name>re</name><operator>=</operator><operator>(</operator><name>re</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>re</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>Get_Char</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
    <if>if<condition>(<expr><name>f</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>re</name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>re</name></expr>;</expr_stmt></block></else></if>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mxn</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>mxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition><expr><name>T</name><operator>--</operator></expr>;</condition><incr/>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><call><name>__gcd</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Finite\n"</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Infinite\n"</literal></expr>;</expr_stmt></block></else></if>
	}</block></for>
}</block></function></unit>
