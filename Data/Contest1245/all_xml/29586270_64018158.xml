<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29586270_64018158.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i(j); i &lt; n; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto &amp;v : c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)*(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).begin(), (c).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).rbegin(), (c).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#x&lt;&lt;" = " &lt;&lt; (x) &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pnl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; x &lt;&lt; '\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pns</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; x &lt;&lt; ' '</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; x</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; x &gt;&gt; y</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read3</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; x &gt;&gt; y &gt;&gt; z</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; a &gt;&gt; b &gt;&gt; c &gt;&gt; d</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>readv</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FORR(c,v) read(c)</cpp:value></cpp:define>

<struct>struct <name>Point</name> <block>{<public type="default"><decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt> <function><type><name>double</name></type> <name>distance</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>SQ</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name><name>other</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>SQ</name><argument_list>(<argument><expr><name>y</name><operator>-</operator><name><name>other</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function></public>}</block>;</struct>

<typedef>typedef	<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>	<name>vi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>	<name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type>	<name>vs</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type>	<name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type>	<name>vl</name>;</typedef>
<typedef>typedef	<type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<struct>struct <name>Arrete</name> <block>{<public type="default"> 
	<decl_stmt><decl><type><name>ll</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><name>Arrete</name></type> <name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
	<block>{
		<return>return <expr><name>c</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>c</name></name> <operator>or</operator> <operator>(</operator><name>c</name><operator>==</operator> <name><name>other</name><operator>.</operator><name>c</name></name> <operator>and</operator> <operator>(</operator> <name>u</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>u</name></name> <operator>or</operator> <operator>(</operator><name>u</name> <operator>==</operator> <name><name>other</name><operator>.</operator><name>u</name></name> <operator>and</operator> <name>v</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>v</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
	}</block></function>
</public>}</block>;</struct>


<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>id</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>id</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>u</name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>id</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>id</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>id</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>a</name><operator>==</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
	<if>if <condition>(<expr><operator>-</operator><name><name>id</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><name><name>id</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name><name>id</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+=</operator> <name><name>id</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>id</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type>		<name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>vi</name></type> <name>x</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vi</name></type> <name>y</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vl</name></type> <name>k</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vl</name></type> <name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Arrete</name></expr></argument>&gt;</argument_list></name></type> <name>aretes</name></decl>;</decl_stmt>

	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>read2</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>MAXN</argument>)</argument_list></macro>
		<expr_stmt><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<decl_stmt><decl><type><name>Arrete</name></type> <name>a</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>a</name><operator>.</operator><name>u</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a</name><operator>.</operator><name>c</name></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>aretes</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>dis</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>dis</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>aretes</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>, <expr><name>cost</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>aretes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ll</name></type> <name>cost</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vl</name></type> <name>used</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vii</name></type> <name>p</name></decl>;</decl_stmt>

	<macro><name>FORR</name><argument_list>(<argument>e</argument>, <argument>aretes</argument>)</argument_list></macro>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>e</name><operator>.</operator><name>u</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>e</name><operator>.</operator><name>v</name></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

		<expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>e</name><operator>.</operator><name>c</name></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>a</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr>,<expr><name>b</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name><name>used</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>	
	}</block>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>cost</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>used</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<macro><name>FORR</name><argument_list>(<argument>v</argument>, <argument>used</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>p</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<macro><name>FORR</name><argument_list>(<argument>v</argument>, <argument>p</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>F</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>S</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

</unit>
