include directive file define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value using namespace name ifndef directive name decl_stmt decl type name name init expr call name argument_list endif directive function type name name parameter_list block ifndef directive name comment type line comment type line endif directive decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name while condition expr name operator block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name decl_stmt decl type name name decl type ref prev name decl type ref prev name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name argument expr operator name comment type line decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number comment type line for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr operator name block if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr operator name elseif if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr operator name else block type pseudo expr_stmt expr operator name decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name operator call name argument_list argument expr name argument expr name operator call name argument_list argument expr name argument expr name if condition expr name operator operator name operator call name argument_list argument expr name operator literal type number operator literal type number then block decl_stmt decl type name name name index expr literal type number init expr block expr literal type number for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr operator name block type pseudo expr_stmt expr name name index expr name operator literal type char for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr operator name block if condition expr name name index expr name operator literal type char then block if condition expr name operator literal type number then block expr_stmt expr operator name expr_stmt expr name name index expr name operator literal type char elseif if condition expr name name index expr name operator literal type char then block if condition expr name operator literal type number then block expr_stmt expr operator name expr_stmt expr name name index expr name operator literal type char else block if condition expr name operator literal type number then block expr_stmt expr operator name expr_stmt expr name name index expr name operator literal type char for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr operator name block if condition expr name name index expr name operator literal type char then block if condition expr name operator literal type number then block type pseudo expr_stmt expr operator name operator expr name name index expr name operator literal type char elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr operator name operator expr name name index expr name operator literal type char else block type pseudo expr_stmt expr operator name operator expr name name index expr name operator literal type char expr_stmt expr call name argument_list argument expr literal type string for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr operator name block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name expr_stmt expr call name argument_list argument expr literal type string else block type pseudo expr_stmt expr call name argument_list argument expr literal type string ifndef directive name expr_stmt expr name operator literal type string operator literal type number operator operator call name argument_list operator name operator operator name operator literal type string operator name endif directive return expr literal type number 
