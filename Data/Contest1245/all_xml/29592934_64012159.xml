<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29592934_64012159.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>void</name></type> <name>test_case</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>na</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>nb</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>nc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>ch</name><range>:<expr><name>s</name></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>na</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>nb</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<else>else<block>{
			<expr_stmt><expr><name>nc</name><operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<if>if<condition>(<expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>na</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>nb</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>nc</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>ans</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>ch</name><range>:<expr><name>s</name></expr></range></decl></init>)</control><block>{
			<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>b</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
				}</block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'$'</literal></expr>;</expr_stmt></block></else></if>
			}</block></then></if>
			<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>c</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
				}</block></then>
				<else>else 
					<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'$'</literal></expr>;</expr_stmt></block></else></if>
			}</block></then></if>
			<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>a</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
				}</block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'$'</literal></expr>;</expr_stmt></block></else></if>
			}</block></then></if>
		}</block></for>
		<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>ch</name><operator>:</operator><name>ans</name></expr></init>)</control><block>{
			<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'$'</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>a</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>ch</name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then>
				<elseif>else <if>if<condition>(<expr><name>b</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>ch</name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then></if></elseif>
				<else>else<block>{
					<expr_stmt><expr><name>ch</name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></then>
	<else>else<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></else></if>
	<return>return;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><call><name>test_case</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
