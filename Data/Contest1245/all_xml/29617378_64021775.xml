<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617378_64021775.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>auto</name></type> <name>cal</name> <init>= <expr><lambda><capture>[]</capture> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> -&gt; <type><name>long</name> <name>long</name></type> <block>{
		<if>if <condition>(<expr><name>l</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block></then></if>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><literal type="number">31</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <block>{ <expr_stmt><expr><literal type="number">0</literal></expr></expr_stmt> }</block></init></decl></decl_stmt><empty_stmt>;</empty_stmt>
		<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i : { 0, 1 })</cpp:value></cpp:define>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>;</init> <condition><expr><operator>~</operator><name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><macro><name>loop</name><argument_list>(<argument>j</argument>)</argument_list></macro> <macro><name>loop</name><argument_list>(<argument>k</argument>)</argument_list></macro> <macro><name>loop</name><argument_list>(<argument>p</argument>)</argument_list></macro> <macro><name>loop</name><argument_list>(<argument>q</argument>)</argument_list></macro> <block>{
			<if>if <condition>(<expr><name>p</name> <operator>&amp;</operator> <name>q</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if <condition>(<expr><name>j</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>p</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if <condition>(<expr><name>k</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name>q</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>&amp;</operator> <operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>^</operator> <name>p</name> <operator>^</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>k</name> <operator>&amp;</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>^</operator> <name>q</name> <operator>^</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></block></for>
		<return>return <expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
	}</block></lambda></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><operator>--</operator><name>l</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>cal</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>cal</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>cal</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></while>
}</block></function>
</unit>
