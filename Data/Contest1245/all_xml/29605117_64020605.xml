<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29605117_64020605.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ren</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;long long int,long long int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;long long int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gi</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gstr</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%s",n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gl</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>oi</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%d",n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>oll</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%lld",n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ostr</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%s",n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ol</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; n</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>os</name></cpp:macro> <cpp:value>cout&lt;&lt;" "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>on</name></cpp:macro> <cpp:value>cout&lt;&lt;"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>o2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>n.begin(),n.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>present</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s.find(x) != s.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cpresent</name><parameter_list>(<parameter><type><name>s</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(find(all(s),x) != s.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tr</name><parameter_list>(<parameter><type><name>container</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(__typeof(container.begin()) it = container.begin(); it != container.end(); it++)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>mat</name>;</typedef>

<decl_stmt><decl><type><name>vll</name></type> <name>v1</name></decl>,<decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>on1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>on2</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">35</literal></expr>)</condition><then>
	<block>{
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>on1</name></expr>]</index><index>[<expr><name>on2</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>on1</name></expr>]</index><index>[<expr><name>on2</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>r</name><init>=<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>on1</name></expr>]</index><index>[<expr><name>on2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>r</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>hi1</name><init>=<expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>hi2</name><init>=<expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>o1</name></decl>,<decl><type ref="prev"/><name>o2</name></decl>;</decl_stmt>
	<comment type="line">//0 0</comment>
	<expr_stmt><expr><name>o1</name><operator>=</operator><name>on1</name></expr><operator>,</operator><expr><name>o2</name><operator>=</operator><name>on2</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>o1</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>hi1</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>o1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>o2</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>hi2</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>o2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name>r</name><operator>+=</operator><call><name>f</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>o1</name></expr></argument>,<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">//1 0</comment>
	<expr_stmt><expr><name>o1</name><operator>=</operator><name>on1</name></expr><operator>,</operator><expr><name>o2</name><operator>=</operator><name>on2</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>o1</name><operator>==</operator><literal type="number">0</literal><operator>||</operator><operator>(</operator><name>o1</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>hi1</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
	<block>{
		<if>if<condition>(<expr><name>o2</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>hi2</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>o2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>r</name><operator>+=</operator><call><name>f</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>o1</name></expr></argument>,<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>

	<comment type="line">//0 1</comment>
	<expr_stmt><expr><name>o1</name><operator>=</operator><name>on1</name></expr><operator>,</operator><expr><name>o2</name><operator>=</operator><name>on2</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>o2</name><operator>==</operator><literal type="number">0</literal><operator>||</operator><operator>(</operator><name>o2</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>hi2</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then>
	<block>{
		<if>if<condition>(<expr><name>o1</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>hi1</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>o1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>r</name><operator>+=</operator><call><name>f</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>o1</name></expr></argument>,<argument><expr><name>o2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>go</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n2</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>n1</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>n2</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">34</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">35</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>n1</name><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n1</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	}</block></while>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><call><name><name>v2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">35</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>n2</name><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n2</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name></expr>;</expr_stmt>
	<comment type="line">//o2(go(r,r),go(r,l-1));os;o2(go(l-1,r),go(l-1,l-1));on;</comment>
	<expr_stmt><expr><call><name>ol</name><argument_list>(<argument><expr><call><name>go</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>go</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><call><name>go</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>go</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>on</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//	rep(i,l,r)rep(j,l,r)</comment>
<comment type="line">//	{</comment>
<comment type="line">//		if(i+j==(i^j))</comment>
<comment type="line">//		{</comment>
<comment type="line">//			ans++;</comment>
<comment type="line">//			o2(i,j);on;</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
<comment type="line">//	ol(ans);on;</comment>
}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
