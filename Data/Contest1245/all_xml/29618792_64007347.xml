<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618792_64007347.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>T</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>

    <for>for<control>(<init><expr><name>t</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>t</name><operator>&lt;=</operator><name>T</name></expr>;</condition><incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>Ra</name></decl>,<decl><type ref="prev"/><name>Pa</name></decl>,<decl><type ref="prev"/><name>Sa</name></decl>,<decl><type ref="prev"/><name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>Ra</name> <operator>&gt;&gt;</operator> <name>Pa</name> <operator>&gt;&gt;</operator> <name>Sa</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>sss</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>sss</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>char</name></type> <name>c</name><range>: <expr><name>sss</name></expr></range></decl></init>)</control><block>{
            <if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>s</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rem_R</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>rem_S</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>rem_P</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>Ra</name> <operator>&gt;=</operator> <name>s</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rem_R</name> <operator>=</operator> <name>Ra</name><operator>-</operator><name>s</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>Ra</name></expr>;</expr_stmt>
        }</block></else></if>

        <if>if<condition>(<expr><name>Pa</name> <operator>&gt;=</operator> <name>r</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rem_P</name> <operator>=</operator> <name>Pa</name><operator>-</operator><name>r</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>Pa</name></expr>;</expr_stmt>
        }</block></else></if>

        <if>if<condition>(<expr><name>Sa</name> <operator>&gt;=</operator> <name>p</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>p</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rem_S</name> <operator>=</operator> <name>Sa</name> <operator>-</operator> <name>p</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>Sa</name></expr>;</expr_stmt>
        }</block></else></if>

        <if>if<condition>(<expr><literal type="number">2</literal><operator>*</operator><name>total</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>char</name></type> <name>c</name><range>:<expr><name>sss</name></expr></range></decl></init>)</control><block>{
            <if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>Pa</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>Pa</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <if>if<condition>(<expr><name>rem_R</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>Ra</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rem_R</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then>
                    <else>else<block>{
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>Sa</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rem_S</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></then>

            <comment type="line" format="doxygen">/////</comment>
            <elseif>else <if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>Sa</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>Sa</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <if>if<condition>(<expr><name>rem_P</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>Pa</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rem_P</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then>
                    <else>else<block>{
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>Ra</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rem_R</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></then></if></elseif>
            <comment type="line" format="doxygen">//////</comment>
            <elseif>else <if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>Ra</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>Ra</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <if>if<condition>(<expr><name>rem_S</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>Sa</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rem_S</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then>
                    <else>else<block>{
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>Pa</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>rem_P</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></then></if></elseif></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
