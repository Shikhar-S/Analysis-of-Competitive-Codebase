<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618152_64006215.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>rock</name></decl>,<decl><type ref="prev"/><name>paper</name></decl>,<decl><type ref="prev"/><name>sci</name></decl>;</decl_stmt>

<function><type><name>char</name></type> <name>get_rest</name><parameter_list>()</parameter_list><block>{
    <if>if<condition>(<expr><name>rock</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>rock</name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><literal type="char">'R'</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>paper</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>paper</name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><literal type="char">'P'</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>sci</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>sci</name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><literal type="char">'S'</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="char">'?'</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>string</name></type> <name>inp</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kase</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>kase</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>kase</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>rock</name><operator>&gt;&gt;</operator><name>paper</name><operator>&gt;&gt;</operator><name>sci</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>inp</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>win</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>ans</name><init>=<expr><name>inp</name></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'.'</literal></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>inp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>paper</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>win</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>paper</name><operator>--</operator></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>rock</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>win</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>rock</name><operator>--</operator></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>inp</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>sci</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>win</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>sci</name><operator>--</operator></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>get_rest</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>win</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></then><else>else <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
