<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29570332_64034380.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>
<decl_stmt><decl><type><name>double</name></type> <name><name>f</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>h</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name><init>=<expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<function><type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>d</name><init>=<expr><name>x</name><operator>%</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>d</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<if>if <condition>(<expr><name>y</name><operator>+</operator><name>k</name><operator>&lt;=</operator><literal type="number">10</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
		<else>else <block type="pseudo"><return>return <expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">10</literal><operator>-</operator><operator>(</operator><name>y</name><operator>+</operator><name>k</name><operator>-</operator><literal type="number">10</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
	}</block></then><else>else <block>{
		<if>if <condition>(<expr><name>y</name><operator>-</operator><name>k</name><operator>&gt;=</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name><operator>-</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
		<else>else <block>{
			<if>if <condition>(<expr><name>x</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
			<else>else <block type="pseudo"><return>return <expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal><operator>-</operator><operator>(</operator><name>y</name><operator>-</operator><name>k</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
		}</block></else></if>
	}</block></else></if>
}</block></function>

<function><type><name>double</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name>x</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>d</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>d</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><operator>++</operator><name>d</name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type><name>pos</name><init>=<expr><call><name>advance</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>x1</name><init>=<expr><name><name>pos</name><operator>.</operator><name>first</name></name></expr></init></decl>,<decl><type ref="prev"/><name>y1</name><init>=<expr><name><name>pos</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>x1</name><operator>==</operator><name>x</name><operator>&amp;&amp;</operator><name>y</name><operator>==</operator><name>y1</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt><continue>continue;</continue>}</block></then></if>
		<decl_stmt><decl><type><name>double</name></type> <name>min</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>h</name><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>min</name><operator>=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>,<argument><expr><call><name>dfs</name><argument_list>(<argument><expr><name>x1</name><operator>-</operator><name><name>h</name><index>[<expr><name>x1</name></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>min</name><operator>=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>min</name></expr></argument>,<argument><expr><call><name>dfs</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>+=</operator><operator>(</operator><name>min</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	}</block></for><if>if <condition>(<expr><name>cnt</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>/=</operator><literal type="number">6</literal></expr>;</expr_stmt></block></then>
	<else>else <block>{
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>/=</operator><operator>(</operator><literal type="number">6</literal><operator>-</operator><name>cnt</name><operator>)</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>q</name><init>=<expr><operator>(</operator><name>double</name><operator>)</operator><name>cnt</name><operator>/</operator><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>+=</operator><literal type="number">1</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><name>q</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></else></if>
	<return>return <expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</return>
}</block></function>
		

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>h</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.8f\n"</literal></expr></argument>,<argument><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
