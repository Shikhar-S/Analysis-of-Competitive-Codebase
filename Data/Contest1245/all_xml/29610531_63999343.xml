<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610531_63999343.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(a).rbegin(),(a).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>spa</name></cpp:macro> <cpp:value>&lt;&lt; " " &lt;&lt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>test</name></cpp:macro> <cpp:value>cout&lt;&lt;"test"&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EB</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = n; i &lt; (ll)(m); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = m - 1; i &gt;= (ll)(n); i--)</cpp:value></cpp:define>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//const ll MOD = 998244353;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<using>using <name>P</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><type><name>void</name></type> <name>pmod</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>pmod</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>b</name><operator>+</operator><name>c</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>qmod</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>}</block></function>
<function><type><name>void</name></type> <name>qmod</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>b</name><operator>*</operator><name>c</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>}</block></function>
<function><type><name>ll</name></type> <name>median</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>+</operator><name>b</name><operator>+</operator><name>c</name><operator>-</operator><call><name>max</name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr>,<expr><name>b</name></expr>,<expr><name>c</name></expr>}</block></expr></argument>)</argument_list></call><operator>-</operator><call><name>min</name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr>,<expr><name>b</name></expr>,<expr><name>c</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>ans1</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>}</block></function>
<function><type><name>void</name></type> <name>ans2</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>}</block></function>
<function><type><name>void</name></type> <name>ans3</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yay!"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">":("</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>,<parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>ans</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>T1</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>T2</name></type> <name>z</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>z</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>}</block></function>  
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>debug</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>h</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>w</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>h</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>w</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><decl_stmt><decl><type><name>cout</name> <name>spa</name></type> <name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></decl>;</decl_stmt></block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></for>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>void</name></type> <name>debug</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>h</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>w</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>h</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{<for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>w</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></for>}</block></function><empty_stmt>;</empty_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>debug</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>v</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>n</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><decl_stmt><decl><type><name>cout</name> <name>spa</name></type> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></decl>;</decl_stmt></block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>}</block></function><empty_stmt>;</empty_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>vec</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>w</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>v</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt><return>return <expr><name>v</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>r</name></decl>;</decl_stmt><while>while<condition>(<expr><name>y</name><operator>!=</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><operator>(</operator><name>r</name><operator>=</operator><name>x</name><operator>%</operator><name>y</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>)</condition><block>{<expr_stmt><expr><name>x</name><operator>=</operator><name>y</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><name>r</name></expr>;</expr_stmt>}</block></while><return>return <expr><ternary><condition><expr><name>y</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><name>y</name></expr></else></ternary></expr>;</return>}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>dx</name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>dy</name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>make_v</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Ts</name></parameter>&gt;</parameter_list></template>
<type><name>auto</name></type> <name>make_v</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>Ts</name><modifier>...</modifier></type> <name>ts</name></decl></parameter>)</parameter_list><block>{
  <return>return <expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><decltype>decltype<argument_list>(<argument><expr><call><name>make_v</name><argument_list>(<argument><expr><name>ts</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decltype></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><call><name>make_v</name><argument_list>(<argument><expr><name>ts</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//cout&lt;&lt;fixed&lt;&lt;setprecision(10);</comment>
  <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>buf</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>judge</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>a</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>t</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
      <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
          <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
      <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
          <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
      <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
          <expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type><name>c</name><init>=<expr><block>{<expr><literal type="char">'R'</literal></expr>,<expr><literal type="char">'P'</literal></expr>,<expr><literal type="char">'S'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
      <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'?'</literal></expr>)</condition><then><block>{
        <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><block>{
          <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
            <break>break;</break>
          }</block></then></if>
        }</block>
      }</block></then></if>
    }</block>
    <if>if<condition>(<expr><name>ret</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>t</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
