<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616854_64014135.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pil</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pli</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=0;i&lt;n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i=1;i&lt;=n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>read</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>info</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>V</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>E</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>info</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>info</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>info</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>uu</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>vv</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>uu</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>vv</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>uu</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>vv</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>minC</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>,<decl><type ref="prev"/><name>minPos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <if>if <condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>minC</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>minC</name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>minPos</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>minPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>=</operator><name>minC</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>minPos</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <if>if <condition>(<expr><name>i</name><operator>!=</operator><name>minPos</name></expr>)</condition><then><block>{
		<if>if <condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>minPos</name></expr>]</index></name><operator>)</operator><operator>*</operator><call><name>dist</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>minPos</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>minPos</name></expr>]</index></name><operator>)</operator><operator>*</operator><call><name>dist</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>minPos</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>minPos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>cnt</name><operator>&lt;</operator><name>n</name><operator>&amp;&amp;</operator><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
		<while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><name><name>vis</name><index>[<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>S</name><operator>.</operator><name>F</name></name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
		<if>if <condition>(<expr><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<decl_stmt><decl><type><name>info</name></type> <name>tmp</name><init>=<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>tmp</name><operator>.</operator><name>F</name></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>tmp</name><operator>.</operator><name>S</name><operator>.</operator><name>F</name></name></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>way</name><init>=<expr><name><name>tmp</name><operator>.</operator><name>S</name><operator>.</operator><name>S</name></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>way</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>way</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		<if>if <condition>(<expr><name>cnt</name><operator>==</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator><operator>*</operator><call><name>dist</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator><operator>*</operator><call><name>dist</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></then></if></block></for>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>E</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>E</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
