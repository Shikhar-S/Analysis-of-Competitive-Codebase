<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29579543_64010700.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INFLL</name> <init>= <expr><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><literal type="number">60</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><call>(<name>ll</name>)<argument_list>(<argument><expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l_ength</name></cpp:macro> <cpp:value>size</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mul_mod</name><parameter_list>(<parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>a</name> <operator>*=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>add_mod</name><parameter_list>(<parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>a</name><operator>&lt;</operator><name>MOD</name><operator>)</operator></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><operator>(</operator><name>a</name><operator>-</operator><name>MOD</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b</name><operator>&lt;</operator><name>MOD</name><operator>)</operator></expr>?</condition><then><expr><name>b</name></expr></then><else>:<expr><operator>(</operator><name>b</name><operator>-</operator><name>MOD</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>a</name><operator>&lt;</operator><name>MOD</name><operator>)</operator></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><operator>(</operator><name>a</name><operator>-</operator><name>MOD</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
}</block></function>

<struct>struct <name>edge</name><block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name>c</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>edge</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>(</operator><name>c</name><operator>&lt;</operator><name><name>rhs</name><operator>.</operator><name>c</name></name><operator>)</operator></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>edge</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><operator>(</operator><name>c</name><operator>&lt;=</operator><name><name>rhs</name><operator>.</operator><name>c</name></name><operator>)</operator></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name><name>ufr</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ufp</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>k</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name>g</name></decl>,<decl><type ref="prev"/><name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pw</name></decl>,<decl><type ref="prev"/><name>cn</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ufinit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>ufr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ufp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>ufind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>ufp</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <name>p</name></expr>)</condition><then><block>{
		<return>return <expr><name><name>ufp</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name><name>ufp</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <call><name>ufind</name><argument_list>(<argument><expr><name><name>ufp</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>ufp</name><index>[<expr><name>p</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>unionf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>ufind</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>ufind</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>p</name><operator>==</operator><name>q</name></expr>)</condition><then><block>{
		<return>return <expr><literal type="boolean">false</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name><name>ufr</name><index>[<expr><name>p</name></expr>]</index></name><operator>&lt;</operator><name><name>ufr</name><index>[<expr><name>q</name></expr>]</index></name></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<expr_stmt><expr><name><name>ufr</name><index>[<expr><name>p</name></expr>]</index></name> <operator>+=</operator> <name><name>ufr</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ufp</name><index>[<expr><name>q</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0ll</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>edge</name></type> <name>e</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ufinit</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><operator>.</operator><name>c</name></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>e</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>e</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>e</name><operator>.</operator><name>c</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>e</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>e</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>g</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>g</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>g</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name><name>g</name><operator>.</operator><name>l_ength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if<condition>(<expr><call><name>unionf</name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>,<argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name><operator>==</operator><name>n</name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>pw</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then><else>else<block>{
				<expr_stmt><expr><call><name><name>cn</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>cn</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>g</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name><name>pw</name><operator>.</operator><name>l_ength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>i</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name><name>pw</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name><name>cn</name><operator>.</operator><name>l_ength</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%d\n"</literal></expr></argument>,<argument><expr><name>m</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">2</literal></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>cn</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>cn</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
