<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29565091_64002324.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>f1</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>f2</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>f3</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>f4</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name>pos</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>f</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index><index>[<expr><name>f3</name></expr>]</index><index>[<expr><name>f4</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>f</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index><index>[<expr><name>f3</name></expr>]</index><index>[<expr><name>f4</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>t</name><init>=<expr><name><name>f</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index><index>[<expr><name>f3</name></expr>]</index><index>[<expr><name>f4</name></expr>]</index></name></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>t</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>d1</name><init>=<expr><ternary><condition><expr><name>f1</name></expr>?</condition><then><expr><name>l</name><operator>&gt;&gt;</operator><name>pos</name><operator>&amp;</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>,<decl><type ref="prev"/><name>d2</name><init>=<expr><ternary><condition><expr><name>f2</name></expr>?</condition><then><expr><name>r</name><operator>&gt;&gt;</operator><name>pos</name><operator>&amp;</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>,<decl><type ref="prev"/><name>d3</name><init>=<expr><ternary><condition><expr><name>f3</name></expr>?</condition><then><expr><name>l</name><operator>&gt;&gt;</operator><name>pos</name><operator>&amp;</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>,<decl><type ref="prev"/><name>d4</name><init>=<expr><ternary><condition><expr><name>f4</name></expr>?</condition><then><expr><name>r</name><operator>&gt;&gt;</operator><name>pos</name><operator>&amp;</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>d1</name></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;=</operator><name>d2</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><name>d3</name></expr></init></decl>;</init><condition><expr><name>y</name><operator>&lt;=</operator><name>d4</name></expr>;</condition><incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name>x</name> <operator>||</operator> <operator>!</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name><operator>&amp;</operator><operator>(</operator><name>x</name><operator>==</operator><name>d1</name><operator>)</operator></expr></argument>,<argument><expr><name>f2</name><operator>&amp;</operator><operator>(</operator><name>x</name><operator>==</operator><name>d2</name><operator>)</operator></expr></argument>,<argument><expr><name>f3</name><operator>&amp;</operator><operator>(</operator><name>y</name><operator>==</operator><name>d3</name><operator>)</operator></expr></argument>,<argument><expr><name>f4</name><operator>&amp;</operator><operator>(</operator><name>y</name><operator>==</operator><name>d4</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for>
	<return>return <expr><name>t</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>cal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">31</literal></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name>r</name><operator>&gt;&gt;</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>pos</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if></block></for>
	<return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>pos</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition><expr><name>T</name><operator>--</operator></expr>;</condition><incr/>)</control><block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><call><name>cal</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function></unit>
