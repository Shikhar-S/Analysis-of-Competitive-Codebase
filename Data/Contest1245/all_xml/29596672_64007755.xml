<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29596672_64007755.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input</name></cpp:macro>   <cpp:value>std::cin</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output</name></cpp:macro>  <cpp:value>std::cout</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>num</name></cpp:macro>     <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llg</name></cpp:macro>     <cpp:value>long long</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro>     <cpp:value>1000000007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro>    <cpp:value>100005</cpp:value></cpp:define>

<decl_stmt><decl><type><name>llg</name></type> <name><name>DP</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>str</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>input</name> <operator>&gt;&gt;</operator> <name>str</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>DP</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>DP</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>DP</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>DP</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name>llg</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>llg</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>idx</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;</operator> <call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>str</name><index>[<expr><name>idx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>ch</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator> <name>idx</name></expr><operator>,</operator> <expr><operator>++</operator> <name>len</name></expr>;</expr_stmt></block></while>
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name><operator>*</operator><name><name>DP</name><index>[<expr><name>len</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
        }</block></then>   <elseif>else
        <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if></elseif></if>

    }</block></for>   <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
