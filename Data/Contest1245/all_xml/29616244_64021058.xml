<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616244_64021058.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name><init>=<expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>h</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>h</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
	}</block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
			<comment type="line">//backwards</comment>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
				<if>if<condition>(<expr><operator>!</operator><name>i</name><operator>&amp;&amp;</operator><operator>!</operator><name>j</name></expr>)</condition><then> <block>{
					<continue>continue;</continue>
				}</block></then></if>
				<decl_stmt><decl><type><name>int</name></type> <name>ns</name><init>=<expr><ternary><condition><expr><operator>!</operator><name>i</name></expr>?</condition><then><expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">6</literal><operator>-</operator><name>j</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>double</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
					<if>if<condition>(<expr><operator>!</operator><name>i</name><operator>&amp;&amp;</operator><name>j</name><operator>&lt;</operator><name>k</name></expr>)</condition><then> <block>{
						<continue>continue;</continue>
					}</block></then></if>
					<decl_stmt><decl><type><name>int</name></type> <name>ni</name></decl>, <decl><type ref="prev"/><name>nj</name></decl>;</decl_stmt>
					<if>if<condition>(<expr><name>j</name><operator>&lt;</operator><name>k</name></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>ni</name><operator>=</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>nj</name><operator>=</operator><name>k</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<expr_stmt><expr><name>ni</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>nj</name><operator>=</operator><name>j</name><operator>-</operator><name>k</name></expr>;</expr_stmt>
					}</block></else></if>
					<expr_stmt><expr><name>c</name><operator>+=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>ni</name></expr>]</index><index>[<expr><name>nj</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>ni</name><operator>-</operator><name><name>h</name><index>[<expr><name>ni</name></expr>]</index><index>[<expr><name>nj</name></expr>]</index></name></expr>]</index><index>[<expr><name>nj</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>c</name><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><name>ns</name><operator>/</operator><literal type="number">6.0</literal><operator>)</operator><operator>+</operator><literal type="number">1</literal><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><name>ns</name><operator>/</operator><literal type="number">6.0</literal><operator>)</operator></expr>;</expr_stmt>
			}</block></for>
		}</block></then> <else>else <block>{
			<comment type="line">//forwards</comment>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><operator>~</operator><name>j</name></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{
				<decl_stmt><decl><type><name>double</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
					<decl_stmt><decl><type><name>int</name></type> <name>ni</name></decl>, <decl><type ref="prev"/><name>nj</name></decl>;</decl_stmt>
					<if>if<condition>(<expr><name>j</name><operator>+</operator><name>k</name><operator>&gt;</operator><literal type="number">9</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>ni</name><operator>=</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>nj</name><operator>=</operator><literal type="number">9</literal><operator>-</operator><operator>(</operator><name>j</name><operator>+</operator><name>k</name><operator>-</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<expr_stmt><expr><name>ni</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>nj</name><operator>=</operator><name>j</name><operator>+</operator><name>k</name></expr>;</expr_stmt>
					}</block></else></if>
					<expr_stmt><expr><name>c</name><operator>+=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>ni</name></expr>]</index><index>[<expr><name>nj</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>ni</name><operator>-</operator><name><name>h</name><index>[<expr><name>ni</name></expr>]</index><index>[<expr><name>nj</name></expr>]</index></name></expr>]</index><index>[<expr><name>nj</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>c</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></for>
		}</block></else></if>
	}</block></for>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
