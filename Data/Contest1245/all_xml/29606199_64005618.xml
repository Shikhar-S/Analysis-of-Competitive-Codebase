<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29606199_64005618.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fornum</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(A=B;A&lt;C;A++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line" format="doxygen">/////////////////////////////////////////////////////</comment>

<decl_stmt><decl><type><name>ll</name></type> <name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>S</name><index>[<expr><literal type="number">111</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ans</name><index>[<expr><literal type="number">111</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld%lld%lld%s"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>win</name> <init>= <expr><name>N</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>N</name> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <macro><name>fornum</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro><block>{
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'N'</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>A</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>A</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>win</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then><elseif>else <if>if<condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>C</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>C</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>win</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>B</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>B</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>win</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></elseif></if>
        }</block>
        <if>if<condition>(<expr><name>win</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <macro><name>fornum</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'N'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>A</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>A</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then><elseif>else <if>if<condition>(<expr><name>B</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>B</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if></elseif><else>else<block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block>
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>N</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n%s\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
