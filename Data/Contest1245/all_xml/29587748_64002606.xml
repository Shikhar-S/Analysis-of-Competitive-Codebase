<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29587748_64002606.cpp">                <comment type="line">// in the name of allah</comment>
                <comment type="line">// never give up :))))</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f1</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f2</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int ,int&gt;</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro>  <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
                <using>using <namespace>namespace <name>std</name>;</namespace></using>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mox</name><init>=<expr><literal type="number">3e5</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
                <function><name>main</name><parameter_list>()</parameter_list>
                <block>{
                     <decl_stmt><decl><type><name>ios</name>
                     <name>int</name></type> <name>t</name></decl>;</decl_stmt>
                     <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
                     <for>for<control>(<init><decl><type><name>int</name></type> <name>ii</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>t</name></expr> ;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
                     <block>{
                         <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
                         <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
                         <decl_stmt><decl><type><name>bool</name></type> <name>u</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                         <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">2</literal></expr></init></decl> ;</init> <condition><expr><name>j</name><operator>&lt;=</operator><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                         <block>{
                             <if>if<condition>(<expr><name>a</name><operator>%</operator><name>j</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>b</name><operator>%</operator><name>j</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                             <block>{
                                 <expr_stmt><expr><name>u</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                                 <break>break;</break>
                             }</block></then></if>
                         }</block></for>
                         <if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
                         <block>{
                             <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Infinite"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
                         }</block></then>
                         <else>else
                            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Finite"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></else></if>
                     }</block></for>

                }</block></function>
</unit>
