<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616693_64036643.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>X.begin(),X.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(int I = A; (I) &lt;= (B); (I)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORW</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(int I = A; (I) &lt; (B);  (I)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(int I = A; (I) &gt;= (B); (I)--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>memset(X,0,sizeof(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>int(X.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTAINS</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(A.find(X) != A.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro>            <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro>            <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro>             <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro>             <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name></type> <name>slong</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ldouble</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>slong</name></type> <name>INF</name> <init>= <expr><literal type="number">1000000100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldouble</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>prefixes</name> <parameter_list>(<parameter><decl><type><name>slong</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>R</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>xs</name></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">31</literal></argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name><name>xs</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>n</name> <operator>%</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name>ALL</name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>R</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>xs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>FORW</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>SIZE(xs)</argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ys</name> <init>= <expr><name>xs</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>ys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <macro><name>FORW</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>SIZE(xs)</argument>)</argument_list></macro> <expr_stmt><expr><name><name>ys</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>R</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>ys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <return>return <expr><name>R</name></expr>;</return>
}</block></function>

<function><type><name>slong</name></type> <name>brut</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>slong</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>x</argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument>y</argument>)</argument_list></macro> <if>if <condition>(<expr><name>i</name><operator>+</operator><name>j</name> <operator>==</operator> <operator>(</operator><name>i</name><operator>^</operator><name>j</name><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><type><name>slong</name></type> <name>extra</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>_x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>_y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>auto</name></type> <name>xss</name> <init>= <expr><call><name>prefixes</name><argument_list>(<argument><expr><name>_x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>yss</name> <init>= <expr><call><name>prefixes</name><argument_list>(<argument><expr><name>_y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>slong</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>xs</name><range>: <expr><name>xss</name></expr></range></decl></init>)</control> <block type="pseudo"><for>for <control>(<init><decl><type><name>auto</name></type> <name>ys</name><range>: <expr><name>yss</name></expr></range></decl></init>)</control> <block>{
        <decl_stmt><decl><type><name>slong</name></type> <name>s</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <macro><name>FORW</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>SIZE(xs)</argument>)</argument_list></macro> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>ys</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>and</operator> <name>y</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>and</operator> <name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>and</operator> <name>y</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{}</block></then></if>
            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>and</operator> <name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{}</block></then></if>
            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>and</operator> <name>y</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{}</block></then></if>
            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal> <operator>and</operator> <name>y</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
        }</block>
        <expr_stmt><expr><name>r</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt>
    }</block></for></block></for>
    <return>return <expr><name>r</name></expr>;</return>
}</block></function>

<function><type><name>slong</name></type> <name>solution</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>min_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>min_x</name> <operator>&gt;</operator> <name>max_x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>min_x</name></expr></argument>, <argument><expr><name>max_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><call><name>extra</name><argument_list>(<argument><expr><name>max_x</name></expr></argument>, <argument><expr><name>max_x</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>extra</name><argument_list>(<argument><expr><name>min_x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>extra</name><argument_list>(<argument><expr><name>min_x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>min_x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>d</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solution</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" vs "</literal> <operator>&lt;&lt;</operator> <call><name>brut</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><literal type="number">600</literal></expr></argument>, <argument><expr><literal type="number">4400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><literal type="number">600</literal></expr></argument>, <argument><expr><literal type="number">1400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><literal type="number">400</literal></expr></argument>, <argument><expr><literal type="number">2400</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>d</name><argument_list>(<argument><expr><literal type="number">600</literal></expr></argument>, <argument><expr><literal type="number">3200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="block">/*auto xss = prefixes(7);
    for (auto xs: xss) {
        for (auto x : xs) {
            cout &lt;&lt; x &lt;&lt; " ";
        }
        cout &lt;&lt; endl;
    }*/</comment>
    <comment type="line">//solve();</comment>
    <comment type="line">//</comment>
<comment type="line">//    cout &lt;&lt; extra(5, 10) &lt;&lt; " " &lt;&lt; brut(5, 10);</comment>
<comment type="line">//    solve();</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>z</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>z</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solution</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block>
}</block></function>
</unit>
