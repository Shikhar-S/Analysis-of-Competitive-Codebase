<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29588212_64005170.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>N</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>, <decl><type ref="prev"/><name>str2</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>str</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>str2</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>str2</name> <operator>+=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
			}</block></then>
			<elseif>else <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>c</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>str2</name> <operator>+=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>a</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>w</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>str2</name> <operator>+=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>str2</name> <operator>+=</operator> <literal type="char">'V'</literal></expr>;</expr_stmt></block></else></if>
		}</block></for>
		<if>if<condition>(<expr><name>w</name> <operator>&lt;</operator> <operator>(</operator><name>N</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'V'</literal></expr>)</condition><then>
				<block>{
					<if>if<condition>(<expr><name>a</name></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> 
					}</block></then>
					<elseif>else <if>if<condition>(<expr><name>b</name></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
					}</block></then></if></elseif>
					<else>else
					<block>{
						<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
					}</block></else></if>
						
				}</block></then></if>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	
		
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
