<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29614965_64034597.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<struct>struct <name>event</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>ll</name></type> <name>type</name></decl>,<decl><type ref="prev"/><name>cost</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

  <constructor><name>event</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>t</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>aa</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>bb</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cost</name><operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>aa</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <name>bb</name></expr>;</expr_stmt>
  }</block></constructor>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>rnk</name></decl>,<decl><type ref="prev"/><name>col</name></decl>,<decl><type ref="prev"/><name>flag</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
  <if>if<condition>(<expr><name>x</name> <operator>==</operator> <name><name>col</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>

  <expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>y</name> <operator>||</operator> <operator>(</operator><name><name>flag</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>flag</name><index>[<expr><name>y</name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>

  <decl_stmt><decl><type><name>bool</name></type> <name>tmp</name> <init>= <expr><name><name>flag</name><index>[<expr><name>x</name></expr>]</index></name><operator>|</operator><name><name>flag</name><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>flag</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>flag</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

  <if>if<condition>(<expr><name><name>rnk</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;=</operator><name><name>rnk</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt></block></then>
  <else>else
    <block type="pseudo"><expr_stmt><expr><name><name>col</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt></block></else></if>


  <if>if<condition>(<expr><name><name>rnk</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name><name>rnk</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then>
  <block type="pseudo"><expr_stmt><expr><name><name>rnk</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>  

  <return>return <expr><literal type="boolean">true</literal></expr>;</return> 
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>ll</name></type>  <name><name>x</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

  <decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name><name>col</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>col</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <decl_stmt><decl><type><name>ll</name></type> <name><name>k</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>event</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>event</name></type> <name>e</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></for>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>event</name></type> <name>e</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,
    <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>event</name><modifier>&amp;</modifier></type> <name>w</name></decl></parameter>,<parameter><decl><type><name>event</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
      <return>return <expr><name><name>w</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <name><name>y</name><operator>.</operator><name>cost</name></name></expr>;</return>
    }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><call><name><name>rnk</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>flag</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vert</name></decl>;</decl_stmt>

  <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>type</name> <init>= <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>b</name> <init>= <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr></init></decl>;</decl_stmt>

    <comment type="line">//cout&lt;&lt;type&lt;&lt;": cost= "&lt;&lt;cost&lt;&lt;" "&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;endl;</comment>

    <if>if<condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <if>if<condition>(<expr><call><name>merge</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>ans</name><operator>+=</operator><name>cost</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then>

    <else>else <block>{
      <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><name><name>flag</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then> <block>{
        <continue>continue;</continue>
      }</block></then>

      <else>else <block>{
        <expr_stmt><expr><name><name>flag</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name><operator>+=</operator><name>cost</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>vert</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></else></if>
  }</block></for>

  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>vert</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

  <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>vert</name></expr></range></decl></init>)</control>
    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>it</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

  <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>edges</name></expr></range></decl></init>)</control> <block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>it</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>it</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
