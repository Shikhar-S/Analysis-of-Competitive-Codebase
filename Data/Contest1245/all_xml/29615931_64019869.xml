<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615931_64019869.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> 
    <expr_stmt><expr><call><name>getline</name><argument_list>( <argument><expr><name>cin</name></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>fib</name><index>[ <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>fib</name><index>[ <expr><literal type="number">0</literal></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
    <expr_stmt><expr><name><name>fib</name><index>[ <expr><literal type="number">1</literal></expr> ]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
    <for>for <control>( <init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr> )</control> <block>{
        <expr_stmt><expr><name><name>fib</name><index>[ <expr><name>k</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name><name>fib</name><index>[ <expr><name>k</name> <operator>-</operator> <literal type="number">1</literal></expr> ]</index></name> <operator>+</operator> <name><name>fib</name><index>[ <expr><name>k</name> <operator>-</operator> <literal type="number">2</literal></expr> ]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt> 
    }</block></for>
    
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>bool</name></type> <name>impossible</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt> 
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> 
    <while>while <condition>( <expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr> )</condition> <block>{
        <if>if <condition>( <expr><name><name>s</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <literal type="char">'m'</literal>  <operator>||</operator>  <name><name>s</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr> )</condition><then> <block>{
            <expr_stmt><expr><name>impossible</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> 
            <break>break;</break> 
        }</block></then></if>    
        
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt> 
        <if>if <condition>( <expr><name><name>s</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator>  <name><name>s</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr> )</condition><then> <block>{
            <while>while <condition>( <expr><name>j</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal>  <operator>&amp;&amp;</operator>  <name><name>s</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>==</operator> <name><name>s</name><index>[ <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name></expr> )</condition> <block>{
                <expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt> 
            }</block></while>
        }</block></then></if> 
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name><operator>*</operator><name><name>fib</name><index>[ <expr><name>j</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr> ]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
    }</block></while>
    
    <if>if <condition>( <expr><name>impossible</name></expr> )</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> 
    }</block></else></if>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
