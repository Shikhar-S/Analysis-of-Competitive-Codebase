<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29589368_64029901.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>taskname</name></cpp:macro> <cpp:value>""</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).rbegin(), (x).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0; i &lt; (int)(n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 1; i &lt;= (int)(n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ford</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (int)(n) - 1; i &gt;= 0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fore</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (int)(a); i &lt;= (int)(b); ++i)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>complex</name> <argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></type> <name>cd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>cd</name></expr></argument>&gt;</argument_list></name></type> <name>vcd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>

<using><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>v2d</name> <init>= <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>uin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><ternary><condition><expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr> ?</condition><then> <expr><operator>(</operator><name>a</name> <operator>=</operator> <name>b</name><operator>,</operator> <literal type="boolean">true</literal><operator>)</operator></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return>
}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>uax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><ternary><condition><expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><operator>(</operator><name>a</name> <operator>=</operator> <name>b</name><operator>,</operator> <literal type="boolean">true</literal><operator>)</operator></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxN</name> <init>= <expr><literal type="number">2e3</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<struct>struct <name>city</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <function><type><name>ll</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>city</name></type> <name>a</name></decl></parameter>)</parameter_list>
    <block>{
        <return>return <expr><operator>(</operator><name>k</name> <operator>+</operator> <name><name>a</name><operator>.</operator><name>k</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    }</block></function>
</public>}</block> <decl><name><name>ct</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name><name>parent</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>id</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cost</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>sta</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>FindSet</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>u</name> <operator>==</operator> <name><name>parent</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>u</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name><name>parent</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>FindSet</name><argument_list>(<argument><expr><name><name>parent</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <macro><name>for1</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>ct</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>ct</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
    }</block>
    <macro><name>for1</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>ct</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ct</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    }</block>
    <macro><name>for1</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>ct</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name></expr>;</expr_stmt>
    }</block>
    <macro><name>for1</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <macro><name>for1</name><argument_list>(<argument>j</argument>, <argument>i - <literal type="number">1</literal></argument>)</argument_list></macro>
        <block>{
            <expr_stmt><expr><call><name><name>vp</name><operator>.</operator><name>eb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
    }</block>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>vp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl></parameter>)</parameter_list>
         <block>{
             <return>return <expr><name><name>ct</name><index>[<expr><name><name>a</name><operator>.</operator><name>fi</name></name></expr>]</index></name><operator>.</operator><call><name>dist</name><argument_list>(<argument><expr><name><name>ct</name><index>[<expr><name><name>a</name><operator>.</operator><name>se</name></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>ct</name><index>[<expr><name><name>b</name><operator>.</operator><name>fi</name></name></expr>]</index></name><operator>.</operator><call><name>dist</name><argument_list>(<argument><expr><name><name>ct</name><index>[<expr><name><name>b</name><operator>.</operator><name>se</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
         }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>p</name><operator>:</operator> <name>vp</name></expr></init>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>p</name><operator>.</operator><name>fi</name></name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>p</name><operator>.</operator><name>se</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>uk</name> <init>= <expr><call><name>FindSet</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>vk</name> <init>= <expr><call><name>FindSet</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>uk</name> <operator>!=</operator> <name>vk</name></expr>)</condition><then>
        <block>{
            <if>if <condition>(<expr><name><name>cost</name><index>[<expr><name>uk</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>vk</name></expr>]</index></name> <operator>-</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>sta</name><index>[<expr><name>uk</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sta</name><index>[<expr><name>vk</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>ct</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>dist</name><argument_list>(<argument><expr><name><name>ct</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>cost</name><index>[<expr><name>uk</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>vk</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>parent</name><index>[<expr><name>vk</name></expr>]</index></name> <operator>=</operator> <name>uk</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cost</name><index>[<expr><name>uk</name></expr>]</index></name> <operator>+=</operator> <name><name>cost</name><index>[<expr><name>vk</name></expr>]</index></name> <operator>-</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>sta</name><index>[<expr><name>uk</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>sta</name><index>[<expr><name>vk</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>ct</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>dist</name><argument_list>(<argument><expr><name><name>ct</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>cost</name><index>[<expr><name>vk</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>sta</name><index>[<expr><name>uk</name></expr>]</index></name> <operator>&gt;</operator> <name><name>sta</name><index>[<expr><name>vk</name></expr>]</index></name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>sta</name><index>[<expr><name>uk</name></expr>]</index></name> <operator>=</operator> <name><name>sta</name><index>[<expr><name>vk</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>id</name><index>[<expr><name>uk</name></expr>]</index></name> <operator>=</operator> <name><name>id</name><index>[<expr><name>vk</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name><name>sta</name><index>[<expr><name>vk</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>id</name><index>[<expr><name>vk</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>eb</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></for>
    <macro><name>for1</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal> <operator>&lt;&lt;</operator> <name>c</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <macro><name>for1</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro>
    <block>{
        <if>if <condition>(<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal> <operator>&lt;&lt;</operator> <name>cnt</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>p</name><operator>:</operator> <name>r</name></expr></init>)</control>
    <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>fi</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>se</name></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
