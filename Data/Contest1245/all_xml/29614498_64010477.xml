<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29614498_64010477.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>long</name> <name>long</name></expr></argument> &gt;</argument_list></name></type> <name>M</name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>a</name><operator>==</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>b</name><operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0LL</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name><operator>+</operator><name>b</name><operator>+</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>M</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>it</name><operator>!=</operator><call><name><name>M</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block>{
        <return>return <expr><name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>lb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">30</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
    <block>{
        <if>if<condition>( <expr><operator>(</operator><name>a</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator><operator>||</operator><operator>(</operator><name>b</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><name>lb</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">// both 0,</comment>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>na</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>lb</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nb</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>lb</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>na</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <comment type="line">//a: 1 b = 0;</comment>
    <if>if<condition>(<expr><name>a</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>lb</name><operator>)</operator></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>na</name> <init>= <expr><name>a</name><operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>lb</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nb</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>lb</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>na</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line">//a: 0 b = 1;</comment>
    <if>if<condition>(<expr><name>b</name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>lb</name><operator>)</operator></expr>)</condition><then>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>na</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>lb</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nb</name> <init>= <expr><name>b</name><operator>-</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>lb</name><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>na</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>


    <return>return <expr><name><name>M</name><index>[<expr><call><name>make_pair</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><call><name>solve</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>solve</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function></unit>
