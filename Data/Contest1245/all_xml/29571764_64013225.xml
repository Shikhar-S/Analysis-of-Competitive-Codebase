<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29571764_64013225.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>  
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//^[ \t]*//[^\n]*\n</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inc</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (register int i = (a); i &lt;= (b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dec</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (register int i = (a); i &gt;= (b); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri</name></cpp:macro> <cpp:value>register int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(A, B)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + mod) % mod)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mii</name></cpp:macro> <cpp:value>map&lt;int, int&gt;</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>gint</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>x</name> <operator>*</operator> <name>f</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>gll</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>x</name> <operator>*</operator> <name>f</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>pint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>y</name> <operator>&lt;=</operator> <name>x</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>y</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <name>y</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>%=</operator> <name>y</name></expr>;</expr_stmt>
	}</block></while>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>pll</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>y</name> <operator>&lt;=</operator> <name>x</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>y</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <name>y</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>%=</operator> <name>y</name></expr>;</expr_stmt>
	}</block></while>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>pintln</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>pint</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>pllln</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>pll</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">//ï¿½ß¾ï¿½ï¿½ï¿½Ô²ï¿½ï¿½ï¿½ï¿½</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>       <comment type="line">//Æ«ï¿½ï¿½Öµ</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxp</name> <init>= <expr><literal type="number">1010</literal></expr></init></decl>;</decl_stmt>         <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
<function><type><name>int</name></type> <name>sgn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{            <comment type="line">//ï¿½Ð¶ï¿½xï¿½Ç·ï¿½ï¿½ï¿½ï¿½0</comment>
	<if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>eps</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then>
	<else>else
		<block type="pseudo"><return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>Dcmp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">//ï¿½È½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½0 ï¿½ï¿½È£ï¿½-1 Ð¡ï¿½Ú£ï¿½1 ï¿½ï¿½ï¿½ï¿½</comment>
	<if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>eps</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then>
	<else>else
		<block type="pseudo"><return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block></else></if>
}</block></function>
<comment type="line">//---------------Æ½ï¿½æ¼¸ï¿½Î£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½--------</comment>
<struct>struct <name>Point</name>
<block>{<public type="default">  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½Í»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<constructor><name>Point</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><name>Point</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>x</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>, <call><name>y</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{
	}</block></constructor>
	<function type="operator"><type><name>Point</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>Point</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>Point</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>k</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>k</name></expr></argument>, <argument><expr><name>y</name> <operator>*</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½kï¿½ï¿½</comment>
	<function type="operator"><type><name>Point</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>k</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <name>k</name></expr></argument>, <argument><expr><name>y</name> <operator>/</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð¡kï¿½ï¿½</comment>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><call><name>sgn</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
	}</block></function>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½Í¹ï¿½ï¿½</comment>
</public>}</block>;</struct>
<typedef>typedef <type><name>Point</name></type> <name>Vector</name>;</typedef>                                             <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Dot</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr>;</return>
}</block></function>  <comment type="line">//ï¿½ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Len</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½Ä³ï¿½ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Len2</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Dot</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>       <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Èµï¿½Æ½ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Angle</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>acos</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">// Aï¿½ï¿½Bï¿½Ä¼Ð½ï¿½</comment>
<function><type><name>double</name></type> <name>Cross</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr>;</return>
}</block></function>  <comment type="line">//ï¿½ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Area2</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Cross</name><argument_list>(<argument><expr><name>B</name> <operator>-</operator> <name>A</name></expr></argument>, <argument><expr><name>C</name> <operator>-</operator> <name>A</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ABCï¿½ï¿½ï¿½ï¿½ï¿½2ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Distance</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>hypot</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½Ä¾ï¿½ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Dist</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name><name>A</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>Vector</name></type> <name>Normal</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><operator>-</operator><name><name>A</name><operator>.</operator><name>y</name></name> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½Aï¿½Äµï¿½Î»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>

<function><type><name>bool</name></type> <name>Parallel</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½Æ½ï¿½Ð»ï¿½ï¿½Øºï¿½)</comment>

<function><type><name>Vector</name></type> <name>Rotate</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rad</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">//ï¿½ï¿½ï¿½ï¿½Aï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½×ªradï¿½ï¿½</comment>
	<return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>rad</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>rad</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>rad</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>rad</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<struct>struct <name>Line</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>Point</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>  <comment type="line">//ï¿½ï¿½ï¿½Ïµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
	<constructor><name>Line</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><name>Line</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>p2</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>p1</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call>, <call><name>p2</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{
	}</block></constructor>
	<comment type="line">// Line(Point x,Point y){p1 = x;p2 = y;}</comment>
	<comment type="line">//  Point(double x,double y):x(x),y(y){}</comment>
	<comment type="line">//ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð±ï¿½ï¿½ angle È·ï¿½ï¿½Ö±ï¿½ï¿½,0&lt;=angle&lt;pi</comment>
	<constructor><name>Line</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>angle</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>angle</name> <operator>-</operator> <name>pi</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>(</operator><name>p1</name> <operator>+</operator> <call><name>Point</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>(</operator><name>p1</name> <operator>+</operator> <call><name>Point</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>tan</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></constructor>
	<comment type="line">// ax+by+c=0</comment>
	<constructor><name>Line</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>c</name> <operator>/</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>c</name> <operator>/</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><operator>-</operator><name>c</name> <operator>/</operator> <name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><operator>-</operator><name>c</name> <operator>/</operator> <name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<else>else
		<block>{
			<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>c</name> <operator>/</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><name>c</name> <operator>-</operator> <name>a</name><operator>)</operator> <operator>/</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></constructor>
</public>}</block>;</struct>

<typedef>typedef <type><name>Line</name></type> <name>Segment</name>;</typedef>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ß¶Î£ï¿½ï¿½ï¿½ï¿½Ëµï¿½ï¿½ï¿½Point p1,p2</comment>

<comment type="line">//ï¿½ï¿½ï¿½ï¿½Ö±ï¿½ï¿½ï¿½ï¿½Ð±ï¿½ï¿½ 0&lt;=angle&lt;pi</comment>
<function><type><name>double</name></type> <name>Line_angle</name><parameter_list>(<parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><call><name>atan2</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>+=</operator> <name>pi</name></expr>;</expr_stmt></block></then></if>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>k</name> <operator>-</operator> <name>pi</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>-=</operator> <name>pi</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>k</name></expr>;</return>
}</block></function>
<comment type="line">//ï¿½ï¿½ï¿½Ö±ï¿½ß¹ï¿½Ïµ:1 ï¿½ï¿½ï¿½ï¿½ï¿½;2 ï¿½ï¿½ï¿½Ò²ï¿½;0 ï¿½ï¿½Ö±ï¿½ï¿½ï¿½ï¿½</comment>
<function><type><name>int</name></type> <name>Point_line_relation</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>  <comment type="line">// 1ï¿½ï¿½pï¿½ï¿½vï¿½ï¿½ï¿½ï¿½ï¿½</comment>
	<if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if>  <comment type="line">// 2ï¿½ï¿½pï¿½ï¿½vï¿½ï¿½ï¿½Ò±ï¿½</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>             <comment type="line">// 0ï¿½ï¿½pï¿½ï¿½vï¿½ï¿½</comment>
}</block></function>
<comment type="line">// ï¿½ï¿½ï¿½ï¿½ß¶ÎµÄ¹ï¿½Ïµï¿½ï¿½0 ï¿½ï¿½pï¿½ï¿½ï¿½ï¿½ï¿½ß¶ï¿½vï¿½Ï£ï¿½1 ï¿½ï¿½pï¿½ï¿½ï¿½ß¶ï¿½vï¿½Ï¡ï¿½</comment>
<function><type><name>bool</name></type> <name>Point_on_seg</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="line">//ï¿½ï¿½Ö±ï¿½ß¹ï¿½Ïµ:0 Æ½ï¿½ï¿½,1 ï¿½Øºï¿½,2 ï¿½à½»</comment>
<function><type><name>int</name></type> <name>Line_relation</name><parameter_list>(<parameter><decl><type><name>Line</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Line</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<if>if <condition>(<expr><call><name>Point_line_relation</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>  <comment type="line">// 1 ï¿½Øºï¿½</comment>
		<else>else
			<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>  <comment type="line">// 0 Æ½ï¿½ï¿½</comment>
	}</block></then></if>
	<return>return <expr><literal type="number">2</literal></expr>;</return>  <comment type="line">// 2 ï¿½à½»</comment>
}</block></function>

<comment type="line">//ï¿½ãµ½Ö±ï¿½ßµÄ¾ï¿½ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Dis_point_line</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>fabs</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Distance</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//ï¿½ï¿½ï¿½ï¿½Ö±ï¿½ï¿½ï¿½Ïµï¿½Í¶Ó°</comment>
<function><type><name>Point</name></type> <name>Point_line_proj</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><call><name>Dot</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Len2</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name><name>v</name><operator>.</operator><name>p1</name></name> <operator>+</operator> <operator>(</operator><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name><operator>)</operator> <operator>*</operator> <name>k</name></expr>;</return>
}</block></function>

<comment type="line">//ï¿½ï¿½pï¿½ï¿½Ö±ï¿½ï¿½vï¿½Ä¶Ô³Æµï¿½</comment>
<function><type><name>Point</name></type> <name>Point_line_symmetry</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Point</name></type> <name>q</name> <init>= <expr><call><name>Point_line_proj</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>Point</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>q</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>q</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//ï¿½ãµ½ï¿½ß¶ÎµÄ¾ï¿½ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Dis_point_seg</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Segment</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>  <comment type="line">//ï¿½ï¿½ï¿½Í¶Ó°ï¿½ï¿½ï¿½ï¿½ï¿½ß¶ï¿½ï¿½ï¿½</comment>
		<block type="pseudo"><return>return <expr><call><name>min</name><argument_list>(<argument><expr><call><name>Distance</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Distance</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<return>return <expr><call><name>Dis_point_line</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="line">//ï¿½ï¿½ï¿½Í¶Ó°ï¿½ï¿½ï¿½ß¶ï¿½ï¿½ï¿½</comment>
}</block></function>

<comment type="line">//ï¿½ï¿½ï¿½ï¿½Ö±ï¿½ï¿½abï¿½ï¿½cdï¿½Ä½ï¿½ï¿½ï¿½</comment>
<comment type="line">//ï¿½ï¿½ï¿½ï¿½Ç°Òªï¿½ï¿½Ö¤ï¿½ï¿½Ö±ï¿½ß²ï¿½Æ½ï¿½Ð»ï¿½ï¿½Øºï¿½</comment>
<function><type><name>Point</name></type> <name>Cross_point</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">// Line1:ab,  Line2:cd</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>s1</name> <init>= <expr><call><name>Cross</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>a</name></expr></argument>, <argument><expr><name>c</name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>s2</name> <init>= <expr><call><name>Cross</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>a</name></expr></argument>, <argument><expr><name>d</name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
	<return>return <expr><call><name>Point</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name>s2</name> <operator>-</operator> <name><name>d</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name>s1</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name>s2</name> <operator>-</operator> <name><name>d</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name>s1</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>s2</name> <operator>-</operator> <name>s1</name><operator>)</operator></expr>;</return>
}</block></function>
<comment type="line">//ï¿½ï¿½ï¿½ß¶ï¿½ï¿½Ç·ï¿½ï¿½à½»ï¿½ï¿½1 ï¿½à½»ï¿½ï¿½0ï¿½ï¿½ï¿½à½»</comment>
<function><type><name>bool</name></type> <name>Cross_segment</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">// Line1:ab,  Line2:cd</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>c1</name> <init>= <expr><call><name>Cross</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>a</name></expr></argument>, <argument><expr><name>c</name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><call><name>Cross</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>a</name></expr></argument>, <argument><expr><name>d</name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><call><name>Cross</name><argument_list>(<argument><expr><name>d</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><name>a</name> <operator>-</operator> <name>c</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>d2</name> <init>= <expr><call><name>Cross</name><argument_list>(<argument><expr><name>d</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><name>b</name> <operator>-</operator> <name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>sgn</name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>  <comment type="line">//×¢ï¿½â½»ï¿½ï¿½ï¿½Ç¶Ëµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
}</block></function>
<comment type="line">//---------------Æ½ï¿½æ¼¸ï¿½Î£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½----------------</comment>
<struct>struct <name>Polygon</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>          <comment type="line">//ï¿½ï¿½ï¿½ï¿½ÎµÄ¶ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
	<decl_stmt><decl><type><name>Point</name></type> <name><name>p</name><index>[<expr><name>maxp</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ÎµÄµï¿½</comment>
	<decl_stmt><decl><type><name>Line</name></type> <name><name>v</name><index>[<expr><name>maxp</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="line">//ï¿½ï¿½ï¿½ï¿½ÎµÄ±ï¿½</comment>
</public>}</block>;</struct>
<comment type="line">//ï¿½Ð¶Ïµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÎµÄ¹ï¿½Ïµ: 3 ï¿½ï¿½ï¿½ï¿½; 2 ï¿½ï¿½ï¿½ï¿½; 1 ï¿½Ú²ï¿½; 0 ï¿½â²¿</comment>
<function><type><name>int</name></type> <name>Point_in_polygon</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>Point</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">//ï¿½ï¿½ptï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Point *p</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{                    <comment type="line">//ï¿½ï¿½ï¿½Ú¶ï¿½ï¿½ï¿½ÎµÄ¶ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
		<if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>pt</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">3</literal></expr>;</return></block></then></if>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{  <comment type="line">//ï¿½ï¿½ï¿½Ú¶ï¿½ï¿½ï¿½ÎµÄ±ï¿½ï¿½ï¿½</comment>
		<decl_stmt><decl><type><name>Line</name></type> <name>v</name> <init>= <expr><call><name>Line</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>Point_on_seg</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>pt</name> <operator>-</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>sgn</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>pt</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>sgn</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>pt</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>u</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>u</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>num</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<return>return <expr><name>num</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>  <comment type="line">// 1 ï¿½Ú²ï¿½; 0 ï¿½â²¿</comment>
}</block></function>

<function><type><name>double</name></type> <name>Polygon_area</name><parameter_list>(<parameter><decl><type><name>Point</name><modifier>*</modifier></type> <name>p</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">// Point *pï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½Î¡ï¿½ï¿½ï¿½Ô­ï¿½ã¿ªÊ¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>area</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>area</name> <operator>+=</operator> <call><name>Cross</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><name>area</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ü¼òµ¥µï¿½È¡ï¿½ï¿½ï¿½ï¿½Öµ</comment>
}</block></function>

<function><type><name>Point</name></type> <name>Polygon_center</name><parameter_list>(<parameter><decl><type><name>Point</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¡ï¿½Point *pï¿½ï¿½Ê¾ï¿½ï¿½ï¿½ï¿½Î¡ï¿½</comment>
	<decl_stmt><decl><type><name>Point</name></type> <name>ans</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>Polygon_area</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ans</name></expr>;</return></block></then></if>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator>
		<operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>p</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <call><name>Cross</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
	<return>return <expr><name>ans</name> <operator>/</operator> <call><name>Polygon_area</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">6.</literal></expr>;</return>
}</block></function>

<comment type="line">// Convex_hull()ï¿½ï¿½Í¹ï¿½ï¿½ï¿½ï¿½Í¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½chï¿½Ð£ï¿½ï¿½ï¿½ï¿½ï¿½Öµï¿½ï¿½Í¹ï¿½ï¿½ï¿½Ä¶ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
<function><type><name>int</name></type> <name>Convex_hull</name><parameter_list>(<parameter><decl><type><name>Point</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>Point</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">//ï¿½Ôµï¿½ï¿½ï¿½ï¿½ò£º°ï¿½xï¿½ï¿½Ð¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½xï¿½ï¿½Í¬ï¿½ï¿½ï¿½ï¿½yï¿½ï¿½ï¿½ï¿½</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>unique</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>p</name></expr>;</expr_stmt>  <comment type="line">//È¥ï¿½ï¿½ï¿½Ø¸ï¿½ï¿½ï¿½</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//ï¿½ï¿½ï¿½ï¿½Í¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½p[i]ï¿½ï¿½ï¿½Ò¹ï¿½ï¿½ï¿½Ä£ï¿½ï¿½ï¿½ï¿½ï¿½ã²»ï¿½ï¿½Í¹ï¿½ï¿½ï¿½Ï£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<while>while <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ch</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>ch</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name><name>ch</name><index>[<expr><name>v</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>
	<comment type="line">//ï¿½ï¿½ï¿½ï¿½Í¹ï¿½ï¿½</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{
		<while>while <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>j</name><operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ch</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>ch</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name><name>ch</name><index>[<expr><name>v</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>v</name></expr>;</return>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½Öµvï¿½ï¿½Í¹ï¿½ï¿½ï¿½Ä¶ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
}</block></function>

<comment type="line">//---------------Æ½ï¿½æ¼¸ï¿½Î£ï¿½Ô²----------------</comment>
<struct>struct <name>Circle</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>Point</name></type> <name>c</name></decl>;</decl_stmt>   <comment type="line">//Ô²ï¿½ï¿½</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>  <comment type="line">//ï¿½ë¾¶</comment>
	<constructor><name>Circle</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><name>Circle</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>r</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>c</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>, <call><name>r</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{
	}</block></constructor>
	<constructor><name>Circle</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>_r</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>_r</name></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<comment type="line">//ï¿½ï¿½ï¿½Ô²ï¿½Ä¹ï¿½Ïµ: 0 ï¿½ï¿½ï¿½ï¿½Ô²ï¿½ï¿½, 1 Ô²ï¿½ï¿½, 2 Ô²ï¿½ï¿½.</comment>
<function><type><name>int</name></type> <name>Point_circle_relation</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Circle</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>dst</name> <init>= <expr><call><name>Distance</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>C</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <name><name>C</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>   <comment type="line">//ï¿½ï¿½ï¿½ï¿½Ô²ï¿½ï¿½</comment>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <name><name>C</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>  <comment type="line">//Ô²ï¿½ï¿½</comment>
	<return>return <expr><literal type="number">2</literal></expr>;</return>                           <comment type="line">//Ô²ï¿½ï¿½</comment>
}</block></function>

<comment type="line">//Ö±ï¿½ßºï¿½Ô²ï¿½Ä¹ï¿½Ïµï¿½ï¿½0 Ö±ï¿½ï¿½ï¿½ï¿½Ô²ï¿½ï¿½, 1 Ö±ï¿½ßºï¿½Ô²ï¿½ï¿½ï¿½ï¿½, 2 Ö±ï¿½ï¿½ï¿½ï¿½Ô²ï¿½ï¿½</comment>
<function><type><name>int</name></type> <name>Line_circle_relation</name><parameter_list>(<parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Circle</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>dst</name> <init>= <expr><call><name>Dis_point_line</name><argument_list>(<argument><expr><name><name>C</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <name><name>C</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>   <comment type="line">//Ö±ï¿½ï¿½ï¿½ï¿½Ô²ï¿½ï¿½</comment>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <name><name>C</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>  <comment type="line">//Ö±ï¿½ßºï¿½Ô²ï¿½ï¿½ï¿½ï¿½</comment>
	<return>return <expr><literal type="number">2</literal></expr>;</return>                           <comment type="line">//Ö±ï¿½ï¿½ï¿½ï¿½Ô²ï¿½ï¿½</comment>
}</block></function>

<comment type="line">//ï¿½ß¶Îºï¿½Ô²ï¿½Ä¹ï¿½Ïµï¿½ï¿½0 ï¿½ß¶ï¿½ï¿½ï¿½Ô²ï¿½ï¿½, 1 ï¿½ß¶Îºï¿½Ô²ï¿½ï¿½ï¿½ï¿½, 2 ï¿½ß¶ï¿½ï¿½ï¿½Ô²ï¿½ï¿½</comment>
<function><type><name>int</name></type> <name>Seg_circle_relation</name><parameter_list>(<parameter><decl><type><name>Segment</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Circle</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>dst</name> <init>= <expr><call><name>Dis_point_seg</name><argument_list>(<argument><expr><name><name>C</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <name><name>C</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>   <comment type="line">//ï¿½ß¶ï¿½ï¿½ï¿½Ô²ï¿½ï¿½</comment>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <name><name>C</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>  <comment type="line">//ï¿½ß¶Îºï¿½Ô²ï¿½ï¿½ï¿½ï¿½</comment>
	<return>return <expr><literal type="number">2</literal></expr>;</return>                           <comment type="line">//ï¿½ß¶ï¿½ï¿½ï¿½Ô²ï¿½ï¿½</comment>
}</block></function>

<comment type="line">//Ö±ï¿½ßºï¿½Ô²ï¿½Ä½ï¿½ï¿½ï¿½   hdu 5572</comment>
<function><type><name>int</name></type> <name>Line_cross_circle</name><parameter_list>(<parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Circle</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><name>Point</name><modifier>&amp;</modifier></type> <name>pa</name></decl></parameter>,
	<parameter><decl><type><name>Point</name><modifier>&amp;</modifier></type> <name>pb</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">// pa, pbï¿½Ç½ï¿½ï¿½ã¡£ï¿½ï¿½ï¿½ï¿½Öµï¿½Ç½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
	<if>if <condition>(<expr><call><name>Line_circle_relation</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>  <comment type="line">//ï¿½Þ½ï¿½ï¿½ï¿½</comment>
	<decl_stmt><decl><type><name>Point</name></type> <name>q</name> <init>= <expr><call><name>Point_line_proj</name><argument_list>(<argument><expr><name><name>C</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>   <comment type="line">//Ô²ï¿½ï¿½ï¿½ï¿½Ö±ï¿½ï¿½ï¿½Ïµï¿½Í¶Ó°ï¿½ï¿½</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>Dis_point_line</name><argument_list>(<argument><expr><name><name>C</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>   <comment type="line">//Ô²ï¿½Äµï¿½Ö±ï¿½ßµÄ¾ï¿½ï¿½ï¿½</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>C</name><operator>.</operator><name>r</name></name> <operator>*</operator> <name><name>C</name><operator>.</operator><name>r</name></name> <operator>-</operator> <name>d</name> <operator>*</operator> <name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">//</comment>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{                   <comment type="line">// 1ï¿½ï¿½ï¿½ï¿½ï¿½ã£¬Ö±ï¿½ßºï¿½Ô²ï¿½ï¿½ï¿½ï¿½</comment>
		<expr_stmt><expr><name>pa</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pb</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>Point</name></type> <name>n</name> <init>= <expr><operator>(</operator><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name><operator>)</operator> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">//ï¿½ï¿½Î»ï¿½ï¿½ï¿½ï¿½</comment>
	<expr_stmt><expr><name>pa</name> <operator>=</operator> <name>q</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>k</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pb</name> <operator>=</operator> <name>q</name> <operator>-</operator> <name>n</name> <operator>*</operator> <name>k</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">2</literal></expr>;</return>  <comment type="line">// 2ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
}</block></function>

<comment type="line">//-------------------ï¿½ï¿½Î¬ï¿½ï¿½ï¿½ï¿½----------------</comment>
<comment type="line">//ï¿½ï¿½Î¬ï¿½ï¿½ï¿½ï¿½</comment>
<struct>struct <name>Point3</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
	<constructor><name>Point3</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><name>Point3</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>z</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>x</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>, <call><name>y</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call>, <call><name>z</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{
	}</block></constructor>
	<function type="operator"><type><name>Point3</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point3</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name><name>B</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>Point3</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point3</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>Point3</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>k</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point3</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>k</name></expr></argument>, <argument><expr><name>y</name> <operator>*</operator> <name>k</name></expr></argument>, <argument><expr><name>z</name> <operator>*</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>Point3</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>k</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point3</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <name>k</name></expr></argument>, <argument><expr><name>y</name> <operator>/</operator> <name>k</name></expr></argument>, <argument><expr><name>z</name> <operator>/</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>z</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
	}</block></function>
</public>}</block>;</struct>
<typedef>typedef <type><name>Point3</name></type> <name>Vector3</name>;</typedef>
<comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¶ï¿½Î¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¬ï¿½ï¿½ï¿½ï¿½C++ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¬ï¿½ï¿½ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Dot</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>A</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>z</name></name></expr>;</return>
}</block></function>
<comment type="line">//ï¿½ï¿½ï¿½</comment>
<function><type><name>Vector3</name></type> <name>Cross</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Point3</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>A</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>z</name></name></expr></argument>,
		<argument><expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>double</name></type> <name>Len</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½Ä³ï¿½ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Len2</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Dot</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>       <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Èµï¿½Æ½ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Distance</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name><name>A</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator>
		<operator>(</operator><name><name>A</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>z</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>double</name></type> <name>Angle</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>acos</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">// Aï¿½ï¿½Bï¿½Ä¼Ð½ï¿½</comment>
<comment type="line">//ï¿½ï¿½Î¬ï¿½ï¿½ï¿½ï¿½</comment>
<struct>struct <name>Line3</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>Point3</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
	<constructor><name>Line3</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><name>Line3</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>p2</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>p1</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call>, <call><name>p2</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{
	}</block></constructor>
</public>}</block>;</struct>
<typedef>typedef <type><name>Line3</name></type> <name>Segment3</name>;</typedef>  <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ß¶Î£ï¿½ï¿½ï¿½ï¿½Ëµï¿½ï¿½ï¿½Point p1,p2</comment>

<comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½2ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Area2</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Len</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>B</name> <operator>-</operator> <name>A</name></expr></argument>, <argument><expr><name>C</name> <operator>-</operator> <name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//ï¿½ï¿½Î¬ï¿½ï¿½ï¿½ãµ½Ö±ï¿½ß¾ï¿½ï¿½ï¿½</comment>
<function><type><name>double</name></type> <name>Dis_point_line</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Len</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Distance</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//ï¿½ï¿½Î¬ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö±ï¿½ï¿½ï¿½ï¿½</comment>
<function><type><name>bool</name></type> <name>Point_line_relation</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Len</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line">//ï¿½ï¿½Î¬ï¿½ï¿½ï¿½ãµ½ï¿½ß¶Î¾ï¿½ï¿½ë¡£</comment>
<function><type><name>double</name></type> <name>Dis_point_seg</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Segment3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><call><name>min</name><argument_list>(<argument><expr><call><name>Distance</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Distance</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<return>return <expr><call><name>Dis_point_line</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<comment type="line">//ï¿½ï¿½Î¬ï¿½ï¿½ï¿½ï¿½ p ï¿½ï¿½Ö±ï¿½ï¿½ï¿½Ïµï¿½Í¶Ó°</comment>
<function><type><name>Point3</name></type> <name>Point_line_proj</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><call><name>Dot</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Len2</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name><name>v</name><operator>.</operator><name>p1</name></name> <operator>+</operator> <operator>(</operator><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name><operator>)</operator> <operator>*</operator> <name>k</name></expr>;</return>
}</block></function>
<comment type="line">//ï¿½ï¿½Î¬ï¿½ï¿½Æ½ï¿½ï¿½</comment>
<struct>struct <name>Plane</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>Point3</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p3</name></decl>;</decl_stmt>  <comment type="line">//Æ½ï¿½ï¿½ï¿½Ïµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
	<constructor><name>Plane</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><name>Plane</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>p2</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>p3</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>p1</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call>, <call><name>p2</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call>, <call><name>p3</name><argument_list>(<argument><expr><name>p3</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{
	}</block></constructor>
</public>}</block>;</struct>
<comment type="line">//Æ½ï¿½æ·¨ï¿½ï¿½ï¿½ï¿½</comment>
<function><type><name>Point3</name></type> <name>Pvec</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Cross</name><argument_list>(<argument><expr><name>B</name> <operator>-</operator> <name>A</name></expr></argument>, <argument><expr><name>C</name> <operator>-</operator> <name>A</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>Point3</name></type> <name>Pvec</name><parameter_list>(<parameter><decl><type><name>Plane</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Cross</name><argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>f</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>p3</name></name> <operator>-</operator> <name><name>f</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<comment type="line">//ï¿½Äµã¹²Æ½ï¿½ï¿½</comment>
<function><type><name>bool</name></type> <name>Point_on_plane</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><call><name>Pvec</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>D</name> <operator>-</operator> <name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line">//ï¿½ï¿½Æ½ï¿½ï¿½Æ½ï¿½ï¿½</comment>
<function><type><name>int</name></type> <name>Parallel</name><parameter_list>(<parameter><decl><type><name>Plane</name></type> <name>f1</name></decl></parameter>, <parameter><decl><type><name>Plane</name></type> <name>f2</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Len</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><call><name>Pvec</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Pvec</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>eps</name></expr>;</return>
}</block></function>
<comment type="line">//ï¿½ï¿½Æ½ï¿½æ´¹Ö±</comment>
<function><type><name>int</name></type> <name>Vertical</name><parameter_list>(<parameter><decl><type><name>Plane</name></type> <name>f1</name></decl></parameter>, <parameter><decl><type><name>Plane</name></type> <name>f2</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><call><name>Pvec</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Pvec</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line">//Ö±ï¿½ï¿½ï¿½ï¿½Æ½ï¿½ï¿½Ä½ï¿½ï¿½ï¿½pï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Öµï¿½Ç½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½  ???</comment>
<function><type><name>int</name></type> <name>Line_cross_plane</name><parameter_list>(<parameter><decl><type><name>Line3</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>Plane</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>Point3</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Point3</name></type> <name>v</name> <init>= <expr><call><name>Pvec</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>Dot</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>f</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><call><name>Dot</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>p1</name></name> <operator>-</operator> <name><name>f</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name>x</name> <operator>-</operator> <name>y</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>  <comment type="line">//-1ï¿½ï¿½vï¿½ï¿½fï¿½ï¿½</comment>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>                  <comment type="line">// 0ï¿½ï¿½vï¿½ï¿½fÆ½ï¿½ï¿½</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>u</name><operator>.</operator><name>p1</name></name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>u</name><operator>.</operator><name>p2</name></name> <operator>*</operator> <name>y</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>d</name></expr>;</expr_stmt>          <comment type="line">// vï¿½ï¿½fï¿½à½»</comment>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>

<comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½*6</comment>
<function><type><name>double</name></type> <name>volume4</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Dot</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>B</name> <operator>-</operator> <name>A</name></expr></argument>, <argument><expr><name>C</name> <operator>-</operator> <name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>D</name> <operator>-</operator> <name>A</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><ternary><condition><expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">300000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ans</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>fk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then>
	<elseif>else <if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></then></if></elseif></if>
}</block></function>

<function><type><name>void</name></type> <name>NewFunction</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>gint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>gint</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>b</name> <operator>=</operator> <call><name>gint</name><argument_list>()</argument_list></call></expr><operator>,</operator> <expr><name>c</name> <operator>=</operator> <call><name>gint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>inc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><name>b</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>b</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>count</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><name>c</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>c</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>count</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><name>a</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>a</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>count</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
			}</block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt></block></else></if>
		}</block></then></if></elseif></if>
	}</block>
	<expr_stmt><expr><name><name>ans</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>count</name> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>inc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro>
		<block>{
			<if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else
			<block>{
				<expr_stmt><expr><call><name>fk</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name>int</name></type>  <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><call><name>gint</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>NewFunction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
