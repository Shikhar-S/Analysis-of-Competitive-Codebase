<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29602686_64015409.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>ll</name></type> <name><name>f</name><index>[<expr><literal type="number">33</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n0</name></decl>,<decl><type ref="prev"/><name>n1</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>ii</name></decl>,<decl><type ref="prev"/><name>jj</name></decl>,<decl><type ref="prev"/><name>op0</name></decl>,<decl><type ref="prev"/><name>op1</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>n0</name><operator>=</operator><name>n1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>n</name></expr>)</condition><block>{
		<expr_stmt><expr><name><name>a</name><index>[<expr><operator>++</operator><name>n0</name></expr>]</index></name><operator>=</operator><name>n</name><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	}</block></while>
	<while>while<condition>(<expr><name>m</name></expr>)</condition><block>{
		<expr_stmt><expr><name><name>b</name><index>[<expr><operator>++</operator><name>n1</name></expr>]</index></name><operator>=</operator><name>m</name><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>m</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//for(i=1;i&lt;=n0/2;i++)swap(a[i],a[n0-i+1]);</comment>
	<comment type="line">//for(i=1;i&lt;=n1/2;i++)swap(b[i],b[n1-i+1]);</comment>
	<expr_stmt><expr><name><name>f</name><index>[<expr><call><name>max</name><argument_list>(<argument><expr><name>n0</name></expr></argument>,<argument><expr><name>n1</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>n0</name></expr></argument>,<argument><expr><name>n1</name></expr></argument>)</argument_list></call></expr>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		 <block type="pseudo"><for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
		 	<for>for<control>(<init><expr><name>ii</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>ii</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
		 	 <block type="pseudo"><for>for<control>(<init><expr><name>jj</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>jj</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>jj</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>ii</name><operator>!=</operator><literal type="number">1</literal><operator>||</operator><name>jj</name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		 	 	<if>if<condition>(<expr><operator>!</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name>ii</name><operator>&amp;&amp;</operator><name>j</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		 	 	<if>if<condition>(<expr><operator>!</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name>jj</name><operator>&amp;&amp;</operator><name>k</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		 	 	<expr_stmt><expr><name>op0</name><operator>=</operator><name>j</name><operator>&amp;</operator><operator>(</operator><name>ii</name><operator>==</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		 	 	<expr_stmt><expr><name>op1</name><operator>=</operator><name>k</name><operator>&amp;</operator><operator>(</operator><name>jj</name><operator>==</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		 	 	<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>op0</name></expr>]</index><index>[<expr><name>op1</name></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>
			  }</block></then></if></block></for></block></for>
		 }</block></for></block></for>
	}</block></for>
	<return>return <expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>t1</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t1</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//printf("%lld %lld %lld\n",solve(r,r),solve(l-1,r),solve(l-1,l-1));</comment>
		<comment type="line">//ans=solve(r,r);</comment>
		<comment type="line">//printf("%lld %lld %lld %lld %lld\n",ans,l,r,solve(l-1,r),solve(l-1,r)*2);</comment>
		<comment type="line">//ans-=solve(l-1,r)*2;</comment>
	<comment type="line">//	printf("%lld\n",ans);</comment>
		<comment type="line">//ans+=solve(l-1,l-1);</comment>
		<comment type="line">//printf("%lld\n",ans);</comment>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><call><name>solve</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>solve</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function></unit>
