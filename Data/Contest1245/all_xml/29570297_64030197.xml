<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29570297_64030197.cpp"><comment type="block">/* LittleFall : Hello! */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using> <using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using> <function_decl><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">500016</literal></expr></init></decl>, <decl><type ref="prev"/><name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>bit_count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>n</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><operator>++</operator><name>res</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>string</name></type> <name>trans</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>x1</name> <init>= <expr><name><name>pll</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>x2</name> <init>= <expr><name><name>pll</name><operator>.</operator><name>second</name></name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//printf("%I64d %I64d : ",x1,x2+1 );</comment>
	<decl_stmt><decl><type><name>string</name></type> <name>res1</name></decl>, <decl><type ref="prev"/><name>res2</name></decl>;</decl_stmt> <comment type="line">//'0'ä»£è¡¨æä¸º0ï¼'1'ä»£è¡¨æä¸º1ï¼'2'ä»£è¡¨åå¯</comment>
	<while>while<condition>(<expr><name>x1</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name><name>res1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>x1</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x1</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<while>while<condition>(<expr><name>x2</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name><name>res2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><name>x2</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x2</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><call><name><name>res1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>res1</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>res2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>res1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'2'</literal></expr>;</expr_stmt></block></then></if></block></for>
	<comment type="line">//cout &lt;&lt; res1 &lt;&lt; endl;</comment>
	<return>return <expr><name>res1</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>p2</name></decl></parameter>)</parameter_list> <comment type="line">//è§£å³åºé´</comment>
<block>{
	<comment type="line">//cout &lt;&lt; p1 &lt;&lt; " " &lt;&lt; p2 &lt;&lt; endl;</comment>
	<if>if<condition>(<expr><call><name><name>p1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><call><name><name>p2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><call><name><name>p1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&gt;</operator><call><name><name>p2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<while>while<condition>(<expr><call><name><name>p1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;</operator><call><name><name>p2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>p1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>

	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><call><name><name>p1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>char</name></type> <name>c1</name> <init>= <expr><name><name>p1</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><name><name>p2</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>c1</name><operator>&gt;</operator><name>c2</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>c1</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c2</name><operator>==</operator><literal type="char">'2'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'1'</literal> <operator>&amp;&amp;</operator> <name>c2</name><operator>==</operator><literal type="char">'1'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>*=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>c1</name><operator>==</operator><literal type="char">'2'</literal> <operator>&amp;&amp;</operator> <name>c2</name><operator>==</operator><literal type="char">'2'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<comment type="line">// if(p1==p2) return 0;</comment>
	<comment type="line">// printf("%I64d %I64d %I64d %I64d\n",p1.first, p1.second,p2.first,p2.second );</comment>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_LITTLEFALL_</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"in.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>l</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>r</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<if>if<condition>(<expr><call><name>bit_count</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>bit_count</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>

		<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>l</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> 
		<block>{
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>r</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>segs</name></decl>;</decl_stmt> 
		<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><name>l</name></expr></init></decl>;</init><condition>;</condition> <incr/>)</control>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>ni</name> <init>= <expr><name>i</name><operator>+</operator><operator>(</operator><name>i</name><operator>&amp;</operator><operator>-</operator><name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>segs</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name>ni</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><call><name>bit_count</name><argument_list>(<argument><expr><name>ni</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>bit_count</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <name>ni</name></expr>;</expr_stmt>
		}</block></for>
		<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><name>r</name></expr></init></decl>;</init><condition>;</condition> <incr/>)</control>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>ni</name> <init>= <expr><name>i</name><operator>-</operator><operator>(</operator><name>i</name><operator>&amp;</operator><operator>-</operator><name>i</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><call><name>bit_count</name><argument_list>(<argument><expr><name>ni</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name>bit_count</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><call><name><name>segs</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>ni</name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>i</name> <operator>=</operator> <name>ni</name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name><name>segs</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>r</name></expr>,<expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// printf("segs:\n");</comment>
		<comment type="line">// for(auto p:segs)</comment>
		<comment type="line">// {</comment>
		<comment type="line">// 	printf("%I64d %I64d\n",p.first,p.second );</comment>
		<comment type="line">// }</comment>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>p1</name><range>:<expr><name>segs</name></expr></range></decl></init>)</control>
			<block type="pseudo"><for>for<control>(<init><decl><type><name>auto</name></type> <name>p2</name><range>:<expr><name>segs</name></expr></range></decl></init>)</control>
				<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><call><name>trans</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>trans</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>

		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition> <block>{<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
    <while>while<condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
    <return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function></unit>
