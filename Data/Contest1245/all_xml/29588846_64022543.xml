<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29588846_64022543.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>

<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name><name>DP</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name><name>MAP</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>pll</name></type> <name>conv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>y0</name> <init>= <expr><operator>(</operator><name>code</name> <operator>/</operator> <literal type="number">20</literal><operator>)</operator> <operator>*</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>left</name> <init>= <expr><name>y0</name> <operator>%</operator> <literal type="number">20</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>pll</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><call><name>pll</name><argument_list>(<argument><expr><literal type="number">19</literal> <operator>-</operator> <name>left</name></expr></argument>, <argument><expr><name>y0</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>

<function><type><name>ll</name></type> <name>conv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>y</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">10</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><literal type="number">10</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <operator>(</operator><name>x</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</return></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</init> <condition><expr><name>y</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>y</name><operator>--</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>c</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>MAP</name><index>[<expr><call><name>conv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>   <comment type="line">//æ¢¯å­ãªã</comment>
			<else>else <block type="pseudo"><expr_stmt><expr><name><name>MAP</name><index>[<expr><call><name>conv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>conv</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>   <comment type="line">//æ¢¯å­è»</comment>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name><name>DP</name><index>[<expr><literal type="number">99</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>code</name> <init>= <expr><literal type="number">98</literal></expr></init></decl>;</init> <condition><expr><name>code</name> <operator>&gt;=</operator> <literal type="number">93</literal></expr>;</condition><incr><expr><name>code</name><operator>--</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>d</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>ll</name></type> <name>cn</name> <init>= <expr><name>code</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>cn</name> <operator>&lt;=</operator> <literal type="number">99</literal></expr>;</condition> <incr><expr><name>cn</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>d</name> <operator>+=</operator> <name><name>DP</name><index>[<expr><name>cn</name></expr>]</index></name> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>
		}</block></for>
		<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ld</name> <init>= <expr><call>(<name>long</name> <name>double</name>)<argument_list>(<argument><expr><name>code</name> <operator>-</operator> <literal type="number">93</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>DP</name><index>[<expr><name>code</name></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>ld</name><operator>)</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>code</name> <init>= <expr><literal type="number">92</literal></expr></init></decl>;</init> <condition><expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>code</name><operator>--</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>DP</name><index>[<expr><name>code</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>ll</name></type> <name>num</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>num</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>num</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>next</name> <init>= <expr><name>code</name> <operator>+</operator> <name>num</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name><name>MAP</name><index>[<expr><name>next</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>DP</name><index>[<expr><name>code</name></expr>]</index></name> <operator>+=</operator> <name><name>DP</name><index>[<expr><name>next</name></expr>]</index></name> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>lad</name> <init>= <expr><name><name>MAP</name><index>[<expr><name>next</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name><name>DP</name><index>[<expr><name>lad</name></expr>]</index></name> <operator>&gt;</operator> <name><name>DP</name><index>[<expr><name>next</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>DP</name><index>[<expr><name>code</name></expr>]</index></name> <operator>+=</operator> <name><name>DP</name><index>[<expr><name>next</name></expr>]</index></name> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name><name>DP</name><index>[<expr><name>code</name></expr>]</index></name> <operator>+=</operator> <name><name>DP</name><index>[<expr><name>lad</name></expr>]</index></name> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt></block></else></if>
			}</block></else></if>
		}</block></for>
		<expr_stmt><expr><name><name>DP</name><index>[<expr><name>code</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>DP</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
