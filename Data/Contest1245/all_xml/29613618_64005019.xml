<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613618_64005019.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>P</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int i = a;i &lt;= b; ++i)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
   <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
   <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>N-<literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>P</name></expr>;</expr_stmt>

   <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>nn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>uu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
   <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
      <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then><block>{
         <expr_stmt><expr><operator>++</operator><name>nn</name></expr>;</expr_stmt>
         <if>if<condition>(<expr><name>uu</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1LL</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>uu</name></expr>]</index></name><operator>%</operator><name>P</name></expr><operator>,</operator><expr><name>uu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
      }</block></then> <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then><block>{
         <expr_stmt><expr><operator>++</operator><name>uu</name></expr>;</expr_stmt>
         <if>if<condition>(<expr><name>nn</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1LL</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>nn</name></expr>]</index></name><operator>%</operator><name>P</name></expr><operator>,</operator><expr><name>nn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
      }</block></then></if></elseif> <else>else <block>{
         <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
         <if>if<condition>(<expr><name>nn</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1LL</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>nn</name></expr>]</index></name><operator>%</operator><name>P</name></expr><operator>,</operator><expr><name>nn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
         <if>if<condition>(<expr><name>uu</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1LL</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>uu</name></expr>]</index></name><operator>%</operator><name>P</name></expr><operator>,</operator><expr><name>uu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
      }</block></else></if>
   <if>if<condition>(<expr><name>nn</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1LL</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>nn</name></expr>]</index></name><operator>%</operator><name>P</name></expr>;</expr_stmt></block></then></if>
   <if>if<condition>(<expr><name>uu</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1LL</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>uu</name></expr>]</index></name><operator>%</operator><name>P</name></expr>;</expr_stmt></block></then></if>
   <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
