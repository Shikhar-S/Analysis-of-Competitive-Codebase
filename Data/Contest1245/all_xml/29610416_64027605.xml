<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610416_64027605.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<struct>struct <name>T</name><block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>a</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</struct>
<function><specifier>inline</specifier> <type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>c</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>c</name></name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>cost</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><operator>(</operator><call><name>labs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>labs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>y</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>a</name><operator>.</operator><name>k</name></name><operator>+</operator><name><name>b</name><operator>.</operator><name>k</name></name><operator>)</operator></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>conn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>create</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	<block type="pseudo"><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>pii</name></type> <name>x</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<while>while<condition>(<expr><name><name>vis</name><index>[<expr><name><name>x</name><operator>.</operator><name>se</name></name></expr>]</index></name></expr>)</condition><block>{
			<expr_stmt><expr><name>x</name><operator>=</operator><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>	<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>x</name><operator>.</operator><name>fi</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>x</name><operator>.</operator><name>se</name></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>fi</name></name><operator>==</operator><name><name>a</name><index>[<expr><name><name>x</name><operator>.</operator><name>se</name></name></expr>]</index></name><operator>.</operator><name>c</name></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><call><name><name>create</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>r</name></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><call><name>cost</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name><name>x</name><operator>.</operator><name>se</name></name></expr>]</index></name></expr></argument>)</argument_list></call><operator>==</operator><name><name>x</name><operator>.</operator><name>fi</name></name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>r</name><operator>=</operator><name>i</name></expr>;</expr_stmt><break>break;</break>
				}</block></then></if></block></for>
			<expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>x</name><operator>.</operator><name>se</name></name></expr>,<expr><name>r</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><name><name>x</name><operator>.</operator><name>se</name></name><operator>&amp;&amp;</operator><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>	<block type="pseudo"><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><call><name>cost</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name><name>x</name><operator>.</operator><name>se</name></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>create</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>create</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>create</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator><name>create</name></expr></init>)</control>	<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>conn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator><name>conn</name></expr></init>)</control>	<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>fi</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>se</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
