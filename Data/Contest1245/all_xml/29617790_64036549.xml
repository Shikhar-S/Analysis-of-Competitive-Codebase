<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617790_64036549.cpp"><comment type="line" format="doxygen">/// ANTI_LIGHT</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">20</literal></expr>]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>dp</name><index>[<expr><literal type="number">20</literal></expr>]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>

<function><name>main</name><parameter_list>()</parameter_list>
<block>{

    <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>

    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>t</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name>j</name><operator>+</operator><name>k</name><operator>&gt;</operator><name>n</name></expr>)</condition><then>
            <block>{
                <break>break;</break>
            }</block></then></if>
            <expr_stmt><expr><name>t</name><operator>+=</operator><operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">6.0</literal><operator>)</operator><operator>*</operator><operator>(</operator><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><name>k</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>(<expr><name>j</name><operator>&gt;=</operator><literal type="number">5</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>num</name><init>=<expr><literal type="number">6.0</literal><operator>-</operator><operator>(</operator><literal type="number">10.0</literal><operator>-</operator><name>j</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>t</name><operator>+</operator><name>num</name><operator>/</operator><literal type="number">6.0</literal><operator>)</operator><operator>/</operator><operator>(</operator><operator>(</operator><literal type="number">6.0</literal><operator>-</operator><name>num</name><operator>)</operator><operator>/</operator><literal type="number">6.0</literal><operator>)</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>t</name></expr>;</expr_stmt></block></else></if>

    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
            <block>{
               <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
               <block>{
                   <if>if<condition>(<expr><name>j</name><operator>+</operator><name>k</name><operator>&gt;</operator><name>n</name></expr>)</condition><then>
                   <block>{
                       <decl_stmt><decl><type><name>int</name></type> <name>tgx</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                       <decl_stmt><decl><type><name>int</name></type> <name>tgy</name><init>=<expr><name>n</name><operator>-</operator><operator>(</operator><operator>(</operator><name>j</name><operator>+</operator><name>k</name><operator>)</operator><operator>-</operator><name>n</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                       <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">6.0</literal><operator>)</operator><operator>*</operator><operator>(</operator><call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>tgx</name></expr>]</index><index>[<expr><name>tgy</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>tgx</name><operator>+</operator><name><name>a</name><index>[<expr><name>tgx</name></expr>]</index><index>[<expr><name>tgy</name></expr>]</index></name></expr>]</index><index>[<expr><name>tgy</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                   }</block></then>
                   <else>else
                   <block>{
                       <decl_stmt><decl><type><name>int</name></type> <name>tgx</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
                       <decl_stmt><decl><type><name>int</name></type> <name>tgy</name><init>=<expr><name>j</name><operator>+</operator><name>k</name></expr></init></decl>;</decl_stmt>
                       <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">6.0</literal><operator>)</operator><operator>*</operator><operator>(</operator><call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>tgx</name></expr>]</index><index>[<expr><name>tgy</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>tgx</name><operator>+</operator><name><name>a</name><index>[<expr><name>tgx</name></expr>]</index><index>[<expr><name>tgy</name></expr>]</index></name></expr>]</index><index>[<expr><name>tgy</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                   }</block></else></if>
               }</block></for>
            }</block></for>
        }</block></then>
        <else>else
        <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{
                    <if>if<condition>(<expr><name>j</name><operator>-</operator><name>k</name><operator>&lt;</operator><literal type="number">1</literal></expr>)</condition><then>
                    <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>tgx</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>tgy</name><init>=<expr><literal type="number">1</literal><operator>+</operator><name>k</name><operator>-</operator><name>j</name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">6.0</literal><operator>)</operator><operator>*</operator><operator>(</operator><call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>tgx</name></expr>]</index><index>[<expr><name>tgy</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>tgx</name><operator>+</operator><name><name>a</name><index>[<expr><name>tgx</name></expr>]</index><index>[<expr><name>tgy</name></expr>]</index></name></expr>]</index><index>[<expr><name>tgy</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                    }</block></then>
                    <else>else
                    <block>{
                        <decl_stmt><decl><type><name>int</name></type> <name>tgx</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
                        <decl_stmt><decl><type><name>int</name></type> <name>tgy</name><init>=<expr><name>j</name><operator>-</operator><name>k</name></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><operator>(</operator><literal type="number">1.0</literal><operator>/</operator><literal type="number">6.0</literal><operator>)</operator><operator>*</operator><operator>(</operator><call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>tgx</name></expr>]</index><index>[<expr><name>tgy</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><name>tgx</name><operator>+</operator><name><name>a</name><index>[<expr><name>tgx</name></expr>]</index><index>[<expr><name>tgy</name></expr>]</index></name></expr>]</index><index>[<expr><name>tgy</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></for>
            }</block></for>
        }</block></else></if>
    }</block></for>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
