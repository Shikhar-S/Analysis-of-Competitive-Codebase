<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29571748_64033656.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>

<decl_stmt><decl><type><name>mt19937</name></type> <name>gen</name><argument_list>(<argument><expr><operator>(</operator><name>uint</name><operator>)</operator> <call><name><name>chrono</name><operator>::</operator><name>high_resolution_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
				<for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>o</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control> <block>{
						<for>for <control>(<init><decl><type><name>int</name></type> <name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{
							<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>o</name></expr>]</index><index>[<expr><name>e</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
						}</block></for>
					}</block></for>
				}</block></for>
			}</block></for>
		}</block></for>
	}</block></for>

	<decl_stmt><decl><type><name>string</name></type> <name>ls</name> <init>= <expr><call><name><name>bitset</name><argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>to_string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>rs</name> <init>= <expr><call><name><name>bitset</name><argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>to_string</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>ls</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ls</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>rs</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>rs</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><call><name><name>ls</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name><name>ls</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <call><name><name>rs</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block>{
		<expr_stmt><expr><call><name><name>ls</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>rs</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>

	<for>for <control>(<init><decl><type><name>char</name> <modifier>&amp;</modifier></type><name>c</name> <range>: <expr><name>ls</name></expr></range></decl></init>)</control> <block>{
		<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
	}</block></for>

	<for>for <control>(<init><decl><type><name>char</name> <modifier>&amp;</modifier></type><name>c</name> <range>: <expr><name>rs</name></expr></range></decl></init>)</control> <block>{
		<expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
	}</block></for>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>t2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>tt1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tt2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

			<if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then> <elseif>else <if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>ls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if></elseif> <else>else <block>{
				<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			}</block></else></if>

			<if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>rs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>tt1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then> <elseif>else <if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>rs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>tt1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if></elseif> <else>else <block>{
				<expr_stmt><expr><name>tt1</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			}</block></else></if>

			<if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>ls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then> <elseif>else <if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>ls</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if></elseif> <else>else <block>{
				<expr_stmt><expr><name>t2</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			}</block></else></if>

			<if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>rs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>tt2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then> <elseif>else <if>if <condition>(<expr><name>j</name> <operator>==</operator> <name><name>rs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>tt2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if></elseif> <else>else <block>{
				<expr_stmt><expr><name>tt2</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
			}</block></else></if>

			<if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <operator>(</operator><name>i</name> <operator>^</operator> <name>j</name><operator>)</operator></expr>)</condition><then> <block>{
				<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>t1</name></expr>]</index><index>[<expr><name>tt1</name></expr>]</index><index>[<expr><name>t2</name></expr>]</index><index>[<expr><name>tt2</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></for>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>len</name> <operator>&lt;</operator> <call><name><name>ls</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>len</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{
				<for>for <control>(<init><decl><type><name>int</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>carry</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>carry</name><operator>++</operator></expr></incr>)</control> <block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t1</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>t1</name><operator>++</operator></expr></incr>)</control> <block>{
						<for>for <control>(<init><decl><type><name>int</name></type> <name>tt1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>tt1</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>tt1</name><operator>++</operator></expr></incr>)</control> <block>{
							<for>for <control>(<init><decl><type><name>int</name></type> <name>t2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t2</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>t2</name><operator>++</operator></expr></incr>)</control> <block>{
								<for>for <control>(<init><decl><type><name>int</name></type> <name>tt2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>tt2</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>tt2</name><operator>++</operator></expr></incr>)</control> <block>{
									<if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>carry</name></expr>]</index><index>[<expr><name>t1</name></expr>]</index><index>[<expr><name>tt1</name></expr>]</index><index>[<expr><name>t2</name></expr>]</index><index>[<expr><name>tt2</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
										<continue>continue;</continue>
									}</block></then></if>

									<decl_stmt><decl><type><name>int</name></type> <name>T1</name></decl>, <decl><type ref="prev"/><name>TT1</name></decl>, <decl><type ref="prev"/><name>T2</name></decl>, <decl><type ref="prev"/><name>TT2</name></decl>;</decl_stmt>

									<if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name><name>ls</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><then> <block>{
										<expr_stmt><expr><name>T1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
									}</block></then> <elseif>else <if>if <condition>(<expr><name>a</name> <operator>==</operator> <name><name>ls</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><then> <block>{
										<expr_stmt><expr><name>T1</name> <operator>=</operator> <name>t1</name></expr>;</expr_stmt>
									}</block></then></if></elseif> <else>else <block>{
										<expr_stmt><expr><name>T1</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
									}</block></else></if>

									<if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name><name>rs</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><then> <block>{
										<expr_stmt><expr><name>TT1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
									}</block></then> <elseif>else <if>if <condition>(<expr><name>a</name> <operator>==</operator> <name><name>rs</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><then> <block>{
										<expr_stmt><expr><name>TT1</name> <operator>=</operator> <name>tt1</name></expr>;</expr_stmt>
									}</block></then></if></elseif> <else>else <block>{
										<expr_stmt><expr><name>TT1</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
									}</block></else></if>

									<if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <name><name>ls</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><then> <block>{
										<expr_stmt><expr><name>T2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
									}</block></then> <elseif>else <if>if <condition>(<expr><name>b</name> <operator>==</operator> <name><name>ls</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><then> <block>{
										<expr_stmt><expr><name>T2</name> <operator>=</operator> <name>t2</name></expr>;</expr_stmt>
									}</block></then></if></elseif> <else>else <block>{
										<expr_stmt><expr><name>T2</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
									}</block></else></if>

									<if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <name><name>rs</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><then> <block>{
										<expr_stmt><expr><name>TT2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
									}</block></then> <elseif>else <if>if <condition>(<expr><name>b</name> <operator>==</operator> <name><name>rs</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><then> <block>{
										<expr_stmt><expr><name>TT2</name> <operator>=</operator> <name>tt2</name></expr>;</expr_stmt>
									}</block></then></if></elseif> <else>else <block>{
										<expr_stmt><expr><name>TT2</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
									}</block></else></if>

									<decl_stmt><decl><type><name>int</name></type> <name>newCarry</name> <init>= <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name> <operator>+</operator> <name>carry</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
									<decl_stmt><decl><type><name>int</name></type> <name>newSum</name> <init>= <expr><operator>(</operator><name>a</name> <operator>+</operator> <name>b</name> <operator>+</operator> <name>carry</name><operator>)</operator> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

									<if>if <condition>(<expr><name>newSum</name> <operator>==</operator> <operator>(</operator><name>a</name> <operator>^</operator> <name>b</name><operator>)</operator></expr>)</condition><then> <block>{
										<expr_stmt><expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>newCarry</name></expr>]</index><index>[<expr><name>T1</name></expr>]</index><index>[<expr><name>TT1</name></expr>]</index><index>[<expr><name>T2</name></expr>]</index><index>[<expr><name>TT2</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>carry</name></expr>]</index><index>[<expr><name>t1</name></expr>]</index><index>[<expr><name>tt1</name></expr>]</index><index>[<expr><name>t2</name></expr>]</index><index>[<expr><name>tt2</name></expr>]</index></name></expr>;</expr_stmt>
									}</block></then></if>
								}</block></for>
							}</block></for>
						}</block></for>
					}</block></for>
				}</block></for>
			}</block></for>
		}</block></for>
	}</block></for>

	<decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>t1</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>t1</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>tt1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>tt1</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>tt1</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>t2</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>t2</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>t2</name><operator>++</operator></expr></incr>)</control> <block>{
				<for>for <control>(<init><decl><type><name>int</name></type> <name>tt2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>tt2</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>tt2</name><operator>++</operator></expr></incr>)</control> <block>{
					<expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>dp</name><index>[<expr><call><name><name>ls</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>t1</name></expr>]</index><index>[<expr><name>tt1</name></expr>]</index><index>[<expr><name>t2</name></expr>]</index><index>[<expr><name>tt2</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></for>
			}</block></for>
		}</block></for>
	}</block></for>

	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

<comment type="line">//	int res = 0;</comment>
<comment type="line">//</comment>
<comment type="line">//	for (int i = l; i &lt;= r; i++) {</comment>
<comment type="line">//		for (int j = l; j &lt;= r; j++) {</comment>
<comment type="line">//			if (i + j == (i ^ j)) {</comment>
<comment type="line">//				res++;</comment>
<comment type="line">//			}</comment>
<comment type="line">//		}</comment>
<comment type="line">//	}</comment>
<comment type="line">//</comment>
<comment type="line">//	cout &lt;&lt; res &lt;&lt; "\n\n";</comment>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>test</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>test</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>test</name><operator>--</operator></expr>)</condition> <block>{
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
