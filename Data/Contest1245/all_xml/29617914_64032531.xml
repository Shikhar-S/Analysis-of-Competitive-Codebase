<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617914_64032531.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>lb</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>rb</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>ready</name><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>memo</name><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>feasible</name> <parameter_list>(<parameter><decl><type><name>bool</name></type> <name>hi</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lo</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>lo</name><operator>&amp;&amp;</operator><name><name>lb</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>bit</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>hi</name><operator>&amp;&amp;</operator><name><name>rb</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>bit</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>newhi</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>oldhi</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>oldhi</name><operator>==</operator><literal type="boolean">false</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>rb</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	<return>return <expr><name><name>rb</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><name>bit</name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>newlo</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>oldlo</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>oldlo</name><operator>==</operator><literal type="boolean">false</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>lb</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
	<return>return <expr><name><name>lb</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><name>bit</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>C</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>n</name><operator>&lt;</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>ans</name><operator>*=</operator><operator>(</operator><name>n</name><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>/=</operator><name>i</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>dp</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ha</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>la</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>hb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lob</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>n</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>ha</name><operator>&amp;&amp;</operator><name>la</name><operator>&amp;&amp;</operator><name>hb</name><operator>&amp;&amp;</operator><name>lb</name><operator>&amp;&amp;</operator><name><name>rb</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>lb</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>ready</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>ha</name></expr>]</index><index>[<expr><name>la</name></expr>]</index><index>[<expr><name>hb</name></expr>]</index><index>[<expr><name>lob</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>memo</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>ha</name></expr>]</index><index>[<expr><name>la</name></expr>]</index><index>[<expr><name>hb</name></expr>]</index><index>[<expr><name>lob</name></expr>]</index></name></expr>;</return></block></then></if>
	<if>if <condition>(<expr><operator>!</operator><name>ha</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>la</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>hb</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lb</name></expr>)</condition><then> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>np</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><name>np</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>tmp1</name> <init>= <expr><call><name>C</name><argument_list>(<argument><expr><name>np</name></expr></argument>,<argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><name>tmp1</name><operator>*</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><operator>(</operator><name>np</name><operator>-</operator><name>k</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name>ready</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>ha</name></expr>]</index><index>[<expr><name>la</name></expr>]</index><index>[<expr><name>hb</name></expr>]</index><index>[<expr><name>lob</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><name><name>memo</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>ha</name></expr>]</index><index>[<expr><name>la</name></expr>]</index><index>[<expr><name>hb</name></expr>]</index><index>[<expr><name>lob</name></expr>]</index></name><operator>=</operator><name>ans</name></expr>;</return>
	}</block></then></if>
	<comment type="line">//a[n]=0, b[n]=1</comment>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>feasible</name><argument_list>(<argument><expr><name>ha</name></expr></argument>,<argument><expr><name>la</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>feasible</name><argument_list>(<argument><expr><name>hb</name></expr></argument>,<argument><expr><name>lob</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>newhi</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>ha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>newlo</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>la</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>newhi</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>hb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>newlo</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>lob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<comment type="line">//a=1, b=0</comment>
	<if>if <condition>(<expr><call><name>feasible</name><argument_list>(<argument><expr><name>ha</name></expr></argument>,<argument><expr><name>la</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>feasible</name><argument_list>(<argument><expr><name>hb</name></expr></argument>,<argument><expr><name>lob</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>newhi</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>ha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>newlo</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>la</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>newhi</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>hb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>newlo</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>lob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<comment type="line">//a=0, b=0</comment>
	<if>if <condition>(<expr><call><name>feasible</name><argument_list>(<argument><expr><name>ha</name></expr></argument>,<argument><expr><name>la</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>feasible</name><argument_list>(<argument><expr><name>hb</name></expr></argument>,<argument><expr><name>lob</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>newhi</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>ha</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>newlo</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>la</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>newhi</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>hb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>newlo</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>lob</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name><name>ready</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>ha</name></expr>]</index><index>[<expr><name>la</name></expr>]</index><index>[<expr><name>hb</name></expr>]</index><index>[<expr><name>lob</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><name><name>memo</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>ha</name></expr>]</index><index>[<expr><name>la</name></expr>]</index><index>[<expr><name>hb</name></expr>]</index><index>[<expr><name>lob</name></expr>]</index></name><operator>=</operator><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">31</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>&amp;</operator><name>l</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rb</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>&amp;</operator><name>r</name><operator>)</operator></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		}</block></for>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">31</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>ha</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ha</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>ha</name></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>la</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>la</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>la</name></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>hb</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>hb</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>hb</name></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>lob</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lob</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>lob</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ready</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>ha</name></expr>]</index><index>[<expr><name>la</name></expr>]</index><index>[<expr><name>hb</name></expr>]</index><index>[<expr><name>lob</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for></block></for></block></for></block></for></block></for>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>dp</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
