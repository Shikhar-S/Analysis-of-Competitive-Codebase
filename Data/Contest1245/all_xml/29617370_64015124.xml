<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617370_64015124.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>fibonacci</name><index>[<expr><literal type="number">100100</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">//modulo 1b7</comment>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fibonacci</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fibonacci</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>fibonacci</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>fibonacci</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>fibonacci</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><operator>++</operator><name>u</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>*=</operator><name><name>fibonacci</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>*=</operator><name><name>fibonacci</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<else>else <block>{
			<expr_stmt><expr><name>ans</name><operator>*=</operator><name><name>fibonacci</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>*=</operator><name><name>fibonacci</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>u</name><operator>=</operator><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name>ans</name><operator>*=</operator><name><name>fibonacci</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>*=</operator><name><name>fibonacci</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>u</name><operator>=</operator><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
