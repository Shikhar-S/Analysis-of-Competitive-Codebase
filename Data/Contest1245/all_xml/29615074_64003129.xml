<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615074_64003129.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false);</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>M</name> <init>= <expr><literal type="number">3e5</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1e8</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>R</name></decl>, <decl><type ref="prev"/><name>P</name></decl>, <decl><type ref="prev"/><name>S</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>t</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>IOS</name>
    <name>int</name></type> <name>kase</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>kase</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>kase</name> <operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><name>R</name> <operator>=</operator> <name>P</name> <operator>=</operator> <name>S</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>str</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><operator>++</operator> <name>R</name></expr>;</expr_stmt>
            }</block></then><elseif>else <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><operator>++</operator> <name>P</name></expr>;</expr_stmt>
            }</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><operator>++</operator> <name>S</name></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>win</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>R</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>win</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>p</name></expr>)</condition><then><block>{ <expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> }</block></then>
                <elseif>else <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>r</name></expr>)</condition><then><block>{ <expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>}</block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>s</name></expr>)</condition><then><block>{ <expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>}</block></then></if></elseif></if>
            }</block></for>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name>p</name></expr>)</condition><then><block>{ <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator> <name>p</name></expr>;</expr_stmt>}</block></then>
                <elseif>else <if>if<condition>(<expr><name>r</name></expr>)</condition><then><block>{ <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator> <name>r</name></expr>;</expr_stmt>}</block></then></if></elseif>
                <else>else <block>{ <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> <expr_stmt><expr><operator>--</operator> <name>s</name></expr>;</expr_stmt>}</block></else></if>
            }</block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>t</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
