<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29583065_64005188.cpp"><comment type="block">/* ****revpro**** */</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name> <name>(</name><cpp:literal>"avx2"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name> <name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name> <name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>          <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>          <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro>	   <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro>         <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro>          <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>           <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>           <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(ll)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hell</name></cpp:macro>        <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(ll i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=b-1;i&gt;=a;i--)</cpp:value></cpp:define>    
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lbnd</name></cpp:macro>        <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ubnd</name></cpp:macro>        <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bs</name></cpp:macro>          <cpp:value>binary_search</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>          <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>present</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((c).find(x) != (c).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cpresent</name><parameter_list>(<parameter><type><name>c</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(find(all(c),x) != (c).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mii</name></cpp:macro>	    <cpp:value>map&lt;ll,ll&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro>  <cpp:value>100005</cpp:value></cpp:define>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>TESTS</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>TESTS</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>TESTS</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
			<decl_stmt><decl><type><name>char</name></type> <name>x</name><init>=<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then>
			<elseif>else <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
			<else>else <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		}</block>
		<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name><name>ex</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>ans</name><operator>+=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>b</name><index>[<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>ex</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>m1</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>m1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>ans</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
			<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
				<if>if<condition>(<expr><name><name>c</name><index>[<expr><operator>(</operator><name><name>m</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>m1</name><index>[<expr><operator>(</operator><name><name>m</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>c</name><index>[<expr><operator>(</operator><name><name>m</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
				}</block></then>
				<else>else <block>{
					<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <block>{<if>if<condition>(<expr><name><name>ex</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>ex</name><index>[<expr><name>j</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>m1</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt><break>break;</break>}</block></then></if>}</block>
			}</block></else></if>
		}</block>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
		}</block></else></if> 
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
