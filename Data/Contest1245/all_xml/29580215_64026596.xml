<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29580215_64026596.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inta</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>inta</name></type> <name><name>x</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cost</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>;</decl_stmt>


<decl_stmt><decl><type><name>int</name></type> <name><name>tab</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>level</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>on</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>findBase</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name><name>tab</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><name>a</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
	<return>return <expr><call><name>findBase</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x2</name><init>=<expr><call><name>findBase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>y2</name><init>=<expr><call><name>findBase</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>x2</name><operator>==</operator><name>y2</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
	<if>if<condition>(<expr><name><name>level</name><index>[<expr><name>x2</name></expr>]</index></name><operator>&gt;</operator><name><name>level</name><index>[<expr><name>y2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>tab</name><index>[<expr><name>y2</name></expr>]</index></name><operator>=</operator><name>x2</name></expr>;</expr_stmt></block></then>
	<else>else
	<block>{
		<expr_stmt><expr><name><name>tab</name><index>[<expr><name>x2</name></expr>]</index></name><operator>=</operator><name>y2</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>level</name><index>[<expr><name>x2</name></expr>]</index></name><operator>==</operator><name><name>level</name><index>[<expr><name>y2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>level</name><index>[<expr><name>y2</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></else></if>
	<expr_stmt><expr><name><name>on</name><index>[<expr><name>x2</name></expr>]</index></name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>on</name><index>[<expr><name>x2</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>on</name><index>[<expr><name>y2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>on</name><index>[<expr><name>y2</name></expr>]</index></name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>on</name><index>[<expr><name>x2</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>on</name><index>[<expr><name>y2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>inta</name></expr></argument>,<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>inta</name></expr></argument>,<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>inta</name></expr></argument>,<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>pq</name></decl>;</decl_stmt>	
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>level</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>v</name></decl>;</decl_stmt><comment type="line">// on lights</comment>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type><name>v2</name></decl>;</decl_stmt> <comment type="line">// vasl shodan</comment>
	<decl_stmt><decl><type><name>inta</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>inta</name></expr></argument>,<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>r</name><init>=<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>r</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><name><name>on</name><index>[<expr><call><name>findBase</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then>
			<else>else <block>{<expr_stmt><expr><name><name>on</name><index>[<expr><call><name>findBase</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>r</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></else></if>
		}</block></then>
		<else>else
		<block>{
			
			<if>if<condition>(<expr><call><name>findBase</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call><operator>!=</operator><call><name>findBase</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><operator>(</operator><name><name>on</name><index>[<expr><call><name>findBase</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>||</operator><name><name>on</name><index>[<expr><call><name>findBase</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name>connect</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>r</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>r</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>r</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>r</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>
		
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>v</name></expr></range></decl></init>)</control>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>v2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>v2</name></expr></range></decl></init>)</control>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></for>
	
	
}</block></function></unit>
