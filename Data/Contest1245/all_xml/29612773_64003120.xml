<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29612773_64003120.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INF</name></cpp:macro> <cpp:value>0x7f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INF_VAL</name></cpp:macro> <cpp:value>0x7f7f7f7f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>3.141592653589</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-10</cpp:value></cpp:define>
<comment type="line">//#define p 2173412051LL</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>num</name><index>[ <expr><literal type="number">26</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[ <expr><literal type="number">110</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ans</name><index>[ <expr><literal type="number">110</literal></expr> ]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>tot</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>( <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>( <expr><name>t</name><operator>--</operator></expr> )</condition> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>( <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>( <argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>( <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>num</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>num</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>ans</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>( <argument><expr><name>ans</name></expr></argument> )</argument_list></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
			<block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>num</name><index>[ <expr><name><name>s</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>-</operator> <literal type="char">'A'</literal></expr> ]</index></name></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name>tot</name> <operator>+=</operator> <call><name>min</name><argument_list>( <argument><expr><name>x</name></expr></argument>, <argument><expr><name><name>num</name><index>[ <expr><literal type="char">'S'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tot</name> <operator>+=</operator> <call><name>min</name><argument_list>( <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>num</name><index>[ <expr><literal type="char">'R'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tot</name> <operator>+=</operator> <call><name>min</name><argument_list>( <argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>num</name><index>[ <expr><literal type="char">'P'</literal> <operator>-</operator> <literal type="char">'A'</literal></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>( <expr><name>tot</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>n</name></expr> )</condition><then> <block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"YES\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
				<if>if<condition>( <expr><name><name>s</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr> )</condition><then> <block>{
					<if>if<condition>( <expr><name>y</name></expr> )</condition><then> <block>{
						<expr_stmt><expr><name><name>ans</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><operator>--</operator><name>y</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then> <elseif>else <if>if<condition>( <expr><name><name>s</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr> )</condition><then> <block>{
					<if>if<condition>( <expr><name>z</name></expr> )</condition><then> <block>{
						<expr_stmt><expr><name><name>ans</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><operator>--</operator><name>z</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></then></if></elseif> <else>else <block>{
					<if>if<condition>( <expr><name>x</name></expr> )</condition><then> <block>{
						<expr_stmt><expr><name><name>ans</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><operator>--</operator><name>x</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></else></if>
			}</block></for>
			<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
				<block type="pseudo"><if>if<condition>( <expr><name><name>ans</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
					<if>if<condition>( <expr><name>x</name></expr> )</condition><then> <block>{
						<expr_stmt><expr><name><name>ans</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><operator>--</operator><name>x</name></expr>;</expr_stmt>
					}</block></then> <elseif>else <if>if<condition>( <expr><name>y</name></expr> )</condition><then> <block>{
						<expr_stmt><expr><name><name>ans</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><operator>--</operator><name>y</name></expr>;</expr_stmt>
					}</block></then></if></elseif> <elseif>else <if>if<condition>( <expr><name>z</name></expr> )</condition><then> <block>{
						<expr_stmt><expr><name><name>ans</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
						<expr_stmt><expr><operator>--</operator><name>z</name></expr>;</expr_stmt>
					}</block></then></if></elseif></if>
				}</block></then></if></block></for>
			<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"NO\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
