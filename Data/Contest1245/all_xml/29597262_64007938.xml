<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29597262_64007938.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>ll</name></type> <name><name>X</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>Y</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>C</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>K</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>;</decl_stmt>


<function><type><name>ll</name></type> <name>GetDist</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>x2</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y2</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name>x1</name><operator>-</operator><name>x2</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name>y1</name><operator>-</operator><name>y2</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>parent</name><index>[<expr><literal type="number">2222</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rankk</name><index>[<expr><literal type="number">2222</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>Find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name> <operator>!=</operator> <name>x</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>Find</name><argument_list>(<argument><expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>Union</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>xRoot</name><init>=<expr><call><name>Find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>yRoot</name><init>=<expr><call><name>Find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>xRoot</name><operator>==</operator><name>yRoot</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    
    <if>if <condition>(<expr><name><name>rankk</name><index>[<expr><name>xRoot</name></expr>]</index></name><operator>&lt;</operator><name><name>rankk</name><index>[<expr><name>yRoot</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>xRoot</name></expr>]</index></name><operator>=</operator><name>yRoot</name></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name><name>rankk</name><index>[<expr><name>xRoot</name></expr>]</index></name><operator>&gt;</operator><name><name>rankk</name><index>[<expr><name>yRoot</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>yRoot</name></expr>]</index></name><operator>=</operator><name>xRoot</name></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>yRoot</name></expr>]</index></name><operator>=</operator><name>xRoot</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rankk</name><index>[<expr><name>xRoot</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>cities</name></decl>;</decl_stmt>
    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>cities</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><operator>(</operator><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>K</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><call><name>GetDist</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>X</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>Y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>cities</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for></block></for>
    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rankk</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    }</block></for>
    
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>cities</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>cities</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ps</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>cities</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>cities</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>cities</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>Union</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>cities</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ps</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>u</name></expr>,<expr><name>v</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if>
    }</block></for>
    
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>ps</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>p</name> <range>: <expr><name>ps</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>uv</name> <range>: <expr><name>edges</name></expr></range></decl></init>)</control> <block>{
        
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>uv</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>uv</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    
}</block></function>
</unit>
