<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29564650_64027810.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<namespace>namespace <name>RNG</name><block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl>;</decl_stmt>
    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>seed</name><operator>=</operator><name>p</name></expr>;</expr_stmt>}</block></function>
    <function><type><name>unsigned</name> <name>int</name></type> <name>rnd</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>res</name><init>=<expr><operator>(</operator><name>seed</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>seed</name><operator>^</operator><literal type="number">0x23414326</literal><operator>)</operator><operator>-</operator><operator>(</operator><name>seed</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>-</operator><operator>(</operator><name>seed</name><operator>^</operator><literal type="number">0x54378320</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>seed</name><operator>=</operator><operator>(</operator><operator>(</operator><name>seed</name><operator>+</operator><name>res</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>^</operator><name>res</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    }</block></function>
}</block></namespace>
<struct>struct <name>ee</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>f</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>e</name><index>[<expr><literal type="number">15005</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><literal type="number">205</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><block>{<expr><name>a</name></expr>,<expr><name>b</name></expr>,<expr><name>c</name></expr>,<expr><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt><expr_stmt><expr><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>cnt</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">205</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>dp</name><index>[<expr><literal type="number">205</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>double</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>now</name><operator>==</operator><literal type="number">100</literal><operator>||</operator><name>now</name><operator>==</operator><literal type="number">200</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>now</name></expr>]</index></name><operator>&gt;</operator><literal type="number">1e-6</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>now</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>double</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>res</name></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>head</name><index>[<expr><name>now</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>l</name></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name><operator>==</operator><name>now</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>b</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>+=</operator><operator>(</operator><call><name>dfs</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>t</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">6.0</literal></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<if>if<condition>(<expr><name>b</name><operator>&lt;=</operator><literal type="number">1e-6</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>sum</name></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>b</name><operator>+</operator><literal type="number">6</literal><operator>*</operator><name>sum</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">6</literal><operator>-</operator><name>b</name><operator>)</operator></expr>;</expr_stmt></block></else></if>
	<if>if<condition>(<expr><name><name>val</name><index>[<expr><name>now</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>val</name><index>[<expr><name>now</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name><name>dp</name><index>[<expr><name>now</name></expr>]</index></name><operator>=</operator><name>res</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>x</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><literal type="number">10</literal><operator>-</operator><name>y</name></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">9</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">9</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><operator>--</operator><name>j</name></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>val</name><index>[<expr><call><name>id</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><call><name>id</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><name>x</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">100</literal></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name><name>val</name><index>[<expr><call><name>id</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
		}</block></for></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><call><name>id</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name>c</name><operator>+</operator><name>k</name><operator>&lt;=</operator><literal type="number">100</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>c</name><operator>+</operator><name>k</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>add</name><argument_list>(<argument><expr><name>c</name><operator>+</operator><literal type="number">100</literal></expr></argument>,<argument><expr><name>c</name><operator>+</operator><name>k</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>add</name><argument_list>(<argument><expr><name>c</name><operator>+</operator><literal type="number">100</literal></expr></argument>,<argument><expr><name>c</name><operator>+</operator><literal type="number">100</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			}</block></for>
		}</block></for></block></for>
	<comment type="block">/*for(int i=9;i+1;--i,cout&lt;&lt;endl)
		for(int j=9;j+1;--j)cout&lt;&lt;id(i,j)&lt;&lt;" ";
	for(int i=9;i+1;--i,cout&lt;&lt;endl)
		for(int j=9;j+1;--j)cout&lt;&lt;val[id(i,j)]&lt;&lt;" ";*/</comment>
	<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>fixed</name><operator>&lt;&lt;</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
