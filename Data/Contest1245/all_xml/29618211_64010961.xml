<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618211_64010961.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>100009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(x,y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>push_back(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wr</name></cpp:macro> <cpp:value>cout&lt;&lt;"----------------"&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>pop_back()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tr</name><parameter_list>(<parameter><type><name>ii</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(__typeof((c).begin()) ii=(c).begin();ii!=(c).end();ii++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>my_little_dodge</name></cpp:macro> <cpp:value>46</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>cerr&lt;&lt; #x &lt;&lt;" = "&lt;&lt; x&lt;&lt;endl;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>umin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then><block>{<expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt><return>return <expr><literal type="number">1</literal></expr>;</return>}</block></then></if><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>umax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block>{<expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt><return>return <expr><literal type="number">1</literal></expr>;</return>}</block></then></if><return>return <expr><literal type="number">0</literal></expr>;</return>}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">33</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>rec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>pos</name><operator>==</operator><literal type="number">30</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><operator>(</operator><operator>!</operator><name>last</name> <operator>and</operator> <name>x</name><operator>&lt;=</operator><literal type="number">1</literal> <operator>and</operator> <name>y</name><operator>&lt;=</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>ret</name><init>=<expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>last</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><operator>~</operator><name>ret</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if><expr_stmt><expr><name>ret</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>xx</name></decl>,<decl><type ref="prev"/><name>yy</name></decl>;</decl_stmt>		
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>i</name><operator>^</operator><name>j</name><operator>!=</operator><name>i</name><operator>^</operator><name>j</name><operator>^</operator><name>last</name></expr>)</condition><then>
				<block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>yy</name><operator>=</operator><name>y</name></expr>;</expr_stmt>	
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name><operator>&gt;</operator><name>i</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>pos</name></expr>]</index></name><operator>&lt;</operator><name>i</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>	
			<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>pos</name></expr>]</index></name><operator>&gt;</operator><name>j</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>yy</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>pos</name></expr>]</index></name><operator>&lt;</operator><name>j</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>yy</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>	
			<expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><operator>(</operator><name>i</name><operator>+</operator><name>j</name><operator>+</operator><name>last</name><operator>)</operator><operator>&gt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>xx</name></expr></argument>,<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
		}</block></for></block></for>
	<return>return <expr><name>ret</name></expr>;</return>	
}</block></function>
<function><type><name>ll</name></type> <name>rec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
<comment type="line">//	cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;</comment>
	<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal> <operator>or</operator> <name>y</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">30</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>x</name><operator>&gt;&gt;</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	cout&lt;&lt;rec(0,0,0,0)&lt;&lt;endl;</comment>
	<return>return <expr><call><name>rec</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <comment type="line">//freopen("file.in", "r", stdin);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
    	<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><call><name>rec</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>rec</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>rec</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>rec</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
    }</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
