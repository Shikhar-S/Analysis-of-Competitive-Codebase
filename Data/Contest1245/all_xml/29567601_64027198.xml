<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29567601_64027198.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>abit</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>bbit</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>lim1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>lim2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>z1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>z2</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>len</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index><index>[<expr><name>z1</name></expr>]</index><index>[<expr><name>z2</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index><index>[<expr><name>z1</name></expr>]</index><index>[<expr><name>z2</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>up1</name><init>=<expr><ternary><condition><expr><name>lim1</name></expr>?</condition><then><expr><name><name>abit</name><index>[<expr><name>len</name></expr>]</index></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>up2</name><init>=<expr><ternary><condition><expr><name>lim2</name></expr>?</condition><then><expr><name><name>bbit</name><index>[<expr><name>len</name></expr>]</index></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>up1</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>up2</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><operator>(</operator><name>i</name><operator>+</operator><name>j</name><operator>)</operator><operator>==</operator><operator>(</operator><name>i</name><operator>^</operator><name>j</name><operator>)</operator></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lim1</name><operator>&amp;&amp;</operator><name>i</name><operator>==</operator><name>up1</name></expr></argument>,<argument><expr><name>lim2</name><operator>&amp;&amp;</operator><name>j</name><operator>==</operator><name>up2</name></expr></argument>,<argument><expr><name>z1</name><operator>||</operator><name>i</name><operator>!=</operator><literal type="number">0</literal></expr></argument>,<argument><expr><name>z2</name><operator>||</operator><name>j</name><operator>!=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index><index>[<expr><name>z1</name></expr>]</index><index>[<expr><name>z2</name></expr>]</index></name><operator>=</operator><name>ans</name></expr>;</expr_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>slove</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">30</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>abit</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>a</name><operator>&gt;&gt;</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>bbit</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>b</name><operator>&gt;&gt;</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>l</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>a</name><operator>=</operator><call><name>slove</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>a</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
<comment type="line">//        cout&lt;&lt;(a=slove(r,r))&lt;&lt;' ';</comment>
<comment type="line">//        cout&lt;&lt;(b=slove(l-1,l-1))&lt;&lt;' ';</comment>
<comment type="line">//        cout&lt;&lt;(c=slove(l-1,r))&lt;&lt;' ';</comment>
<comment type="line">//        cout&lt;&lt;endl;</comment>
        <expr_stmt><expr><name>a</name><operator>=</operator><call><name>slove</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><call><name>slove</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name><operator>=</operator><call><name>slove</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>a</name><operator>+</operator><name>b</name><operator>-</operator><name>c</name><operator>-</operator><name>c</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
}</block></function></unit>
