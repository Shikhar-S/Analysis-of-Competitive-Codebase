<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29601568_63999750.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>good</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pR</name></decl>, <decl><type ref="prev"/><name>pS</name></decl>, <decl><type ref="prev"/><name>pP</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>ans</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>pR</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>pP</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>pS</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<while>while<condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>pS</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
		<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><call><name><name>pS</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>pS</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>good</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<while>while<condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>pR</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
		<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><call><name><name>pR</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>pR</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>good</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<while>while<condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name><name>pP</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
		<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ans</name><index>[<expr><call><name><name>pP</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>pP</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>good</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<if>if<condition>(<expr><literal type="number">2</literal><operator>*</operator><name>good</name> <operator>&lt;</operator> <name>n</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
		<return>return;</return>
	}</block></then></if>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>ch</name> <operator>:</operator> <name>ans</name></expr></init>)</control> <block>{
		<if>if<condition>(<expr><name>ch</name> <operator>!=</operator> <literal type="char">'*'</literal></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<if>if<condition>(<expr><name>a</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<if>if<condition>(<expr><name>b</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function></unit>
