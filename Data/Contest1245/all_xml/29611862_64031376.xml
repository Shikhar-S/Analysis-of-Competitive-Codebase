<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29611862_64031376.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTERACTIVE</name></cpp:macro></cpp:define>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"avx,avx2,fma"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include> <comment type="line">// gp_hash_table&lt;int, int&gt; == hash map</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>pdd</name>;</typedef>
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>min_heap</name> <init>= <type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>max_heap</name> <init>= <type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>ordered_set</name> <init>= <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type></init>;</using> 
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>K</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template> using <name>hashmap</name> <init>= <type><name><name>gp_hash_table</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt> <return>return <expr><name>out</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt> <for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>x</name> <operator>:</operator> <name>v</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</expr_stmt><return>return <expr><name>out</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt> <for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>x</name> <operator>:</operator> <name>v</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</expr_stmt><return>return <expr><name>out</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt> <for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>x</name> <operator>:</operator> <name>v</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt> <return>return <expr><name>out</name></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>K</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt> <for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>e</name> <operator>:</operator> <name>m</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" -&gt; "</literal> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt> <return>return <expr><name>out</name></expr>;</return> }</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>K</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>, <parameter><decl><type><name><name>hashmap</name><argument_list type="generic">&lt;<argument><expr><name>K</name></expr></argument>, <argument><expr><name>V</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr>;</expr_stmt> <for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>e</name> <operator>:</operator> <name>m</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" -&gt; "</literal> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></for> <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr>;</expr_stmt> <return>return <expr><name>out</name></expr>;</return> }</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{<decl_stmt><decl><type><name>T</name></type> <name>x</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt><return>return <expr><name>x</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>v</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt><for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>x</name> <operator>:</operator> <name>v</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt></block></for><return>return <expr><name>v</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><name>in</name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</return>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_IO</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(nullptr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TESTS</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int NUMBER_OF_TESTS; cin &gt;&gt; NUMBER_OF_TESTS; for(int t = 1; t &lt;= NUMBER_OF_TESTS; t++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>begin</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (begin); i &lt; (end); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sgn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>((a) &gt; eps ? 1 : ((a) &lt; -eps ? -1 : 0))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>precise</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fixed &lt;&lt; setprecision(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rnd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(uniform_int_distribution&lt;int&gt;((a), (b))(rng))</cpp:value></cpp:define>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LOCAL</name></cpp:ifndef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cerr</name></cpp:macro> <cpp:value>if(0)cout</cpp:value></cpp:define>
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>INTERACTIVE</name></cpp:ifndef>
        <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(0){}</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator&lt;string&gt; _it(_ss); dbg(_it, true, args); }</cpp:value></cpp:define>
    <function><type><name>void</name></type> <name>dbg</name><parameter_list>(<parameter><decl><type><name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>it</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isStart</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"&lt;/debug&gt;"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>}</block></function>
    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
    <type><name>void</name></type> <name>dbg</name><parameter_list>(<parameter><decl><type><name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>it</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isStart</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>isStart</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"&lt;debug&gt;"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"  "</literal> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dbg</name><argument_list>(<argument><expr><operator>++</operator><name>it</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rng</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>time_point</name></name></type> <name>__clock__</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>startTime</name><parameter_list>()</parameter_list> <block>{<expr_stmt><expr><name>__clock__</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><type><name>ld</name></type> <name>getTime</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>end</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>auto</name></type> <name>t</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name>chrono</name><operator>::</operator><name>microseconds</name></name></expr></argument>&gt;</argument_list></name></name> <argument_list>(<argument><expr><name>end</name><operator>-</operator><name>__clock__</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>ld</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1e6</literal></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>timeit</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"&gt; "</literal> <operator>&lt;&lt;</operator> <name>msg</name> <operator>&lt;&lt;</operator> <literal type="string">": "</literal> <operator>&lt;&lt;</operator> <call><name>precise</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <call><name>getTime</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>maxi</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>b</name> <operator>&gt;</operator> <name>a</name></expr> ?</condition><then> <expr><operator>(</operator><name>a</name> <operator>=</operator> <name>b</name><operator>,</operator> <literal type="boolean">true</literal><operator>)</operator></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>mini</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>b</name> <operator>&lt;</operator> <name>a</name></expr> ?</condition><then> <expr><operator>(</operator><name>a</name> <operator>=</operator> <name>b</name><operator>,</operator> <literal type="boolean">true</literal><operator>)</operator></expr> </then><else>: <expr><literal type="boolean">false</literal></expr></else></ternary></expr>;</return> }</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>PI</name> <init>= <expr><call><name>asin</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>oo</name> <init>= <expr><literal type="number">2e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>OO</name> <init>= <expr><literal type="number">2e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">200000</literal></expr></init></decl>;</decl_stmt>

<function><type><name>pii</name></type> <name>nxt</name><parameter_list>(<parameter><decl><type><name>pii</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><ternary><condition><expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>p</name><operator>.</operator><name>second</name></name><operator>+</operator><name><name>dir</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>p</name><operator>.</operator><name>second</name></name><operator>+</operator><name>dir</name></expr></argument> &gt;</argument_list></name> <literal type="number">9</literal></expr>)</condition><then> <block>{
        <return>return <expr><block>{<expr><name><name>p</name><operator>.</operator><name>first</name></name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name><name>p</name><operator>.</operator><name>second</name></name></expr>}</block></expr>;</return>
    }</block></then></if>
    <return>return <expr><block>{<expr><name><name>p</name><operator>.</operator><name>first</name></name></expr>, <expr><name><name>p</name><operator>.</operator><name>second</name></name><operator>+</operator><name>dir</name></expr>}</block></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>FAST_IO</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>startTime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>brd</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>brd</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>dp</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>ld</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">6</literal>+<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name><operator>-</operator><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>s</name><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt>
    }</block>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>startJ</name> <init>= <expr><ternary><condition><expr><name>i</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">9</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><ternary><condition><expr><name>i</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>startJ</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>dir</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>pii</name></type> <name>curr</name> <init>= <expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ld</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <macro><name>FOR</name><argument_list>(<argument>_</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro> <block>{
                <expr_stmt><expr><name>curr</name> <operator>=</operator> <call><name>nxt</name><argument_list>(<argument><expr><name>curr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>(<expr><name><name>brd</name><index>[<expr><name><name>curr</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>curr</name><operator>.</operator><name>second</name></name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name><name>curr</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>curr</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name><name>curr</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>curr</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name><name>curr</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>brd</name><index>[<expr><name><name>curr</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>curr</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr>]</index><index>[<expr><name><name>curr</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>s</name><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt>
        }</block></for>
    }</block>
    
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>precise</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>timeit</name><argument_list>(<argument><expr><literal type="string">"Finished"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
