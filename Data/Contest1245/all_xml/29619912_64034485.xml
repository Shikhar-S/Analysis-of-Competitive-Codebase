<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619912_64034485.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name> <name>(</name><cpp:literal>"avx2"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name> <name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name> <name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">//also can have auxiliary info</comment>
<decl_stmt><decl><type><name>int</name></type> <name><name>r1</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">//number as digit array</comment>
<decl_stmt><decl><type><name>int</name></type> <name><name>r2</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">//number as digit array</comment>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <comment type="line">//length</comment>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>le1</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ge1</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>le2</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ge2</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>le1</name></expr>]</index><index>[<expr><name>ge1</name></expr>]</index><index>[<expr><name>le2</name></expr>]</index><index>[<expr><name>ge2</name></expr>]</index></name><operator>&gt;</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
    <return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>le1</name></expr>]</index><index>[<expr><name>ge1</name></expr>]</index><index>[<expr><name>le2</name></expr>]</index><index>[<expr><name>ge2</name></expr>]</index></name></expr>;</return>
  }</block></then></if> <if>if <condition>(<expr><name>pos</name><operator>==</operator><name>n</name></expr>)</condition><then> <block>{
    <comment type="line">//check for predicate (here it is p(x)=True)</comment>
    <return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>le1</name></expr>]</index><index>[<expr><name>ge1</name></expr>]</index><index>[<expr><name>le2</name></expr>]</index><index>[<expr><name>ge2</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>ll</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>ll</name></type> <name>b1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b1</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>b1</name><operator>++</operator></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>b2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b2</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>b2</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name>b1</name><operator>&amp;&amp;</operator><name>b2</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
      <if>if <condition>(<expr><name>le1</name> <operator>&amp;&amp;</operator> <name><name>r1</name><index>[<expr><name>pos</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b1</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
      <if>if <condition>(<expr><name>le2</name> <operator>&amp;&amp;</operator> <name><name>r1</name><index>[<expr><name>pos</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b2</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
      <if>if <condition>(<expr><name>ge1</name> <operator>&amp;&amp;</operator> <name><name>r2</name><index>[<expr><name>pos</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b1</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
      <if>if <condition>(<expr><name>ge2</name> <operator>&amp;&amp;</operator> <name><name>r2</name><index>[<expr><name>pos</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b2</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
      <expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>le1</name><operator>&amp;&amp;</operator><operator>(</operator><name><name>r1</name><index>[<expr><name>pos</name></expr>]</index></name><operator>==</operator><name>b1</name><operator>)</operator></expr></argument>, <argument><expr><name>ge1</name><operator>&amp;&amp;</operator><operator>(</operator><name><name>r2</name><index>[<expr><name>pos</name></expr>]</index></name><operator>==</operator><name>b1</name><operator>)</operator></expr></argument>, <argument><expr><name>le2</name><operator>&amp;&amp;</operator><operator>(</operator><name><name>r1</name><index>[<expr><name>pos</name></expr>]</index></name><operator>==</operator><name>b2</name><operator>)</operator></expr></argument>, <argument><expr><name>ge2</name><operator>&amp;&amp;</operator><operator>(</operator><name><name>r2</name><index>[<expr><name>pos</name></expr>]</index></name><operator>==</operator><name>b2</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></for>

  <return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>le1</name></expr>]</index><index>[<expr><name>ge1</name></expr>]</index><index>[<expr><name>le2</name></expr>]</index><index>[<expr><name>ge2</name></expr>]</index></name><operator>=</operator><name>count</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>D</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">60</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>x</name></expr>)</condition> <block>{
    <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name><operator>+</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>ll</name></type> <name>w</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>w</name><operator>&lt;</operator><name>t</name></expr>;</condition> <incr><expr><operator>++</operator><name>w</name></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>solve</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  }</block></for>
}</block></function></unit>
