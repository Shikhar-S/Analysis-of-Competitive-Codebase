<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29579307_64032856.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXBIT</name> <init>= <expr><literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>string</name></type> <name>L</name></decl>, <decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>MAXBIT</name><operator>+</operator><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>refine</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>string</name><modifier>&amp;</modifier></type> <name>S</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator> <name>MAXBIT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>s</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>okla</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>okra</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>oklb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>okrb</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>ret</name> <init>= <expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>okla</name></expr>]</index><index>[<expr><name>okra</name></expr>]</index><index>[<expr><name>oklb</name></expr>]</index><index>[<expr><name>okrb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>ret</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>i</name><operator>==</operator> <name>MAXBIT</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>lowA</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>okla</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></else></ternary><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>upA</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>okra</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>lowB</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>oklb</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></else></ternary><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>upB</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>okrb</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>lowA</name></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;=</operator> <name>upA</name></expr>;</condition> <incr><expr><operator>++</operator><name>a</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>lowB</name></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;=</operator> <name>upB</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name>a</name> <operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>okla</name><operator>||</operator><operator>(</operator><name>a</name> <operator>&gt;</operator> <name><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr></argument>, <argument><expr><name>okra</name> <operator>||</operator> <operator>(</operator><name>a</name> <operator>&lt;</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr></argument>, <argument><expr><name>oklb</name><operator>||</operator><operator>(</operator><name>b</name> <operator>&gt;</operator> <name><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr></argument>, <argument><expr><name>okrb</name> <operator>||</operator> <operator>(</operator><name>b</name> <operator>&lt;</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if></block></for></block></for>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>


<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>refine</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>L</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>refine</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>f</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>dp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></while>
}</block></function>
</unit>
