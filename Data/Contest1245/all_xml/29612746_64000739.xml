<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29612746_64000739.cpp">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>  <comment type="line">// C++ I/O</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>  <comment type="line">// File I/O</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>  <comment type="line">// String stream I/O</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>  <comment type="line">// C++ I/O manipulator</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>  <comment type="line">// C library</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>  <comment type="line">// C I/O</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>  <comment type="line">// C time</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>  <comment type="line">// Math library</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>  <comment type="line">// C strings</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>  <comment type="line">// Vector</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>  <comment type="line">// Queue</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>  <comment type="line">// Stack</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>  <comment type="line">// Map</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>  <comment type="line">// Set</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>  <comment type="line">// Algorithms</comment>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reps</name><parameter_list>(<parameter><type><name>_var</name></type></parameter>,<parameter><type><name>_begin</name></type></parameter>,<parameter><type><name>_end</name></type></parameter>,<parameter><type><name>_step</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for (int _var = (_begin);  \
    _var &lt;= (_end); _var += (_step))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reps_</name><parameter_list>(<parameter><type><name>_var</name></type></parameter>,<parameter><type><name>_end</name></type></parameter>,<parameter><type><name>_begin</name></type></parameter>,<parameter><type><name>_step</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for (int _var = (_end);  \
    _var &gt;= (_begin); _var -= (_step))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>_var</name></type></parameter>,<parameter><type><name>_begin</name></type></parameter>,<parameter><type><name>_end</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>reps(_var, _begin, _end, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep_</name><parameter_list>(<parameter><type><name>_var</name></type></parameter>,<parameter><type><name>_end</name></type></parameter>,<parameter><type><name>_begin</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>reps_(_var, _end, _begin, 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>minimize</name><parameter_list>(<parameter><type><name>_var</name></type></parameter>,<parameter><type><name>_targ</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>_var = min(_var, _targ)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maximize</name><parameter_list>(<parameter><type><name>_var</name></type></parameter>,<parameter><type><name>_targ</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>_var = max(_var, _targ)</cpp:value></cpp:define>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>lli</name>, <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>llf</name>;</typedef>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>typ</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>memclr</name><parameter_list>(<parameter><decl><type><name>typ</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>typ</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>memclr</name><parameter_list>(<parameter><decl><type><name>typ</name></type> <name><name>arr</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>typ</name></parameter>, <parameter><type><name>int</name></type> <name>dim</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>memclr</name><parameter_list>(<parameter><decl><type><name>typ</name></type> <name><name>arr</name><index>[]</index><index>[<expr><name>dim</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>m</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

<function><type><name>lli</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>lli</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>sgn</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name><name>ch</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><name>sgn</name> <operator>=</operator> <ternary><condition><expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr><operator>,</operator> <expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <while>while<condition>(<expr><name>ch</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>ch</name> <operator>-</operator> <literal type="char">'0'</literal></expr><operator>,</operator> <expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><name>res</name> <operator>*</operator> <name>sgn</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">210</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>out</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>case_</argument>, <argument><literal type="number">1</literal></argument>, <argument>T</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>b</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block>
        <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>b</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block>
        <if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
