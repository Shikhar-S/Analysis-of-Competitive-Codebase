<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29611089_64009116.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"-O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>p_b</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>m_p</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sset</name></cpp:macro> <cpp:value>ordered_set</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)*(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pw</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(1ll &lt;&lt; x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)x.size()</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1123456</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">3e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mt19937_64</name></type> <name>rnd</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>system_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>vout</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>s</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt><expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>st</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>st</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>st</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j1</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>st</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>j1</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for></block></for></block></for></block></for></block></for>

    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>L</name></decl>, <decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>


    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>N</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name><name>L</name><operator>.</operator><name>p_b</name></name><argument_list>(<argument><expr><operator>(</operator><call><name>pw</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>l</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>R</name><operator>.</operator><name>p_b</name></name><argument_list>(<argument><expr><operator>(</operator><call><name>pw</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <name>r</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>==</operator> <operator>(</operator><name>i</name> <operator>^</operator> <name>j</name><operator>)</operator></expr>)</condition><then><block>{
        <if>if<condition>(<expr><operator>(</operator><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name><name>R</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <name>j</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <name><name>R</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>i</name></expr>]</index><index>[<expr><name>i</name> <operator>&lt;</operator> <name><name>R</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>j</name></expr>]</index><index>[<expr><name>j</name> <operator>&lt;</operator> <name><name>R</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    }</block></then></if></block></for></block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>step</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>step</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>step</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>oi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>oi</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>oi</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>oi1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>oi1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>oi1</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>oj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>oj</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>oj</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>oj1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>oj1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>oj1</name><operator>++</operator></expr></incr>)</control><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>wi</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>wi</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>wi</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>wj</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>wj</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>wj</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name>wi</name> <operator>+</operator> <name>wj</name> <operator>==</operator> <operator>(</operator><name>wi</name> <operator>^</operator> <name>wj</name><operator>)</operator></expr>)</condition><then><block>{
                <decl_stmt><decl><type><name>bool</name></type> <name>fi</name></decl>, <decl><type ref="prev"/><name>fi1</name></decl>, <decl><type ref="prev"/><name>fj</name></decl>, <decl><type ref="prev"/><name>fj1</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>ll</name></type> <name>Le</name></decl>, <decl><type ref="prev"/><name>Ri</name></decl>, <decl><type ref="prev"/><name>L1</name></decl>, <decl><type ref="prev"/><name>R1</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>Le</name> <operator>=</operator> <name><name>L</name><index>[<expr><name>step</name></expr>]</index></name></expr><operator>,</operator> <expr><name>Ri</name> <operator>=</operator> <name><name>R</name><index>[<expr><name>step</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>L1</name> <operator>=</operator> <name><name>L</name><index>[<expr><name>step</name></expr>]</index></name></expr><operator>,</operator> <expr><name>R1</name> <operator>=</operator> <name><name>R</name><index>[<expr><name>step</name></expr>]</index></name></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>oi</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>Le</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><if>if<condition>(<expr><name>oi1</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>Ri</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><name>oj</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>L1</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><if>if<condition>(<expr><name>oj1</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>R1</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>Le</name> <operator>&lt;=</operator> <name>wi</name> <operator>&amp;&amp;</operator> <name>wi</name> <operator>&lt;=</operator> <name>Ri</name> <operator>&amp;&amp;</operator> <name>L1</name> <operator>&lt;=</operator> <name>wj</name> <operator>&amp;&amp;</operator> <name>wj</name> <operator>&lt;=</operator> <name>R1</name><operator>)</operator></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>fi</name> <operator>=</operator> <operator>(</operator><name>Le</name> <operator>&lt;</operator> <name>wi</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>fi1</name> <operator>=</operator> <operator>(</operator><name>wi</name> <operator>&lt;</operator> <name>Ri</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>fj</name> <operator>=</operator> <operator>(</operator><name>L1</name> <operator>&lt;</operator> <name>wj</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>fj1</name> <operator>=</operator> <operator>(</operator><name>wj</name> <operator>&lt;</operator> <name>R1</name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>step</name></expr>]</index><index>[<expr><name>fi</name></expr>]</index><index>[<expr><name>fi1</name></expr>]</index><index>[<expr><name>fj</name></expr>]</index><index>[<expr><name>fj1</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>step</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>oi</name></expr>]</index><index>[<expr><name>oi1</name></expr>]</index><index>[<expr><name>oj</name></expr>]</index><index>[<expr><name>oj1</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if></block></for></block></for>
        }</block></for></block></for></block></for></block></for>
    }</block></for>

    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i1</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j1</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i1</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>j1</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for></block></for></block></for>

    <return>return <expr><name>ans</name></expr>;</return>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name> <operator>::</operator> <name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// LOCAL</comment>

    <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>


    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>f</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
