<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29608268_64019339.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Maxn</name></cpp:macro> <cpp:value>2000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Inf</name></cpp:macro> <cpp:value>0x3f3f3f3f3f3f3f3fll</cpp:value></cpp:define>
<struct>struct <name>City</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>a</name><index>[<expr><name>Maxn</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>ab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><ternary><condition><expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><operator>-</operator><name>a</name></expr></then><else>:<expr><name>a</name></expr></else></ternary></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><call><name>ab</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>ab</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dis</name><index>[<expr><name>Maxn</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fa</name><index>[<expr><name>Maxn</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>Maxn</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>prim</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dis</name></expr></argument>,<argument><expr><literal type="number">0x3f</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>dis</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fa</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dis</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>now</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>dis</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>u</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<break>break;</break>
		}</block></then></if>
		<expr_stmt><expr><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
				<continue>continue;</continue>
			}</block></then></if>
			<expr_stmt><expr><name>now</name><operator>=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>k</name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name><operator>)</operator><operator>*</operator><literal type="number">1ll</literal><operator>*</operator><call><name>dist</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>now</name><operator>&lt;</operator><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>now</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>u</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></for>
}</block></function>
<struct>struct <name>Edge</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>w</name></decl>;</decl_stmt>
	<friend>friend <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>Edge</name></type> <name>q</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><name><name>p</name><operator>.</operator><name>w</name></name><operator>&gt;</operator><name><name>q</name><operator>.</operator><name>w</name></name></expr>;</return>
	}</block></function></friend>
</public>}</block><decl><name><name>e</name><index>[<expr><name>Maxn</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>bool</name></type> <name><name>broke</name><index>[<expr><name>Maxn</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>Maxn</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>arrive</name><index>[<expr><name>Maxn</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>|</operator><literal type="number">5</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>nxt</name><index>[<expr><name>Maxn</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>|</operator><literal type="number">5</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tot</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>bad</name><index>[<expr><name>Maxn</name><operator>+</operator><literal type="number">5</literal></expr>]</index><index>[<expr><name>Maxn</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>add_edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>arrive</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>=</operator><name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>nxt</name><index>[<expr><name>tot</name></expr>]</index></name><operator>=</operator><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>tot</name></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>bool</name></type> <name><name>in</name><index>[<expr><name>Maxn</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>col</name><index>[<expr><name>Maxn</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n_u</name></decl>,<decl><type ref="prev"/><name>n_v</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>col</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>head</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>=</operator><name><name>nxt</name><index>[<expr><name>i</name></expr>]</index></name></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>arrive</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>col</name><index>[<expr><name>v</name></expr>]</index></name><operator>||</operator><operator>(</operator><operator>(</operator><name>u</name><operator>==</operator><name>n_u</name><operator>&amp;&amp;</operator><name>v</name><operator>==</operator><name>n_v</name><operator>)</operator><operator>||</operator><operator>(</operator><name>u</name><operator>==</operator><name>n_v</name><operator>&amp;&amp;</operator><name>v</name><operator>==</operator><name>n_u</name><operator>)</operator><operator>||</operator><name><name>bad</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>)</operator></expr>)</condition><then><block>{
			<continue>continue;</continue>
		}</block></then></if>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="number">0</literal><operator>||</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name><operator>&lt;</operator><name><name>a</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>c</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>u</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>prim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>m</name></expr>]</index></name><operator>.</operator><name>u</name><operator>=</operator><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>v</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>w</name><operator>=</operator><operator>(</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name><operator>+</operator><name><name>a</name><index>[<expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>k</name><operator>)</operator><operator>*</operator><literal type="number">1ll</literal><operator>*</operator><call><name>dist</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>e</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>,<argument><expr><name><name>e</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add_edge</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>,<argument><expr><name><name>e</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>in</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>a</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>e</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>n_u</name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n_v</name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>col</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>col</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>u</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>v</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>u</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name><name>in</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>u</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if>
				<if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="number">0</literal><operator>||</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>c</name><operator>&lt;</operator><name><name>a</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>c</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>u</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
			<if>if<condition>(<expr><name><name>col</name><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal><operator>&amp;&amp;</operator><name>v</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name><name>in</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>v</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if>
				<if>if<condition>(<expr><name>v</name><operator>==</operator><literal type="number">0</literal><operator>||</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>c</name><operator>&lt;</operator><name><name>a</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>c</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>v</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>u</name><operator>==</operator><operator>-</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>v</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ans</name><operator>-=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><name>u</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>c</name><operator>&lt;</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name><name>in</name><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name><operator>-=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>a</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>broke</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>bad</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>]</index></name><operator>=</operator><name><name>bad</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>]</index><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then>
			<else>else<block>{
				<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>c</name><operator>&lt;</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name><name>in</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name><operator>-=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>a</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>broke</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>bad</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>]</index></name><operator>=</operator><name><name>bad</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr>]</index><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></else></if>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>num</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>num</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><operator>!</operator><name><name>broke</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><operator>!</operator><name><name>broke</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>,<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
