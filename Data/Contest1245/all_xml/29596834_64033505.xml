<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29596834_64033505.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>int</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>DL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>maxn</name><init>=<expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>Read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>LL</name></type> <name>x</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>f</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>a</name><index>[<expr><literal type="number">19</literal></expr>]</index><index>[<expr><literal type="number">19</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>DL</name></type> <name><name>f</name><index>[<expr><literal type="number">19</literal></expr>]</index><index>[<expr><literal type="number">19</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>n</name><operator>=</operator><name>m</name><operator>=</operator><literal type="number">10</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>LL</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>Read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></for>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator><literal type="number">6</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator><literal type="number">6</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>=</operator><literal type="number">6</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>LL</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
<comment type="line">//		printf("%d\n",i);</comment>
		<if>if<condition>(<expr><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block>{
<comment type="line">//			printf("%d:",i);</comment>
			<for>for<control>(<init><decl><type><name>LL</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name><operator>&lt;=</operator><literal type="number">6</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<for>for<control>(<init><decl><type><name>LL</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block>{
					<if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
						<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt>
					}</block></then><else>else<block>{
						<if>if<condition>(<expr><name>k</name><operator>&lt;=</operator><operator>(</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then><block>{
							<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><name>k</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><name>k</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><name>k</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
							<else>else <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
						}</block></then><else>else<block>{
							<decl_stmt><decl><type><name>LL</name></type> <name>x</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>y</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>+</operator><operator>(</operator><name>k</name><operator>-</operator><name>j</name><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
							<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block>{
<comment type="line">//								printf("(%d,%d)\n",i,j);</comment>
								<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>x</name><operator>-</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
							}</block></then>
							<else>else <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
						}</block></else></if>
					}</block></else></if>
				}</block></for>
				<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>/=</operator><literal type="number">6.0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><literal type="number">1.0</literal></expr>;</expr_stmt>
<comment type="line">//			            printf("%.1lf ",f[i][j]);</comment>
			}</block></for>
		}</block></then><else>else<block>{
			<for>for<control>(<init><decl><type><name>LL</name></type> <name>j</name><init>=<expr><name>m</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><operator>--</operator><name>j</name></expr></incr>)</control><block>{
				<for>for<control>(<init><decl><type><name>LL</name></type> <name>k</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block>{
				    <if>if<condition>(<expr><name>k</name><operator>&lt;=</operator><operator>(</operator><name>m</name><operator>-</operator><name>j</name><operator>)</operator></expr>)</condition><then><block>{
					    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><name>k</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><name>k</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><name>k</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
					    <else>else <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
				    }</block></then><else>else<block>{
					    <decl_stmt><decl><type><name>LL</name></type> <name>x</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>y</name><argument_list>(<argument><expr><name>m</name><operator>-</operator><operator>(</operator><name>k</name><operator>-</operator><operator>(</operator><name>m</name><operator>-</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></decl>;</decl_stmt>
					    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block>{
<comment type="line">//					    	printf("(%d,%d)\n",i,j);</comment>
					    	<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>x</name><operator>-</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></then>
					    <else>else <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
				    }</block></else></if>
			    }</block></for>
			    <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>/=</operator><literal type="number">6.0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><literal type="number">1.0</literal></expr>;</expr_stmt>
<comment type="line">//			    printf("%.1lf ",f[i][j]);</comment>
			}</block></for>
<comment type="line">//			for(LL j=1;j&lt;=m;++j) printf("%.1lf ",f[i][j]);</comment>
		}</block></else></if>
<comment type="line">//		puts("");</comment>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.10lf\n"</literal></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
