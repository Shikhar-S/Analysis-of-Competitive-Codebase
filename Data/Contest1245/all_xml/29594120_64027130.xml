<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29594120_64027130.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sim</name></cpp:macro> <cpp:value>template &lt; class c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ris</name></cpp:macro> <cpp:value>return * this</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dor</name></cpp:macro> <cpp:value>&gt; debug &amp; operator &lt;&lt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eni</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sim &gt; typename \
  enable_if&lt;sizeof dud&lt;c&gt;(0) x 1, debug&amp;&gt;::type operator&lt;&lt;(c i) {</cpp:value></cpp:define>
<expr_stmt><expr><name>sim</name> <operator>&gt;</operator> struct <name>rge</name> <block>{ <expr><name>c</name> <name>b</name></expr>, <expr><name>e</name></expr>; }</block></expr>;</expr_stmt>
<expr_stmt><expr><name>sim</name> <operator>&gt;</operator> <name><name>rge</name><argument_list type="generic">&lt;<argument><expr><name>c</name></expr></argument>&gt;</argument_list></name> <macro><name>range</name><argument_list>(<argument>c i</argument>, <argument>c j</argument>)</argument_list></macro> <block>{ <return>return <expr><name><name>rge</name><argument_list type="generic">&lt;<argument><expr><name>c</name></expr></argument>&gt;</argument_list></name><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr>;</return> }</block></expr></expr_stmt>
<expr_stmt><expr><name>sim</name> <operator>&gt;</operator> <name>auto</name> <call><name>dud</name><argument_list>(<argument><expr><name>c</name><operator>*</operator> <name>x</name></expr></argument>)</argument_list></call> <operator>-&gt;</operator> <decltype>decltype<argument_list>(<argument><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decltype>;
<name>sim</name> <operator>&gt;</operator> <name>char</name> <call><name>dud</name><argument_list>(<argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<struct>struct <name>debug</name> <block>{<public type="default">
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
<destructor><name>~<name>debug</name></name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></destructor>
<macro><name>eni</name><argument_list>(<argument>!=</argument>)</argument_list></macro> <macro><name>cerr</name></macro> <expr_stmt><expr><operator>&lt;&lt;</operator> <name>boolalpha</name> <operator>&lt;&lt;</operator> <name>i</name></expr>;</expr_stmt> <macro><name>ris</name></macro><empty_stmt>;</empty_stmt> </public>}</block>
<decl><name>eni</name><argument_list>(<argument><expr><operator>==</operator></expr></argument>)</argument_list> <name>ris</name> &lt;&lt; <name>range</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</struct> }
sim<operator>,</operator> <function><type><name><name>class</name> <name>b</name></name></type> <name>dor</name><parameter_list>(<parameter><decl><type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument> &gt;</argument_list></name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>ris</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>d</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>d</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr>;</expr_stmt>
}</block></function>
<function><type><name>sim</name></type> <name>dor</name><parameter_list>(<parameter><decl><type><name><name>rge</name><argument_list type="generic">&lt;<argument><expr><name>c</name></expr></argument>&gt;</argument_list></name></type> <name>d</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><operator>*</operator><name>this</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><name><name>d</name><operator>.</operator><name>b</name></name></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <name><name>d</name><operator>.</operator><name>e</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>it</name></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><operator>*</operator><name>this</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>it</name> <operator>==</operator> <name><name>d</name><operator>.</operator><name>b</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt></block></for>
  <expr_stmt><expr><name>ris</name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal></expr>;</expr_stmt>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>sim</name></type> <name>dor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>c</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>ris</name></expr>;</expr_stmt> }</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
};
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>imie</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>" [" &lt;&lt; #__VA_ARGS__ ": " &lt;&lt; (__VA_ARGS__) &lt;&lt; "] "</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal>  <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>L</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>R</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>c</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>ret</name> <init>= <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>ret</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="line">// 0 0</comment>
    <if>if<condition>(<expr><operator>!</operator><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>(</operator><name>b</name> <operator>&amp;&amp;</operator> <name>d</name><operator>)</operator></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>b</name></expr></argument> , <argument><expr><name>c</name> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line">// 1 0</comment>
    <if>if<condition>(<expr><operator>(</operator><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name>a</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name>d</name><operator>)</operator></expr> )</condition><then>
    <block>{
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument> ,<argument><expr><name>b</name> <operator>||</operator> <operator>!</operator><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>c</name> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <comment type="line">// 0 1</comment>
    <if>if<condition>(<expr><operator>(</operator><operator>!</operator><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name>b</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name>c</name><operator>)</operator></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name> <operator>||</operator> <name><name>R</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>b</name></expr></argument> ,<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name> <operator>||</operator> <operator>!</operator><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>

    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> <operator>,</operator><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>q</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>q</name></expr>;</expr_stmt>
    <for>for<control>(<init>;</init><condition><expr><name>q</name></expr>;</condition><incr><expr><name>q</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl> , <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>R</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>L</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>L</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while<condition>(<expr><name>l</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{
            <expr_stmt><expr><name><name>L</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name>l</name><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>l</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{
            <expr_stmt><expr><name><name>R</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name>r</name><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
        }</block></while>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>(<argument><expr><literal type="number">34</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
