<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29579536_64020943.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e2</literal> <operator>+</operator> <literal type="number">11</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>a</name></decl> , <decl><type ref="prev"/><name>b</name></decl> , <decl><type ref="prev"/><name>c</name></decl> , <decl><type ref="prev"/><name>ao</name></decl> , <decl><type ref="prev"/><name>bo</name></decl> , <decl><type ref="prev"/><name>co</name></decl> , <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<comment type="line">//a:Rock b:Paper c:Scissors</comment>
<function><type><name>void</name></type> <name>solve</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list> <block>{
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ao</name> <operator>=</operator> <name>bo</name> <operator>=</operator> <name>co</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
    <block type="pseudo"><if>if<condition>( <expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr> )</condition><then>
      <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ao</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if<condition>( <expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr> )</condition><then>
      <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>bo</name></expr>;</expr_stmt></block></then></if></elseif>
    <else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>co</name></expr>;</expr_stmt></block></else></if></block></for>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>min</name><argument_list>( <argument><expr><name>a</name></expr></argument> , <argument><expr><name>co</name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>( <argument><expr><name>b</name></expr></argument> , <argument><expr><name>ao</name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>( <argument><expr><name>c</name></expr></argument> , <argument><expr><name>bo</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ta</name> <init>= <expr><call><name>min</name><argument_list>( <argument><expr><name>a</name></expr></argument> , <argument><expr><name>co</name></expr></argument> )</argument_list></call></expr></init></decl> , <decl><type ref="prev"/><name>tb</name> <init>= <expr><call><name>min</name><argument_list>( <argument><expr><name>b</name></expr></argument> , <argument><expr><name>ao</name></expr></argument> )</argument_list></call></expr></init></decl> , <decl><type ref="prev"/><name>tc</name> <init>= <expr><call><name>min</name><argument_list>( <argument><expr><name>c</name></expr></argument> , <argument><expr><name>bo</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>res</name> <operator>&lt;</operator> <operator>(</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><then> <block>{ <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return;</return> }</block></then></if>
  <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
    <if>if<condition>( <expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr> )</condition><then> <block>{
      <if>if<condition>( <expr><name>b</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>( <argument><expr><literal type="char">'P'</literal></expr></argument> )</argument_list></call></expr> <operator>,</operator> <expr><operator>--</operator><name>b</name></expr> <operator>,</operator> <expr><operator>--</operator><name>tb</name></expr>;</expr_stmt></block></then>
      <else>else <block>{
        <if>if<condition>( <expr><name>a</name> <operator>&gt;</operator> <name>ta</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>( <argument><expr><literal type="char">'R'</literal></expr></argument> )</argument_list></call></expr> <operator>,</operator> <expr><operator>--</operator><name>a</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>( <argument><expr><literal type="char">'S'</literal></expr></argument> )</argument_list></call></expr> <operator>,</operator> <expr><operator>--</operator><name>c</name></expr>;</expr_stmt></block></else></if>
      }</block></else></if>
    }</block></then></if> 
    <if>if<condition>( <expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr> )</condition><then> <block>{
      <if>if<condition>( <expr><name>c</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>( <argument><expr><literal type="char">'S'</literal></expr></argument> )</argument_list></call></expr> <operator>,</operator> <expr><operator>--</operator><name>c</name></expr> <operator>,</operator> <expr><operator>--</operator><name>tc</name></expr>;</expr_stmt></block></then>
      <else>else <block>{
        <if>if<condition>( <expr><name>a</name> <operator>&gt;</operator> <name>ta</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>( <argument><expr><literal type="char">'R'</literal></expr></argument> )</argument_list></call></expr> <operator>,</operator> <expr><operator>--</operator><name>a</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>( <argument><expr><literal type="char">'P'</literal></expr></argument> )</argument_list></call></expr> <operator>,</operator> <expr><operator>--</operator><name>b</name></expr>;</expr_stmt></block></else></if>
      }</block></else></if>
    }</block></then></if>
    <if>if<condition>( <expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr> )</condition><then> <block>{
      <if>if<condition>( <expr><name>a</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>( <argument><expr><literal type="char">'R'</literal></expr></argument> )</argument_list></call></expr> <operator>,</operator> <expr><operator>--</operator><name>a</name></expr> <operator>,</operator> <expr><operator>--</operator><name>ta</name></expr>;</expr_stmt></block></then>
      <else>else <block>{
        <if>if<condition>( <expr><name>b</name> <operator>&gt;</operator> <name>tb</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>( <argument><expr><literal type="char">'P'</literal></expr></argument> )</argument_list></call></expr> <operator>,</operator> <expr><operator>--</operator><name>b</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>( <argument><expr><literal type="char">'S'</literal></expr></argument> )</argument_list></call></expr> <operator>,</operator> <expr><operator>--</operator><name>c</name></expr>;</expr_stmt></block></else></if>
      }</block></else></if>
    }</block></then></if>
  }</block></for>
  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>T</name><operator>--</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
