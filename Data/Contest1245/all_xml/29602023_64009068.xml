<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29602023_64009068.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">105</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name><name>dp</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>trace</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>winnable</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>change</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name>c1</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>c1</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
}</block></function>

<comment type="line">//0: rock</comment>
<comment type="line">//1: scissors</comment>
<comment type="line">//2: paper</comment>

<function><type><name>void</name></type> <name>doTrace</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curA</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>curB</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>pos</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>cur</name> <init>= <expr><name><name>trace</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>curA</name></expr>]</index><index>[<expr><name>curB</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>doTrace</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>curA</name> <operator>-</operator> <operator>(</operator><name>cur</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>, <argument><expr><name>curB</name> <operator>-</operator> <operator>(</operator><name>cur</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>cur</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><name>cur</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr>;</expr_stmt></block></then></if></elseif>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"P"</literal></expr>;</expr_stmt></block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">0x3f</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>rock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>rock</name> <operator>&lt;=</operator> <name>a</name></expr>;</condition> <incr><expr><name>rock</name><operator>++</operator></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>paper</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>paper</name> <operator>&lt;=</operator> <name>b</name></expr>;</condition> <incr><expr><name>paper</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>scissors</name> <init>= <expr><name>i</name> <operator>-</operator> <operator>(</operator><name>rock</name> <operator>+</operator> <name>paper</name><operator>)</operator></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>rock</name> <operator>&lt;</operator> <name>a</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>rock</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>paper</name></expr>]</index></name> <operator>&lt;</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>rock</name></expr>]</index><index>[<expr><name>paper</name></expr>]</index></name> <operator>+</operator> <call><name>winnable</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>change</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>rock</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>paper</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>rock</name></expr>]</index><index>[<expr><name>paper</name></expr>]</index></name> <operator>+</operator> <call><name>winnable</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>change</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>trace</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>rock</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>paper</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>

                <if>if <condition>(<expr><name>paper</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>rock</name></expr>]</index><index>[<expr><name>paper</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>rock</name></expr>]</index><index>[<expr><name>paper</name></expr>]</index></name> <operator>+</operator> <call><name>winnable</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>change</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>rock</name></expr>]</index><index>[<expr><name>paper</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>rock</name></expr>]</index><index>[<expr><name>paper</name></expr>]</index></name> <operator>+</operator> <call><name>winnable</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><call><name>change</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>trace</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>rock</name></expr>]</index><index>[<expr><name>paper</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>

                <if>if <condition>(<expr><name>scissors</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>rock</name></expr>]</index><index>[<expr><name>paper</name></expr>]</index></name> <operator>&lt;</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>rock</name></expr>]</index><index>[<expr><name>paper</name></expr>]</index></name> <operator>+</operator> <call><name>winnable</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>change</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>rock</name></expr>]</index><index>[<expr><name>paper</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>rock</name></expr>]</index><index>[<expr><name>paper</name></expr>]</index></name> <operator>+</operator> <call><name>winnable</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>change</name><argument_list>(<argument><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>trace</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>rock</name></expr>]</index><index>[<expr><name>paper</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if>
            }</block></for>
        }</block></for>
    }</block></for>

    <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doTrace</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
