<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617332_64031462.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">11000</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ca</name><index>[<expr><literal type="number">110</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cb</name><index>[<expr><literal type="number">110</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>na</name></decl>,<decl><type ref="prev"/><name>nb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>pw3</name><index>[<expr><literal type="number">110</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>dp</name><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>cur1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>cur2</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>cur1</name></expr>]</index><index>[<expr><name>cur2</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>cur1</name></expr>]</index><index>[<expr><name>cur2</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>cur1</name></expr>]</index><index>[<expr><name>cur2</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>len</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>cur1</name></expr>]</index><index>[<expr><name>cur2</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</return></block></then></if>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i1</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i1</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>i2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i2</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i2</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><name>cur1</name><operator>&amp;&amp;</operator><name>i1</name><operator>&gt;</operator><name><name>ca</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if <condition>(<expr><name>cur2</name><operator>&amp;&amp;</operator><name>i2</name><operator>&gt;</operator><name><name>cb</name><index>[<expr><name>len</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>ncur1</name><init>=<expr><name>cur1</name><operator>&amp;&amp;</operator><operator>(</operator><name>i1</name><operator>==</operator><name><name>ca</name><index>[<expr><name>len</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>ncur2</name><init>=<expr><name>cur2</name><operator>&amp;&amp;</operator><operator>(</operator><name>i2</name><operator>==</operator><name><name>cb</name><index>[<expr><name>len</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>i1</name><operator>&amp;</operator><name>i2</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if <condition>(<expr><name>ncur1</name><operator>&amp;&amp;</operator><name>ncur2</name></expr>)</condition><then>
			<block>{
				<if>if <condition>(<expr><name>i1</name><operator>&amp;</operator><name>i2</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>cur1</name></expr>]</index><index>[<expr><name>cur2</name></expr>]</index></name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ncur1</name></expr></argument>,<argument><expr><name>ncur2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<elseif>else <if>if <condition>(<expr><operator>!</operator><name>ncur1</name><operator>&amp;&amp;</operator><operator>!</operator><name>ncur2</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>cur1</name></expr>]</index><index>[<expr><name>cur2</name></expr>]</index></name><operator>+=</operator><name><name>pw3</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<elseif>else <if>if <condition>(<expr><name>ncur1</name><operator>&amp;&amp;</operator><operator>!</operator><name>ncur2</name></expr>)</condition><then>
			<block>{
				<if>if <condition>(<expr><name>i1</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>cur1</name></expr>]</index><index>[<expr><name>cur2</name></expr>]</index></name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ncur1</name></expr></argument>,<argument><expr><name>ncur2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>cur1</name></expr>]</index><index>[<expr><name>cur2</name></expr>]</index></name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ncur1</name></expr></argument>,<argument><expr><name>ncur2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			}</block></then></if></elseif>
			<else>else
			<block>{
				<if>if <condition>(<expr><name>i2</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>cur1</name></expr>]</index><index>[<expr><name>cur2</name></expr>]</index></name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ncur1</name></expr></argument>,<argument><expr><name>ncur2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>cur1</name></expr>]</index><index>[<expr><name>cur2</name></expr>]</index></name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>ncur1</name></expr></argument>,<argument><expr><name>ncur2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			}</block></else></if>
		}</block></for></block></for>
	<return>return <expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>cur1</name></expr>]</index><index>[<expr><name>cur2</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>LL</name></type> <name>work</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>b</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>na</name><operator>=</operator><name>nb</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>a</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name><name>ca</name><index>[<expr><operator>++</operator><name>na</name></expr>]</index></name><operator>=</operator><name>a</name><operator>&amp;</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>a</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></while>
	<while>while <condition>(<expr><name>b</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name><name>cb</name><index>[<expr><operator>++</operator><name>nb</name></expr>]</index></name><operator>=</operator><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></while>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>nb</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>na</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>cb</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
	<return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>na</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name><name>pw3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">33</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>pw3</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>pw3</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">3LL</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>ans1</name><init>=<expr><call><name>work</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>ans2</name><init>=<expr><call><name>work</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LL</name></type> <name>ans3</name><init>=<expr><call><name>work</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans1</name><operator>-</operator><literal type="number">2LL</literal><operator>*</operator><name>ans2</name><operator>+</operator><name>ans3</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
