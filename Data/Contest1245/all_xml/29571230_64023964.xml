<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29571230_64023964.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">2007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>edge</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cost</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>p</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
 
<function><type><name>void</name></type> <name>prim</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name><name>cost</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1e18</literal></expr>;</expr_stmt>
	}</block></for>
	<while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>u</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{  
			<if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>v</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>cost</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;</operator> <name><name>cost</name><index>[<expr><name>v</name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>v</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>v</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name><name>vis</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>  
		<for>for<control>(<init><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>u</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>u</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>cost</name><index>[<expr><name>u</name></expr>]</index></name><operator>&gt;</operator><name><name>edge</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><name>v</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name><name>cost</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>cost</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>edge</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></while>
}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>int</name></cpp:undef>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>edge</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>edge</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>prim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v1</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>v2</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name><range>:<expr><name>v1</name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>c</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>v2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>c</name><range>:<expr><name>v2</name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>c</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>c</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> 
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
