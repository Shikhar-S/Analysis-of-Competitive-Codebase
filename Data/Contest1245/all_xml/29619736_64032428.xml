<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619736_64032428.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ford</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>minimize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>maximize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxN</name><init>=<expr><literal type="number">1000</literal><operator>+</operator><literal type="number">1067</literal></expr></init></decl>,<decl><type ref="prev"/><name>base</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Node</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>node</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</struct>

<struct>struct <name>Edge</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>w</name></decl>;</decl_stmt>
    <constructor><name>Edge</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>u</name><operator>=</operator><name>v</name><operator>=</operator><name>w</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    }</block></constructor>
</public>}</block> <decl><name><name>edge</name><index>[<expr><name>maxN</name><operator>*</operator><name>maxN</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>par</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>con</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>discarded</name><index>[<expr><name>maxN</name><operator>*</operator><name>maxN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>turnedOn</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name><name>to</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>turnOn</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>choosenEdges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Edge</name></type> <name>maxEdge</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>findset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then> <else>else <block type="pseudo"><return>return <expr><call><name>findset</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>uni</name><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>edge</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name><name>edge</name><operator>.</operator><name>u</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><name><name>edge</name><operator>.</operator><name>v</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><call><name>findset</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name><operator>=</operator><call><name>findset</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>x</name><operator>==</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <expr_stmt><expr><name>res</name><operator>+=</operator><name><name>edge</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>con</name><index>[<expr><name>x</name></expr>]</index></name><operator>&lt;</operator><name><name>con</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>con</name><index>[<expr><name>x</name></expr>]</index></name><operator>+=</operator><name><name>con</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>par</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>to</name><index>[<expr><name><name>edge</name><operator>.</operator><name>u</name></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>to</name><index>[<expr><name><name>edge</name><operator>.</operator><name>v</name></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>choosenEdges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>getVer</name><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>edge</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>edge</name><operator>.</operator><name>v</name></name><operator>==</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>edge</name><operator>.</operator><name>u</name></name></expr>;</return></block></then> <else>else <block type="pseudo"><return>return <expr><name><name>edge</name><operator>.</operator><name>v</name></name></expr>;</return></block></else></if>
}</block></function>

<function><type><name>bool</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name><name>turnedOn</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>bool</name></type> <name>rr</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>edge</name><range>:<expr><name><name>to</name><index>[<expr><name>x</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><call><name>getVer</name><argument_list>(<argument><expr><name>edge</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>y</name><operator>==</operator><name>t</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if <condition>(<expr><name><name>discarded</name><index>[<expr><name><name>edge</name><operator>.</operator><name>id</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <decl_stmt><decl><type><name>bool</name></type> <name>st</name><init>=<expr><call><name>dfs</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>st</name></expr>)</condition><then>
        <block type="pseudo"><if>if <condition>(<expr><name><name>maxEdge</name><operator>.</operator><name>w</name></name><operator>&lt;=</operator><name><name>edge</name><operator>.</operator><name>w</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>maxEdge</name><operator>=</operator><name>edge</name></expr>;</expr_stmt>
        }</block></then></if></block></then></if><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><name>rr</name><operator>|=</operator><name>st</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>rr</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>comp</name><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Edge</name></type> <name>c2</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name><name>c1</name><operator>.</operator><name>w</name></name><operator>&lt;</operator><name><name>c2</name><operator>.</operator><name>w</name></name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>comp1</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>c1</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>c2</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name><name>c1</name><operator>.</operator><name>c</name></name><operator>&lt;</operator><name><name>c2</name><operator>.</operator><name>c</name></name></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("dream_hyojooslh.txt","r",stdin);</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&gt;&gt;</operator><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>node</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>node</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>comp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <macro><name>For</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal>+i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><operator>++</operator><name>top</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edge</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>u</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edge</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>v</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edge</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>id</name><operator>=</operator><name>top</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>edge</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>w</name><operator>=</operator><call>(<name>long</name> <name>long</name>)<argument_list>(<argument><expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name><operator>+</operator><name><name>node</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>k</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name><name>node</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><name><name>node</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>edge</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>edge</name><operator>+</operator><name>top</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>con</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>top</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>uni</name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <expr_stmt><expr><name><name>turnedOn</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name><operator>+=</operator><name><name>node</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>turnOn</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>curNode</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>maxEdge</name><operator>.</operator><name>w</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dfs</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>maxEdge</name><operator>.</operator><name>w</name></name><operator>&gt;</operator><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>res</name><operator>-=</operator><name><name>maxEdge</name><operator>.</operator><name>w</name></name><operator>-</operator><name><name>node</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>discarded</name><index>[<expr><name><name>maxEdge</name><operator>.</operator><name>id</name></name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>turnedOn</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>turnOn</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>turnOn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>ver</name><range>:<expr><name>turnOn</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>node</name><index>[<expr><name>ver</name></expr>]</index></name><operator>.</operator><name>id</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>n</name><operator>-</operator><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>turnOn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>edge</name><range>:<expr><name>choosenEdges</name></expr></range></expr></init>)</control> <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>discarded</name><index>[<expr><name><name>edge</name><operator>.</operator><name>id</name></name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>node</name><index>[<expr><name><name>edge</name><operator>.</operator><name>u</name></name></expr>]</index></name><operator>.</operator><name>id</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>node</name><index>[<expr><name><name>edge</name><operator>.</operator><name>v</name></name></expr>]</index></name><operator>.</operator><name>id</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></then></if></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
