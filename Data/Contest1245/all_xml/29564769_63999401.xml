<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29564769_63999401.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>int</name></cpp:undef>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name><name>m</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name><operator>&gt;&gt;</operator><name><name>m</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name><operator>&gt;&gt;</operator><name><name>m</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>win</name> <init>= <expr><call><name>string</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>wins</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><name><name>m</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>win</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name><name>m</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name><operator>--</operator></expr><operator>,</operator> <expr><name>wins</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><name><name>m</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>win</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name><name>m</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name><operator>--</operator></expr><operator>,</operator> <expr><name>wins</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
		}</block></for>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><name><name>m</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>win</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name><name>m</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name><operator>--</operator></expr><operator>,</operator> <expr><name>wins</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			}</block></then></if>
		}</block></for>
		<if>if<condition>(<expr><name>wins</name> <operator>&lt;</operator> <name>n</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><name>n</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name><name>win</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><name><name>m</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>win</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name><name>m</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></then>
				<elseif>else <if>if<condition>(<expr><name><name>m</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>win</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name><name>m</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name><name>m</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>win</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name><name>m</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif></if>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><name>win</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
