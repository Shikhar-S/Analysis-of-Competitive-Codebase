<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29595864_64029504.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>vi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvvi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvi</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>vll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvvll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>ull</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using>
<using>using <name>vb</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvb</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vb</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vd</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvd</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vd</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvvd</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvd</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vs</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvs</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vs</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vc</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvc</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vc</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>ii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vii</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvii</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vii</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>dd</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>, <argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vdd</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>dd</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvdd</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vdd</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>Mii</name> <init>= <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vMii</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Mii</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>Si</name> <init>= <type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vSi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Si</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvSi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vSi</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1e9 + 5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a%m+m)%m</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<decl_stmt><decl><type><name>vvvd</name></type> <name>memo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vvi</name></type> <name>G</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>j</name> <operator>+=</operator> <name>k</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>j</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">19</literal> <operator>-</operator> <name>j</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then>
	<else>else <block>{
		<expr_stmt><expr><name>j</name> <operator>-=</operator> <name>k</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
	}</block></else></if>
	<comment type="line">//if(j &lt; 0 or i &lt; 0) cerr &lt;&lt; "SEGFAULT\n";</comment>
}</block></function>

<function><type><name>double</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ld</name></decl></parameter>)</parameter_list> <block>{
<comment type="line">//	cerr &lt;&lt; "dp: " &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; endl;</comment>
	<decl_stmt><decl><type><name>double</name><modifier>&amp;</modifier></type> <name>ans</name> <init>= <expr><name><name>memo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>ld</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>ans</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1e-9</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ans</name></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<if>if<condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>j</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>)</condition><then> <block>{
<comment type="line">//			cerr &lt;&lt; "dp2: " &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; endl;</comment>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">6.0</literal> <operator>-</operator> <name>j</name></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>j</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
				<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name><operator>-</operator><name>k</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
			}</block></for>
			<expr_stmt><expr><name>ans</name> <operator>/=</operator> <call><name>double</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>ans</name></expr>;</return>
		}</block></then></if>
	}</block></then></if>
<comment type="line">//	cerr &lt;&lt; "dp3: " &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; endl;</comment>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>p</name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>l</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>advance</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>ans</name> <operator>/=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
<comment type="line">//	cerr &lt;&lt; "dp4: " &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; endl;</comment>
	<if>if<condition>(<expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>and</operator> <operator>not</operator> <name>ld</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><call><name>dp</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><name><name>G</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>setf</name></name><argument_list>(<argument><expr><name><name>ios</name><operator>::</operator><name>fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>G</name> <operator>=</operator> <call><name>vvi</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name>vi</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>G</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name>memo</name> <operator>=</operator> <call><name>vvvd</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name>vvd</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name>vd</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>dp</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>


</unit>
