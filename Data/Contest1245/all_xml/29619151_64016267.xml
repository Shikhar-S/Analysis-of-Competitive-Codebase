<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619151_64016267.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace<name><operator>::</operator><name>std</name></name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name><name>fac</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>rev</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<comment type="line">//freopen("in.txt","r",stdin);</comment>
	<expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>i</name><operator>*</operator><name><name>fac</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name><name>rev</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>rev</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>MOD</name><operator>-</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>MOD</name><operator>/</operator><name>i</name><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator><operator>*</operator><name><name>rev</name><index>[<expr><name>MOD</name><operator>%</operator><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></for>
	<comment type="line">//cout&lt;&lt;fac[3]*rev[2]%MOD&lt;&lt;'\n';</comment>
	<expr_stmt><expr><name><name>rev</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>rev</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>rev</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>rev</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></for>
	<comment type="line">//cout&lt;&lt;(fac[5]*rev[3])%MOD&lt;&lt;'\n';</comment>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr/>)</control><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ans</name><operator>*=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>consec</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
			<while>while<condition>(<expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>consec</name><operator>++</operator></expr><operator>,</operator><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block></while>
			<decl_stmt><decl><type><name>long</name> <name>long</name> <name>int</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>*</operator><literal type="number">2</literal><operator>&lt;=</operator><name>consec</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name>sum</name><operator>=</operator><operator>(</operator><name>sum</name><operator>+</operator><operator>(</operator><operator>(</operator><operator>(</operator><name><name>fac</name><index>[<expr><name>consec</name><operator>-</operator><name>j</name></expr>]</index></name><operator>*</operator><name><name>rev</name><index>[<expr><name>consec</name><operator>-</operator><name>j</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator><operator>*</operator><name><name>rev</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></for>
			<expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><name>sum</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
		}</block></then><else>else <block type="pseudo"><expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>
</unit>
