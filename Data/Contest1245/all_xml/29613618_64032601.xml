<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613618_64032601.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nfr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int i = a;i &gt;= b; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int i = a;i &lt;= b; ++i)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>f</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
   <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro><block>{
      <macro><name>fr</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro><block>{
         <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block>
   }</block>
}</block></function>

<function><type><name>int</name></type> <name>nxtx</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>)</parameter_list><block>{
   <if>if<condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
      <if>if<condition>(<expr><name>y</name><operator>+</operator><name>st</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then>
      <else>else <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></else></if>
   }</block></then> <else>else <block>{
      <if>if<condition>(<expr><name>y</name><operator>-</operator><name>st</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then>
      <else>else <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></else></if>
   }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>nxty</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>)</parameter_list><block>{
   <if>if<condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
      <if>if<condition>(<expr><name>y</name><operator>+</operator><name>st</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">11</literal><operator>-</operator><operator>(</operator><operator>(</operator><name>y</name><operator>+</operator><name>st</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</return></block></then>
      <else>else <block type="pseudo"><return>return <expr><name>y</name><operator>+</operator><name>st</name></expr>;</return></block></else></if>
   }</block></then> <else>else <block>{
      <if>if<condition>(<expr><name>y</name><operator>-</operator><name>st</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal><operator>-</operator><name>y</name><operator>+</operator><name>st</name></expr>;</return></block></then>
      <else>else <block type="pseudo"><return>return <expr><name>y</name><operator>-</operator><name>st</name></expr>;</return></block></else></if>
   }</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
   <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>f</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
   <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro><expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
   <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">7</literal></argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro><block>{
      <macro><name>fr</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro><block>{
         <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name><operator>-</operator><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">6.0</literal></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name><operator>-</operator><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">6.0</literal></expr>;</expr_stmt>
      }</block>
   }</block>
   <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro><block>{
      <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
         <macro><name>fr</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro><block>{
            <macro><name>fr</name><argument_list>(<argument>w</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>f</name><index>[<expr><call><name>nxtx</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><call><name>nxty</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">6.0</literal></expr>;</expr_stmt> 
            <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
         }</block>
      }</block></then> <else>else <block>{
         <macro><name>nfr</name><argument_list>(<argument>j</argument>,<argument><literal type="number">10</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro><block>{
            <macro><name>fr</name><argument_list>(<argument>w</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>f</name><index>[<expr><call><name>nxtx</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><call><name>nxty</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">6.0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
         }</block>
      }</block></else></if>
   }</block>
   <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.10lf\n"</literal></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
   <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
