<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619822_64012814.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repeat</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register LL ______________ = (n); ______________ &gt; 0; --______________)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register LL i = (l), ________r = (r); i &lt;= ________r; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iloop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register LL i = (l), ________r = (r); i &lt; ________r; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rloop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register LL i = (r), ________l = (l); i &gt;= ________l; --i)</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAI_WEI_HAN</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LOG.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>Edge</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>w</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<struct>struct <name>Disjoint_Set_Union</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name><name>father</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>W</name></decl>;</decl_stmt>
	
	<constructor><name>Disjoint_Set_Union</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>W</name><index>[]</index></name></decl></parameter>)</parameter_list><member_init_list>: <call><name>W</name><argument_list>(<argument><expr><name>W</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{ <expr_stmt><expr><call><name>iota</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>father</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>father</name><index>[<expr><name>n</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor>
	
	<function><type><name>int</name></type> <name>get_root</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><name><name>father</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i</name></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then>
		<else>else
			<block type="pseudo"><return>return <expr><name><name>father</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_root</name><argument_list>(<argument><expr><name><name>father</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
	}</block></function>
	
	<function><type><name>bool</name></type> <name>in_same_set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
	<block>{ <return>return <expr><call><name>get_root</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>get_root</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
	
	<function><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>get_root</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>get_root</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>W</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>W</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		
		<expr_stmt><expr><name><name>father</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	}</block></function>
	
	<function><type><name>int</name></type> <name>_min</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
	<block>{ <return>return <expr><name><name>W</name><index>[<expr><call><name>get_root</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return> }</block></function>
	
	<function><type><name>int</name></type> <name>min_</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
	<block>{ <return>return <expr><call><name>get_root</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
</public>}</block>;</struct>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAI_WEI_HAN</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"test.in"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cout</name></cpp:macro> <cpp:value>cerr</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><specifier>constexpr</specifier> <type><name>char</name></type> <name>endl</name> <init>= <expr><literal type="char">'\n'</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name><name>X</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Y</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name><name>W</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>W</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name><name>EW</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>EW</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>E</name></decl>;</decl_stmt>
	<macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
	<macro><name>loop</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
	<if>if<condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{ <expr><name>i</name></expr>, <expr><name>j</name></expr>, <expr><call>(<name>LL</name>)<argument_list>(<argument><expr><name><name>EW</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>EW</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>X</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>Y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> }</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>E</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>Edge</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Edge</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>a</name><operator>.</operator><name>w</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>w</name></name></expr>;</return> }</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>Disjoint_Set_Union</name></type> <name>dsu</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>W</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>ans_edge</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LL</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>e</name> <range>: <expr><name>E</name></expr></range></decl></init>)</control>
	<block type="pseudo"><if>if<condition>(<expr><operator>!</operator> <call><name><name>dsu</name><operator>.</operator><name>in_same_set</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>j</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>dsu</name><operator>.</operator><name>_min</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>dsu</name><operator>.</operator><name>_min</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>j</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>min</name><argument_list>(<argument><expr><call><name><name>dsu</name><operator>.</operator><name>_min</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>dsu</name><operator>.</operator><name>_min</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>j</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>e</name><operator>.</operator><name>w</name></name></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name><name>dsu</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>i</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>.</operator><name>j</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ans_edge</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>e</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
	}</block></then></if></block></for>
	
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ans_point</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name><argument_list>{}</argument_list></decl>;</decl_stmt>
	<macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro>
	<if>if<condition>(<expr><operator>!</operator> <name><name>vis</name><index>[<expr><call><name><name>dsu</name><operator>.</operator><name>get_root</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>vis</name><index>[<expr><call><name><name>dsu</name><operator>.</operator><name>get_root</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name><name>dsu</name><operator>.</operator><name>_min</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ans_point</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>dsu</name><operator>.</operator><name>min_</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <call><name><name>ans_point</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>ans_point</name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <call><name><name>ans_edge</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>e</name> <range>: <expr><name>ans_edge</name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>i</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>j</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for>
}</block></function></unit>
