<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29612723_64009886.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">31</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>eq</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">30</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr> ;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>lb</name><init>=<expr><operator>(</operator><name>l</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>rb</name><init>=<expr><operator>(</operator><name>r</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>u</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name><operator>&lt;</operator><literal type="number">3</literal></expr> ;</condition><incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name><operator>&lt;</operator><literal type="number">3</literal></expr> ;</condition><incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for></block></for>
		<decl_stmt><decl><type><name>bool</name></type> <name>peq</name><init>=<expr><name>eq</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>lb</name><operator>!=</operator><name>rb</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>eq</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr> ;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><literal type="number">2</literal></expr> ;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name>j</name><operator>&amp;</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>u</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name><operator>&lt;</operator><literal type="number">3</literal></expr> ;</condition><incr><expr><name>u</name><operator>++</operator></expr></incr>)</control><block>{
					<for>for<control>(<init><decl><type><name>int</name></type> <name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name><operator>&lt;</operator><literal type="number">3</literal></expr> ;</condition><incr><expr><name>v</name><operator>++</operator></expr></incr>)</control><block>{
						<decl_stmt><decl><type><name>int</name></type> <name>nu</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>nv</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
						<if>if<condition>(<expr><name>eq</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>lb</name><operator>!=</operator><name>j</name> <operator>||</operator> <name>lb</name><operator>!=</operator><name>k</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
						<if>if<condition>(<expr><name>eq</name></expr>)</condition><then><block>{
							<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt><continue>continue;</continue>
						}</block></then></if>
						<decl_stmt><decl><type><name>bool</name></type> <name>umi</name><init>=<expr><name>peq</name> <operator>||</operator> <name>u</name><operator>==</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>bool</name></type> <name>umx</name><init>=<expr><name>peq</name> <operator>||</operator> <name>u</name><operator>==</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>bool</name></type> <name>vmi</name><init>=<expr><name>peq</name> <operator>||</operator> <name>v</name><operator>==</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>bool</name></type> <name>vmx</name><init>=<expr><name>peq</name> <operator>||</operator> <name>v</name><operator>==</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
						<if>if<condition>(<expr><name>umi</name> <operator>&amp;&amp;</operator> <name>lb</name><operator>&gt;</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
						<if>if<condition>(<expr><name>umx</name> <operator>&amp;&amp;</operator> <name>rb</name><operator>&lt;</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
						<if>if<condition>(<expr><name>vmi</name> <operator>&amp;&amp;</operator> <name>lb</name><operator>&gt;</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
						<if>if<condition>(<expr><name>vmx</name> <operator>&amp;&amp;</operator> <name>rb</name><operator>&lt;</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
						<if>if<condition>(<expr><name>umi</name> <operator>&amp;&amp;</operator> <name>lb</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nu</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
						<if>if<condition>(<expr><name>umx</name> <operator>&amp;&amp;</operator> <name>rb</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nu</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if> 
						<if>if<condition>(<expr><name>vmi</name> <operator>&amp;&amp;</operator> <name>lb</name><operator>==</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nv</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
						<if>if<condition>(<expr><name>vmx</name> <operator>&amp;&amp;</operator> <name>rb</name><operator>==</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nv</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>nu</name></expr>]</index><index>[<expr><name>nv</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
					}</block></for>
				}</block></for>
			}</block></for>
		}</block></for>
		<comment type="line">//for(int u=0; u&lt;3 ;u++) for(int v=0; v&lt;3 ;v++) cout &lt;&lt; dp[i][u][v] &lt;&lt; ' ';</comment>
		<comment type="line">//cout &lt;&lt; endl;</comment>
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>u</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>u</name><operator>&lt;</operator><literal type="number">3</literal></expr> ;</condition><incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>v</name><operator>&lt;</operator><literal type="number">3</literal></expr> ;</condition><incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>sum</name><operator>+=</operator><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>sum</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function></unit>
