<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617004_64020972.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>err</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{}</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_debug.cpp"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>lim</name> <init>= <type><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <for>for<control>(<init><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>x</name> <range>: <expr><name>a</name></expr></range></decl></init>)</control> <block>{ <expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt> }</block></for> <return>return <expr><name>is</name></expr>;</return> }</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>h</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>e</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>step</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>steps</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>orig_i</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>orig_j</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>j</name> <operator>+=</operator> <name>steps</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>N</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name> <operator>=</operator> <name>N</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>j</name> <operator>-</operator> <name>N</name><operator>)</operator></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>j</name> <operator>-=</operator> <name>steps</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>j</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>j</name> <operator>=</operator> <operator>-</operator><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></else></if>
    <if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><block>{<expr><name>orig_i</name></expr>, <expr><name>orig_j</name></expr>}</block></expr>;</return>
    }</block></then> <elseif>else <if>if<condition>(<expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr>;</return>
    }</block></then></if></elseif> <else>else <block>{
        <return>return <expr><ternary><condition><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>e</name><index>[<expr><name>i</name> <operator>-</operator> <name><name>h</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr> ?</condition><then> <expr><name>pair</name><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr> </then><else>: <expr><name>pair</name><block>{<expr><name>i</name> <operator>-</operator> <name><name>h</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>, <expr><name>j</name></expr>}</block></expr></else></ternary></expr>;</return>
    }</block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>h</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>increasing</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>decreasing</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>iota</name><argument_list>(<argument><expr><call><name><name>increasing</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>increasing</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>iota</name><argument_list>(<argument><expr><call><name><name>decreasing</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>decreasing</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>decreasing</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>decreasing</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// for(int i = 0; i &lt; N; i++) {</comment>
    <comment type="line">//     for(int j = 0; j &lt; N; j++) {</comment>
    <comment type="line">//         for(int steps = 1; steps &lt;= 6; steps++) {</comment>
    <comment type="line">//             err(i, j, steps, step(i,j,steps));</comment>
    <comment type="line">//         }</comment>
    <comment type="line">//     }</comment>
    <comment type="line">// }</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <range>: <expr><ternary><condition><expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>decreasing</name></expr> </then><else>: <expr><name>increasing</name></expr></else></ternary></expr></range></decl></init>)</control> <block>{
            <if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>and</operator> <name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <decl_stmt><decl><type><name>double</name></type> <name>multiplier</name> <init>= <expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>steps</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>steps</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>steps</name><operator>++</operator></expr></incr>)</control> <block>{
                    <expr_stmt><expr><name>auto</name> <index>[<expr><name>ii</name></expr><operator>,</operator> <name>jj</name>]</index> <operator>=</operator> <call><name>step</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if<condition>(<expr><name>ii</name> <operator>==</operator> <name>i</name> <operator>and</operator> <name>jj</name> <operator>==</operator> <name>j</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal> <operator>/</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>multiplier</name> <operator>-=</operator> <literal type="number">1</literal> <operator>/</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>e</name><index>[<expr><name>ii</name></expr>]</index><index>[<expr><name>jj</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></for>
                <expr_stmt><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>/=</operator> <name>multiplier</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>e</name><index>[<expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
