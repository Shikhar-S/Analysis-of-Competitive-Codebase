<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615000_64010133.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>100010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>

<function><name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tc</name></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>tc</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>u</name> <operator>&gt;&gt;</operator> <name>v</name> <operator>&gt;&gt;</operator> <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>( <init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>a</name></expr></range></decl></init> )</control><block>{
            <if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name><name>mp</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then><block>{ <expr_stmt><expr><name><name>ans</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt> }</block></then></if>
            <if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name><name>mp</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then><block>{ <expr_stmt><expr><name><name>ans</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt> }</block></then></if>
            <if>if<condition>( <expr><name>i</name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name><name>mp</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then><block>{ <expr_stmt><expr><name><name>ans</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt> }</block></then></if>
            <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>( <expr><name>res</name> <operator>&lt;</operator> <operator>(</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr> )</condition><then><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>( <expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><then><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>
            <if>if<condition>( <expr><name><name>mp</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>
            <if>if<condition>( <expr><name><name>mp</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>
            <if>if<condition>( <expr><name><name>mp</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mp</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
