<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29571534_64031219.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><name>2</name><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>double</name></type> <name>D</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">13</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>nx</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>D</name></type> <name><name>f</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>D</name></type> <name>dfs</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>sx</name> <init>= <expr><name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>sy</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>What</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>What</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>What</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name>sx</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>sy</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">7</literal> <operator>-</operator> <name>What</name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><name><name>nx</name><index>[<expr><name>sx</name></expr>]</index><index>[<expr><name>sy</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>, <decl><type ref="prev"/><name>q</name> <init>= <expr><name><name>nx</name><index>[<expr><name>sx</name></expr>]</index><index>[<expr><name>sy</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>sx</name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name>sy</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>sx</name></expr>]</index><index>[<expr><name>sy</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <call><name>min</name> <argument_list>(<argument><expr><call><name>dfs</name> <argument_list>(<argument><expr><name>sx</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>sx</name></expr>]</index><index>[<expr><name>sy</name></expr>]</index></name></expr></argument>, <argument><expr><name>sy</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>dfs</name> <argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <call><name>dfs</name> <argument_list>(<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></for>
	<return>return <expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">6.0</literal> <operator>-</operator> <name>k</name><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">100</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>nx</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MP</name> <argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name><name>nx</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MP</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			}</block></then>
			<else>else <block>{
				<if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>nx</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MP</name> <argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name><name>nx</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>MP</name> <argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			}</block></else></if>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%.10lf\n"</literal></expr></argument>, <argument><expr><call><name>dfs</name> <argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
