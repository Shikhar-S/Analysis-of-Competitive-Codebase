<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29598028_64011209.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{ 
     <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
     <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
     <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> 
          <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr> ;</expr_stmt>
          <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl> ;</decl_stmt>
          <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>a1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>c1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <for>for <control>( <init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>s</name></expr></range></decl></init> )</control> <block>{ 
               <if>if <condition>( <expr><name>i</name> <operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a1</name><operator>++</operator></expr> ;</expr_stmt></block></then>
               <elseif>else <if>if <condition>( <expr><name>i</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>++</operator></expr> ;</expr_stmt></block></then></if></elseif>
               <else>else <block type="pseudo"><expr_stmt><expr><name>c1</name><operator>++</operator></expr> ;</expr_stmt></block></else></if>
          }</block></for>
          <decl_stmt><decl><type><name>int</name></type> <name>optA</name> <init>= <expr><call><name>min</name> <argument_list>( <argument><expr><name>a</name></expr></argument>, <argument><expr><name>c1</name></expr></argument> )</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>optB</name> <init>=<expr><call><name>min</name> <argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>optC</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>b1</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
          <if>if <condition>( <expr><name>optA</name><operator>+</operator><name>optB</name><operator>+</operator><name>optC</name> <operator>&gt;=</operator> <call><name>ceil</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
               <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
               <for>for <control>( <init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>s</name></expr></range></decl></init> )</control> <block>{ 
                    <if>if <condition>( <expr><name>i</name> <operator>==</operator> <literal type="char">'R'</literal></expr> )</condition><then> <block>{ 
                         <if>if <condition>( <expr><name>b</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"P"</literal></expr><operator>,</operator> <expr><name>b</name><operator>--</operator></expr><operator>,</operator> <expr><name>optB</name><operator>--</operator></expr>;</expr_stmt></block></then>
                         <elseif>else <if>if <condition>( <expr><name>c</name> <operator>&gt;</operator> <name>optC</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr><operator>,</operator> <expr><name>c</name><operator>--</operator></expr> ;</expr_stmt></block></then></if></elseif>
                         <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal></expr><operator>,</operator><expr><name>a</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
                    }</block></then></if>
                    <if>if <condition>( <expr><name>i</name> <operator>==</operator> <literal type="char">'P'</literal></expr> )</condition><then> <block>{ 
                         <if>if <condition>( <expr><name>c</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr><operator>,</operator> <expr><name>c</name><operator>--</operator></expr><operator>,</operator> <expr><name>optC</name><operator>--</operator></expr>;</expr_stmt></block></then>
                         <elseif>else <if>if <condition>( <expr><name>b</name> <operator>&gt;</operator> <name>optB</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"P"</literal></expr><operator>,</operator> <expr><name>b</name><operator>--</operator></expr> ;</expr_stmt></block></then></if></elseif>
                         <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal></expr><operator>,</operator><expr><name>a</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
                    }</block></then></if><if>if <condition>( <expr><name>i</name> <operator>==</operator> <literal type="char">'S'</literal></expr> )</condition><then> <block>{ 
                         <if>if <condition>( <expr><name>a</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal></expr><operator>,</operator> <expr><name>a</name><operator>--</operator></expr><operator>,</operator> <expr><name>optA</name><operator>--</operator></expr>;</expr_stmt></block></then>
                         <elseif>else <if>if <condition>( <expr><name>b</name> <operator>&gt;</operator> <name>optB</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"P"</literal></expr><operator>,</operator> <expr><name>b</name><operator>--</operator></expr> ;</expr_stmt></block></then></if></elseif>
                         <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr><operator>,</operator><expr><name>c</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
                    }</block></then></if>
               }</block></for><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
          }</block></then>
          <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
     }</block></while>
}</block></function></unit>
