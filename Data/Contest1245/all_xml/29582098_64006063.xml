<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29582098_64006063.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"2"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pr</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mxn</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mxm</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pii</name> <init>= <expr><literal type="number">3.1415926535898</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mpr</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then> <else>else <block type="pseudo"><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name><operator>%</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>}</block></function>
<function><type><name>int</name></type> <name>qpow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>b</name></expr>)</condition><block>{ <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name>a</name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name><operator>%</operator><name>mod</name></expr>;</expr_stmt> }</block></while> <return>return <expr><name>ans</name></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>lowbit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>x</name><operator>&amp;</operator><operator>(</operator><operator>-</operator><name>x</name><operator>)</operator><operator>)</operator></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>qmul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>b</name></expr>)</condition><block>{ <if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>+</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>=</operator><operator>(</operator><name>a</name><operator>+</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt> }</block></while> <return>return <expr><name>ans</name></expr>;</return> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FAST_IO</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>

<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

<function><type><name>signed</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FAST_IO</name></type>
    <name>cin</name>&gt;&gt;<name>t</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tar</name> <init>= <expr><ternary><condition><expr><name>n</name><operator>%</operator><literal type="number">2</literal></expr>?</condition><then><expr><name>n</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr></then><else>:<expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>aa</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>bb</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>aa</name><operator>++</operator></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>bb</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><name>cc</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>cc</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>aa</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">//        cout&lt;&lt;ans&lt;&lt;endl;</comment>
<comment type="line">//        cout&lt;&lt;tar&lt;&lt;endl;</comment>
        <if>if<condition>(<expr><name>ans</name><operator>&gt;=</operator><name>tar</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>res1</name> <init>= <expr><name>a</name><operator>-</operator><name>cc</name></expr></init></decl>,<decl><type ref="prev"/><name>res2</name><init>=<expr><name>b</name><operator>-</operator><name>aa</name></expr></init></decl>,<decl><type ref="prev"/><name>res3</name><init>=<expr><name>c</name><operator>-</operator><name>bb</name></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
<comment type="line">//                                printf("a=%lld,b=%lld,c=%lld,res1=%lld,res2=%lld,res3=%lld\n",a,b,c,res1,res2,res3);</comment>

                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block>{
                    <if>if<condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"P"</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
<comment type="line">//                        res2--;</comment>
                    }</block></then>
                    <else>else<block>{
                        <if>if<condition>(<expr><name>res1</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"R"</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>res1</name><operator>--</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                        }</block></then>
                        <elseif>else <if>if<condition>(<expr><name>res3</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"S"</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>res3</name><operator>--</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                        }</block></then></if></elseif></if>
                    }</block></else></if>
                }</block></then>
                <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{
                    <if>if<condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"S"</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
<comment type="line">//                        res3--;</comment>
                    }</block></then>
                    <else>else<block>{
                        <if>if<condition>(<expr><name>res1</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"R"</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>res1</name><operator>--</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                        }</block></then>
                        <elseif>else <if>if<condition>(<expr><name>res2</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"P"</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>res2</name><operator>--</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                        }</block></then></if></elseif></if>
                    }</block></else></if>
                }</block></then></if></elseif>
                <else>else<block>{
                    <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"R"</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
<comment type="line">//                        res1--;</comment>
                    }</block></then>
                    <else>else<block>{
                        <if>if<condition>(<expr><name>res2</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"P"</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>res2</name><operator>--</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                        }</block></then>
                        <elseif>else <if>if<condition>(<expr><name>res3</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"S"</literal></expr>;</expr_stmt>
                            <expr_stmt><expr><name>res3</name><operator>--</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                        }</block></then></if></elseif></if>
                    }</block></else></if>
                }</block></else></if>
            }</block></for>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
}</block></function>
</unit>
