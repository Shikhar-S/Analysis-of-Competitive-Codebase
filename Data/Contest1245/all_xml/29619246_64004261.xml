<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619246_64004261.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1E9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><cast type="static">static_cast <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></cast> <operator>*</operator> <name>b</name> <operator>%</operator> <name>mod</name></expr>;</return> }</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1E5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fac</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Ifac</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>C</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>mul</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>mul</name><argument_list>(<argument><expr><name><name>Ifac</name><index>[<expr><name>m</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>Ifac</name><index>[<expr><name>n</name> <operator>-</operator> <name>m</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</condition><incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>C</name><argument_list>(<argument><expr><name>n</name> <operator>-</operator> <name>i</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>mod</name></expr><operator>,</operator><expr><name>res</name> <operator>+=</operator> <name>res</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal> <operator>&amp;</operator> <name>mod</name></expr>;</expr_stmt></block></for>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><operator>*</operator> <name>fac</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name><name>fac</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>R</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>B</name> <init>= <expr><name><name>fac</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>E</name> <init>= <expr><name>mod</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>E</name></expr>;</condition><incr><expr><name>E</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator><expr><name>B</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>B</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name>E</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><name><name>Ifac</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>R</name></expr>;</expr_stmt> <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><operator>--</operator> <name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>Ifac</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name><name>Ifac</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>s</name><operator>.</operator><name>npos</name></name> <operator>||</operator> <call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>s</name><operator>.</operator><name>npos</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"0\n"</literal></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
		<block>{
			<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><call><name>calc</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>ch</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><operator>++</operator> <name>cnt</name></expr>;</expr_stmt>
	}</block></for>
	<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name>ch</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><call><name>calc</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function></unit>
