<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29568333_64028651.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>, <decl><type ref="prev"/><name><name>digx</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>digy</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>dp</name><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>LL</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pre0a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lima</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lim2a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pre0b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lim2b</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>!</operator><name>pre0a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>pre0b</name></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>pre0a</name></expr>]</index><index>[<expr><name>lima</name></expr>]</index><index>[<expr><name>lim2a</name></expr>]</index><index>[<expr><name>pre0b</name></expr>]</index><index>[<expr><name>limb</name></expr>]</index><index>[<expr><name>lim2b</name></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>pre0a</name></expr>]</index><index>[<expr><name>lima</name></expr>]</index><index>[<expr><name>lim2a</name></expr>]</index><index>[<expr><name>pre0b</name></expr>]</index><index>[<expr><name>limb</name></expr>]</index><index>[<expr><name>lim2b</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>pre0a</name></expr>]</index><index>[<expr><name>lima</name></expr>]</index><index>[<expr><name>lim2a</name></expr>]</index><index>[<expr><name>pre0b</name></expr>]</index><index>[<expr><name>limb</name></expr>]</index><index>[<expr><name>lim2b</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>v</name> <init>= <expr><name><name>dp</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>pre0a</name></expr>]</index><index>[<expr><name>lima</name></expr>]</index><index>[<expr><name>lim2a</name></expr>]</index><index>[<expr><name>pre0b</name></expr>]</index><index>[<expr><name>limb</name></expr>]</index><index>[<expr><name>lim2b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>upa</name> <init>= <expr><ternary><condition><expr><name>lima</name></expr> ?</condition><then> <expr><name><name>digy</name><index>[<expr><name>p</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>upb</name> <init>= <expr><ternary><condition><expr><name>limb</name></expr> ?</condition><then> <expr><name><name>digy</name><index>[<expr><name>p</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>downa</name> <init>= <expr><ternary><condition><expr><name>lim2a</name></expr> ?</condition><then> <expr><name><name>digx</name><index>[<expr><name>p</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>downb</name> <init>= <expr><ternary><condition><expr><name>lim2b</name></expr> ?</condition><then> <expr><name><name>digx</name><index>[<expr><name>p</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt> 
	<for>for <control>(<init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>downa</name></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;=</operator> <name>upa</name></expr>;</condition> <incr><expr><operator>++</operator><name>a</name></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>downb</name></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;=</operator> <name>upb</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><operator>(</operator><name>a</name> <operator>&amp;</operator> <name>b</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>v</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pre0a</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>lima</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>==</operator> <name>upa</name></expr></argument>, <argument><expr><name>lim2a</name> <operator>&amp;&amp;</operator> <name>a</name> <operator>==</operator> <name>downa</name></expr></argument>, <argument><expr><name>pre0b</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>limb</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <name>upb</name></expr></argument>, <argument><expr><name>lim2b</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>==</operator> <name>downb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for>
	<return>return <expr><name>v</name></expr>;</return>
}</block></function>

<comment type="line">//1 ~ x</comment>
<function><type><name>LL</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>digx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>digx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>digy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>digy</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>x</name></expr>)</condition> <block>{
		<expr_stmt><expr><name><name>digx</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>y</name></expr>)</condition> <block>{
		<expr_stmt><expr><name><name>digy</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"text.in"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>LL</name></type> <name>ans</name> <init>= <expr><literal type="number">0ll</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><operator>!</operator><name>r</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<if>if <condition>(<expr><operator>!</operator><name>l</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">2ll</literal> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><operator>++</operator><name>l</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
