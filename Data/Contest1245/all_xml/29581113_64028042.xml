<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29581113_64028042.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>INF</name> <init>= <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>MOD</name> <init>= <expr><literal type="number">1</literal><literal type="char">'000'</literal><literal type="number">000</literal><literal type="char">'</literal></expr></init></decl></decl_stmt>007; 

string yn(bool f){return f?"Yes":"No";}
string YN(bool f){return f?"YES":"NO";}

#define x first
#define y second
#define MAX_E 5100000
#define MAX_V 3000

vector&lt;pair&lt;int,int&gt;&gt; ans1;
vector&lt;int&gt; ans2;

struct edge{int u, v, cost;};

bool comp(const edge&amp; e1, const edge&amp; e2){
	return e1.cost &lt; e2.cost;
}
int V, E;
int n;
edge es[MAX_E];
int par[MAX_V];
int _rank[MAX_V];

void init(int x){
	for(int i = 0; i &lt; x; i++){
		par[i] = i;
		_rank[i] = 0;
	}
}

int find(int x){
	return par[x] == x ? x : par[x] = find(par[x]);
}

void unite(int x, int y){
	x = find(x);
	y = find(y);
	
	if(x == y) return;
	
	if(_rank[x] &lt; _rank[y]){
		par[x] = y;
	} else{
		par[y] = x;
		if(_rank[x] == _rank[y]) _rank[x]++;
	}
}

bool same(int x, int y){
	return find(x) == find(y);
}

int kruskal(){
	sort(es, es + E, comp);
	init(V);
	int res = 0, count = 0;
	// for(int i = 0; i &lt; E &amp;&amp; count != V-1; i++){
	for(int i = 0; i &lt; E; i++){
		edge e = es[i];
		if(!same(e.u, e.v)){
			if(e.u != n &amp;&amp; e.v != n){
				if(e.u &lt;= e.v)ans1.push_back(make_pair(e.u, e.v));
				else ans1.push_back(make_pair(e.v, e.u));
			} else {
				if(e.v != n) ans2.push_back(e.v);
				else ans2.push_back(e.u);
			}
			unite(e.u,e.v);
			res += e.cost;
			count++;
		}
	}
	return res;
}

signed main(){
	cin.tie(nullptr);
	ios::sync_with_stdio(false);
	cout&lt;&lt;fixed&lt;&lt;setprecision(10);
	
	int count = 0;
	vector&lt;pair&lt;int,int&gt;&gt; co;
	vector&lt;int&gt; cost, k;
	
	cin&gt;&gt;n;
	
	V = n+1;
	
	co.resize(n+1);
	cost.resize(n+1);
	k.resize(n+1);
	
	for(int i = 0; i &lt; n; i++){
		cin&gt;&gt;co[i].x&gt;&gt;co[i].y;
	}
	
	for(int i = 0; i &lt; n; i++){
		cin&gt;&gt;cost[i];
	}
	
	for(int i = 0; i &lt; n; i++){
		cin&gt;&gt;k[i];
	}
	
	for(int i = 0; i &lt; n; i++){
		for(int j = i+1; j &lt; n; j++){
			int c = (abs(co[i].x - co[j].x) + abs(co[i].y - co[j].y)) * (k[j] + k[i]);
			es[count++] = {i, j, c};
		}
	}
	
	for(int i = 0; i &lt; n; i++){
		es[count++] = {n, i, cost[i]};
	}
	
	E = count;
	
	cout&lt;&lt;kruskal()&lt;&lt;endl;
	
	sort(ans1.begin(), ans1.end());
	ans1.erase(unique(ans1.begin(), ans1.end()), ans1.end());
	
	sort(ans2.begin(), ans2.end());
	ans2.erase(unique(ans2.begin(), ans2.end()), ans2.end());
	
	cout&lt;&lt;ans2.size()&lt;&lt;endl;
	
	for(int i = 0; i &lt; ans2.size(); i++){
		if(i) cout&lt;&lt;" ";
		cout&lt;&lt;ans2[i]+1;
	}
	cout&lt;&lt;endl;
	
	cout&lt;&lt;ans1.size()&lt;&lt;endl;
	
	for(int i = 0; i &lt; ans1.size(); i++){
		cout&lt;&lt;ans1[i].first+1&lt;&lt;" "&lt;&lt;ans1[i].second+1&lt;&lt;endl;
	}
	return 0;
}</unit>
