<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613216_64001465.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<namespace>namespace <name>CF</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>S</name><index>[<expr><name>MAXN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>T</name><index>[<expr><name>MAXN</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	
	<function><type><name>void</name></type> <name>work</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>kase</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>kase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>kase</name><operator>--</operator></expr>)</condition>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>cr</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>cp</name><operator>++</operator></expr>;</expr_stmt></block></then>
				<elseif>else <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>cs</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name>cr</name><operator>++</operator></expr>;</expr_stmt></block></else></if></block></for>
			<if>if <condition>(<expr><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>cr</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>cp</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cs</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>p</name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block></then>
					<elseif>else <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>s</name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name>s</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
					<elseif>else <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>r</name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
					<else>else
						<block type="pseudo"><expr_stmt><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				}</block></for>
				<expr_stmt><expr><name><name>T</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
					<block>{
						<if>if <condition>(<expr><name>p</name></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name>p</name><operator>--</operator></expr>;</expr_stmt></block></then>
						<elseif>else <if>if <condition>(<expr><name>s</name></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name>s</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
						<elseif>else <if>if <condition>(<expr><name>r</name></expr>)</condition><then>
							<block type="pseudo"><expr_stmt><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name>r</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif></if>
					}</block></then></if></block></for>
				<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else
				<block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></while>
	}</block></function>
}</block></namespace>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>CF</name><operator>::</operator><name>work</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
