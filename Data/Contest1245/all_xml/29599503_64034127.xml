<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29599503_64034127.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>II</name></cpp:macro> <cpp:value>pair &lt; int , int &gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Hmax</name></cpp:macro> <cpp:value>priority_queue &lt; int &gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Hmin</name></cpp:macro> <cpp:value>priority_queue &lt; int , vector &lt; int &gt; , greater &lt; int &gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IImax</name></cpp:macro> <cpp:value>priority_queue &lt; II &gt;</cpp:value></cpp:define>  
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IImin</name></cpp:macro> <cpp:value>priority_queue &lt; II , vector &lt; II &gt; , greater &lt; II &gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter> , <parameter><type><name>a</name></type></parameter> , <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a ; i &lt;= b ; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOD</name><parameter_list>(<parameter><type><name>i</name></type></parameter> , <parameter><type><name>a</name></type></parameter> , <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a ; i &gt;= b ; --i)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>bitset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">31</literal></expr></argument> &gt;</argument_list></name></type> <name>B1</name></decl> , <decl><type ref="prev"/><name>B2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl> , <decl><type ref="prev"/><name>r</name></decl> , <decl><type ref="prev"/><name>Test</name></decl> , <decl><type ref="prev"/><name><name>dp</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>vs</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>f1</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>f2</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>Input</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>Get_Dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>isLess1</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>isLess2</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>isVal1</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>isVal2</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>foo</name> <init>= <expr><name><name>dp</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>isLess1</name></expr>]</index><index>[<expr><name>isLess2</name></expr>]</index><index>[<expr><name>isVal1</name></expr>]</index><index>[<expr><name>isVal2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>vis</name> <init>= <expr><name><name>vs</name><index>[<expr><name>id</name></expr>]</index><index>[<expr><name>isLess1</name></expr>]</index><index>[<expr><name>isLess2</name></expr>]</index><index>[<expr><name>isVal1</name></expr>]</index><index>[<expr><name>isVal2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>vis</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>foo</name></expr>;</return></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>vis</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	<if>if<condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>foo</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></then></if>
	<expr_stmt><expr><name>foo</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>End1</name> <init>= <expr><ternary><condition><expr><name>isLess1</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>f1</name><index>[<expr><name>id</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>End2</name> <init>= <expr><ternary><condition><expr><name>isLess2</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name><name>f2</name><index>[<expr><name>id</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>End1</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>End2</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>newLess1</name> <init>= <expr><name>isLess1</name> <operator>||</operator> <name>i</name> <operator>&lt;</operator> <name>End1</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>newLess2</name> <init>= <expr><name>isLess2</name> <operator>||</operator> <name>j</name> <operator>&lt;</operator> <name>End2</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>newVal1</name> <init>= <expr><name>isVal1</name> <operator>||</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>newVal2</name> <init>= <expr><name>isVal2</name> <operator>||</operator> <name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>foo</name> <operator>=</operator> <name>foo</name> <operator>+</operator> <call><name>Get_Dp</name><argument_list>(<argument><expr><name>id</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>newLess1</name></expr></argument> , <argument><expr><name>newLess2</name></expr></argument> , <argument><expr><name>newVal1</name></expr></argument> , <argument><expr><name>newVal2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<return>return <expr><name>foo</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>Get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name>B1</name> <operator>=</operator> <call><name><name>bitset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">31</literal></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>B2</name> <operator>=</operator> <call><name><name>bitset</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">31</literal></expr></argument> &gt;</argument_list></name> <argument_list>(<argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">32</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr> ;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>f1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B1</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>f2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>B2</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vs</name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><sizeof>sizeof <name>vs</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>Get_Dp</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>Solve</name><parameter_list>()</parameter_list>
<block>{
	<if>if<condition>(<expr><name>l</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>Get</name><argument_list>(<argument><expr><name>r</name></expr></argument> , <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>Get</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>Get</name><argument_list>(<argument><expr><name>r</name></expr></argument> , <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>Get</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></then>
	<else>else
	<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>Get</name><argument_list>(<argument><expr><name>r</name></expr></argument> , <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>int</name></cpp:undef>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<if>if<condition>(<expr><call><name>fopen</name><argument_list>(<argument><expr><literal type="string">"trash.inp"</literal></expr></argument> , <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"trash.inp"</literal></expr></argument> , <argument><expr><literal type="string">"r"</literal></expr></argument> , <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr> <operator>,</operator> <expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"trash.out"</literal></expr></argument> , <argument><expr><literal type="string">"w"</literal></expr></argument> , <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>Test</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>Test</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>Input</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function></unit>
