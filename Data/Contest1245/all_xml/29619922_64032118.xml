<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619922_64032118.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENDL</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.rbegin(),a.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLOOR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a-a%b) / b</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEXT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>next_permutation(ALL(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro> <cpp:value>= 100000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>= 1000000000000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RANDOM</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(rand()%a) + 1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_CASES</name></cpp:macro> <cpp:value>20</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lli</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name> <name>int</name></type> <name>ulli</name>;</typedef>

<decl_stmt><decl><type><name>lli</name></type> <name>MAX</name> <init>= <expr><literal type="number">2005</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name><parameter_list>(<parameter><decl><type><name>MAX</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>lit</name><parameter_list>(<parameter><decl><type><name>MAX</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>MAX</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>km</name><parameter_list>(<parameter><decl><type><name>MAX</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>make_set</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>parent</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lit</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>lli</name></type> <name>find_parent</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>u</name><operator>==</operator><name><name>parent</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>u</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name><name>parent</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>find_parent</name><argument_list>(<argument><expr><name><name>parent</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>parent</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>same</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><call><name>find_parent</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>find_parent</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>littest</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><name><name>lit</name><index>[<expr><call><name>find_parent</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>&amp;&amp;</operator><name><name>lit</name><index>[<expr><call><name>find_parent</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>is_lit</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name><name>lit</name><index>[<expr><call><name>find_parent</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>litear</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name><name>lit</name><index>[<expr><call><name>find_parent</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>lli</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>lli</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>find_parent</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_parent</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>parent</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lit</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>lit</name><index>[<expr><name>v</name></expr>]</index></name><operator>||</operator><name><name>lit</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lit</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>lit</name><index>[<expr><name>v</name></expr>]</index></name><operator>||</operator><name><name>lit</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<function><type><name>lli</name></type> <name>cost</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>w</name> <init>= <expr><block>{<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>u</name><operator>.</operator><name>F</name></name><operator>-</operator><name><name>v</name><operator>.</operator><name>F</name></name></expr></argument>)</argument_list></call></expr>,<macro><name>abs</name><argument_list>(<argument>u.S-v.S</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>lli</name></type> <name>ans</name> <init>= <expr><operator>(</operator><name><name>w</name><operator>.</operator><name>F</name></name><operator>+</operator><name><name>w</name><operator>.</operator><name>S</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>lli</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>coord</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>make_set</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>coord</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name><operator>&gt;&gt;</operator><name><name>coord</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>power</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>\
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>km</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>kruskal</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name><name>kruskal</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><block>{<expr><name><name>power</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><block>{<expr><name>i</name></expr>,<expr><name>i</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>kruskal</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><block>{<expr><call><name>cost</name><argument_list>(<argument><expr><name><name>coord</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>coord</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name><name>km</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>km</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>,<expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>self</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>nself</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>deb</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>ALL</name><argument_list>(<argument><expr><name>kruskal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>lli</name></type> <name>total</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>kruskal</name></expr></range></decl></init>)</control>
    <block>{
        <decl_stmt><decl><type><name>lli</name></type> <name>u</name> <init>= <expr><name><name>it</name><operator>.</operator><name>S</name><operator>.</operator><name>F</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>lli</name></type> <name>v</name> <init>= <expr><name><name>it</name><operator>.</operator><name>S</name><operator>.</operator><name>S</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>lli</name></type> <name>c</name> <init>= <expr><name><name>it</name><operator>.</operator><name>F</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>u</name><operator>==</operator><name>v</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><operator>!</operator><call><name>is_lit</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>litear</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>self</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if<condition>(<expr><call><name>same</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>littest</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>unite</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>nself</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><block>{<expr><name>u</name></expr>,<expr><name>v</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>deb</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>total</name><operator>&lt;&lt;</operator><name>ENDL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>self</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>ENDL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>self</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>self</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>self</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ENDL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>nself</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>ENDL</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>nself</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>nself</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>nself</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name><operator>&lt;&lt;</operator><name>ENDL</name></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>








</unit>
