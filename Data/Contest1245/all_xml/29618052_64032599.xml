<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618052_64032599.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a; i &lt;= b; i++)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sz</name> <init>= <expr><literal type="number">4002005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>p</name><index>[<expr><name>sz</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>rk</name><index>[<expr><name>sz</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>dem</name></decl>,<decl><type ref="prev"/><name>d1</name></decl>,<decl><type ref="prev"/><name>d2</name></decl>,<decl><type ref="prev"/><name>res</name></decl>,<decl><type ref="prev"/><name><name>w</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name><name>a</name><index>[<expr><name>sz</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name><name>ans1</name><index>[<expr><name>sz</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>luu</name><index>[<expr><name>sz</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>FI</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>v</name><init>=<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>v</name><operator>!=</operator><name>u</name></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>u</name><operator>=</operator><name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name><operator>=</operator><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>u</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>Un</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name><init>=<expr><call><name>FI</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>y</name><init>=<expr><call><name>FI</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>x</name><operator>==</operator><name>y</name></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then>
    <else>else
    <block>{
        <if>if<condition>(<expr><name><name>rk</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;</operator><name><name>rk</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name><name>rk</name><index>[<expr><name>x</name></expr>]</index></name><operator>&lt;</operator><name><name>rk</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name><name>rk</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name><name>rk</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>rk</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
            <return>return ;</return>
        }</block></then></if>
    }</block></else></if>
}</block></function>
<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>.</operator><name>first</name><operator>=</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
        }</block>
    <for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>.</operator><name>first</name><operator>=</operator><name><name>w</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>a</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n*n+n</argument>)</argument_list></macro>
        <if>if<condition>(<expr><call><name>FI</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call><operator>!=</operator><call><name>FI</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>Un</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr>,<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name><operator>+=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
        }</block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>ans.size()-<literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
           <block type="pseudo"><expr_stmt><expr><name><name>luu</name><index>[<expr><operator>++</operator><name>d1</name></expr>]</index></name> <operator>=</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>ans1</name><index>[<expr><operator>++</operator><name>d2</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>,<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>}</block></expr>;</expr_stmt></block></else></if>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>d1</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>luu</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>luu</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>d1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>d1</argument>)</argument_list></macro>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>luu</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>d2</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>d2</argument>)</argument_list></macro>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>ans1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
