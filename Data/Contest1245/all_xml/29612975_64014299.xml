<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29612975_64014299.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<struct>struct <name>point</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl> , <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<struct>struct <name>pr_dist</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>dist</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>autreVille</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>nbVilles</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>nbVilles</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>point</name></type> <name><name>villes</name><index>[<expr><name>nbVilles</name></expr>]</index></name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbVilles</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>villes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>villes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name><name>coutMettre</name><index>[<expr><name>nbVilles</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>coutConnecter</name><index>[<expr><name>nbVilles</name></expr>]</index></name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbVilles</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>coutMettre</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbVilles</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>coutConnecter</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>pr_dist</name></type> <name><name>distanceActu</name><index>[<expr><name>nbVilles</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>coutTotal</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbVilles</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>distanceActu</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>distanceActu</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <name><name>coutMettre</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>allumer</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>connecter</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nbVilles</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>distCompo</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>indice</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>iVille</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>iVille</name> <operator>&lt;</operator> <name>nbVilles</name></expr> ;</condition> <incr><expr><name>iVille</name> <operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><name><name>distanceActu</name><index>[<expr><name>iVille</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>distCompo</name> <operator>&gt;</operator> <name><name>distanceActu</name><index>[<expr><name>iVille</name></expr>]</index></name><operator>.</operator><name>dist</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>indice</name> <operator>=</operator> <name>iVille</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>distCompo</name> <operator>=</operator> <name><name>distanceActu</name><index>[<expr><name>iVille</name></expr>]</index></name><operator>.</operator><name>dist</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name>coutTotal</name> <operator>+=</operator> <name>distCompo</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>distanceActu</name><index>[<expr><name>indice</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>distanceActu</name><index>[<expr><name>indice</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>allumer</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>indice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name><name>connecter</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>indice</name></expr> , <expr><name><name>distanceActu</name><index>[<expr><name>indice</name></expr>]</index></name><operator>.</operator><name>autreVille</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>iVille</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>iVille</name> <operator>&lt;</operator> <name>nbVilles</name></expr> ;</condition> <incr><expr><name>iVille</name> <operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><name><name>distanceActu</name><index>[<expr><name>iVille</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
			<block>{
				<continue>continue;</continue>
			}</block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>nouveauCout</name> <init>= <expr><operator>(</operator><name><name>coutConnecter</name><index>[<expr><name>iVille</name></expr>]</index></name> <operator>+</operator> <name><name>coutConnecter</name><index>[<expr><name>indice</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>villes</name><index>[<expr><name>indice</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>villes</name><index>[<expr><name>iVille</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>villes</name><index>[<expr><name>indice</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>villes</name><index>[<expr><name>iVille</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>nouveauCout</name> <operator>&lt;</operator> <name><name>distanceActu</name><index>[<expr><name>iVille</name></expr>]</index></name><operator>.</operator><name>dist</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>distanceActu</name><index>[<expr><name>iVille</name></expr>]</index></name><operator>.</operator><name>dist</name> <operator>=</operator> <name>nouveauCout</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>distanceActu</name><index>[<expr><name>iVille</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>distanceActu</name><index>[<expr><name>iVille</name></expr>]</index></name><operator>.</operator><name>autreVille</name> <operator>=</operator> <name>indice</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>

	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>coutTotal</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>allumer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>allumer</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>allumer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>connecter</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>connecter</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>connecter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>+</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>connecter</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>+</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></for>
}</block></function></unit>
