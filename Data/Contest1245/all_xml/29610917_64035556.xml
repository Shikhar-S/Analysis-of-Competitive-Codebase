<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610917_64035556.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lowbit</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x&amp;-x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mmin</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>min(a,min(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mmax</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>max(a,max(b,c))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#a&lt;&lt;"="&lt;&lt;a&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#a&lt;&lt;"="&lt;&lt;a&lt;&lt;" "&lt;&lt;#b&lt;&lt;"="&lt;&lt;b&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#a&lt;&lt;"="&lt;&lt;a&lt;&lt;" "&lt;&lt;#b&lt;&lt;"="&lt;&lt;b&lt;&lt;" "&lt;&lt;#c&lt;&lt;"="&lt;&lt;c&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>show_time</name></cpp:macro> <cpp:value>cout&lt;&lt;"The run time is:"&lt;&lt;(double)clock()/CLOCKS_PER_SEC&lt;&lt;"s"&lt;&lt;endl;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">3e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>Node</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type>  <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>c</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>Node</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name><name>a</name><operator>.</operator><name>c</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>c</name></name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>find_fa</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>rt</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>f</name><index>[<expr><name>rt</name></expr>]</index></name><operator>==</operator><name>rt</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>rt</name></expr>;</return></block></then></if>
    <return>return <expr><name><name>f</name><index>[<expr><name>rt</name></expr>]</index></name><operator>=</operator><call><name>find_fa</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>rt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument> &gt;</argument_list></name></type> <name>vc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Node</name></expr></argument>&gt;</argument_list></name></type> <name>ans1</name></decl>,<decl><type ref="prev"/><name>ans2</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name><name>vc</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Node</name><block>{<expr><literal type="number">0</literal></expr>,<expr><name>i</name></expr>,<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>dx</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>vc</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>Node</name><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>,<expr><name>dx</name><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>vc</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>vc</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vc</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>fu</name><init>=<expr><call><name>find_fa</name><argument_list>(<argument><expr><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>fv</name><init>=<expr><call><name>find_fa</name><argument_list>(<argument><expr><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>fu</name><operator>==</operator><name>fv</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name>fu</name><operator>!=</operator><name>fv</name></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>ans1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>ans2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            <expr_stmt><expr><name><name>f</name><index>[<expr><name>fu</name></expr>]</index></name><operator>=</operator><name>fv</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>,<argument><expr><call><name><name>ans1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ans1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>ans1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%d\n"</literal></expr></argument>,<argument><expr><call><name><name>ans2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>ans2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>ans2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>,<argument><expr><name><name>ans2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
2*3=6+12+2
*/</comment>
</unit>
