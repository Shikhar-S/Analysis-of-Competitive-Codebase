<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619356_64026801.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl> , <decl><type ref="prev"/><name>l</name></decl> , <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>ans</name></decl> , <decl><type ref="prev"/><name>ss</name></decl>;</decl_stmt>
<struct>struct <name>mmp</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl> , <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mmp</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>div</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>z</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>z</name></expr>,<expr><name>x</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<elseif>else <if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>x</name><operator>&gt;&gt;</operator><name>z</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><name>z</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>div</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>z</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name><operator>&amp;</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>z</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name><operator>&amp;</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>z</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>z</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>z</name></expr>,<expr><name>x</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	<else>else
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>yy</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><name>z</name><operator>)</operator><operator>&lt;&lt;</operator><name>z</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>xx</name> <init>= <expr><name>yy</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>yy</name> <operator>&lt;=</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>div</name><argument_list>(<argument><expr><name>yy</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>z</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <name>xx</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>div</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>xx</name></expr></argument>,<argument><expr><name>z</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl> , <decl><type ref="prev"/><name>j</name></decl> , <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>div</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>,<argument><expr><literal type="number">29</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name><range>: <expr><name>v</name></expr></range></decl></init>)</control>
			<block type="pseudo"><for>for <control>(<init><decl><type><name>auto</name></type> <name>j</name><range>: <expr><name>v</name></expr></range></decl></init>)</control>
			<block>{
				<decl_stmt><decl><type><name>mmp</name></type> <name>x</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>mmp</name></type> <name>y</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>p</name></name> <operator>&gt;</operator> <name><name>y</name><operator>.</operator><name>p</name></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><name>ss</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">29</literal></expr> ;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <name><name>y</name><operator>.</operator><name>p</name></name></expr> ;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
					<block type="pseudo"><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>x</name><operator>.</operator><name>s</name></name><operator>&gt;&gt;</operator><name>k</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>y</name><operator>.</operator><name>s</name></name><operator>&gt;&gt;</operator><name>k</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ss</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if></block></for>
				<if>if <condition>(<expr><operator>!</operator><name>ss</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>y</name><operator>.</operator><name>p</name></name></expr> ;</init> <condition><expr><name>k</name> <operator>&gt;</operator> <name><name>x</name><operator>.</operator><name>p</name></name></expr> ;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
					<block type="pseudo"><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>x</name><operator>.</operator><name>s</name></name><operator>&gt;&gt;</operator><name>k</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ss</name> <operator>=</operator> <name>ss</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if></block></for>
				<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <name><name>x</name><operator>.</operator><name>p</name></name></expr> ;</init> <condition><expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ;</condition> <incr><expr><name>k</name><operator>--</operator></expr></incr>)</control>
					<block type="pseudo"><expr_stmt><expr><name>ss</name> <operator>=</operator> <name>ss</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt></block></for>
				<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>ss</name></expr>;</expr_stmt>
			}</block></for></block></for>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
