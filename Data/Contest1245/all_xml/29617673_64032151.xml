<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617673_64032151.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reg</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>d1</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>d2</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>l</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>d1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>d2</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>reg</name> <name>int</name></type> <name>t</name><init>=<expr><name>l</name></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name><name>d1</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><name>t</name><operator>&amp;</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>t</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>t</name><operator>=</operator><name>r</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name><name>d2</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><name>t</name><operator>&amp;</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>t</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></while>
	<decl_stmt><decl><type><name>reg</name> <name>ll</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>g</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>h</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>flg</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>reg</name> <name>int</name></type> <name>i</name><init>=<expr><name>cnt</name></expr></init></decl>;</init><condition><expr><name>i</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>f</name><operator>*=</operator><literal type="number">3</literal></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>+=</operator><name>g</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>d2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>+=</operator><name>h</name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>d2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>+=</operator><name>flg</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><operator>!</operator><name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>g</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>d2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>g</name><operator>+=</operator><name>flg</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><operator>!</operator><name><name>d2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>h</name><operator>*=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>h</name><operator>+=</operator><name>flg</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>d2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>flg</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<return>return <expr><name>f</name><operator>+</operator><name>g</name><operator>+</operator><name>h</name><operator>+</operator><name>flg</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>reg</name> <name>int</name></type> <name>T</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><specifier>static</specifier> <type><name>int</name></type> <name>L</name></decl>,<decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>L</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><call><name>calc</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>calc</name><argument_list>(<argument><expr><name>L</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal><operator>+</operator><call><name>calc</name><argument_list>(<argument><expr><name>L</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>L</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
