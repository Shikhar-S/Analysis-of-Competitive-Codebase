<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29620048_64021227.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>(long long int)(1e9+7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0; i&lt;(int)(n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reps</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=1; i&lt;=(int)(n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=n-1; i&gt;=0; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPS</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=n; i&gt;0; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>(int)(1123456789)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINF</name></cpp:macro> <cpp:value>(long long int)(112345678901234567)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chmax</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = (((a)&lt;(b)) ? (b) : (a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>chmin</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = (((a)&gt;(b)) ? (b) : (a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">3e5</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>mpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
  <elseif>else <if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<decl_stmt><decl><type><name>ll</name></type> <name>memo</name> <init>= <expr><call><name>mpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><name>memo</name><operator>*</operator><name>memo</name><operator>%</operator><name>MOD</name></expr>;</return>}</block></then></if></elseif>
  <else>else <block type="pseudo"><return>return <expr><call><name>mpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>a</name> <operator>%</operator> <name>MOD</name></expr>;</return></block></else></if>
}</block></function>
<function><type><name>ll</name></type> <name>lpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
  <elseif>else <if>if<condition>(<expr><name>b</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{<decl_stmt><decl><type><name>ll</name></type> <name>memo</name> <init>= <expr><call><name>lpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <return>return <expr><name>memo</name><operator>*</operator><name>memo</name></expr>;</return>}</block></then></if></elseif>
  <else>else <block type="pseudo"><return>return <expr><call><name>lpow</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>a</name></expr>;</return></block></else></if>
}</block></function>
<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then>
  <else>else <block type="pseudo"><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>kaijo_memo</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>kaijo</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><call><name><name>kaijo_memo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>kaijo_memo</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return></block></then></if>
  <if>if<condition>(<expr><call><name><name>kaijo_memo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>kaijo_memo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  <while>while<condition>(<expr><call><name><name>kaijo_memo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>n</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>kaijo_memo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>kaijo_memo</name><index>[<expr><call><name><name>kaijo_memo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <call><name><name>kaijo_memo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>%</operator> <name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
  <return>return <expr><name><name>kaijo_memo</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>gyaku_kaijo_memo</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>gyaku_kaijo</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><call><name><name>gyaku_kaijo_memo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&gt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>gyaku_kaijo_memo</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return></block></then></if>
  <if>if<condition>(<expr><call><name><name>gyaku_kaijo_memo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>gyaku_kaijo_memo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  <while>while<condition>(<expr><call><name><name>gyaku_kaijo_memo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>n</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>gyaku_kaijo_memo</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>gyaku_kaijo_memo</name><index>[<expr><call><name><name>gyaku_kaijo_memo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <call><name>mpow</name><argument_list>(<argument><expr><call><name><name>gyaku_kaijo_memo</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>%</operator> <name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
  <return>return <expr><name><name>gyaku_kaijo_memo</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>nCr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><name>n</name> <operator>==</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if><comment type="line">//0åã®ä¸¸ã¨-1åã®æ£ã¿ãããªæã«æã«å¹ãï¼ä¸å®.</comment>
  <if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <name>r</name> <operator>||</operator> <name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>*=</operator> <call><name>kaijo</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>*=</operator> <call><name>gyaku_kaijo</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>*=</operator> <call><name>gyaku_kaijo</name><argument_list>(<argument><expr><name>n</name><operator>-</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>s.size()</argument>)</argument_list></macro><block>{
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
  }</block>
  <expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'a'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>n</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>u</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>s.size()</argument>)</argument_list></macro><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
      <if>if<condition>(<expr><name>u</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>count</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then><elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name>u</name><operator>++</operator></expr>;</expr_stmt>
      <if>if<condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>count</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if></elseif><else>else<block>{
      <if>if<condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>count</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></then></if>
      <if>if<condition>(<expr><name>u</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>count</name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
    <if>if<condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
      <decl_stmt><decl><type><name>ll</name></type> <name>memo</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <macro><name>reps</name><argument_list>(<argument>t</argument>, <argument>count/<literal type="number">2</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>memo</name> <operator>+=</operator> <call><name>nCr</name><argument_list>(<argument><expr><name>t</name><operator>+</operator><name>count</name><operator>-</operator><name>t</name><operator>*</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>memo</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
      }</block>
      <expr_stmt><expr><name>ans</name> <operator>*=</operator> <name>memo</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
