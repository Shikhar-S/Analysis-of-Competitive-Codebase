<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29614965_64006951.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>

  <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>r</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>rr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>pp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ss</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>len</name><init>=<expr><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>sss</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>sss</name></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>sss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if<condition>(<expr><name><name>sss</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>rr</name><operator>++</operator></expr>;</expr_stmt></block></then>
      <elseif>else <if>if<condition>(<expr><name><name>sss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>pp</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
      <else>else
        <block type="pseudo"><expr_stmt><expr><name>ss</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></for>

    <expr_stmt><expr><name>cnt</name><operator>+=</operator><ternary><condition><expr><operator>(</operator><name>r</name><operator>&gt;=</operator><name>ss</name><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><name>ss</name><operator>)</operator></expr></then><else>:<expr><name>r</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>cnt</name><operator>+=</operator><ternary><condition><expr><operator>(</operator><name>s</name><operator>&gt;=</operator><name>pp</name><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><name>pp</name><operator>)</operator></expr></then><else>:<expr><name>s</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>cnt</name><operator>+=</operator><ternary><condition><expr><operator>(</operator><name>p</name><operator>&gt;=</operator><name>rr</name><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><name>rr</name><operator>)</operator></expr></then><else>:<expr><name>p</name></expr></else></ternary></expr>;</expr_stmt>

    <if>if<condition>(<expr><name>cnt</name><operator>&lt;</operator><name>len</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>ans</name><init>=<expr><name>sss</name></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>sss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if<condition>(<expr><name><name>sss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>r</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
      }</block></then>

      <elseif>else <if>if<condition>(<expr><name><name>sss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>p</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
      }</block></then></if></elseif>

      <elseif>else <if>if<condition>(<expr><name><name>sss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>s</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
      }</block></then></if></elseif>

      <else>else <block>{
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>
      }</block></else></if>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>sss</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition><then> <block>{
        <if>if<condition>(<expr><name>r</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then>

        <elseif>else <if>if<condition>(<expr><name>s</name></expr>)</condition><then> <block>{
          <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if></elseif>

        <else>else <block>{
          <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
        }</block></else></if>
      }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  }</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
