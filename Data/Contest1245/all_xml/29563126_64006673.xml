<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29563126_64006673.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" --&gt; "&lt;&lt;x&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>run</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>now</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>now</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
    <block>{
        <return>return <expr><name><name>dp</name><index>[<expr><name>now</name></expr>]</index></name></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>now</name><operator>==</operator><name>n</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>now</name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><name>n</name></expr>)</condition><then>
    <block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>now</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>now</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>run</name><argument_list>(<argument><expr><name>now</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>now</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>now</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><call><name>run</name><argument_list>(<argument><expr><name>now</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></then></if>
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>now</name></expr>]</index></name><operator>!=</operator><literal type="char">'w'</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>now</name></expr>]</index></name><operator>!=</operator><literal type="char">'m'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>+</operator><call><name>run</name><argument_list>(<argument><expr><name>now</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>M</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name><name>dp</name><index>[<expr><name>now</name></expr>]</index></name><operator>=</operator><name>ans</name></expr>;</return>
}</block></function>
<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>n</name><operator>=</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>run</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
