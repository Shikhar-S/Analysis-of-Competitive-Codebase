<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29614404_64008311.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &lt;= b; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &gt;= b; i--)</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>F</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>dm</name></decl>, <decl><type ref="prev"/><name>dw</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>F</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>F</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>F</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">3</literal></argument>, <argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><name><name>F</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>F</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>F</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>nu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>char</name></type> <name>ch</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control><block>{
        <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>nu</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <name><name>F</name><index>[<expr><name>nn</name></expr>]</index></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>nn</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <name><name>F</name><index>[<expr><name>nu</name></expr>]</index></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else<block>{
            <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>dw</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>dm</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>

            <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <name><name>F</name><index>[<expr><name>nn</name></expr>]</index></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <name><name>F</name><index>[<expr><name>nu</name></expr>]</index></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nn</name> <operator>=</operator> <name>nu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <name><name>F</name><index>[<expr><name>nn</name></expr>]</index></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <name><name>F</name><index>[<expr><name>nu</name></expr>]</index></name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nn</name> <operator>=</operator> <name>nu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>dm</name> <operator>||</operator> <name>dw</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

</unit>
