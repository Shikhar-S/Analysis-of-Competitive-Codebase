<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610064_64016778.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>105</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cho</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>mask</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><name>x</name> <operator>*</operator> <name>MAXN</name> <operator>+</operator> <name>y</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>getxy</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>mask</name> <operator>%</operator> <name>MAXN</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>mask</name> <operator>/</operator> <name>MAXN</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>stk</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <comment type="line">//cout &lt;&lt; s &lt;&lt; endl;</comment>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>pa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>pa</name> <operator>&lt;=</operator> <name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition><incr><expr><operator>++</operator><name>pa</name></expr></incr>)</control><block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>pb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>pb</name> <operator>&lt;=</operator> <name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition><incr><expr><operator>++</operator><name>pb</name></expr></incr>)</control><block>{
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>cho</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                }</block></for>
            }</block></for>
        }</block></for>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>pa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>pa</name> <operator>&lt;=</operator> <name>a</name></expr>;</condition><incr><expr><operator>++</operator><name>pa</name></expr></incr>)</control><block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>pb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>pb</name> <operator>&lt;=</operator> <name>b</name></expr>;</condition><incr><expr><operator>++</operator><name>pb</name></expr></incr>)</control><block>{
                    <decl_stmt><decl><type><name>int</name></type> <name>pc</name> <init>= <expr><name>n</name> <operator>-</operator> <name>i</name> <operator>-</operator> <name>pa</name> <operator>-</operator> <name>pb</name></expr></init></decl>;</decl_stmt>
                    <if>if<condition>(<expr><name><name>pc</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>pc</name></expr></argument> &gt;</argument_list></name> <name>c</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                    <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>cho</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>=</operator> <call><name>mask</name><argument_list>(<argument><expr><name>pa</name></expr></argument>,<argument><expr><name>pb</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>pa</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>pa</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal><operator>)</operator> <operator>&gt;</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>pa</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>cho</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>=</operator> <call><name>mask</name><argument_list>(<argument><expr><name>pa</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                    <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal><operator>)</operator> <operator>&gt;</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal><operator>)</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>cho</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name> <operator>=</operator> <call><name>mask</name><argument_list>(<argument><expr><name>pa</name></expr></argument>,<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></for>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>li</name> <init>= <expr><name>n</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name>li</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>pa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>pb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>int</name></type> <name>q</name> <init>= <expr><name><name>cho</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pa</name></expr>]</index><index>[<expr><name>pb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>auto</name></type> <name>v</name> <init>= <expr><call><name>getxy</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name><name>v</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name>pa</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>.</operator><name>second</name></name> <operator>==</operator> <name>pb</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>stk</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                }</block></then>
                <elseif>else <if>if<condition>(<expr><name><name>v</name><operator>.</operator><name>first</name></name> <operator>==</operator> <name>pa</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>stk</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                }</block></then></if></elseif>
                <else>else<block>{
                    <expr_stmt><expr><name><name>stk</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                }</block></else></if>
                <expr_stmt><expr><name>pa</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>first</name></name></expr><operator>,</operator><expr><name>pb</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name><name>stk</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>stk</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
}</block></function></unit>
