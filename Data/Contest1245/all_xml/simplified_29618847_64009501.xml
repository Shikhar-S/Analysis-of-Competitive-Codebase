include directive file using namespace name ifdef directive name define directive macro name value else directive define directive macro name value endif directive using name init type name name decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type name name name index expr name decl_stmt decl type name name name index expr name function type name name parameter_list block decl_stmt decl type name name argument_list argument expr literal type string decl_stmt decl type name name decl_stmt decl type name name decl type ref prev name decl type ref prev name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name argument expr operator name argument expr operator name argument expr name decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr name operator if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr name operator if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr name operator decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name operator call name argument_list argument expr name argument expr name operator call name argument_list argument expr name argument expr name if condition expr name operator operator name operator literal type number operator operator literal type number then block for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr name name index expr name operator name name index expr name operator literal type number operator literal type number if condition expr name name index expr name operator literal type char operator name then block expr_stmt expr name operator expr_stmt expr name name index expr name operator literal type char if condition expr name name index expr name operator literal type char operator name then block expr_stmt expr name operator expr_stmt expr name name index expr name operator literal type char if condition expr name name index expr name operator literal type char operator name then block expr_stmt expr name operator expr_stmt expr name name index expr name operator literal type char for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator literal type number operator name then block expr_stmt expr name operator expr_stmt expr name name index expr name operator literal type char if condition expr name name index expr name operator literal type number operator name then block expr_stmt expr name operator expr_stmt expr name name index expr name operator literal type char if condition expr name name index expr name operator literal type number operator name then block expr_stmt expr name operator expr_stmt expr name name index expr name operator literal type char expr_stmt expr call name argument_list argument expr literal type string argument expr name else block type pseudo expr_stmt expr call name argument_list argument expr literal type string function type name name parameter_list block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name for control init condition expr name incr expr name operator block type pseudo expr_stmt expr call name argument_list 
