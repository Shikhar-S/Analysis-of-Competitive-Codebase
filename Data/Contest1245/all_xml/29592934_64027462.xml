<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29592934_64027462.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<struct>struct <name>edge</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>w</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>par</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sz</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>d</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name><init>=<expr><block>{}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cur</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>root</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name><operator>==</operator><name>u</name></expr>)</condition><then><block>{
		<return>return <expr><name>u</name></expr>;</return>
	}</block></then></if>
	<return>return <expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>k</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name>e</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name>n</name></expr>,<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>j</name><operator>!=</operator><name>i</name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>,<expr><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fi</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name><operator>-</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>se</name></expr></argument>)</argument_list></call><operator>)</operator></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sz</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>d</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>e</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl><type><name>edge</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>edge</name> <modifier>&amp;</modifier></type><name>q</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><name><name>p</name><operator>.</operator><name>w</name></name><operator>&lt;</operator><name><name>q</name><operator>.</operator><name>w</name></name></expr>;</return>
	}</block></lambda></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>cn</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>e</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>cur</name><operator>==</operator><name>n</name></expr>)</condition><then><block>{
			<break>break;</break>
		}</block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>ru</name><init>=<expr><call><name>root</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>rv</name><init>=<expr><call><name>root</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>ru</name><operator>==</operator><name>rv</name></expr>)</condition><then><block>{
			<continue>continue;</continue>
		}</block></then></if>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name><operator>==</operator><name>n</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><call><name><name>cn</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>ru</name></expr>]</index></name> <operator>||</operator> <name><name>d</name><index>[<expr><name>rv</name></expr>]</index></name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><operator>!</operator><name><name>d</name><index>[<expr><name>ru</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>cur</name><operator>+=</operator><name><name>sz</name><index>[<expr><name>ru</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then>
			<elseif>else <if>if<condition>(<expr><operator>!</operator><name><name>d</name><index>[<expr><name>rv</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>cur</name><operator>+=</operator><name><name>sz</name><index>[<expr><name>rv</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if></elseif></if>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>ru</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>rv</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>sz</name><index>[<expr><name>ru</name></expr>]</index></name><operator>&gt;</operator><name><name>sz</name><index>[<expr><name>rv</name></expr>]</index></name></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>par</name><index>[<expr><name>rv</name></expr>]</index></name><operator>=</operator><name>ru</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sz</name><index>[<expr><name>ru</name></expr>]</index></name><operator>+=</operator><name><name>sz</name><index>[<expr><name>rv</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><name><name>par</name><index>[<expr><name>ru</name></expr>]</index></name><operator>=</operator><name>rv</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>sz</name><index>[<expr><name>rv</name></expr>]</index></name><operator>+=</operator><name><name>sz</name><index>[<expr><name>ru</name></expr>]</index></name></expr>;</expr_stmt>		
		}</block></else></if>	
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>st</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>val</name><range>:<expr><name>st</name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>val</name>  <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>cn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>val</name><range>:<expr><name>cn</name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>val</name><operator>.</operator><name>fi</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>val</name><operator>.</operator><name>se</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
