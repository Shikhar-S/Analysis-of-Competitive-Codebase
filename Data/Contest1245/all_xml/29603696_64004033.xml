<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29603696_64004033.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>P</name></decl>, <decl><type ref="prev"/><name>S</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>R</name> <operator>&gt;&gt;</operator> <name>P</name> <operator>&gt;&gt;</operator> <name>S</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>str</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>bR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bP</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bS</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>str</name></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><name>it</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>bR</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>it</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>bP</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>it</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>bS</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>R</name></expr></argument>, <argument><expr><name>bS</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>P</name></expr></argument>, <argument><expr><name>bR</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>S</name></expr></argument>, <argument><expr><name>bP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>char</name></type> <name><name>ans</name><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>P</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name>P</name><operator>--</operator></expr>;</expr_stmt> }</block></then>
				<elseif>else <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>S</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name>S</name><operator>--</operator></expr>;</expr_stmt> }</block></then></if></elseif>
				<elseif>else <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name>R</name><operator>--</operator></expr>;</expr_stmt> }</block></then></if></elseif>
				<else>else <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'t'</literal></expr>;</expr_stmt></block></else></if>
			}</block></for>
			<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>can</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>R</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>can</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>P</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>can</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>S</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>can</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'t'</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>can</name><index>[<expr><name>c</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block></else></if>
			}</block></for>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>

	}</block></while>
}</block></function>
<comment type="block">/*
2 5
2 3 0
SSSSS
*/</comment></unit>
