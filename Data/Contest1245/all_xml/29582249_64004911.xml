<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29582249_64004911.cpp"><comment type="line">//</comment>
<comment type="line">//  main.cpp</comment>
<comment type="line">//  Codeforces Round #597 (Div. 2)</comment>
<comment type="line">//</comment>
<comment type="line">//  Created by Augustinas Jucas on 01/11/2019.</comment>
<comment type="line">//  Copyright Â© 2019 Augustinas Jucas. All rights reserved.</comment>
<comment type="line">//</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
    
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>kek</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>ats</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>char</name></type> <name>a</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
            
            <if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>kek</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ats</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then><else>else  <block type="pseudo"><expr_stmt><expr><call><name><name>ats</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then></if>
            <if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>kek</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ats</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then><else>else  <block type="pseudo"><expr_stmt><expr><call><name><name>ats</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then></if>
            <if>if<condition>(<expr><name>a</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>kek</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name><name>ats</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then><else>else  <block type="pseudo"><expr_stmt><expr><call><name><name>ats</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then></if>
        }</block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>ats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>ats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>}</block></then>
                <elseif>else <if>if<condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>ats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>ats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if></elseif></if>
            }</block></then></if>
        }</block></for>
        <comment type="line">//cout &lt;&lt; kek &lt;&lt; " ir " &lt;&lt; ceil(n/2) &lt;&lt; endl;</comment>
        <if>if<condition>(<expr><name>kek</name> <operator>&gt;=</operator> <call><name>ceil</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal> <operator>&lt;&lt;</operator> <name>ats</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></then><else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
        
        
        
    }</block></while>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
