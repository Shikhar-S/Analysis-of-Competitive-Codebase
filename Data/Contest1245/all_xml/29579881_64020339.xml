<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29579881_64020339.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>taskname</name></cpp:macro> <cpp:value>"cf1245"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>duyenn</name></cpp:ifdef>
        <expr_stmt><expr><call><name>freopen</name> <argument_list>(<argument><expr><name>taskname</name><literal type="string">".inp"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>freopen</name> <argument_list>(<argument><expr><name>taskname</name><literal type="string">".out"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// duyenn</comment>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</init> <condition><expr><name>T</name><operator>--</operator></expr>;</condition><incr/>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>ch</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if <condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ch</name> <operator>+=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>ch</name> <operator>+=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt></block></else></if>
            }</block></then>
            <elseif>else <if>if <condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ch</name> <operator>+=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>ch</name> <operator>+=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt></block></else></if>
            }</block></then></if></elseif>
            <else>else
            <block>{
                <if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ch</name> <operator>+=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>ch</name> <operator>+=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt></block></else></if>
            }</block></else></if></block></for>
        <if>if <condition>(<expr><name>res</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ch</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><if>if <condition>(<expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><then>
                <block>{
                    <if>if <condition>(<expr><name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                    }</block></then>
                    <elseif>else <if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                    }</block></then></if></elseif>
                    <else>else
                    <block>{
                        <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if></block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ch</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></for>
}</block></function>
</unit>
