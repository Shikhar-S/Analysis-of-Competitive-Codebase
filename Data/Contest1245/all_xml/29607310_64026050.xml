<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29607310_64026050.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(long long  i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mn</name></cpp:macro> <cpp:value>500100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<function><type><name>ll</name></type> <name>euc</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name><operator>%</operator><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if>
    <return>return <expr><call><name>euc</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt><expr_stmt><expr><name>s</name><operator>+=</operator><literal type="char">'/'</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>tu</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>s.length()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="char">'w'</literal> <operator>or</operator> <call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="char">'m'</literal></expr> )</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"0"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>,<argument>s.length()</argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tu</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal> <operator>and</operator> <call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>and</operator> <call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>dp</name><argument_list>(<argument><expr><name>tu</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <macro><name>loop</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument>tu+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>j</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
            }</block>
            <expr_stmt><expr><name>ans</name><operator>*=</operator><name><name>dp</name><index>[<expr><name>tu</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>tu</name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tn</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal> <operator>and</operator> <call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>and</operator> <call><name><name>s</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>dp</name><argument_list>(<argument><expr><name>tn</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <macro><name>loop</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument>tn+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                <if>if<condition>(<expr><name>j</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
            }</block>
            <expr_stmt><expr><name>ans</name><operator>*=</operator><name><name>dp</name><index>[<expr><name>tn</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>tn</name> <operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
