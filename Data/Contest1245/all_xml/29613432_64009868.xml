<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613432_64009868.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for_</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for__</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rof_</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;b;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rof__</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a),(b),sizeof((a)))</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MN</name> <init>= <expr><literal type="number">3e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>P</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>MN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>he</name><init>=<expr><literal type="string">"RPS"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>me</name><init>=<expr><literal type="string">"PSR"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cnt</name><index>[<expr><literal type="number">260</literal></expr>]</index></name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><name>cnt</name><operator>+</operator><literal type="char">'R'</literal></expr></argument>,<argument><expr><name>cnt</name><operator>+</operator><literal type="char">'P'</literal></expr></argument>,<argument><expr><name>cnt</name><operator>+</operator><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//aR bP cS</comment>
<comment type="line">//	cnt['R']=a, cnt['P']=b, cnt['S']=c;</comment>
<comment type="line">//	for_(i,0,3) cnt[t[i]]=0;</comment>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>for__</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
<comment type="line">//	for_(i,0,n) ++cnt[s[i]];</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>win</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>for_</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ok</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>for_</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro>
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>he</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>cnt</name><index>[<expr><name><name>me</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><operator>--</operator><name><name>cnt</name><index>[<expr><name><name>me</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr><operator>,</operator> <expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>me</name><index>[<expr><name>j</name></expr>]</index></name></expr><operator>,</operator> <expr><name>ok</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>ok</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>win</name></expr>;</expr_stmt></block></then></if>
<comment type="line">//		else for_(j,0,3) if(cnt[me[j]]&gt;0){</comment>
<comment type="line">//			ans[i]=me[j], --cnt[me[j]];</comment>
<comment type="line">//			break;</comment>
<comment type="line">//		}</comment>
	}</block>
	<macro><name>for_</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <if>if<condition>(<expr><operator>!</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>	<comment type="line">//ï¿½ï¿½ï¿½ï¿½Ó®ï¿½Ä²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½</comment>
		<block type="pseudo"><macro><name>for_</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">3</literal></argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>cnt</name><index>[<expr><name><name>me</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>me</name><index>[<expr><name>j</name></expr>]</index></name></expr><operator>,</operator> <expr><operator>--</operator><name><name>cnt</name><index>[<expr><name><name>me</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
			<break>break;</break>
		}</block></then></if></block></then></if>
<comment type="line">//for_(j,0,3) printf("%d ",cnt[me[j]]);</comment>
<comment type="line">//cout&lt;&lt;win&lt;&lt;' ';</comment>
	<if>if<condition>(<expr><name>win</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then><else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list><block>{
<comment type="line">//	ios::sync_with_stdio(0);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>_</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>_</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>for_</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>_</argument>)</argument_list></macro>
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
