<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29575694_64002595.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (int)s; i &lt; (int)f; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair &lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pop_f</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pop_b</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).rbegin(), (x).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(x).size()</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>wins</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>forn</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>char</name></type> <name>d</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>d</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>wins</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>c</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>wins</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>a</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>wins</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if></elseif></if>
    }</block><comment type="block">/*
    for (char c : ans)
        cout &lt;&lt; c;
    cout &lt;&lt; "\n";*/</comment>
    <if>if <condition>(<expr><name>wins</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><name>ans</name></expr></range></decl></init>)</control> <block>{
            <if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>c</name></expr>;</expr_stmt></block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>a</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>c</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></else></if>
        }</block></for>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>t</name> <operator>--</operator><operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
