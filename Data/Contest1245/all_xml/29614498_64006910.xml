<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29614498_64006910.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>p2i</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>y</name></expr>;</return></block></then></if>
    <return>return <expr><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><literal type="number">9</literal><operator>-</operator><name>y</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>flatten</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>dp</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>p2i</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>flatten</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>ni</name> <init>= <expr><name>i</name><operator>-</operator><name><name>arr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>nj</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>flatten</name><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <call><name>p2i</name><argument_list>(<argument><expr><name>ni</name></expr></argument>, <argument><expr><name>nj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for></block></for>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>pass</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name>j</name><operator>&gt;</operator><name>i</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><operator>++</operator><name>pass</name></expr>;</expr_stmt> <continue>continue;</continue>
            }</block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>dest</name> <init>= <expr><name>i</name><operator>-</operator><name>j</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>double</name></type> <name>cost</name> <init>= <expr><name><name>dp</name><index>[<expr><name>dest</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            
            <if>if<condition>(<expr><name><name>flatten</name><index>[<expr><name>dest</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>cost</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>cost</name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name><name>flatten</name><index>[<expr><name>dest</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>cost</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>ans</name><operator>+</operator><literal type="number">6</literal><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">6</literal><operator>-</operator><name>pass</name><operator>)</operator></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.12f\n"</literal></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><literal type="number">99</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
