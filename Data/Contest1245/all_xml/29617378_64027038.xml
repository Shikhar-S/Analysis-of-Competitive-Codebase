<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617378_64027038.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name><name>d</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>to</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>!=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>h</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>h</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">9</literal> <operator>-</operator> <name>j</name></expr> </then><else>: <expr><name>j</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>to</name><index>[<expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>-</operator> <name>h</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for></block></for>
	<decl_stmt><decl><type><name>double</name></type> <name><name>exp</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fill_n</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">0.0F</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>!=</operator> <name>i</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>exp</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator> <operator>/</operator> <name>i</name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>exp</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>exp</name><index>[<expr><name><name>to</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>exp</name><index>[<expr><literal type="number">99</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
