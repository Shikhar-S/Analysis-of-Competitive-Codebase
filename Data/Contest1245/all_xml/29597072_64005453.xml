<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29597072_64005453.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; n; i++)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pow</name></cpp:macro> <cpp:value>CHANGETHENAMESTUPID</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<function><type><name>ll</name></type> <name>modinv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>m</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><name>a</name> <operator>%=</operator> <name>m</name></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>a</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<return>return <expr><name>m</name> <operator>-</operator> <call><name>modinv</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>m</name> <operator>/</operator> <name>a</name></expr>;</return>
}</block></function>
 
<struct><template>template <parameter_list>&lt;<parameter><type><name>int</name></type> <name>MOD_</name></parameter>&gt;</parameter_list></template> struct <name>modnum</name> <block>{<public type="default">
</public><private>private:
	<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
</private><public>public:
	<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><name>MOD_</name></expr></init></decl>;</decl_stmt>
 
	<constructor><name>modnum</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>v</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
	<constructor><name>modnum</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v_</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>v</name><argument_list>(<argument><expr><call><name>int</name><argument_list>(<argument><expr><name>v_</name> <operator>%</operator> <name>MOD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{ <if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>v</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if> }</block></constructor>
	<function type="operator"><specifier>explicit</specifier> <name>operator <name>int</name></name> <parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>v</name></expr>;</return> }</block></function>
	<friend>friend <function type="operator"><type><name>bool</name></type> <name>operator <name>==</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>a</name><operator>.</operator><name>v</name></name> <operator>==</operator> <name><name>b</name><operator>.</operator><name>v</name></name></expr>;</return> }</block></function></friend>
	<friend>friend <function type="operator"><type><name>bool</name></type> <name>operator <name>!=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>a</name><operator>.</operator><name>v</name></name> <operator>!=</operator> <name><name>b</name><operator>.</operator><name>v</name></name></expr>;</return> }</block></function></friend>
 
	<function type="operator"><type><name>modnum</name></type> <name>operator <name>~</name></name> <parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
		<decl_stmt><decl><type><name>modnum</name></type> <name>res</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>res</name><operator>.</operator><name>v</name></name> <operator>=</operator> <call><name>modinv</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>res</name></expr>;</return>
	}</block></function>
 
	<function type="operator"><type><name>modnum</name><modifier>&amp;</modifier></type> <name>operator <name>+=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>o</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <name>MOD</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>v</name> <operator>-=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
		<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>modnum</name><modifier>&amp;</modifier></type> <name>operator <name>-=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>v</name> <operator>-=</operator> <name><name>o</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>v</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
		<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>modnum</name><modifier>&amp;</modifier></type> <name>operator <name>*=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>int</name><argument_list>(<argument><expr><call><name>ll</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>ll</name><argument_list>(<argument><expr><name><name>o</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>*</operator><name>this</name></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>modnum</name><modifier>&amp;</modifier></type> <name>operator <name>/=</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>o</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><operator>*</operator><name>this</name> <operator>*=</operator> <operator>(</operator><operator>~</operator><name>o</name><operator>)</operator></expr>;</return>
	}</block></function>
 
	<friend>friend <function type="operator"><type><name>modnum</name></type> <name>operator <name>+</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>modnum</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>b</name></expr>;</return> }</block></function></friend>
	<friend>friend <function type="operator"><type><name>modnum</name></type> <name>operator <name>-</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>modnum</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>b</name></expr>;</return> }</block></function></friend>
	<friend>friend <function type="operator"><type><name>modnum</name></type> <name>operator <name>*</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>modnum</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>b</name></expr>;</return> }</block></function></friend>
	<friend>friend <function type="operator"><type><name>modnum</name></type> <name>operator <name>/</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modnum</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>modnum</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>b</name></expr>;</return> }</block></function></friend>
</public>}</block>;</struct>
 
<using>using <name>num</name> <init>= <type><name><name>modnum</name><argument_list type="generic">&lt;<argument><expr><name>int</name><operator>(</operator><literal type="number">1e9</literal><operator>)</operator> <operator>+</operator> <literal type="number">7</literal></expr></argument>&gt;</argument_list></name></type></init>;</using>

<function><type><name>void</name></type> <name>load</name><parameter_list>()</parameter_list> <block>{

}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>num</name></type> <name>sol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>num</name></type> <name><name>sols</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>sols</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>sols</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>sols</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>sols</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sols</name><index>[<expr><name>k</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>auto</name></type> <name>calc</name> <init>= <expr><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> -&gt; <type><name>num</name></type> <block>{
		<return>return <expr><name><name>sols</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</return>
	}</block></lambda></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>ind</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ind</name><operator>++</operator></expr>;</expr_stmt>
			<continue>continue;</continue>
		}</block></then></if>
		<decl_stmt><decl><type><name>int</name></type> <name>ind_</name> <init>= <expr><name>ind</name></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>ind_</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>ind_</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>ind</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>ind_</name><operator>++</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name>sol</name> <operator>*=</operator> <call><name>calc</name><argument_list>(<argument><expr><name>ind_</name> <operator>-</operator> <name>ind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ind</name> <operator>=</operator> <name>ind_</name></expr>;</expr_stmt>
	}</block></while> 
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <name>sol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>load</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
