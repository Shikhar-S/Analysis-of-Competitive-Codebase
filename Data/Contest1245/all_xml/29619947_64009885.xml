<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619947_64009885.cpp">    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
    <using>using <namespace>namespace <name>std</name>;</namespace></using>
     
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
     
    <decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <function><type><name>ll</name></type> <name>fun</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>ind</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>r1</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>l2</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>r2</name></decl></parameter>)</parameter_list> <block>{
      <if>if <condition>( <expr><name>ind</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then> <block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
      }</block></then></if>
      <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>ind</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then> <block>{
        <return>return <expr><name><name>dp</name><index>[<expr><name>ind</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name></expr> ;</return>
      }</block></then></if>
      <decl_stmt><decl><type><name>int</name></type> <name>bit1</name> <init>= <expr><operator>(</operator> <operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>ind</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>bit2</name> <init>= <expr><operator>(</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <name>ind</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal> <operator>)</operator></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
          <if>if<condition>(<expr><name>l1</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>bit1</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
          <if>if<condition>(<expr><name>l2</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>bit1</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
          <if>if<condition>(<expr><name>r1</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;</operator> <name>bit2</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
          <if>if<condition>(<expr><name>r2</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;</operator> <name>bit2</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
          <if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>j</name> <operator>&amp;&amp;</operator> <name>i</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
          <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>fun</name><argument_list>( <argument><expr><name>ind</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator> <name>l1</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>bit1</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator> <name>r1</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>bit2</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator> <name>l2</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>bit1</name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator> <name>r2</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>bit2</name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      }</block></for>
      <return>return <expr><name><name>dp</name><index>[<expr><name>ind</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>r1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index><index>[<expr><name>r2</name></expr>]</index></name> <operator>=</operator> <name>ans</name></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>fun</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
      }</block></while>
      <return>return <expr><literal type="number">0</literal></expr> ;</return>
    }</block></function></unit>
