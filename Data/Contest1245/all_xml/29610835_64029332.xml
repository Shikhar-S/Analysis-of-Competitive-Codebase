<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610835_64029332.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">35</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>fastpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>p</name></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>p</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name>a</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name></expr>;</expr_stmt><expr_stmt><expr><name>p</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>len</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>lim1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>lim2</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><operator>!</operator><name>len</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>b</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>res</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>lim2</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>lim1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>res</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>lim2</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>lim1</name></expr></argument>,<argument><expr><name>lim2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><operator>!</operator><name>lim2</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name><name>b</name><index>[<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>res</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>lim1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>lim1</name></expr></argument>,<argument><expr><name>lim2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><operator>!</operator><name>lim1</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></then></if></elseif>
	<else>else
	<block>{
		<expr_stmt><expr><name>res</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>lim1</name></expr></argument>,<argument><expr><name>lim2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><operator>!</operator><name>lim1</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>lim2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><operator>!</operator><name>lim2</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>lim1</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></else></if>
	<return>return <expr><name><name>dp</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index></name><operator>=</operator><name>res</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">30</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>x</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>y</name><operator>&gt;&gt;</operator><name>i</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>l</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>solve</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>solve</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><call><name>solve</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>solve</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>solve</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
	}</block></while>
}</block></function></unit>
