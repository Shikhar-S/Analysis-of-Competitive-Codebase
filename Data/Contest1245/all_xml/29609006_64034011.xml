<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29609006_64034011.cpp"><comment type="block">/*cout&lt;&lt;"âââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"âââââââââââââââââââââââââââmuch speed"&lt;&lt;endl;
    cout&lt;&lt;"âââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââââ Wow"&lt;&lt;endl;
    cout&lt;&lt;"âââââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââââgood macro"&lt;&lt;endl;
    cout&lt;&lt;"âââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"âââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"ââââââââââââââââââââââââ"&lt;&lt;endl;
    cout&lt;&lt;"âââââââââââââââââââââ"&lt;&lt;endl;*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name> ;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MM</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl> ;</decl_stmt>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>checjk</name> <parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><operator>-</operator><name>x</name></expr></else></ternary></expr> ;</return>}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">2e3</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vvvvv</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>lowc</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name>n</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>fa</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>x</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>k</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>maxn</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>cost</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>V</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>num11111</name></decl> , <decl><type ref="prev"/><name>num22222</name></decl> ;</decl_stmt>

<struct>struct <name>Matrix</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name><name>mat</name><index>[<expr><name>MM</name></expr>]</index><index>[<expr><name>MM</name></expr>]</index></name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function><type><name>Matrix</name></type> <name>multiply</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>Matrix</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>M</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Matrix</name></type> <name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>mat</name></name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>mat</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>M</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>M</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>mat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;</operator><name>M</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
                <if>if<condition>(<expr><name><name>b</name><operator>.</operator><name>mat</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name><name>c</name><operator>.</operator><name>mat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>c</name><operator>.</operator><name>mat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><name><name>a</name><operator>.</operator><name>mat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><name><name>b</name><operator>.</operator><name>mat</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>M</name></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></for>
    <return>return <expr><name>c</name></expr>;</return>
}</block></function>

<function><type><name>Matrix</name></type> <name>quickmod</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>M</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>Matrix</name></type> <name>res</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>M</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>M</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><operator>.</operator><name>mat</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>i</name><operator>==</operator><name>j</name><operator>)</operator></expr>;</expr_stmt></block></for>
    }</block></for>
    <while>while<condition>(<expr><name>n</name></expr>)</condition> <block>{
        <if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><call><name>multiply</name><argument_list>(<argument><expr><name>res</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>n</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name><operator>=</operator><call><name>multiply</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>vvvvv</name></expr></argument> , <argument><expr><literal type="boolean">false</literal></expr></argument> , <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>vvvvv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>vvvvv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<expr_stmt><expr><name><name>lowc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt><expr_stmt><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>}</block></for>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>minc</name> <init>= <expr><name>INF</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>vvvvv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>minc</name> <operator>&gt;</operator> <name><name>lowc</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><name>minc</name> <operator>=</operator> <name><name>lowc</name><index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt><expr_stmt><expr><name>p</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>}</block></then></if></block></for>
        <if>if <condition>(<expr><name>minc</name> <operator>==</operator> <name>INF</name></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr> ;</return></block></then></if>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>minc</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>vvvvv</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt>
        <if>if <condition>(<expr><name><name>fa</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then>
        <else>else<block>{<expr_stmt><expr><call><name><name>num11111</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt><expr_stmt><expr><call><name><name>num22222</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>fa</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>}</block></else></if>
        <for>for <control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>vvvvv</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>lowc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name><name>cost</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{<expr_stmt><expr><name><name>lowc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt><expr_stmt><expr><name><name>fa</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr> ;</expr_stmt>}</block></then></if></block></for>
    }</block></for>
    <return>return <expr><name>ans</name></expr> ;</return>
}</block></function>

 <comment type="block">/*(for(int i = 0; i &lt; n; i++){
                if(ans[i] == 1) cout&lt;&lt;"R";
                else if(ans[i] == 2) cout&lt;&lt;"P";
                else if(ans[i] == 3) cout&lt;&lt;"S";
                else{
                    if(a &gt; 0) cout&lt;&lt;"R", a--;
                    else if(b &gt; 0) cout&lt;&lt;"P", b--;
                    else if(c &gt; 0) cout&lt;&lt;"S", c--;
                }
}*/</comment>

<function><type><name>int</name></type> <name>solve1</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt><expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>}</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>checjk</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>checjk</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</expr_stmt></block></for>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument> , <argument><expr><call><name>solve</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument> , <argument><expr><call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument> , <argument><expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n%d\n"</literal></expr></argument> , <argument><expr><call><name><name>num11111</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>num11111</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument> , <argument><expr><name><name>num11111</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>num22222</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>solve1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function>
</unit>
