<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617408_63999103.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include> 

<using>using <namespace>namespace <name>std</name> ;</namespace></using> 

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{ 
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>a</name></decl> , <decl><type ref="prev"/><name>b</name></decl> , <decl><type ref="prev"/><name>c</name></decl> ;</decl_stmt> 
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl> ;</decl_stmt> 
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>s</name></expr> ;</expr_stmt> 
	<decl_stmt><decl><type><name>string</name></type> <name>res</name> <init>= <expr><literal type="string">""</literal></expr></init></decl> ;</decl_stmt> 
	<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt> 
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>ans</name></decl> ;</decl_stmt> 
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control> <block>{ 
		<if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{ 
			<comment type="line">// b </comment>
			<if>if<condition>(<expr><name>b</name></expr>)</condition><then> <block>{ 
				<expr_stmt><expr><name>b</name><operator>--</operator></expr> ;</expr_stmt> 
				<expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"P"</literal></expr> ;</expr_stmt> 
				<expr_stmt><expr><name>score</name><operator>++</operator></expr> ;</expr_stmt> 
			}</block></then> <else>else 
				<block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="char">'?'</literal></expr> ;</expr_stmt></block></else></if>  
		}</block></then></if>
		<if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block>{ 
			<comment type="line">//c </comment>
			<if>if<condition>(<expr><name>c</name></expr>)</condition><then> <block>{ 
				<expr_stmt><expr><name>c</name><operator>--</operator></expr> ;</expr_stmt> 
				<expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"S"</literal></expr> ;</expr_stmt> 
				<expr_stmt><expr><name>score</name><operator>++</operator></expr> ;</expr_stmt> 
			}</block></then> <else>else 
				<block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="char">'?'</literal></expr> ;</expr_stmt></block></else></if>  
		}</block></then></if>
		<if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block>{ 
			<if>if<condition>(<expr><name>a</name></expr>)</condition><then> <block>{ 
				<expr_stmt><expr><name>a</name><operator>--</operator></expr> ;</expr_stmt> 
				<expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="string">"R"</literal></expr> ;</expr_stmt> 
				<expr_stmt><expr><name>score</name><operator>++</operator></expr> ;</expr_stmt> 
			}</block></then> <else>else 
				<block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="char">'?'</literal></expr> ;</expr_stmt></block></else></if> 
		}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><name>score</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{ 
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt> 
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name> <range>: <expr><name>res</name></expr></range></decl></init>)</control> <block>{ 
			<if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><then> <block>{ 
				<if>if<condition>(<expr><name>a</name></expr>)</condition><then> <block>{ 
					<expr_stmt><expr><name>a</name><operator>--</operator></expr> ;</expr_stmt> 
					<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal></expr> ;</expr_stmt> 

				}</block></then> <elseif>else <if>if<condition>(<expr><name>b</name></expr>)</condition><then> <block>{ 
					<expr_stmt><expr><name>b</name><operator>--</operator></expr> ;</expr_stmt> 
					<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"P"</literal></expr> ;</expr_stmt> 
				}</block></then></if></elseif> <else>else <block>{ 
					<expr_stmt><expr><name>c</name><operator>--</operator></expr> ;</expr_stmt> 
					<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr> ;</expr_stmt> 
				}</block></else></if>
			}</block></then><else>else 
				<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name></expr> ;</expr_stmt></block></else></if> 
		}</block></for>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt> 
	}</block></then> <else>else 
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt></block></else></if> 
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{ 
	<decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl> ;</decl_stmt> 
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tc</name></expr> ;</expr_stmt> 
	<while>while<condition>(<expr><name>tc</name><operator>--</operator></expr>)</condition> <block>{ 
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr> ;</expr_stmt> 	
	}</block></while>
}</block></function>
</unit>
