<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29576905_64031463.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (l); i &lt;= (r); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (l); i &gt;= (r); --i)</cpp:value></cpp:define>
<using>using <name><name>std</name><operator>::</operator><name>cerr</name></name>;</using> <using>using <name><name>std</name><operator>::</operator><name>cin</name></name>;</using> <using>using <name><name>std</name><operator>::</operator><name>cout</name></name>;</using> <using>using <name><name>std</name><operator>::</operator><name>endl</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>make_pair</name></name>;</using> <using>using <name><name>std</name><operator>::</operator><name>pair</name></name>;</using> <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef> <typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ui</name>;</typedef> <typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name><name>pw3</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lima</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>limb</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <comment type="line">// cerr &lt;&lt; c &lt;&lt; ' ' &lt;&lt; a &lt;&lt; ' ' &lt;&lt; b &lt;&lt; ' ' &lt;&lt; lima &lt;&lt; ' ' &lt;&lt; limb &lt;&lt; endl;</comment>
    <if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>lima</name> <operator>&amp;&amp;</operator> <name>limb</name></expr>)</condition><then><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ba</name> <init>= <expr><operator>(</operator><name>a</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>c</name><operator>)</operator><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>bb</name> <init>= <expr><operator>(</operator><name>b</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>c</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ba</name> <operator>&amp;&amp;</operator> <name>bb</name></expr>)</condition><then><block>{
            <return>return <expr><call><name>calc</name><argument_list>(<argument><expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>calc</name><argument_list>(<argument><expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>calc</name><argument_list>(<argument><expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>ba</name> <operator>||</operator> <name>bb</name></expr>)</condition><then><block>{
            <if>if <condition>(<expr><name>bb</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>ba</name></expr></argument>, <argument><expr><name>bb</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>lima</name></expr></argument>, <argument><expr><name>limb</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <return>return <expr><call><name>calc</name><argument_list>(<argument><expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>calc</name><argument_list>(<argument><expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then></if></elseif> <else>else <block>{
            <return>return <expr><call><name>calc</name><argument_list>(<argument><expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>lima</name> <operator>||</operator> <name>limb</name></expr>)</condition><then><block>{
        <if>if <condition>(<expr><name>limb</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>lima</name></expr></argument>, <argument><expr><name>limb</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>ba</name> <init>= <expr><operator>(</operator><name>a</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>c</name><operator>)</operator><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>bb</name> <init>= <expr><operator>(</operator><name>b</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>c</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>ba</name></expr>)</condition><then><block>{
            <return>return <expr><literal type="number">2</literal><operator>*</operator><call><name>calc</name><argument_list>(<argument><expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>calc</name><argument_list>(<argument><expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></then> <else>else <block>{
            <return>return <expr><literal type="number">2</literal><operator>*</operator><call><name>calc</name><argument_list>(<argument><expr><name>c</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
        }</block></else></if>
    }</block></then></if></elseif> <else>else <block>{
        <return>return <expr><name><name>pw3</name><index>[<expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return>
    }</block></else></if>
}</block></function>

<function><type><name>ll</name></type> <name>solve2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>calc</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>calc</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
    <comment type="line">// cerr &lt;&lt; solve2(r, l, r) &lt;&lt; ' ' &lt;&lt; solve2(l-1,l,r) &lt;&lt; endl;</comment>
    <return>return <expr><call><name>solve2</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>solve2</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pw3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">33</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>pw3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pw3</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
