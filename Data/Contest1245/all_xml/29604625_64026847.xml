<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29604625_64026847.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">// #include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
 
<comment type="line">// using namespace __gnu_pbds;</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<comment type="line">// template &lt;typename T&gt;</comment>
<comment type="line">// using ordered_set = tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;</comment>
 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<comment type="line">// typedef complex&lt;long double&gt; point;</comment>

<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>t</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node</name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{
		<return>return <expr><name>w</name> <operator>&gt;</operator> <name><name>rhs</name><operator>.</operator><name>w</name></name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>id</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>build</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>i</name></expr>;</return></block></then></if>
	<return>return <expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>unio</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>b</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
	<if>if <condition>(<expr><name><name>id</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&gt;</operator> <name><name>id</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name><name>build</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name><name>build</name><index>[<expr><name>a</name></expr>]</index></name> <operator>|</operator> <name><name>build</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>id</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+=</operator> <name><name>id</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>id</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>arr</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>cost1</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>cost2</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>id</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>build</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>z</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;&gt;</operator> <name><name>arr</name><index>[<expr><name>z</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>cost1</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>cost2</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name><name>priority_queue</name> <argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type> <name>que</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>z</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>node</name></type> <name>temp</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>w</name></name> <operator>=</operator> <operator>(</operator><name><name>cost2</name><index>[<expr><name>z</name></expr>]</index></name><operator>+</operator><name><name>cost2</name><index>[<expr><name>x</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>z</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>arr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>z</name></expr>]</index></name><operator>.</operator><name>second</name><operator>-</operator><name><name>arr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>t</name></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>node</name></type> <name>temp</name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name>z</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>t</name></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>temp</name><operator>.</operator><name>w</name></name> <operator>=</operator> <name><name>cost1</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>e</name></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>!</operator><call><name><name>que</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
		<decl_stmt><decl><type><name>node</name></type> <name>temp</name> <init>= <expr><call><name><name>que</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>que</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><operator>!</operator><name><name>temp</name><operator>.</operator><name>t</name></name></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><operator>!</operator><name><name>build</name><index>[<expr><name>a</name></expr>]</index></name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>temp</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name><name>build</name><index>[<expr><name><name>temp</name><operator>.</operator><name>v</name></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>build</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>b</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name><name>build</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>build</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>u</name></name></expr></argument>,<argument><expr><name><name>temp</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>temp</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name>unio</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <range>: <expr><name>v</name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>e</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>ii</name></type> <name>i</name> <range>: <expr><name>e</name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></for>
}</block></function>
 
 </unit>
