<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619736_64002938.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ford</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>minimize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>maximize</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxN</name><init>=<expr><literal type="number">10000</literal><operator>+</operator><literal type="number">1067</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>res</name><index>[<expr><name>maxN</name></expr>]</index></name></decl>;</decl_stmt>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("dream_hyojooslh.txt","r",stdin);</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <macro><name>For</name><argument_list>(<argument>test</argument>,<argument><literal type="number">1</literal></argument>,<argument>t</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>m</name><init>=<expr><name>n</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><name>n</name><operator>%</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'D'</literal></expr>;</expr_stmt>
        <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>x</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>x</name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>m</name></expr><operator>,</operator><expr><operator>--</operator><name>b</name></expr><operator>,</operator><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>x</name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>c</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>m</name></expr><operator>,</operator><expr><operator>--</operator><name>c</name></expr><operator>,</operator><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt></block></then></if>
            }</block></then></if></elseif> <elseif>else
                <if>if <condition>(<expr><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>m</name></expr><operator>,</operator><expr><operator>--</operator><name>a</name></expr><operator>,</operator><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt></block></then></if></elseif></if>
        }</block>
        <if>if <condition>(<expr><name>m</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"no"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'D'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then> <else>else <block>{
                <if>if <condition>(<expr><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr><operator>,</operator><expr><operator>--</operator><name>a</name></expr>;</expr_stmt></block></then>
                <elseif>else <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr><operator>,</operator><expr><operator>--</operator><name>b</name></expr>;</expr_stmt></block></then></if></elseif>
                <else>else <block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt></block></else></if>
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
