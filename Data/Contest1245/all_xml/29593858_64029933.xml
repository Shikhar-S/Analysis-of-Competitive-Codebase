<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29593858_64029933.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>scanf("%c",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>           <cpp:value>scanf("%lld",&amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>	     	<cpp:value>(v.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>memset(v, d, sizeof(v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>oo</name></cpp:macro>				<cpp:value>2000000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OO</name></cpp:macro>				<cpp:value>2000000000000000100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Ceil</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x+y-1)/y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>1e-8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IO</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0),cin.tie(0),cout.tie(0);</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name><init>=<expr><literal type="number">3.14159265358979323846264338327950288419716939937510582097494459</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name><name>dX</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dY</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>alpha</name> <init>= <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">50</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>L</name></decl>,<decl><type ref="prev"/><name>R</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ind</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>a</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>b</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>ind</name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>ret</name> <init>= <expr><name><name>dp</name><index>[<expr><name>ind</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>d</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>~</operator><name>ret</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name> <operator>&amp;&amp;</operator> <name>i</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><name>i</name><operator>&lt;</operator><name><name>L</name><index>[<expr><name>ind</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>a</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><name>i</name><operator>&gt;</operator><name><name>R</name><index>[<expr><name>ind</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><name>j</name><operator>&lt;</operator><name><name>L</name><index>[<expr><name>ind</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>c</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><name>j</name><operator>&gt;</operator><name><name>R</name><index>[<expr><name>ind</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>d</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>ind</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>||</operator><name>i</name><operator>&gt;</operator><name><name>L</name><index>[<expr><name>ind</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>b</name><operator>||</operator><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name><name>R</name><index>[<expr><name>ind</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>c</name><operator>||</operator><name>j</name></expr></argument>&gt;</argument_list></name><name><name>L</name><index>[<expr><name>ind</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>d</name><operator>||</operator><name>j</name><operator>&lt;</operator><name><name>R</name><index>[<expr><name>ind</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for></block></for>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>string</name></type> <name>toBinary</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>string</name></type> <name>tmp</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><operator>!</operator><name>num</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tmp</name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt></block></then></if>
	<while>while<condition>(<expr><name>num</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>+=</operator><operator>(</operator> <operator>(</operator><name>num</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><literal type="char">'0'</literal><operator>)</operator></expr><operator>,</operator><expr><name>num</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>tmp</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>tmp</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>tmp</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <comment type="line">//freopen("in.txt","r",stdin);</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <comment type="line">//freopen("reduce.in","r",stdin);</comment>
    <comment type="line">//freopen("output.txt","w",stdout);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>L</name> <operator>=</operator> <call><name>toBinary</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>R</name> <operator>=</operator> <call><name>toBinary</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>L</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>sz</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>L</name> <operator>=</operator> <literal type="string">"0"</literal> <operator>+</operator> <name>L</name></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><call><name>mem</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>sz</name><argument_list>(<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><call><name>solve</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
