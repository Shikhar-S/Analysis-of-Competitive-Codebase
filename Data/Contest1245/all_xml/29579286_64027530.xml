<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29579286_64027530.cpp"><comment type="line">// clang-format off</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>protected</name></cpp:macro> <cpp:value>public</cpp:value></cpp:define>
<using>using <name>iii</name>  <init>= <type><name>int</name></type></init>;</using>
<using>using <name>yeee</name> <init>= <type><name>iii</name></type></init>;</using>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
    <decl_stmt><decl><type><specifier>const</specifier> <name>iii</name></type> <name>DEBUG</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><specifier>const</specifier> <name>iii</name></type> <name>DEBUG</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>chrono</name>;</namespace></using>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/detail/standard_policies.hpp&gt;</cpp:file></cpp:include>
    using namespace __gnu_pbds; template&lt;typename T&gt; using ordered_set = tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;; template&lt;typename T1, typename T2&gt; using hash_map = gp_hash_table&lt;T1, T2&gt;;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBG</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(DEBUG &gt;= x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = ll(lo); i &lt; ll(hi); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROF</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = ll(hi); i &gt;= (ll)(lo); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>len</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ll((x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOUT</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DOUTg(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>DOUTf</name><parameter_list>(<parameter><decl><type><name>ostringstream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>names_i</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>names</name></decl></parameter>, <parameter><decl><type><name>T1</name> <modifier>&amp;&amp;</modifier></type><name>val</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>names</name><index>[<expr><name>names_i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>val</name></expr>;</expr_stmt> }</block></function> <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Ts</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>DOUTf</name><parameter_list>(<parameter><decl><type><name>ostringstream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>names_i</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>names</name></decl></parameter>, <parameter><decl><type><name>T1</name> <modifier>&amp;&amp;</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>Ts</name> <modifier>&amp;&amp;</modifier><modifier>...</modifier></type> <name>vals</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>names</name><index>[<expr><name>names_i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>val</name> <operator>&lt;&lt;</operator> <literal type="string">" | "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>DOUTf</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><name>names_i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>names</name></expr></argument>, <argument><expr><name>vals</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function> <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Ts</name></parameter>&gt;</parameter_list></template> <type><name>string</name></type> <name>DOUTg</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>names</name></decl></parameter>, <parameter><decl><type><name>Ts</name> <modifier>&amp;&amp;</modifier><modifier>...</modifier></type> <name>vals</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>string</name></type> <name>special</name> <init>= <expr><literal type="string">"()[]{}&lt;&gt;'\"\\"</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>vnames</name></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>vnames</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>stak</name></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><name>names</name></expr></range></decl></init>)</control> <block>{ <decl_stmt><decl><type><name>bool</name></type> <name>inside_string</name> <init>= <expr><operator>!</operator><call><name><name>stak</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>stak</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <call><name><name>stak</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'\"'</literal><operator>)</operator></expr></init></decl>;</decl_stmt> <if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></then></if> <if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>vnames</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>(</operator><operator>!</operator><name>inside_string</name> <operator>&amp;&amp;</operator> <call><name><name>vnames</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">' '</literal><operator>)</operator><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if> <if>if<condition>(<expr><call><name><name>stak</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>==</operator> <literal type="char">','</literal></expr>)</condition><then> <block>{ <if>if<condition>(<expr><operator>!</operator><call><name><name>vnames</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>vnames</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>vnames</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>pop_back</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><call><name><name>vnames</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if> <expr_stmt><expr><call><name><name>vnames</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if>if<condition>(<expr><operator>!</operator><call><name><name>stak</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>stak</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>stak</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if> <decl_stmt><decl><type><name>size_t</name></type> <name>p</name> <init>= <expr><call><name><name>special</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>bool</name></type> <name>closing</name> <init>= <expr><name>p</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name>p</name> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt> <if>if<condition>(<expr><name>p</name> <operator>==</operator> <name><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if> <if>if<condition>(<expr><name>p</name> <operator>==</operator> <call><name><name>special</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>stak</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if> <if>if<condition>(<expr><call><name><name>stak</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <if>if<condition>(<expr><operator>!</operator><name>closing</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>stak</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <continue>continue;</continue> }</block></then></if> <if>if<condition>(<expr><name>inside_string</name></expr>)</condition><then> <block>{ <if>if<condition>(<expr><name>c</name> <operator>==</operator> <call><name><name>stak</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>stak</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if> <continue>continue;</continue> }</block></then></if> <if>if<condition>(<expr><name>closing</name></expr>)</condition><then> <block>{ <if>if<condition>(<expr><call><name><name>stak</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <name><name>special</name><index>[<expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>stak</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if> <continue>continue;</continue> }</block></then></if> <expr_stmt><expr><call><name><name>stak</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></for> <decl_stmt><decl><type><name>ostringstream</name></type> <name>os</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>DOUTf</name><argument_list>(<argument><expr><name>os</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>vnames</name></expr></argument>, <argument><expr><name>vals</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><call><name><name>os</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
    <struct><template>template <parameter_list>&lt;<parameter><type><template>template <parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type></parameter>&gt;</parameter_list></template> <name>class</name></type> <name>Container</name></parameter>, <parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>size_t</name></type> <name>DIMENSION</name></parameter>&gt;</parameter_list></template> struct <name>MultiDimensional</name> <block>{<public type="default"> <using>using <name>internal</name> <init>= <type><name><name>MultiDimensional</name><argument_list type="generic">&lt;<argument><expr><name>Container</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>DIMENSION</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>type</name> <init>= <type><name><name>Container</name><argument_list type="generic">&lt;<argument><expr><name><typename>typename</typename> <name>internal</name><operator>::</operator><name>type</name></name></expr></argument>&gt;</argument_list></name></type></init>;</using> <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template> <specifier>static</specifier> <type><name>type</name></type> <name>Generate</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>def</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>sizes</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>type</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name><name>internal</name><operator>::</operator><name>Generate</name></name><argument_list>(<argument><expr><name>def</name></expr></argument>, <argument><expr><name>sizes</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function> </public>}</block>;</struct> <struct><template>template <parameter_list>&lt;<parameter><type><template>template <parameter_list>&lt;<parameter><type><name>typename</name><modifier>...</modifier></type></parameter>&gt;</parameter_list></template> <name>class</name></type> <name>Container</name></parameter>, <parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> struct <name><name>MultiDimensional</name><argument_list type="generic">&lt;<argument><expr><name>Container</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name> <block>{<public type="default"> <using>using <name>internal</name> <init>= <type><name>T</name></type></init>;</using> <using>using <name>type</name> <init>= <type><name><name>Container</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <function><specifier>static</specifier> <type><name>type</name></type> <name>Generate</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>def</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>type</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name>def</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function> </public>}</block>;</struct> <decl_stmt><decl><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template> <type><name>auto</name></type> <name>make_vector</name><argument_list>(<argument><expr><name>T</name> <name>def</name></expr></argument>, <argument><expr><name>Args</name><operator>...</operator> <name>sizes</name></expr></argument>)</argument_list> -&gt; <name><typename>typename</typename> <name>MultiDimensional</name></name><name/>&lt;<name><name>std</name><operator>::</operator><name>vector</name></name></decl>, <decl><type ref="prev"/><name>T</name></decl>, sizeof<modifier>...</modifier><argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list>&gt;<decl><type ref="prev"/><name><operator>::</operator><name>type</name></name> <argument_list>{ return <argument><expr><name>MultiDimensional</name><operator>&lt;</operator><name><name>std</name><operator>::</operator><name>vector</name></name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>sizes</name></expr></argument>)</argument_list></sizeof><operator>&gt;</operator><call><name><operator>::</operator><name>Generate</name></name><argument_list>( <argument><expr><name>def</name></expr></argument>, <argument><expr><name>sizes</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>; }</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block">/*get*/</comment> template <name/>&lt;<name><typename>typename</typename> <name>T</name></name>&gt; <name>T</name> <name>get</name><argument_list>()</argument_list> <argument_list>{ <argument><expr><name>T</name> <name>x</name></expr></argument>; <argument><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr></argument>; return <argument><expr><name>x</name></expr></argument>; }</argument_list> <comment type="block">/*pair*/</comment> template <name/>&lt;<name><typename>typename</typename> <name>T1</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>T2</name></name>&gt; <name>ostream</name> <modifier>&amp;</modifier><name>operator<name>&lt;&lt;</name></name><argument_list>(<argument><expr><name>ostream</name> <operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>cont</name></expr></argument>)</argument_list> <argument_list>{ <argument><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>cont</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>cont</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">")"</literal></expr></argument>; return <argument><expr><name>out</name></expr></argument>; }</argument_list> <comment type="block">/*vector*/</comment> template <name/>&lt;<name><typename>typename</typename> <name>T</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>Alloc</name></name>&gt; <name>ostream</name> <modifier>&amp;</modifier><name>operator<name>&lt;&lt;</name></name><argument_list>(<argument><expr><name>ostream</name> <operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Alloc</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>cont</name></expr></argument>)</argument_list> <argument_list>{ for<argument><expr><operator>(</operator><name>auto</name> <name>it</name> <operator>=</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call>; <name>it</name> <operator>!=</operator> <call><name><name>cont</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>it</name><operator>)</operator> <name>out</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>it</name> <operator>==</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr></argument>; return <argument><expr><name>out</name></expr></argument>; }</argument_list> <comment type="block">/*deque*/</comment> template <name/>&lt;<name><typename>typename</typename> <name>T</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>Alloc</name></name>&gt; <name>ostream</name> <modifier>&amp;</modifier><name>operator<name>&lt;&lt;</name></name><argument_list>(<argument><expr><name>ostream</name> <operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Alloc</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>cont</name></expr></argument>)</argument_list> <argument_list>{ for<argument><expr><operator>(</operator><name>auto</name> <name>it</name> <operator>=</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call>; <name>it</name> <operator>!=</operator> <call><name><name>cont</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>it</name><operator>)</operator> <name>out</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>it</name> <operator>==</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr></argument>; return <argument><expr><name>out</name></expr></argument>; }</argument_list> <comment type="block">/*set*/</comment> template <name/>&lt;<name><typename>typename</typename> <name>T</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>Compare</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>Alloc</name></name>&gt; <name>ostream</name> <modifier>&amp;</modifier><name>operator<name>&lt;&lt;</name></name><argument_list>(<argument><expr><name>ostream</name> <operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Compare</name></expr></argument>, <argument><expr><name>Alloc</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>cont</name></expr></argument>)</argument_list> <argument_list>{ <argument><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr></argument>; for<argument><expr><operator>(</operator><name>auto</name> <name>it</name> <operator>=</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call>; <name>it</name> <operator>!=</operator> <call><name><name>cont</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>it</name><operator>)</operator> <name>out</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>it</name> <operator>==</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr></argument>; <argument><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr></argument>; return <argument><expr><name>out</name></expr></argument>; }</argument_list> <comment type="block">/*multiset*/</comment> template <name/>&lt;<name><typename>typename</typename> <name>T</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>Compare</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>Alloc</name></name>&gt; <name>ostream</name> <modifier>&amp;</modifier><name>operator<name>&lt;&lt;</name></name><argument_list>(<argument><expr><name>ostream</name> <operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>Compare</name></expr></argument>, <argument><expr><name>Alloc</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>cont</name></expr></argument>)</argument_list> <argument_list>{ <argument><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr></argument>; for<argument><expr><operator>(</operator><name>auto</name> <name>it</name> <operator>=</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call>; <name>it</name> <operator>!=</operator> <call><name><name>cont</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>it</name><operator>)</operator> <name>out</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>it</name> <operator>==</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr></argument>; <argument><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr></argument>; return <argument><expr><name>out</name></expr></argument>; }</argument_list> <comment type="block">/*map*/</comment> template <name/>&lt;<name><typename>typename</typename> <name>Key</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>T</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>Compare</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>Alloc</name></name>&gt; <name>ostream</name> <modifier>&amp;</modifier><name>operator<name>&lt;&lt;</name></name><argument_list>(<argument><expr><name>ostream</name> <operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>Key</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>Compare</name></expr></argument>, <argument><expr><name>Alloc</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>cont</name></expr></argument>)</argument_list> <argument_list>{ <argument><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr></argument>; for<argument><expr><operator>(</operator><name>auto</name> <name>it</name> <operator>=</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call>; <name>it</name> <operator>!=</operator> <call><name><name>cont</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>it</name><operator>)</operator> <name>out</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>it</name> <operator>==</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">":"</literal> <operator>&lt;&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></argument>; <argument><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr></argument>; return <argument><expr><name>out</name></expr></argument>; }</argument_list> <comment type="block">/*multimap*/</comment> template <name/>&lt;<name><typename>typename</typename> <name>Key</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>T</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>Compare</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename> <name>Alloc</name></name>&gt; <name>ostream</name> <modifier>&amp;</modifier><name>operator<name>&lt;&lt;</name></name><argument_list>(<argument><expr><name>ostream</name> <operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><specifier>const</specifier> <name><name>multimap</name><argument_list type="generic">&lt;<argument><expr><name>Key</name></expr></argument>, <argument><expr><name>T</name></expr></argument>, <argument><expr><name>Compare</name></expr></argument>, <argument><expr><name>Alloc</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>cont</name></expr></argument>)</argument_list> <argument_list>{ <argument><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"{"</literal></expr></argument>; for<argument><expr><operator>(</operator><name>auto</name> <name>it</name> <operator>=</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call>; <name>it</name> <operator>!=</operator> <call><name><name>cont</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>it</name><operator>)</operator> <name>out</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>it</name> <operator>==</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">":"</literal> <operator>&lt;&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr></argument>; <argument><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"}"</literal></expr></argument>; return <argument><expr><name>out</name></expr></argument>; }</argument_list> <comment type="block">/*vectorND*/</comment> template <name/>&lt;<name><typename>typename</typename> <name>T</name></name>&gt; <name>ostream</name> <modifier>&amp;</modifier><name>operator<name>&lt;&lt;</name></name><argument_list>(<argument><expr><name>ostream</name> <operator>&amp;</operator><name>out</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <name>cont</name></expr></argument>)</argument_list> <argument_list>{ for<argument><expr><operator>(</operator><name>auto</name> <name>it</name> <operator>=</operator> <call><name><name>cont</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call>; <name>it</name> <operator>!=</operator> <call><name><name>cont</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call>; <operator>++</operator><name>it</name><operator>)</operator> <name>out</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr></argument>; return <argument><expr><name>out</name></expr></argument>; }</argument_list>
using <name>ll</name> <init>= <expr><name>long</name> <name>long</name></expr></init></decl>;</decl_stmt> <using>using <name>lll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using> <using>using <name>ull</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using> <using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using> <using>using <name>pll</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>vb</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>vvb</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vb</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>vll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>vvll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vll</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>vpll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>point</name> <init>= <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<function><type><name>ld</name></type> <name>get_time</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><call><name>ld</name><argument_list>(<argument><expr><call><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name>nanoseconds</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><call><name><name>high_resolution_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1e9</literal></expr>;</return> }</block></function> <function><type><name>ll</name></type> <name>sign</name><parameter_list>(<parameter><decl><type><name>ld</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return> }</block></function> <function><type><name>ll</name></type> <name>fmod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>mod</name></decl></parameter>)</parameter_list> <block>{ <if>if<condition>(<expr><operator>!</operator><name>mod</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if> <if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if> <if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>+=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>x</name></expr>;</return> }</block></function> <function><type><name>ll</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>mod</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt> <while>while<condition>(<expr><name>exp</name></expr>)</condition> <block>{ <if>if<condition>(<expr><operator>!</operator><name>mod</name></expr>)</condition><then> <block>{ <if>if<condition>(<expr><name>exp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>*</operator> <name>y</name></expr>;</expr_stmt> }</block></then> <else>else <block>{ <if>if<condition>(<expr><name>exp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><name>res</name> <operator>*</operator> <name>y</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><name>y</name> <operator>*</operator> <name>y</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></else></if> <expr_stmt><expr><name>exp</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <return>return <expr><name>res</name></expr>;</return> }</block></function>
<decl_stmt><decl><type><name>ld</name></type> <name>START_TIME</name> <init>= <expr><call><name>get_time</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>mt19937_64</name></type> <name>rand_mt64</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt> <decl_stmt><decl><type><name>mt19937</name></type> <name>rand_mt</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>INFll</name> <init>= <expr><call><name>ll</name><argument_list>(<argument><expr><literal type="number">1.1e18</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INFi</name> <init>= <expr><call><name>ll</name><argument_list>(<argument><expr><literal type="number">1.1e9</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>INF</name> <init>= <expr><ternary><condition><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ll</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr> ?</condition><then> <expr><call><name>ll</name><argument_list>(<argument><expr><name>INFi</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ll</name><argument_list>(<argument><expr><name>INFll</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>newl</name> <init>= <expr><literal type="char">'\n'</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>main_init</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>input_file</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>, <parameter><decl><type><name>string</name></type> <name>output_file</name> <init>= <expr><literal type="string">""</literal></expr></init></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>fast_cio</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>unsigned</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <if>if<condition>(<expr><name>fast_cio</name></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if> <macro><name>DBG</name><argument_list>(<argument><literal type="number">0</literal> &amp;&amp; input_file != <literal type="string">""</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><call><name><name>input_file</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <macro><name>DBG</name><argument_list>(<argument><literal type="number">0</literal> &amp;&amp; output_file != <literal type="string">""</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><call><name><name>output_file</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<comment type="line">// clang-format on</comment>

<function><type><name>yeee</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>main_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//</comment>

    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>M</name> <init>= <expr><block>{<expr><block>{<expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'P'</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'S'</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>B</name> <init>= <expr><block>{<expr><block>{<expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'S'</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'R'</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>TC</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>TC</name></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>TC</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>vll</name></type> <name>P</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>S</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name> <operator>&gt;&gt;</operator> <name><name>P</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>P</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>P</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>S</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ll</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>res</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>b</name> <init>= <expr><name><name>B</name><index>[<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>P</name><index>[<expr><name><name>M</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block>{
                <macro><name>DBG</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>b</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>M</name><index>[<expr><name>b</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>P</name><index>[<expr><name><name>M</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>P</name><index>[<expr><name><name>M</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>r</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if>
        }</block>

        <if>if<condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>r</name> <operator>&gt;=</operator> <name>N</name></expr>)</condition><then> <block>{
            <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro>
                <if>if<condition>(<expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><then>
                    <block type="pseudo"><macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">3</literal></argument>)</argument_list></macro>
                        <if>if<condition>(<expr><name><name>P</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{
                            <expr_stmt><expr><name><name>P</name><index>[<expr><name>j</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="string">"RPS"</literal><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt>
                            <break>break;</break>
                        }</block></then></if></block></then></if>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>newl</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <name>newl</name></expr>;</expr_stmt>
        }</block></then> <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>newl</name></expr>;</expr_stmt></block></else></if>
        <macro><name>DBG</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></while>
}</block></function>
</unit>
