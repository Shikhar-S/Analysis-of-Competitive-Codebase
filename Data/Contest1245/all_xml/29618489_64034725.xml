<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618489_64034725.cpp">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">33</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>d1</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>d2</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>lim1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>lim2</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>pos</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <comment type="line">//if(!lim1&amp;&amp;!lim2&amp;&amp;dp[pos]!=-1) return dp[pos];</comment>
    <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index></name></expr>;</return></block></then></if> 
    <decl_stmt><decl><type><name>int</name></type> <name>up1</name><init>=<expr><ternary><condition><expr><name>lim1</name></expr>?</condition><then><expr><name><name>d1</name><index>[<expr><name>pos</name></expr>]</index></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>up2</name><init>=<expr><ternary><condition><expr><name>lim2</name></expr>?</condition><then><expr><name><name>d2</name><index>[<expr><name>pos</name></expr>]</index></name></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>up1</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>up2</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><operator>!</operator><name>i</name><operator>||</operator><operator>!</operator><name>j</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lim1</name><operator>&amp;&amp;</operator><name>i</name><operator>==</operator><name>up1</name></expr></argument>,<argument><expr><name>lim2</name><operator>&amp;&amp;</operator><name>j</name><operator>==</operator><name>up2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index></name><operator>=</operator><name>ans</name></expr>;</expr_stmt>
    <comment type="line">//if(!lim1&amp;&amp;!lim2) dp[pos]=ans;</comment>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">33</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>d1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>d2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>p1</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>p2</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name></expr>)</condition><block>{
        <expr_stmt><expr><name><name>d1</name><index>[<expr><operator>++</operator><name>p1</name></expr>]</index></name><operator>=</operator><name>n</name><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <while>while<condition>(<expr><name>m</name></expr>)</condition><block>{
        <expr_stmt><expr><name><name>d2</name><index>[<expr><operator>++</operator><name>p2</name></expr>]</index></name><operator>=</operator><name>m</name><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>m</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>p1</name></expr></argument>,<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name><operator>-=</operator><literal type="number">2</literal><operator>*</operator><call><name>solve</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt> 
    }</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
