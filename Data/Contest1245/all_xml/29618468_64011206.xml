<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618468_64011206.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int ngtkana_is_genius = 0; ngtkana_is_genius &lt; int(n); ngtkana_is_genius++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>begin</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = int(begin); i &lt; int(end); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(), v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rand</name><parameter_list>(<parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::uniform_int_distribution&lt;&gt;(l, r)(mt)</cpp:value></cpp:define>
<using>using <name>lint</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><name>auto</name></type> <name>mt</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>mt19937_64</name></name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>random_device</name></name><block>{}</block><operator>(</operator><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>cmn</name> <init>= <expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl/></parameter></parameter_list>auto<ref_qualifier>&amp;</ref_qualifier> <name>a</name></lambda></expr></init></decl>, auto <decl><type ref="prev"/><name>b</name></decl>)<block>{<if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block></decl_stmt><empty_stmt>;</empty_stmt>
<decl_stmt><decl><type><name>auto</name></type> <name>cmx</name> <init>= <expr><lambda><capture>[]</capture><parameter_list>(<parameter><decl/></parameter></parameter_list>auto<ref_qualifier>&amp;</ref_qualifier> <name>a</name></lambda></expr></init></decl>, auto <decl><type ref="prev"/><name>b</name></decl>)<block>{<if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return>}</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block></decl_stmt><empty_stmt>;</empty_stmt>
<function><type><name>void</name></type> <name>debug_impl</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Head</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Tail</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>debug_impl</name><parameter_list>(<parameter><decl><type><name>Head</name></type> <name>head</name></decl></parameter>, <parameter><decl><type><name>Tail</name><modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list><block>{
  <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cerr</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>head</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>debug_impl</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>STOPIT</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>\
<cpp:value>do {\
  std::cerr &lt;&lt; std::boolalpha &lt;&lt; "[" &lt;&lt; #__VA_ARGS__ &lt;&lt; "]:";\
  debug_impl(__VA_ARGS__);\
  std::cerr &lt;&lt; std::noboolalpha;\
} while (false)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>T</name></type> <name>inverse</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>T</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>T</name></type> <name>t</name> <init>= <expr><name>m</name> <operator>/</operator> <name>a</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>m</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>u</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>swap</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>m</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>u</name></expr>;</return>
}</block></function>
<class><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
class <name>modular</name> <block>{<private type="default">
  </private><private>private:
    <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
  </private><public>public:
    <constructor_decl><specifier>constexpr</specifier> <name>modular</name><parameter_list>()</parameter_list> = <specifier>default</specifier>;</constructor_decl>
    <constructor_decl><specifier>constexpr</specifier> <name>modular</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> = <specifier>default</specifier>;</constructor_decl>
    <constructor_decl><specifier>constexpr</specifier> <name>modular</name><parameter_list>(<parameter><decl><type><name>modular</name><modifier>&amp;&amp;</modifier></type></decl></parameter>)</parameter_list> = <specifier>default</specifier>;</constructor_decl>
    <function_decl type="operator"><type><name>modular</name><modifier>&amp;</modifier></type> <name>operator<name>=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modular</name><modifier>&amp;</modifier></type></decl></parameter>)</parameter_list> = <specifier>default</specifier>;</function_decl>
    <function_decl type="operator"><type><name>modular</name><modifier>&amp;</modifier></type> <name>operator<name>=</name></name><parameter_list>(<parameter><decl><type><name>modular</name><modifier>&amp;&amp;</modifier></type></decl></parameter>)</parameter_list> = <specifier>default</specifier>;</function_decl>

    <constructor><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template>
    <name>modular</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>normalize</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></constructor>

    <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template>
    <specifier>static</specifier> <type><name>auto</name></type> <name>normalize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><ternary><condition><expr><operator>-</operator><call><name>mod</name><argument_list>()</argument_list></call> <operator>&lt;=</operator> <name>x</name> <operator>&amp;&amp;</operator> <name>x</name> <operator>&lt;</operator> <call><name>mod</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name>x</name> <operator>%</operator> <call><name>mod</name><argument_list>()</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></cast></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>v</name> <operator>+=</operator> <call><name>mod</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
      <return>return <expr><name>v</name></expr>;</return>
    }</block></function>

    <function type="operator"><type><specifier>auto</specifier> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>operator<name>()</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>value</name></expr>;</return> }</block></function>
    <function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template>
    <specifier>explicit</specifier> <name>operator <name>U</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>U</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></cast></expr>;</return> }</block></function>
    <function><specifier>constexpr</specifier> <specifier>static</specifier> <type><name>auto</name></type> <name>mod</name><parameter_list>()</parameter_list> <block>{ <return>return <expr><name><name>T</name><operator>::</operator><name>value</name></name></expr>;</return> }</block></function>

    <expr_stmt><expr><name>auto</name><operator>&amp;</operator> <name>operator<name>+=</name></name><operator>(</operator><specifier>const</specifier> <name>modular</name><operator>&amp;</operator> <name>other</name><operator>)</operator> <block>{
      <if>if <condition>(<expr><operator>(</operator><name>value</name> <operator>+=</operator> <name><name>other</name><operator>.</operator><name>value</name></name><operator>)</operator> <operator>&gt;=</operator> <call><name>mod</name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>value</name> <operator>-=</operator> <call><name>mod</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if></block></expr></expr_stmt>
      <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    </public>}</block>
    <decl>auto<modifier>&amp;</modifier> <name>operator<name>-=</name></name><argument_list>(<argument><expr><specifier>const</specifier> <name>modular</name><operator>&amp;</operator> <name>other</name></expr></argument>)</argument_list> <argument_list>{
      if <argument><expr><operator>(</operator><operator>(</operator><name>value</name> <operator>-=</operator> <name><name>other</name><operator>.</operator><name>value</name></name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <name>value</name> <operator>+=</operator> <call><name>mod</name><argument_list>()</argument_list></call></expr></argument>;
      return <argument><expr><operator>*</operator><name>this</name></expr></argument>;
    }</argument_list>
    template <name/>&lt;<name><typename>typename</typename> <name>U</name></name>&gt;
    auto<modifier>&amp;</modifier> <name>operator<name>+=</name></name><argument_list>(<argument><expr><specifier>const</specifier> <name>U</name><operator>&amp;</operator> <name>other</name></expr></argument>)</argument_list> <argument_list>{return <argument><expr><operator>*</operator><name>this</name> <operator>+=</operator> <call><name>modular</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>; }</argument_list>
    template <name/>&lt;<name><typename>typename</typename> <name>U</name></name>&gt;
    auto<modifier>&amp;</modifier> <name>operator<name>-=</name></name><argument_list>(<argument><expr><specifier>const</specifier> <name>U</name><operator>&amp;</operator> <name>other</name></expr></argument>)</argument_list> <argument_list>{return <argument><expr><operator>*</operator><name>this</name> <operator>-=</operator> <call><name>modular</name><argument_list>(<argument><expr><name>other</name></expr></argument>)</argument_list></call></expr></argument>; }</argument_list>
    auto <name>operator<name>-</name></name><argument_list>()</argument_list> const <argument_list>{ return <argument><expr><call><name>modular</name><argument_list>(<argument><expr><operator>-</operator><name>value</name></expr></argument>)</argument_list></call></expr></argument>; }</argument_list>
    auto<modifier>&amp;</modifier> <name>operator<name>++</name></name><argument_list>()</argument_list> <argument_list>{return <argument><expr><operator>*</operator><name>this</name> <operator>+=</operator> <literal type="number">1</literal></expr></argument>;}</argument_list>
    auto<modifier>&amp;</modifier> <name>operator<name>--</name></name><argument_list>()</argument_list> <argument_list>{return <argument><expr><operator>*</operator><name>this</name> <operator>-=</operator> <literal type="number">1</literal></expr></argument>;}</argument_list>
    auto  <name>operator<name>++</name></name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list> <argument_list>{<argument><expr><name>modular</name> <call><name>result</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr></argument>; <argument><expr><call><name>operator<name>++</name></name><argument_list>()</argument_list></call></expr></argument>; return <argument><expr><name>result</name></expr></argument>;}</argument_list>
    auto  <name>operator<name>--</name></name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list> <argument_list>{<argument><expr><name>modular</name> <call><name>result</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call></expr></argument>; <argument><expr><call><name>operator<name>--</name></name><argument_list>()</argument_list></call></expr></argument>; return <argument><expr><name>result</name></expr></argument>;}</argument_list>

    template <name/>&lt;<name><typename>typename</typename> <name>U</name></name> <init>= <expr><name>T</name><operator>&gt;</operator>
    <name>auto</name><operator>&amp;</operator> <name>operator<name>*=</name></name><operator>(</operator><specifier>const</specifier> <name>modular</name><operator>&amp;</operator> <name>rhs</name><operator>)</operator> <block>{
      <expr><name>value</name> <operator>=</operator> <call><name>normalize</name><argument_list>(<argument><expr><cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></cast> <operator>*</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>int64_t</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name><name>rhs</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></cast></expr></argument>)</argument_list></call></expr>;
      <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></expr></init></decl>
    <decl>auto<modifier>&amp;</modifier> <name>operator<name>/=</name></name><argument_list>(<argument><expr><specifier>const</specifier> <name>modular</name><operator>&amp;</operator> <name>other</name></expr></argument>)</argument_list> <argument_list>{
      return <argument><expr><operator>*</operator><name>this</name> <operator>*=</operator> <call><name>modular</name><argument_list>(<argument><expr><call><name>inverse</name><argument_list>(<argument><expr><name><name>other</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><call><name>mod</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>;
    }</argument_list></decl></class>
};
<struct><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> struct <name>is_modular</name> <super>: <name><name>std</name><operator>::</operator><name>false_type</name></name></super> <block>{<public type="default"/>}</block>;</struct>
<struct><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> struct <name><name>is_modular</name> <argument_list type="generic">&lt;<argument><expr><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <super>: <name><name>std</name><operator>::</operator><name>true_type</name></name></super><block>{<public type="default"/>}</block>;</struct>
<decl_stmt><decl><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>constexpr</specifier> <type><name>bool</name></type> <name>is_modular_v</name> <init>= <expr><name><name><name>is_modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>lhs</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name>rhs</name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>U</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>lhs</name> <operator>==</operator> <call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>rhs</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><name>U</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>rhs</name></expr>;</return> }</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>lhs</name> <operator>==</operator> <name>rhs</name><operator>)</operator></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>U</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>lhs</name> <operator>==</operator> <name>rhs</name><operator>)</operator></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><name>U</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>!</operator><operator>(</operator><name>lhs</name> <operator>==</operator> <name>rhs</name><operator>)</operator></expr>;</return> }</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>U</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>U</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>rhs</name></expr>;</return> }</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>U</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>U</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>rhs</name></expr>;</return> }</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>U</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>U</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>rhs</name></expr>;</return> }</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><name>U</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>rhs</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template> <type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>U</name></type> <name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>lhs</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>rhs</name></expr>;</return> }</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template>
<type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>power</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>U</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>x</name> <init>= <expr><name>a</name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>b</name> <operator>/=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name>b</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>x</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>modular</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><call><name><name>std</name><operator>::</operator><name>to_string</name></name><argument_list>(<argument><expr><call><name>a</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>auto</name></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
  -&gt; <type><name><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name><name>is_modular_v</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>ostream</name></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></name></type><block>{
    <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <call><name>a</name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>auto</name></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list>
  -&gt; <type><name><name>std</name><operator>::</operator><name><name>enable_if_t</name><argument_list type="generic">&lt;<argument><expr><name><name>is_modular_v</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>std</name><operator>::</operator><name>istream</name></name><operator>&amp;</operator></expr></argument>&gt;</argument_list></name></name></type> <block>{
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt> <expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>T</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>is</name></expr>;</return>
}</block></function>

<comment type="line">// using mod_type = int;</comment>

<comment type="line">// struct variable_mod { static mod_type value; };</comment>
<comment type="line">// mod_type variable_mod::value;</comment>
<comment type="line">// mod_type&amp; mod = variable_mod::value;</comment>
<comment type="line">// using mint = modular&lt; variable_mod &gt;;</comment>

<decl_stmt><decl><specifier>constexpr</specifier> <type><name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1</literal><literal type="char">'000'</literal><literal type="number">000</literal><literal type="char">'007;
using mint = modular&lt;std::integral_constant&lt;std::decay_t&lt;decltype(mod)&gt;, mod&gt;&gt;;

template &lt; template &lt; typename ... &gt; class Container, typename Value &gt;
auto runlength(Container&lt; Value &gt; const&amp; v) {
  auto n = (int)v.size();
  if (n == 0)
    { return Container&lt; std::pair&lt; Value, int &gt; &gt;{}; }
  auto pos = Container&lt; int &gt;{};
  for (auto i = 1; i &lt; n; i++) {
    if (v.at(i - 1) != v.at(i))
      { pos.emplace_back(i); }
  }
  pos.emplace_back(n);
  auto m = (int)pos.size();
  auto len = Container&lt; int &gt;(m);
  std::adjacent_difference(pos.begin(), pos.end(), len.begin());
  auto ret = Container&lt; std::pair&lt; Value, int &gt; &gt;(m);
  for (auto i = 0; i != m; i++)
    { ret.at(i) = {v.at(pos.at(i) - 1), len.at(i)}; }
  return ret;
}

template &lt; typename Container, typename Value = typename Container::value_type, std::enable_if_t&lt;!std::is_same&lt; Container, std::string &gt;::value, std::nullptr_t&gt; = nullptr&gt;
std::istream&amp; operator&gt;&gt; (std::istream&amp; is, Container&amp; v)
  { for (auto &amp; x : v) { is &gt;&gt; x; } return is; }

template &lt; typename Container, typename Value = typename Container::value_type, std::enable_if_t&lt;!std::is_same&lt; Container, std::string &gt;::value, std::nullptr_t&gt; = nullptr &gt;
std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, Container const&amp; v) {
 os &lt;&lt; "{";
  for (auto it = v.begin(); it != v.end(); it++)
    {os &lt;&lt; (it != v.begin() ? "," : "") &lt;&lt; *it;}
  return os &lt;&lt; "}";
}

template &lt; template &lt; typename ... &gt; class Tuple,  typename... Args, std::size_t ... Inds, std::size_t = std::tuple_size&lt; Tuple &lt; Args ... &gt; &gt;::value &gt;
std::istream&amp; tuple_input_impl(std::istream&amp; os, Tuple&lt;Args...&gt;&amp; tuple, std::integer_sequence&lt;std::size_t, Inds...&gt;)
  { (void)std::initializer_list&lt;int&gt;{((void)(os &gt;&gt; std::get&lt; Inds &gt;(tuple)), 0)...}; return os; }
template &lt; template &lt; typename ... &gt; class Tuple,  typename... Args, std::size_t = std::tuple_size&lt; Tuple &lt; Args ... &gt; &gt;::value &gt;
std::istream&amp; operator&gt;&gt; (std::istream&amp; os, Tuple&lt;Args...&gt;&amp; tuple)
  { return tuple_input_impl(os, tuple, std::index_sequence_for&lt;Args...&gt;()); }

template &lt; template &lt; typename ... &gt; class Tuple,  typename... Args, std::size_t ... Inds, std::size_t = std::tuple_size&lt; Tuple &lt; Args ... &gt; &gt;::value &gt;
std::ostream&amp; tuple_output_impl(std::ostream&amp; os, const Tuple&lt;Args...&gt;&amp; tuple, std::integer_sequence&lt;std::size_t, Inds...&gt;)
  { os &lt;&lt; "("; (void)std::initializer_list&lt;int&gt;{((void)(os &lt;&lt; (Inds &gt; 0 ? "," : "") &lt;&lt; std::get&lt; Inds &gt;(tuple)), 0)...}; return os &lt;&lt; ")"; }
template &lt; template &lt; typename ... &gt; class Tuple,  typename... Args, std::size_t = std::tuple_size&lt; Tuple &lt; Args ... &gt; &gt;::value &gt;
std::ostream&amp; operator&lt;&lt; (std::ostream&amp; os, const Tuple&lt;Args...&gt;&amp; tuple)
 { return tuple_output_impl(os, tuple, std::index_sequence_for&lt;Args...&gt;()); }

int main() {
  std::cin.tie(0); std::cin.sync_with_stdio(false);
  std::string s; std::cin &gt;&gt; s;
  int n = s.length();
  std::vector&lt; char &gt; a(n);
  std::copy(all(s), a.begin());
  auto rle = runlength(a);
  // debug(rle);

  std::vector&lt; mint &gt; fib(n + 1);
  fib.at(0) = 1;
  fib.at(1) = 1;
  rep(i, 2, n + 1) {
    fib.at(i) = fib.at(i - 1) + fib.at(i - 2);
  }

  mint ret = 1;
  for (auto pair : rle) {
    char c; int x; std::tie(c, x) = pair;
    if (c == '</literal><literal type="string">u'</literal> || c == '<name>n</name><literal type="char">') {
      ret *= fib.at(x);
    }
    if (c == '</literal><name>w</name><literal type="char">' || c == '</literal><name>m</name><literal type="char">'</literal></expr></init></decl></decl_stmt>) {
      ret = 0;
    }
  }
  std::cout &lt;&lt; ret &lt;&lt; std::endl;
  return 0;
}
</unit>
