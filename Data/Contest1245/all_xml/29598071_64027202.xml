<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29598071_64027202.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<for>for<control>(<init>;</init><condition><expr><name>t</name><operator>--</operator></expr>;</condition><incr/>)</control><block>{
		<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>s</name></expr><operator>,</operator> <expr><name>s2</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>win</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init>;</init><condition><expr><call><name><name>std</name><operator>::</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>a</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s2</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr><operator>,</operator> <expr><operator>++</operator> <name>win</name></expr>;</expr_stmt></block></for>
		<for>for<control>(<init>;</init><condition><expr><call><name><name>std</name><operator>::</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>b</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s2</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr><operator>,</operator> <expr><operator>++</operator> <name>win</name></expr>;</expr_stmt></block></for>
		<for>for<control>(<init>;</init><condition><expr><call><name><name>std</name><operator>::</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>c</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s2</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr><operator>,</operator> <expr><operator>++</operator> <name>win</name></expr>;</expr_stmt></block></for>

		<for>for<control>(<init>;</init><condition><expr><call><name><name>std</name><operator>::</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>a</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s2</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block></for>
		<for>for<control>(<init>;</init><condition><expr><call><name><name>std</name><operator>::</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>b</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s2</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block></for>
		<for>for<control>(<init>;</init><condition><expr><call><name><name>std</name><operator>::</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>c</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s2</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block></for>

		<for>for<control>(<init>;</init><condition><expr><call><name><name>std</name><operator>::</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>a</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s2</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block></for>
		<for>for<control>(<init>;</init><condition><expr><call><name><name>std</name><operator>::</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>b</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s2</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block></for>
		<for>for<control>(<init>;</init><condition><expr><call><name><name>std</name><operator>::</operator><name>count</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>c</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>s2</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block></for>
		<if>if<condition>(<expr><name>win</name> <operator>&gt;=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal> <operator>&lt;&lt;</operator> <name>s2</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
}</block></function>
</unit>
