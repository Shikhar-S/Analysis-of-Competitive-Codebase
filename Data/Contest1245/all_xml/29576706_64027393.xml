<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29576706_64027393.cpp">
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_USE_MATH_DEFINES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<using>using  <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>next</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>a</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">9</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><block>{ <expr><name>a</name></expr>,<expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr> }</block></expr>;</return></block></then></if>
		<return>return <expr><block>{ <expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>,<expr><literal type="number">9</literal></expr> }</block></expr>;</return>
	}</block></then></if>
	<if>if <condition>(<expr><name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><block>{ <expr><name>a</name></expr>,<expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr> }</block></expr>;</return></block></then></if>
	<return>return <expr><block>{ <expr><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr> }</block></expr>;</return>
}</block></function>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>x</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>dp</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><literal type="number">9</literal> <operator>-</operator> <name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	}</block></for>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name>i</name> <operator>*</operator><literal type="number">10</literal><operator>+</operator><name><name>j</name><argument_list type="generic">&lt;<argument><expr><literal type="number">90</literal> <operator>||</operator> <name>i</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>j</name></expr></argument>&gt;</argument_list></name><literal type="number">95</literal></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>ld</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
						<decl_stmt><decl><type><name>auto</name></type> <name>f</name> <init>= <expr><call><name>next</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>a</name> <operator>+</operator> <name><name>x</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></for>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>/</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for></block></then>
		<else>else

			<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name><name>j</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">90</literal> <operator>||</operator> <name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>j</name></expr></argument>&gt;</argument_list></name><literal type="number">95</literal></expr>)</condition><then> <block>{
					<decl_stmt><decl><type><name>ld</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
					<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
						<decl_stmt><decl><type><name>auto</name></type> <name>f</name> <init>= <expr><call><name>next</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>a</name> <operator>+</operator> <name><name>x</name><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></for>
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>t</name> <operator>/</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for></block></else></if>



	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
}</block></function></unit>
