<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29614627_64014011.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wfor</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=j;i&lt;k;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mfor</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=j;i&gt;=k;--i)</cpp:value></cpp:define>
<comment type="line">// void read(ll &amp;x) {</comment>
<comment type="line">// 	char ch = getchar(); x = 0;</comment>
<comment type="line">// 	for (; ch &lt; '0' || ch &gt; '9'; ch = getchar());</comment>
<comment type="line">// 	for (; ch &gt;= '0' &amp;&amp; ch &lt;= '9'; ch = getchar()) x = x * 10 + ch - '0';</comment>
<comment type="line">// }</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>maxn</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ans</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>test</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"F:\\Desktop\\question\\in.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ubuntu</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"/home/time/debug/debug/in"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"/home/time/debug/debug/out"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ans</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <macro><name>wfor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>,<argument>maxn</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>ans</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>ans</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>flag</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cnt1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cnt2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>wfor</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>s.length()</argument>)</argument_list></macro>
    <block>{
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal><operator>||</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then><else>else
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>cnt2</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name><name>ans</name><index>[<expr><name>cnt2</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>cnt2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt1</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then><elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>cnt1</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name><name>ans</name><index>[<expr><name>cnt1</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name>cnt1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt2</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif><else>else
            <block>{
                <if>if<condition>(<expr><name>cnt2</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name><name>ans</name><index>[<expr><name>cnt2</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
                }</block></then></if>
                <if>if<condition>(<expr><name>cnt1</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name><name>ans</name><index>[<expr><name>cnt1</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name>cnt2</name><operator>=</operator><name>cnt1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block>
    <if>if<condition>(<expr><name>cnt2</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name><name>ans</name><index>[<expr><name>cnt2</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name>cnt1</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name><name>ans</name><index>[<expr><name>cnt1</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name>flag</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
