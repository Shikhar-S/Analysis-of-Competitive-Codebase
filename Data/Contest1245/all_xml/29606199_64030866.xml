<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29606199_64030866.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fornum</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>,<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(A=B;A&lt;C;A++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line" format="doxygen">/////////////////////////////////////////////////////</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>(ll)1e18</cpp:value></cpp:define>


<decl_stmt><decl><type><name>ll</name></type> <name>N</name></decl>,<decl><type ref="prev"/><name><name>C</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>K</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pll</name></type> <name><name>XY</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pll</name></type> <name><name>cost</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>mk</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ans1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>ans2</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>d</name><parameter_list>(<parameter><decl><type><name>pll</name></type> <name>xy1</name></decl></parameter>, <parameter><decl><type><name>pll</name></type> <name>xy2</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>xy2</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>xy1</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>xy2</name><operator>.</operator><name>second</name></name> <operator>-</operator> <name><name>xy1</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function> 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>fornum</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>XY</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>}</block></expr>;</expr_stmt>
    }</block>
    <macro><name>fornum</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>fornum</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
    <macro><name>fornum</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><operator>-</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><block>{<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>ll</name></type> <name>flg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>qa</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><name><name>qa</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>auto</name></type> <name>b</name> <init>= <expr><name><name>qa</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>mk</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then><block>{
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>flg</name> <operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name> <operator>-=</operator> <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mk</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>qa</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>ans1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><call><name><name>ans2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>qa</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <if>if<condition>(<expr><name>flg</name><operator>==</operator><name>N</name></expr>)</condition><then><block>{
            <break>break;</break>
        }</block></then></if>
        <macro><name>fornum</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><operator>!</operator><name><name>mk</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><operator>-</operator><operator>(</operator><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>K</name><index>[<expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <call><name>d</name><argument_list>(<argument><expr><name><name>XY</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>XY</name><index>[<expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>, <expr><block>{<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>,<expr><name>b</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
    }</block></while>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n%d\n"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>,<argument><expr><call><name><name>ans1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>fornum</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>ans1.size()</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument> ,<argument><expr><name><name>ans1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%lld\n"</literal></expr></argument>, <argument><expr><call><name><name>ans2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>fornum</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>ans2.size()</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument>, <argument><expr><name><name>ans2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><name><name>ans2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>


    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
