<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29599766_64015031.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><literal type="number">41</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><literal type="number">41</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>X</name></decl>, <decl><type ref="prev"/><name>Y</name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag2</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>flag1</name></expr>]</index><index>[<expr><name>flag2</name></expr>]</index></name> <operator>==</operator> <name>idx</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>flag1</name></expr>]</index><index>[<expr><name>flag2</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>flag1</name></expr>]</index><index>[<expr><name>flag2</name></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><operator>(</operator><name>X</name> <operator>&gt;&gt;</operator> <name>x</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><operator>(</operator><name>Y</name> <operator>&gt;&gt;</operator> <name>x</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>edx</name> <init>= <expr><ternary><condition><expr><name>flag1</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>edy</name> <init>= <expr><ternary><condition><expr><name>flag2</name></expr> ?</condition><then> <expr><name>b</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>edx</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>edy</name></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <name>j</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>flag1</name> <operator>&amp;</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name>edx</name><operator>)</operator></expr></argument>, <argument><expr><name>flag2</name> <operator>&amp;</operator> <operator>(</operator><name>j</name> <operator>==</operator> <name>edy</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></for></block></for>
	<return>return <expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>flag1</name></expr>]</index><index>[<expr><name>flag2</name></expr>]</index></name> <operator>=</operator> <name>ans</name></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>xx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yy</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>xx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>yy</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><name>X</name> <operator>=</operator> <name>xx</name></expr><operator>,</operator> <expr><name>Y</name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>++</operator> <name>idx</name></expr>;</expr_stmt>
	<return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>( )</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name> <operator>--</operator></expr>)</condition> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><call><name>calc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>calc</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>calc</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
