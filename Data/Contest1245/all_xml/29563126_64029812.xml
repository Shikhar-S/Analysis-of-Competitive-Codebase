<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29563126_64029812.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" --&gt; "&lt;&lt;x&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>,<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type><name>mp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>par</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>fin</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>par</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><name>a</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
    <return>return <expr><name><name>par</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><call><name>fin</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>un</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>a</name><operator>=</operator><call><name>fin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name><operator>=</operator><call><name>fin</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>a</name><operator>==</operator><name>b</name></expr>)</condition><then>
        <block type="pseudo"><return>return ;</return></block></then>
    <else>else
    <block>{
        <if>if<condition>(<expr><name><name>c</name><index>[<expr><name>a</name></expr>]</index></name><operator>&lt;</operator><name><name>c</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>par</name><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>par</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></else></if>
    }</block></else></if>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name><name>e</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>v</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>need</name><init>=<expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>need</name></expr>,<expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>


    <for>for<control>(<init><decl><type><name>auto</name></type> <name>tr</name><range>:<expr><name>v</name></expr></range></decl></init>)</control>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>i</name><init>=<expr><name><name>tr</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>j</name><init>=<expr><name><name>tr</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>a</name><init>=<expr><call><name>fin</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>b</name><init>=<expr><call><name>fin</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>c1</name><init>=<expr><name><name>c</name><index>[<expr><name>a</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>c2</name><init>=<expr><name><name>c</name><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>need</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>need</name><operator>*=</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>need</name><operator>&lt;</operator><call><name>max</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><name>a</name><operator>!=</operator><name>b</name></expr>)</condition><then>
            <block>{
                    <decl_stmt><decl><type><name>ll</name></type> <name>t1</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>ll</name></type> <name>t2</name><init>=<expr><name>j</name></expr></init></decl>;</decl_stmt>
                    <comment type="line">//mn=min(need,mn);</comment>
                    <expr_stmt><expr><call><name>un</name><argument_list>(<argument><expr><name>t1</name></expr></argument>,<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>e</name><index>[<expr><name>t1</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>t2</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            }</block></then></if>
        }</block></then></if>
    }</block></for>


<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type><name>uu</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type><name>a1</name></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>j</name><init>=<expr><call><name>fin</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>!</operator><name><name>uu</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>c</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>a1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>uu</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>

    }</block></then></if>
}</block></for>
<decl_stmt><decl><type><name>ll</name></type> <name>ed</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name><range>:<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control>
    <block>{
        <expr_stmt><expr><name>ed</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ans</name><operator>+=</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>u</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

    }</block></for>
}</block></for>
<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>a1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name><range>:<expr><name>a1</name></expr></range></decl></init>)</control>
<block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>u</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt>
}</block></for>
<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ed</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
<for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
<block>{
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>u</name><range>:<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control>
    <block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>u</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></for>
}</block></for>


}</block></function>
</unit>
