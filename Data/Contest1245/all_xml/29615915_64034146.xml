<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615915_64034146.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>double</name></type> <name><name>e</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef>
<function><specifier>inline</specifier> <type><name>pi</name></type> <name>nxt</name><parameter_list>(<parameter><decl><type><name>pi</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>first</name></name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><ternary><condition><expr><name><name>x</name><operator>.</operator><name>second</name></name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then> <expr><operator>--</operator><name><name>x</name><operator>.</operator><name>first</name></name></expr></then><else>:<expr><operator>--</operator><name><name>x</name><operator>.</operator><name>second</name></name></expr></else></ternary></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><ternary><condition><expr><name><name>x</name><operator>.</operator><name>second</name></name><operator>==</operator><literal type="number">10</literal></expr>?</condition><then> <expr><operator>--</operator><name><name>x</name><operator>.</operator><name>first</name></name></expr></then><else>:<expr><operator>++</operator><name><name>x</name><operator>.</operator><name>second</name></name></expr></else></ternary></expr>;</expr_stmt></block></else></if>
	<return>return <expr><name>x</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>pi</name></type> <name>pre</name><parameter_list>(<parameter><decl><type><name>pi</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>x</name><operator>.</operator><name>first</name></name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><ternary><condition><expr><name><name>x</name><operator>.</operator><name>second</name></name><operator>==</operator><literal type="number">10</literal></expr>?</condition><then> <expr><operator>++</operator><name><name>x</name><operator>.</operator><name>first</name></name></expr></then><else>:<expr><operator>++</operator><name><name>x</name><operator>.</operator><name>second</name></name></expr></else></ternary></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><ternary><condition><expr><name><name>x</name><operator>.</operator><name>second</name></name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then> <expr><operator>++</operator><name><name>x</name><operator>.</operator><name>first</name></name></expr></then><else>:<expr><operator>--</operator><name><name>x</name><operator>.</operator><name>second</name></name></expr></else></ternary></expr>;</expr_stmt></block></else></if>
	<return>return <expr><name>x</name></expr>;</return>	
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">6</literal></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">7</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name><operator>-</operator><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></for>	
		<expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/=</operator><literal type="number">6</literal></expr>;</expr_stmt>	
		<expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<decl_stmt><decl><type><name>pi</name></type> <name>cur</name><init>=<expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>cur</name><operator>!=</operator><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>pi</name></type> <name>t</name><init>=<expr><name>cur</name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>t</name><operator>=</operator><call><name>nxt</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>e</name><index>[<expr><name><name>cur</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name><name>t</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>t</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>e</name><index>[<expr><name><name>t</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>t</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name>e</name><index>[<expr><name><name>cur</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/=</operator><literal type="number">6</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><index>[<expr><name><name>cur</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>f</name><index>[<expr><name><name>cur</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name><name>cur</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>e</name><index>[<expr><name><name>cur</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>f</name><index>[<expr><name><name>cur</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr>]</index><index>[<expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><name><name>cur</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1e18</literal></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name>cur</name><operator>=</operator><call><name>pre</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.10f"</literal></expr></argument>,<argument><expr><call><name>min</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>e</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
