<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29605964_64016788.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2005</literal></expr></init></decl>;</decl_stmt>
<struct>struct <name>UnionFind</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name><name>parent</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>rnk</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
	<constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rnk</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></for>
	}</block></constructor>
	<function><type><name>int</name></type> <name>root</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name><operator>!=</operator><name>x</name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>
	}</block></function>
	<function><type><name>void</name></type> <name>connect</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>rx</name><init>=<expr><call><name>root</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>ry</name><init>=<expr><call><name>root</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>rx</name><operator>==</operator><name>ry</name></expr>)</condition><then>
			<block type="pseudo"><return>return;</return></block></then></if>
		<if>if<condition>(<expr><name>rx</name><operator>&gt;</operator><name>ry</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>parent</name><index>[<expr><name>ry</name></expr>]</index></name><operator>=</operator><name>rx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rnk</name><index>[<expr><name>rx</name></expr>]</index></name><operator>+=</operator><name><name>rnk</name><index>[<expr><name>ry</name></expr>]</index></name></expr>;</expr_stmt>	
		}</block></then></if> 
		<if>if<condition>(<expr><name>rx</name><operator>&lt;=</operator><name>ry</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>parent</name><index>[<expr><name>rx</name></expr>]</index></name><operator>=</operator><name>ry</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rnk</name><index>[<expr><name>ry</name></expr>]</index></name><operator>+=</operator><name><name>rnk</name><index>[<expr><name>rx</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>UnionFind</name></type> <name>uf</name><argument_list>(<argument><expr><literal type="number">2001</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<struct>struct <name>edge</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>w</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>edge</name></type> <name>x</name></decl></parameter>)</parameter_list><specifier>const</specifier>
	<block>{
		<return>return <expr><name>w</name><operator>&lt;</operator><name><name>x</name><operator>.</operator><name>w</name></name></expr>;</return>	
	}</block></function> 
</public>}</block><decl><name><name>e</name><index>[<expr><name>N</name><operator>*</operator><name>N</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>x</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>a1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>a2</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>u</name><operator>=</operator><name>u</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>v</name><operator>=</operator><name>v</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>w</name><operator>=</operator><name>w</name></expr>;</expr_stmt>	
}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>dis</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><call><name>dis</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>e</name><operator>+</operator><name>cnt</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>cnt</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></init></decl>,<decl><type ref="prev"/><name>v</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>w</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><call><name><name>uf</name><operator>.</operator><name>root</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>uf</name><operator>.</operator><name>root</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><call><name><name>uf</name><operator>.</operator><name>connect</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><name>w</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>u</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>a1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>v</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>a1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name><name>a2</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if> 
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><call><name><name>a1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>a1</name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><call><name><name>a2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>a2</name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for> 
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
