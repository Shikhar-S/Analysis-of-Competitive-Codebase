<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29600558_64009050.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>int</name></type> <name>nr</name></decl>, <decl><type ref="prev"/><name>ns</name></decl>, <decl><type ref="prev"/><name>np</name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>sq</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 
<decl_stmt><decl><type><name>char</name></type> <name><name>as</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt> 
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt> 

    <while>while <condition>(<expr><name>T</name> <operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>nr</name> <operator>&gt;&gt;</operator> <name>np</name> <operator>&gt;&gt;</operator> <name>ns</name></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>sq</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> 
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>sq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>np</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>np</name> <operator>--</operator></expr><operator>,</operator> <expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name>cnt</name> <operator>++</operator></expr>;</expr_stmt></block></then> 
            <elseif>else <if>if <condition>(<expr><name><name>sq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>ns</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ns</name> <operator>--</operator></expr><operator>,</operator> <expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name>cnt</name> <operator>++</operator></expr>;</expr_stmt></block></then></if></elseif> 
            <elseif>else <if>if <condition>(<expr><name><name>sq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>nr</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nr</name> <operator>--</operator></expr><operator>,</operator> <expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name>cnt</name> <operator>++</operator></expr>;</expr_stmt></block></then></if></elseif></if> 
        }</block></for>

        <if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt> 
            <continue>continue ;</continue>
        }</block></then></if>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
            <if>if <condition>(<expr><name>nr</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nr</name> <operator>--</operator></expr><operator>,</operator> <expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt></block></then>
            <elseif>else <if>if <condition>(<expr><name>np</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>np</name> <operator>--</operator></expr><operator>,</operator> <expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if></elseif>
            <elseif>else <if>if <condition>(<expr><name>ns</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ns</name> <operator>--</operator></expr><operator>,</operator> <expr><name><name>as</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt></block></then></if></elseif></if> 
        }</block></for>
        <expr_stmt><expr><name><name>as</name><index>[<expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="string">"%s"</literal><operator>,</operator> <name>as</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
