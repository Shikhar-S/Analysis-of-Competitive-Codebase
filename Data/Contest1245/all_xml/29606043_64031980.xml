<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29606043_64031980.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>random_device</name></type> <name>rd</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rnd</name><argument_list>(<argument><expr><call><name>rd</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>nextRand</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">1e9</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>X</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>Y</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>C</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>K</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>queue</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>V</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>queue</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>E</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>T</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>Vis</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>G</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>C</name><index>[<expr><name>m</name></expr>]</index></name></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>m</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>

	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>K</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>s</name> <operator>+=</operator> <name><name>C</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>Vis</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>T</name><index>[<expr><name>m</name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<comment type="block">/*else
		{
			e++;
			E.push(m + 1);
		}*/</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>tm</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<if>if <condition>(<expr><name><name>C</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>m</name></expr>]</index></name> <operator>-</operator> <name><name>X</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index></name> <operator>-</operator> <name><name>Y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>K</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <name><name>K</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>C</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>m</name></expr>]</index></name> <operator>-</operator> <name><name>X</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>m</name></expr>]</index></name> <operator>-</operator> <name><name>Y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>K</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <name><name>K</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>T</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>G</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><operator>!</operator><name><name>Vis</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<if>if <condition>(<expr><name>tm</name> <operator>==</operator> <name>m</name></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>tm</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block></then>
				<elseif>else
					<if>if <condition>(<expr><name><name>C</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>C</name><index>[<expr><name>tm</name></expr>]</index></name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>tm</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt></block></then></if></elseif></if>
			}</block></then></if>
		}</block></for>
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>T</name><index>[<expr><name>tm</name></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>Vis</name><index>[<expr><name>tm</name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>e</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>tm</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>G</name><index>[<expr><name>tm</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>m</name> <operator>=</operator> <name>tm</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>s</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>!</operator><call><name><name>V</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>V</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal> <operator>&lt;&lt;</operator> <name>e</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>!</operator><call><name><name>E</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>E</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>E</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
