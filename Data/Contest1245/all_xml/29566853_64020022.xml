<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29566853_64020022.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_USE_MATH_DEFINES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a=b;a&lt;c;a++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>i</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld",&amp;a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>ll</name></type> <name>p</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cache</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
	<elseif>else <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if></elseif></if>
	<decl_stmt><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>ret</name> <init>= <expr><name><name>cache</name><index>[<expr><name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>cache</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return></block></then></if>
	<return>return <expr><operator>(</operator><name>ret</name> <operator>=</operator> <operator>(</operator><call><name>dp</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>dp</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>p</name><operator>)</operator></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cache</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cache</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>prev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>str</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>i</name><operator>&lt;</operator><call><name><name>str</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name><name>str</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call><index>[<expr><name>i</name><operator>++</operator></expr>]</index></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'w'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><then> <block>{
			 <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then>
			<elseif>else <if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>*</operator> <call><name>dp</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<else>else <block>{
				<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then>
			<elseif>else <if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>*</operator> <call><name>dp</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<else>else <block>{
				<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if></elseif>
		<else>else <block>{
			<if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>*</operator> <call><name>dp</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then>
			<elseif>else <if>if <condition>(<expr><name>prev</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>*</operator> <call><name>dp</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
			}</block></then></if></elseif></if>
		}</block></else></if>
		<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <operator>(</operator><name>ans</name> <operator>*</operator> <call><name>dp</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>%</operator> <name>p</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
