<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29594828_63998357.cpp">    <cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
    <using>using <namespace>namespace <name>std</name>;</namespace></using>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
    <typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
    <class>class <name>Matrix</name>
    <block>{<private type="default">
      
       </private><public>public:
          <decl_stmt><decl><type><name>int</name></type> <name>size</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name><name>m</name><index>[<expr><literal type="number">200</literal></expr>]</index><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>
          <constructor><name>Matrix</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
          <block>{
             <expr_stmt><expr><name>size</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
            
             <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                   <block type="pseudo"><expr_stmt><expr><name><name>m</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for></block></for>
          }</block></constructor>
          <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>
          <function><type><name>void</name></type> <name>printer</name><parameter_list>()</parameter_list>
          <block>{
             <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block>{
                   <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>size</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                   <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>m</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
                   <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
                }</block></for>
          }</block></function>
       <function><type><name>Matrix</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Matrix</name></type> <name>B</name></decl></parameter>)</parameter_list>
       <block>{
          <decl_stmt><decl><type><name>Matrix</name></type> <name>ans</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
          <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
          <block>{
             <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>size</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
             <block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>size</name></expr> ;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control>
                <block>{ 
                   <expr_stmt><expr><name><name>ans</name><operator>.</operator><name>m</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>m</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><name><name>B</name><operator>.</operator><name>m</name><index>[<expr><operator>(</operator><name>k</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>size</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>ans</name><operator>.</operator><name>m</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></for>
             }</block></for>
          }</block></for>
          <return>return <expr><name>ans</name></expr>;</return>
       }</block></function>
    <function><type><name>Matrix</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>Matrix</name></type> <name>A</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>
    <block>{
         <comment type="line">// cout&lt;&lt;"called : k : "&lt;&lt;k&lt;&lt;endl;</comment>
          <decl_stmt><decl><type><name>Matrix</name></type> <name>ans</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
          
          <if>if<condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
             <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>A</name></expr>;</expr_stmt></block></then>
          <elseif>else <if>if<condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
          <block>{
             <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>size</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                   <block type="pseudo"><expr_stmt><expr><name><name>ans</name><operator>.</operator><name>m</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for></block></for>
          }</block></then></if></elseif>
          <else>else
          <block>{
             <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name><name>A</name><operator>.</operator><name>power</name></name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><name>k</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name><name>ans</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
             <if>if<condition>(<expr><name>k</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name><name>ans</name><operator>.</operator><name>mul</name></name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
          }</block></else></if>
          <return>return <expr><name>ans</name></expr>;</return>
    }</block></function>
  </public>}</block>;</class>
    

    <function><type><name>int</name></type>  <name>main</name><parameter_list>()</parameter_list>
    <block>{
       <comment type="line">// ios_base::sync_with_stdio(false);</comment>
       <comment type="line">// cin.tie(NULL);</comment>
        
       <comment type="line">// int a,b;</comment>
       <comment type="line">// cin&gt;&gt;a&gt;&gt;b;</comment>
       <comment type="line">// int dp[100]={};</comment>
       <comment type="line">// for(int i = 0; i&lt;100 ; i++)</comment>
       <comment type="line">// {</comment>
       <comment type="line">//    if(i == 0)</comment>
       <comment type="line">//      dp[i]=0;</comment>
       <comment type="line">//    else if(i-a&gt;=0 &amp;&amp; dp[i-a]==0)</comment>
       <comment type="line">//      dp[i]=0;</comment>
       <comment type="line">//    else if(i-b&gt;=0 &amp;&amp; dp[i-b]==0)</comment>
       <comment type="line">//      dp[i]=0;</comment>
       <comment type="line">//    else</comment>
       <comment type="line">//      dp[i] = 1;</comment>

       <comment type="line">//    //cout&lt;&lt;" "&lt;&lt;i&lt;&lt;" : "&lt;&lt;dp[i]&lt;&lt;endl;</comment>
       <comment type="line">//    cout&lt;&lt;dp[i]&lt;&lt;" ";</comment>
       <comment type="line">//  }</comment>

       <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
       <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
       <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
       <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>

          <if>if<condition>(<expr><call><name>__gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Finite\n"</literal></expr>;</expr_stmt></block></then>
          <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Infinite\n"</literal></expr>;</expr_stmt></block></else></if>
       }</block></while>
       <return>return <expr><literal type="number">0</literal></expr>;</return>
      
      
    }</block></function></unit>
