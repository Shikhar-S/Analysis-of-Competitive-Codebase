<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615689_64034789.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><literal type="number">10</literal></expr></init></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>xx</name></decl>,<decl><type ref="prev"/><name>yy</name></decl>,<decl><type ref="prev"/><name>xxx</name></decl>,<decl><type ref="prev"/><name>yyy</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>db</name></type> <name><name>f</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>pre</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>xx</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>yy</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name>y</name><operator>==</operator><name>n</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>x</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name></expr>;</expr_stmt></block></else></if>
	}</block></then> <elseif>else 
	<if>if <condition>(<expr><name>y</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>x</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	}</block></then></if></elseif> <else>else<block>{
		<if>if <condition>(<expr><name>x</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	}</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>nex</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>xx</name></decl></parameter>,<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>yy</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name>y</name><operator>==</operator><name>n</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name></expr>;</expr_stmt></block></else></if>
	}</block></then> <elseif>else 
	<if>if <condition>(<expr><name>y</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	}</block></then></if></elseif> <else>else<block>{
		<if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
	}</block></else></if>	
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">7</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> 	
			<block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name><operator>-</operator><name>j</name></expr>]</index></name><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>/=</operator><literal type="number">1.0</literal><operator>*</operator><operator>(</operator><name>i</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">8</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>cnt</name><operator>&lt;=</operator><literal type="number">93</literal></expr>;</condition><incr><expr><name>cnt</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>xx</name><operator>=</operator><name>x</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>y</name></expr><operator>,</operator><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><call><name>pre</name><argument_list>(<argument><expr><name>xxx</name></expr></argument>,<argument><expr><name>yyy</name></expr></argument>,<argument><expr><name>xx</name></expr></argument>,<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>+=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>xxx</name></expr>]</index><index>[<expr><name>yyy</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>xxx</name><operator>-</operator><name><name>a</name><index>[<expr><name>xxx</name></expr>]</index><index>[<expr><name>yyy</name></expr>]</index></name></expr>]</index><index>[<expr><name>yyy</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>xx</name><operator>=</operator><name>xxx</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>yyy</name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name>nex</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.11lf"</literal></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
