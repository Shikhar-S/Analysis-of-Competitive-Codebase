<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29604625_64019030.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">// #include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
 
<comment type="line">// using namespace __gnu_pbds;</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<comment type="line">// template &lt;typename T&gt;</comment>
<comment type="line">// using ordered_set = tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;</comment>
 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<comment type="line">// typedef complex&lt;long double&gt; point;</comment>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list> 
<block>{ 
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>      <comment type="line">// Initialize result </comment>
  
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>  <comment type="line">// Update x if it is more than or  </comment>
                <comment type="line">// equal to p </comment>
  
    <while>while <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> 
    <block>{ 
        <comment type="line">// If y is odd, multiply x with result </comment>
        <if>if <condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> 
            <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>res</name><operator>*</operator><name>x</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if> 
  
        <comment type="line">// y must be even now </comment>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt> <comment type="line">// y = y/2 </comment>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>   
    }</block></while> 
    <return>return <expr><name>res</name></expr>;</return> 
}</block></function> 

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pre</name></decl>;</decl_stmt>


<function><type><name>ll</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>count</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>k</name> <init>= <expr><name>count</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>count</name><operator>-</operator><literal type="number">2</literal> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block>{
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>pre</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><call><name>power</name><argument_list>(<argument><expr><name><name>pre</name><index>[<expr><name>count</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><call><name>power</name><argument_list>(<argument><expr><name><name>pre</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>count</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>k</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>pre</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pre</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>pre</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <name><name>pre</name><index>[<expr><name>z</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>z</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pre</name><index>[<expr><name>z</name></expr>]</index></name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>z</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>z</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>z</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>z</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>char</name></type> <name>prev</name> <init>= <expr><name><name>s</name><index>[<expr><name>z</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>z</name></expr>]</index></name> <operator>==</operator> <name>prev</name></expr>)</condition><then><block>{
					<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
				}</block></then> <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>z</name></expr>]</index></name> <operator>!=</operator> <name>prev</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>z</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>z</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal><operator>)</operator></expr>)</condition><then><block>{
					<if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
						<decl_stmt><decl><type><name>ll</name></type> <name>k</name> <init>= <expr><call><name>calc</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>ans</name> <operator>*=</operator> <name>k</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>prev</name> <operator>=</operator> <name><name>s</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></then></if></elseif> <else>else <block>{
					<if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
						<decl_stmt><decl><type><name>ll</name></type> <name>k</name> <init>= <expr><call><name>calc</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
						<expr_stmt><expr><name>ans</name> <operator>*=</operator> <name>k</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
					<break>break;</break>
				}</block></else></if>
			}</block></for>
			<if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
				<decl_stmt><decl><type><name>ll</name></type> <name>k</name> <init>= <expr><call><name>calc</name><argument_list>(<argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>ans</name> <operator>*=</operator> <name>k</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
 
 </unit>
