<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29603626_64007276.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">105</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ss</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>t</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>ss</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>R</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>P</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>S</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>R</name><operator>++</operator></expr>;</expr_stmt></block></then>
			<elseif>else <if>if <condition>(<expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>P</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
			<else>else <block type="pseudo"><expr_stmt><expr><name>S</name><operator>++</operator></expr>;</expr_stmt></block></else></if></block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>win</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>S</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>win</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><if>if <condition>(<expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>p</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr><operator>,</operator><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block></then></if>
				}</block></then><elseif>else <if>if <condition>(<expr><name><name>ss</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{
					<if>if <condition>(<expr><name>s</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr><operator>,</operator><expr><operator>--</operator><name>s</name></expr>;</expr_stmt></block></then></if>
				}</block></then></if></elseif><else>else<block>{
					<if>if <condition>(<expr><name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr><operator>,</operator><expr><operator>--</operator><name>r</name></expr>;</expr_stmt></block></then></if>
				}</block></else></if></block></for>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
					<if>if <condition>(<expr><name>p</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr><operator>,</operator><expr><operator>--</operator><name>p</name></expr>;</expr_stmt></block></then>
					<elseif>else <if>if <condition>(<expr><name>s</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr><operator>,</operator><expr><operator>--</operator><name>s</name></expr>;</expr_stmt></block></then></if></elseif>
					<else>else <block type="pseudo"><expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt></block></else></if>
				}</block></then></if></block></for>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
