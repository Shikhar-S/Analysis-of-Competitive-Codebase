<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29572666_64031436.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>f</name><index>[<expr><literal type="number">101</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>id</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>x</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">10</literal><operator>*</operator><operator>(</operator><name>x</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">10</literal><operator>*</operator><name>x</name><operator>-</operator><name>y</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>X</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><name>x</name><operator>/</operator><literal type="number">10</literal><operator>+</operator><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>Y</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>(</operator><name>x</name><operator>/</operator><literal type="number">10</literal><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">10</literal><operator>-</operator><name>x</name><operator>%</operator><literal type="number">10</literal></expr>;</return></block></then></if>
    <return>return <expr><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>up</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>id</name><argument_list>(<argument><expr><call><name>X</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><name>y</name></expr></argument>,<argument><expr><call><name>Y</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><call><name>id</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">6</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>i</name><operator>-</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/=</operator><call><name>min</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><call><name>up</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.10lf"</literal></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><literal type="number">99</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
