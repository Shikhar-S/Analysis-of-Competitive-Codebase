<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29614569_63999009.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>t</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>asd</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator><name>a</name> <operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>

    <if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>sw</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>b</name> <operator>=</operator> <name>sw</name></expr>;</expr_stmt>
    }</block></then></if>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>a</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
      <decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><operator>(</operator><name>a</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      
      
      <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name>i</name> <operator>&amp;&amp;</operator> <name>f</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>i</name><operator>%</operator><name>j</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
      }</block></for>
      <if>if<condition>(<expr><name>f</name> <operator>&amp;&amp;</operator> <name>b</name><operator>%</operator><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><literal type="string">"infinite\n"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>asd</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
        <break>break;</break>
      }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><name>asd</name></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"finite\n"</literal></expr>;</expr_stmt></block></then></if>
    <continue>continue;</continue>
  }</block></for>
}</block></function>
</unit>
