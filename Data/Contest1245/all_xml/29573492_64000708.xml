<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29573492_64000708.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>watch</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; (#x) &lt;&lt; " is " &lt;&lt; (x) &lt;&lt; '\n'</cpp:value></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dashline</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; "=============\n"</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>watch</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dashline</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MX</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MX2</name> <init>= <expr><literal type="number">3e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">2e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sz</name> <init>= <expr><literal type="number">131072</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>str</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><literal type="number">111</literal></expr>]</index></name><init>=<expr><block>{}</block></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>    
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>x</name><init>=<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>x</name><operator>==</operator><literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>}</block></then>
            <elseif>else <if>if <condition>(<expr><name>x</name><operator>==</operator><literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>c</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>}</block></then></if></elseif>
            <elseif>else <if>if <condition>(<expr><name>x</name><operator>==</operator><literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>a</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>}</block></then></if></elseif></if>
        }</block></for>
        <comment type="line">//1P 2S 3R</comment>
        <if>if <condition>(<expr><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal> <operator>&gt;</operator><name>cnt</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if>
                <if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'S'</literal></expr>;</expr_stmt></block></then></if>
                <if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'R'</literal></expr>;</expr_stmt></block></then></if>
            }</block></then>
            <else>else
            <block>{
                <if>if <condition>(<expr><name>a</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'R'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>}</block></then>
                <elseif>else <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'P'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if></elseif>
                <else>else <block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'S'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>}</block></else></if>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>

    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
