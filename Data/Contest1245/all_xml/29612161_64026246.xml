<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29612161_64026246.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIMN</name></cpp:macro> <cpp:value>2010</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>long</name> <name>long</name></expr></argument> , <argument><expr><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name><name>mch</name><index>[<expr><name>DIMN</name> <operator>*</operator><name>DIMN</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>pct</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name></decl> , <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>v</name><index>[<expr><name>DIMN</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name><name>c</name><index>[<expr><name>DIMN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>k</name><index>[<expr><name>DIMN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>c2</name><index>[<expr><name>DIMN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tt</name><index>[<expr><name>DIMN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>f</name><index>[<expr><name>DIMN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>prov</name><index>[<expr><name>DIMN</name></expr>]</index></name></decl> ,<decl><type ref="prev"/><name><name>fm</name><index>[<expr><name>DIMN</name> <operator>*</operator><name>DIMN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>modul</name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{

    <if>if <condition>( <expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
    <return>return <expr><operator>-</operator><name>x</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>rad</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <while>while <condition>(<expr><name><name>tt</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name><name>tt</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block></while>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fin</name> <init>= <expr><name>stdin</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fout</name> <init>= <expr><name>stdout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>i</name></decl> , <decl><type ref="prev"/><name>m</name></decl> , <decl><type ref="prev"/><name>j</name></decl> , <decl><type ref="prev"/><name>x</name></decl> , <decl><type ref="prev"/><name>y</name></decl> , <decl><type ref="prev"/><name>rx</name></decl> , <decl><type ref="prev"/><name>ry</name></decl> , <decl><type ref="prev"/><name>poz</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>sol</name></decl> , <decl><type ref="prev"/><name>curr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fscanf</name><argument_list>(<argument><expr><name>fin</name></expr></argument>,<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>fscanf</name><argument_list>(<argument><expr><name>fin</name></expr></argument>,<argument><expr><literal type="string">"%llu%llu"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>fscanf</name><argument_list>(<argument><expr><name>fin</name></expr></argument>,<argument><expr><literal type="string">"%llu"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>curr</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>fscanf</name><argument_list>(<argument><expr><name>fin</name></expr></argument>,<argument><expr><literal type="string">"%llu"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>tt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name>m</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mch</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <operator>(</operator><call><name>max</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument> , <argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument> , <argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call>  <operator>+</operator>
                            <call><name>max</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument> , <argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument> , <argument><expr><name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mch</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mch</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name> <argument_list>(<argument><expr><name>mch</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mch</name><operator>+</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>sol</name><operator>=</operator><name>curr</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>poz</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pus</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>x</name><operator>=</operator><name><name>mch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><name><name>mch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rx</name><operator>=</operator><call><name>rad</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ry</name><operator>=</operator><call><name>rad</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rx</name><operator>!=</operator><name>ry</name></expr>)</condition><then><block>{
            <comment type="line">// trb sa le unesc pe x si y</comment>
            <if>if <condition>(<expr><name>curr</name> <operator>+</operator> <name><name>mch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>rx</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>c</name><index>[<expr><name>ry</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>curr</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>curr</name><operator>+=</operator><name><name>mch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>rx</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>c</name><index>[<expr><name>ry</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>fm</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>pus</name><operator>++</operator></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>tt</name><index>[<expr><name>rx</name></expr>]</index></name><operator>&lt;</operator><name><name>tt</name><index>[<expr><name>ry</name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>tt</name><index>[<expr><name>rx</name></expr>]</index></name><operator>+=</operator><name><name>tt</name><index>[<expr><name>ry</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>tt</name><index>[<expr><name>ry</name></expr>]</index></name><operator>=</operator><name>rx</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>c</name><index>[<expr><name>rx</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>rx</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>c</name><index>[<expr><name>ry</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name><name>tt</name><index>[<expr><name>ry</name></expr>]</index></name><operator>+=</operator><name><name>tt</name><index>[<expr><name>rx</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>tt</name><index>[<expr><name>rx</name></expr>]</index></name><operator>=</operator><name>ry</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>c</name><index>[<expr><name>ry</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>rx</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>c</name><index>[<expr><name>ry</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></then></if>
        <if>if <condition>(<expr><name>sol</name> <operator>&gt;</operator> <name>curr</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>sol</name> <operator>=</operator> <name>curr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>poz</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fout</name></expr></argument>,<argument><expr><literal type="string">"%llu\n"</literal></expr></argument>,<argument><expr><name>sol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>curr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>tt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>prov</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>curr</name><operator>+=</operator><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>poz</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>x</name><operator>=</operator><name><name>mch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><name><name>mch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>rx</name><operator>=</operator><call><name>rad</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ry</name><operator>=</operator><call><name>rad</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>rx</name><operator>!=</operator><name>ry</name></expr>)</condition><then><block>{
            <comment type="line">// trb sa le unesc pe x si y</comment>
            <if>if <condition>(<expr><name>curr</name> <operator>+</operator> <name><name>mch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>c2</name><index>[<expr><name>rx</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>c2</name><index>[<expr><name>ry</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>curr</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>curr</name><operator>+=</operator><name><name>mch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>c2</name><index>[<expr><name>rx</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>c2</name><index>[<expr><name>ry</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>tt</name><index>[<expr><name>rx</name></expr>]</index></name><operator>&lt;</operator><name><name>tt</name><index>[<expr><name>ry</name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>tt</name><index>[<expr><name>rx</name></expr>]</index></name><operator>+=</operator><name><name>tt</name><index>[<expr><name>ry</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>tt</name><index>[<expr><name>ry</name></expr>]</index></name><operator>=</operator><name>rx</name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>c2</name><index>[<expr><name>rx</name></expr>]</index></name> <operator>&gt;</operator> <name><name>c2</name><index>[<expr><name>ry</name></expr>]</index></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name><name>prov</name><index>[<expr><name>rx</name></expr>]</index></name> <operator>=</operator> <name><name>prov</name><index>[<expr><name>ry</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><name><name>c2</name><index>[<expr><name>rx</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>c2</name><index>[<expr><name>rx</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>c2</name><index>[<expr><name>ry</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name><name>tt</name><index>[<expr><name>ry</name></expr>]</index></name><operator>+=</operator><name><name>tt</name><index>[<expr><name>rx</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>tt</name><index>[<expr><name>rx</name></expr>]</index></name><operator>=</operator><name>ry</name></expr>;</expr_stmt>
                    <if>if <condition>(<expr><name><name>c2</name><index>[<expr><name>ry</name></expr>]</index></name> <operator>&gt;</operator> <name><name>c2</name><index>[<expr><name>rx</name></expr>]</index></name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name><name>prov</name><index>[<expr><name>ry</name></expr>]</index></name> <operator>=</operator> <name><name>prov</name><index>[<expr><name>rx</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
                    <expr_stmt><expr><name><name>c2</name><index>[<expr><name>ry</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>c2</name><index>[<expr><name>rx</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>c2</name><index>[<expr><name>ry</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>,<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name>pus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>rx</name> <operator>=</operator> <call><name>rad</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><operator>!</operator><name><name>f</name><index>[<expr><name>rx</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>,<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>prov</name><index>[<expr><name>rx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>rx</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>fout</name></expr></argument>,<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fout</name></expr></argument>,<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>pus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><name><name>fm</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>fprintf</name> <argument_list>(<argument><expr><name>fout</name></expr></argument>,<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>mch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr></argument> , <argument><expr><name><name>mch</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
