<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613416_64024278.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>fa</name><index>[<expr><literal type="number">110000</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>node</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>,<decl><type ref="prev"/><name>to</name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>len</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>s</name><index>[<expr><literal type="number">2000</literal><operator>*</operator><literal type="number">4000</literal></expr>]</index></name></decl>;</struct>
<function><type><name>int</name></type> <name>getfa</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
    <return>return <expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>getfa</name><argument_list>(<argument><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>un</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>x</name><operator>=</operator><call><name>getfa</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>y</name><operator>=</operator><call><name>getfa</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name><operator>==</operator><name>y</name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
    <expr_stmt><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>node</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>x</name><operator>.</operator><name>len</name></name><operator>&lt;</operator><name><name>y</name><operator>.</operator><name>len</name></name></expr>;</return>}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>aa</name><index>[<expr><literal type="number">2010</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>X</name><index>[<expr><literal type="number">2010</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Y</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>ass</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>x</name><operator>&gt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><operator>-</operator><name>x</name></expr></else></ternary></expr>;</return>}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>v1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>v2</name></decl>;</decl_stmt>
<function><name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//cout&lt;&lt;sizeof(s)/1048576;</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>,<decl><type ref="prev"/><name>m</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>from</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>m</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>to</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>aa</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <comment type="line">//scanf("%d",&amp;s[m].len);</comment>
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>len</name><operator>=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>aa</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>aa</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>ass</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>X</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>ass</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>Y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>i</name><operator>&gt;=</operator><name>j</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>m</name></expr>]</index></name><operator>.</operator><name>from</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>m</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>to</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><name>m</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>x</name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr><operator>,</operator><expr><name>y</name><operator>=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>z</name><init>=<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><call><name>getfa</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>getfa</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name>un</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>x</name><operator>&gt;</operator><name>y</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>ans</name><operator>+=</operator><name>z</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name><name>v2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>
</unit>
