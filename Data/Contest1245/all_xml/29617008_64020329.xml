<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617008_64020329.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>A</name><index>[<expr><literal type="number">20</literal></expr>]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>vis</name><index>[<expr><literal type="number">20</literal></expr>]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>go</name><index>[<expr><literal type="number">20</literal></expr>]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>d</name><index>[<expr><literal type="number">20</literal></expr>]</index><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>double</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>d</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>d</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>double</name><modifier>&amp;</modifier></type> <name>ans</name> <init>= <expr><name><name>d</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pos</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>pos</name> <operator>=</operator> <name><name>go</name><index>[<expr><name><name>pos</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>pos</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>double</name></type> <name>p</name> <init>= <expr><call><name>dp</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name><name>A</name><index>[<expr><name><name>pos</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>pos</name><operator>.</operator><name>second</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>dp</name><argument_list>(<argument><expr><name><name>pos</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>A</name><index>[<expr><name><name>pos</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>pos</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pos</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <operator>(</operator><name>p</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<comment type="line">//freopen("in.txt", "r", stdin);</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name><name>go</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
			<expr_stmt><expr><name><name>go</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name><name>go</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
			<expr_stmt><expr><name><name>go</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>make_pair</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> 
		<block type="pseudo"><expr_stmt><expr><name><name>vis</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">0.5</literal> <operator>*</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">0.5</literal> <operator>*</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.5</literal> <operator>+</operator> <literal type="number">1.0</literal> <operator>/</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1.2</literal> <operator>+</operator> <literal type="number">1.0</literal> <operator>/</operator> <literal type="number">5</literal> <operator>*</operator> <operator>(</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>ans</name> <init>= <expr><call><name>dp</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.10f\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
