<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29566751_64013216.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lp</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>start</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll var = start; var &lt;end ; ++var)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rlp</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>start</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll var = start; var&gt;=end ; var--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vld</name></cpp:macro> <cpp:value>vector&lt;ld&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pld</name></cpp:macro> <cpp:value>pair&lt;ld,ld&gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpll</name></cpp:macro> <cpp:value>vector&lt;pll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpld</name></cpp:macro> <cpp:value>vector&lt;pld&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X.begin(),X.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ll)((x).size()))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name><init>=<expr><literal type="number">2e3</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>,<decl><type ref="prev"/><name>inf</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>sum</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ary</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>root</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{
	<while>while<condition>(<expr><name><name>ary</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>i</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name><name>ary</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>ary</name><index>[<expr><name><name>ary</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>i</name><operator>=</operator><name><name>ary</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><comment type="line">//**************************************</comment>
	}</block></while>
	<return>return <expr><name>i</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>un</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>rA</name><init>=<expr><call><name>root</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>rB</name><init>=<expr><call><name>root</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>rA</name><operator>==</operator><name>rB</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>sum</name><index>[<expr><name>rA</name></expr>]</index></name><operator>&gt;</operator><name><name>sum</name><index>[<expr><name>rB</name></expr>]</index></name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>ary</name><index>[<expr><name>rB</name></expr>]</index></name><operator>=</operator><name>rA</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sum</name><index>[<expr><name>rA</name></expr>]</index></name><operator>+=</operator><name><name>sum</name><index>[<expr><name>rB</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<expr_stmt><expr><name><name>ary</name><index>[<expr><name>rA</name></expr>]</index></name><operator>=</operator><name>rB</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sum</name><index>[<expr><name>rB</name></expr>]</index></name><operator>+=</operator><name><name>sum</name><index>[<expr><name>rA</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>lp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name><name>ary</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>	    
	<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
	<macro><name>lp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<macro><name>lp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
	<macro><name>lp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<macro><name>lp</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>d</name><init>=<expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
	}</block>
	<macro><name>lp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><operator>(</operator><name>ll</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>mk</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vll</name></type> <name>cv</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vpll</name></type> <name>pv</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mk</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>lp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>v.size()</argument>)</argument_list></macro>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>id1</name><init>=<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ss</name><operator>.</operator><name>ff</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>id2</name><init>=<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>ss</name><operator>.</operator><name>ss</name></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>id2</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><name><name>mk</name><index>[<expr><call><name>root</name><argument_list>(<argument><expr><name>id1</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>mk</name><index>[<expr><name>id1</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>mk</name><index>[<expr><call><name>root</name><argument_list>(<argument><expr><name>id1</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>cv</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>id1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then>
		<else>else
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>r1</name><init>=<expr><call><name>root</name><argument_list>(<argument><expr><name>id1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ll</name></type> <name>r2</name><init>=<expr><call><name>root</name><argument_list>(<argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>r1</name><operator>==</operator><name>r2</name></expr>)</condition><then>
			<block>{
				<continue>continue;</continue>
			}</block></then>
			<elseif>else <if>if<condition>(<expr><name><name>mk</name><index>[<expr><name>r1</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>mk</name><index>[<expr><name>r2</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
			<block>{
				<continue>continue;</continue>
			}</block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name><name>mk</name><index>[<expr><name>r1</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>mk</name><index>[<expr><name>r2</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>un</name><argument_list>(<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>pv</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>id1</name></expr></argument>,<argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name><name>mk</name><index>[<expr><name>r2</name></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>mk</name><index>[<expr><name>r1</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>un</name><argument_list>(<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>pv</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>id1</name></expr></argument>,<argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<else>else
			<block>{
				<expr_stmt><expr><call><name>un</name><argument_list>(<argument><expr><name>r1</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>pv</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>id1</name></expr></argument>,<argument><expr><name>id2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>

	}</block>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>cv</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<macro><name>lp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>cv.size()</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>cv</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>pv</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<macro><name>lp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>pv.size()</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>pv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>pv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ss</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
