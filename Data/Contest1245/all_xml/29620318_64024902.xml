<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29620318_64024902.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; int(n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = int(n); i &lt; int(m); i++)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>LLINF</name> <init>= <expr><literal type="number">1e18</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// æå°å¨åæ¨ O(ElogV)?</comment>
<comment type="line">// verify : https://onlinejudge.u-aizu.ac.jp/problems/GRL_2_A</comment>
<struct><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
struct <name>Prim</name> <block>{<public type="default">
</public><private>private:
    <struct>struct <name>Edge</name><block>{<public type="default">
        <decl_stmt><decl><type><name>T</name></type> <name>cost</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>to</name></decl>;</decl_stmt>
        <function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Edge</name></type> <name>e</name></decl></parameter>)</parameter_list><specifier>const</specifier> <block>{
            <return>return <expr><name><name>this</name><operator>-&gt;</operator><name>cost</name></name> <operator>&gt;</operator> <name><name>e</name><operator>.</operator><name>cost</name></name></expr>;</return>
        }</block></function>
        <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Edge</name></type> <name>e</name></decl></parameter>)</parameter_list><specifier>const</specifier> <block>{
            <return>return <expr><name><name>this</name><operator>-&gt;</operator><name>cost</name></name> <operator>&lt;</operator> <name><name>e</name><operator>.</operator><name>cost</name></name></expr>;</return>
        }</block></function>
    </public>}</block>;</struct>
    <decl_stmt><decl><type><name>int</name></type> <name>V</name></decl>;</decl_stmt> <comment type="line">// é ç¹æ°</comment>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>G</name></decl>;</decl_stmt>
</private><public>public:
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>connected</name></decl>;</decl_stmt>
    <constructor><name>Prim</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>V</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>V</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call> </member_init_list><block>{
        <expr_stmt><expr><call><name><name>connected</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>G</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>void</name></type> <name>add_edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>to</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>weight</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>G</name><index>[<expr><name>from</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name>weight</name></expr>,<expr><name>to</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>G</name><index>[<expr><name>to</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><block>{<expr><name>weight</name></expr>,<expr><name>from</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>T</name></type> <name>build</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>T</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>used</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>P</name>;</typedef>
        <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>&amp;</modifier></type><name>e</name> <range>: <expr><name><name>G</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></range></decl></init>)</control> <block>{
            <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><name>e</name></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>used</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>ee</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>e</name> <init>= <expr><name><name>ee</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>par</name> <init>= <expr><name><name>ee</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt><comment type="line">//parent</comment>
            <if>if <condition>(<expr><name><name>used</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>used</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>connected</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>connected</name><index>[<expr><name>par</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>to</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>e</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>&amp;</modifier></type><name>u</name> <range>: <expr><name><name>G</name><index>[<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><name><name>used</name><index>[<expr><name><name>u</name><operator>.</operator><name>to</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><name>u</name></expr>,<expr><name><name>e</name><operator>.</operator><name>to</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></while>
        <return>return <expr><name>res</name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>Prim</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>G</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>point</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>k</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>point</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>point</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>G</name><operator>.</operator><name>add_edge</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
        <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><call><name><name>G</name><operator>.</operator><name>add_edge</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>point</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>-</operator><name><name>point</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>G</name><operator>.</operator><name>build</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>G</name><operator>.</operator><name>connected</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>G.connected[n].size()</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>G</name><operator>.</operator><name>connected</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>G.connected[i].size()</argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name><name>G</name><operator>.</operator><name>connected</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        }</block>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>cnt</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <macro><name>REP</name><argument_list>(<argument>j</argument>,<argument>G.connected[i].size()</argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name><name>G</name><operator>.</operator><name>connected</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>G</name><operator>.</operator><name>connected</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
    }</block>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
