<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615917_64004835.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>R</name></decl>, <decl><type ref="prev"/><name>P</name></decl>, <decl><type ref="prev"/><name>S</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>answer</name><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>InOutPut</name><parameter_list>()</parameter_list> <block>{
   <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>R</name> <operator>&gt;&gt;</operator> <name>P</name> <operator>&gt;&gt;</operator> <name>S</name></expr>;</expr_stmt>
   <decl_stmt><decl><type><name>string</name></type> <name>Bob</name></decl>;</decl_stmt>
   <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>Bob</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>Bob</name> <operator>=</operator> <literal type="char">' '</literal> <operator>+</operator> <name>Bob</name></expr>;</expr_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>needed</name> <init>= <expr><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
   }</block></for>
   <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name><name>Bob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>R</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
         <expr_stmt><expr><name>R</name><operator>--</operator></expr>;</expr_stmt>
         <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>Bob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>P</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
         <expr_stmt><expr><name>P</name><operator>--</operator></expr>;</expr_stmt>
         <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>Bob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>S</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
         <expr_stmt><expr><name>S</name><operator>--</operator></expr>;</expr_stmt>
         <expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
         <expr_stmt><expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
      }</block></then></if>
   }</block></for>
   <if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <name>needed</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
      <return>return;</return>
   }</block></then></if>
   <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><then> <block>{
         <if>if <condition>(<expr><name>R</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>R</name><operator>--</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
         }</block></then></if>
         <if>if <condition>(<expr><name>P</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>P</name><operator>--</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
         }</block></then></if>
         <if>if <condition>(<expr><name>S</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>S</name><operator>--</operator></expr>;</expr_stmt>
            <continue>continue;</continue>
         }</block></then></if>
      }</block></then></if>
   }</block></for>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>answer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
   }</block></for>
   <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
   <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   <comment type="line" format="doxygen">///freopen ("test.inp", "r", stdin);</comment>
   <comment type="line" format="doxygen">///freopen ("test.out", "w", stdout);</comment>

   <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
   <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
   <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>T</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name>InOutPut</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   }</block></for>

   <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
