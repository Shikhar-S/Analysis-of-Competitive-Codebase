<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616693_64003323.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>X.begin(),X.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(int I = A; (I) &lt;= (B); (I)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORW</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(int I = A; (I) &lt; (B);  (I)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(int I = A; (I) &gt;= (B); (I)--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>memset(X,0,sizeof(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>int(X.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTAINS</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(A.find(X) != A.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro>            <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro>            <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro>             <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro>             <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name></type> <name>slong</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ldouble</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>slong</name></type> <name>INF</name> <init>= <expr><literal type="number">1000000100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldouble</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>read_data</name><parameter_list>()</parameter_list> <block>{

}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>z</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>xs</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>xs</name></expr>;</expr_stmt>


        <decl_stmt><decl><type><name>string</name></type> <name>ys</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>wins</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>FORW</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>and</operator> <name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>wins</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>and</operator> <name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>wins</name></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name><name>xs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>and</operator> <name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>wins</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block>
        <macro><name>FORW</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <block>{
            <if>if <condition>(<expr><name><name>ys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>and</operator> <name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>ys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> }</block></then></if><empty_stmt>;</empty_stmt>
            <if>if <condition>(<expr><name><name>ys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>and</operator> <name>p</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>ys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> }</block></then></if><empty_stmt>;</empty_stmt>
            <if>if <condition>(<expr><name><name>ys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal> <operator>and</operator> <name>s</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name><name>ys</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> }</block></then></if><empty_stmt>;</empty_stmt>
        }</block>
        <if>if <condition>(<expr><name>wins</name> <operator>&lt;</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <name>ys</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block>
}</block></function>
</unit>
