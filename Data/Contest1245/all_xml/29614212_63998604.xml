<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29614212_63998604.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>P</name></decl>, <decl><type ref="prev"/><name>S</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>t</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>R</name> <operator>&gt;&gt;</operator> <name>P</name> <operator>&gt;&gt;</operator> <name>S</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>R</name><operator>--</operator></expr><operator>,</operator> <expr><name>ans</name> <operator>+=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then>
      <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>P</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>P</name><operator>--</operator></expr><operator>,</operator> <expr><name>ans</name> <operator>+=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
      <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>S</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>S</name><operator>--</operator></expr><operator>,</operator> <expr><name>ans</name> <operator>+=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif> 
      <else>else <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <if>if <condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><then> <block>{
          <if>if <condition>(<expr><name>R</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>R</name><operator>--</operator></expr><operator>,</operator> <expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt></block></then>
          <elseif>else <if>if <condition>(<expr><name>P</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>P</name><operator>--</operator></expr><operator>,</operator> <expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if></elseif>
          <elseif>else <if>if <condition>(<expr><name>S</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>S</name><operator>--</operator></expr><operator>,</operator> <expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt></block></then></if></elseif></if>
        }</block></then></if>
      }</block></for>
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
