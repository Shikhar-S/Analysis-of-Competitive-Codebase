<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615561_64002360.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<namespace>namespace <block>{
  <using>using <name>Integer</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using> <comment type="line">//__int128;</comment>
  <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>S</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>S</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>is</name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</return>}</block></function>
  <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vec</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>val</name><range>: <expr><name>vec</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name>val</name></expr>;</expr_stmt></block></for> <return>return <expr><name>is</name></expr>;</return>}</block></function>
  <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>,</name></name>  <parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><name>is</name> <operator>&gt;&gt;</operator> <name>val</name></expr>;</return>}</block></function>
  <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>S</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>,<argument><expr><name>S</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</return>}</block></function>
  <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>vec</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>i</name><operator>==</operator><call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>?</condition><then><expr><literal type="string">""</literal></expr></then><else>:<expr><literal type="string">" "</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt></block></for> <return>return <expr><name>os</name></expr>;</return>}</block></function>
  <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>,</name></name>  <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>val</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name>val</name></expr>;</return>}</block></function>

  <function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>H</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H</name><modifier>&amp;</modifier></type> <name>head</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>head</name></expr>;</expr_stmt> }</block></function>
  <function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>H</name></parameter>, <parameter><type><name>class</name> <modifier>...</modifier></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H</name><modifier>&amp;</modifier></type> <name>head</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier> <modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>head</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><template>template<parameter_list>&lt;<parameter><type><name>class</name> <modifier>...</modifier></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier> <modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>values</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></function>

  <function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>H</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>eprint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H</name><modifier>&amp;</modifier></type> <name>head</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>head</name></expr>;</expr_stmt> }</block></function>
  <function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>H</name></parameter>, <parameter><type><name>class</name> <modifier>...</modifier></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>eprint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H</name><modifier>&amp;</modifier></type> <name>head</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier> <modifier>...</modifier></type> <name>tail</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>head</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>eprint</name><argument_list>(<argument><expr><name>tail</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
  <function><template>template<parameter_list>&lt;<parameter><type><name>class</name> <modifier>...</modifier></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>eprintln</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier> <modifier>...</modifier></type> <name>values</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><call><name>eprint</name><argument_list>(<argument><expr><name>values</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block></function>

  <class>class <name>range</name><block>{<private type="default"> <decl_stmt><decl><type><name>Integer</name></type> <name>start_</name></decl>, <decl><type ref="prev"/><name>end_</name></decl>, <decl><type ref="prev"/><name>step_</name></decl>;</decl_stmt> </private><public>public: <struct>struct <name>range_iterator</name><block>{<public type="default"> <decl_stmt><decl><type><name>Integer</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>step_</name></decl>;</decl_stmt> <constructor><name>range_iterator</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>step</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>, <call><name>step_</name><argument_list>(<argument><expr><name>step</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor> <function type="operator"><type><name>Integer</name></type> <name>operator <name>*</name></name> <parameter_list>()</parameter_list><block>{<return>return <expr><name>val</name></expr>;</return>}</block></function> <function type="operator"><type><name>void</name></type> <name>operator <name>++</name></name> <parameter_list>()</parameter_list><block>{<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>step_</name></expr>;</expr_stmt>}</block></function> <function type="operator"><type><name>bool</name></type> <name>operator <name>!=</name></name> <parameter_list>(<parameter><decl><type><name>range_iterator</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>step_</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>val</name> <operator>&lt;</operator> <name><name>x</name><operator>.</operator><name>val</name></name></expr> </then><else>: <expr><name>val</name> <operator>&gt;</operator> <name><name>x</name><operator>.</operator><name>val</name></name></expr></else></ternary></expr>;</return>}</block></function> </public>}</block>;</struct> <constructor><name>range</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>len</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>start_</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>, <call><name>end_</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call>, <call><name>step_</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor> <constructor><name>range</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>end</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>start_</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call>, <call><name>end_</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call>, <call><name>step_</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor> <constructor><name>range</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>end</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>step</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>start_</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call>, <call><name>end_</name><argument_list>(<argument><expr><name>end</name></expr></argument>)</argument_list></call>, <call><name>step_</name><argument_list>(<argument><expr><name>step</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor> <function><type><name>range_iterator</name></type> <name>begin</name><parameter_list>()</parameter_list><block>{ <return>return <expr><call><name>range_iterator</name><argument_list>(<argument><expr><name>start_</name></expr></argument>, <argument><expr><name>step_</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function> <function><type><name>range_iterator</name></type>   <name>end</name><parameter_list>()</parameter_list><block>{ <return>return <expr><call><name>range_iterator</name><argument_list>(  <argument><expr><name>end_</name></expr></argument>, <argument><expr><name>step_</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function> </public>}</block>;</class>

  <function type="operator"><specifier>inline</specifier> <type><name>string</name></type> <name>operator <name>"" _s</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>move</name><argument_list>(<argument><expr><call><name>string</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function><specifier>constexpr</specifier> <type><name>Integer</name></type> <name>my_pow</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>z</name><init>=<expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>z</name></expr> </then><else>: <expr><ternary><condition><expr><name>k</name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>z</name><operator>*</operator><name>x</name></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>my_pow</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><name>x</name></expr></argument>,<argument><expr><name>k</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>z</name><operator>*</operator><name>x</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>my_pow</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><name>x</name></expr></argument>,<argument><expr><name>k</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</return>}</block></function>
  <function><specifier>constexpr</specifier> <type><name>Integer</name></type> <name>my_pow_mod</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>M</name></decl></parameter>, <parameter><decl><type><name>Integer</name></type> <name>z</name><init>=<expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>k</name><operator>==</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>z</name><operator>%</operator><name>M</name></expr> </then><else>: <expr><ternary><condition><expr><name>k</name><operator>==</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><name>z</name><operator>*</operator><name>x</name><operator>%</operator><name>M</name></expr> </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>k</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>my_pow_mod</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><name>x</name><operator>%</operator><name>M</name></expr></argument>,<argument><expr><name>k</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>M</name></expr></argument>,<argument><expr><name>z</name><operator>*</operator><name>x</name><operator>%</operator><name>M</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>my_pow_mod</name><argument_list>(<argument><expr><name>x</name><operator>*</operator><name>x</name><operator>%</operator><name>M</name></expr></argument>,<argument><expr><name>k</name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>M</name></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></else></ternary></expr></else></ternary></expr>;</return>}</block></function>
  <function type="operator"><specifier>constexpr</specifier> <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>operator <name>"" _ten</name></name> <parameter_list>(<parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>value</name></decl></parameter>)</parameter_list><block>{ <return>return <expr><call><name>my_pow</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

  <function><specifier>inline</specifier> <type><name>int</name></type> <name>k_bit</name><parameter_list>(<parameter><decl><type><name>Integer</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>x</name><operator>&gt;&gt;</operator><name>k</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>;</return>}</block></function> <comment type="line">//0-indexed</comment>

  <decl_stmt><decl><type><name>mt19937</name></type> <name>mt</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name><name>duration_cast</name><argument_list type="generic">&lt;<argument><expr><name><name>chrono</name><operator>::</operator><name>nanoseconds</name></name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

  <function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>string</name></type> <name>join</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>string</name><modifier>&amp;</modifier></type> <name>sep</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>stringstream</name></type> <name>ss</name></decl>;</decl_stmt> <for>for<control>(<init><decl><type><name>size_t</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{ <if>if<condition>(<expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name>sep</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>ss</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> }</block></for> <return>return <expr><call><name><name>ss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>

  <function type="operator"><specifier>inline</specifier> <type><name>string</name></type> <name>operator <name>*</name></name> <parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list><block>{ <decl_stmt><decl><type><name>string</name></type> <name>ret</name></decl>;</decl_stmt> <while>while<condition>(<expr><name>k</name></expr>)</condition><block>{ <if>if<condition>(<expr><name>k</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>s</name> <operator>+=</operator> <name>s</name></expr>;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> }</block></while> <return>return <expr><name>ret</name></expr>;</return> }</block></function>
}</block></namespace>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>long</name> <name>long</name></type> <name>mod</name> <init>= <expr><literal type="number">9_ten</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>

  <for>for<control>(<init><decl><type><name>int</name></type> <name>_</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>_</name><operator>&lt;</operator><name>t</name></expr>;</condition> <incr><expr><name>_</name><operator>++</operator></expr></incr>)</control><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr><operator>,</operator> <expr><name>r</name></expr><operator>,</operator><expr><name>p</name></expr><operator>,</operator><expr><name>s</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>r_</name></decl>, <decl><type ref="prev"/><name>p_</name></decl>, <decl><type ref="prev"/><name>s_</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>r_</name> <operator>=</operator> <call><name>count</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p_</name> <operator>=</operator> <call><name>count</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s_</name> <operator>=</operator> <call><name>count</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>s_</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r_</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>p_</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <if>if<condition>(<expr><name>w</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then><block>{
      <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>

    <decl_stmt><decl><type><name>string</name></type> <name>t</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
      <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>p</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
      }</block></then></if>
      <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>r</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
      }</block></then></if>
      <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>s</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
      <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'.'</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
      <if>if<condition>(<expr><name>p</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
      }</block></then><elseif>else <if>if<condition>(<expr><name>r</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
      }</block></then></if></elseif><elseif>else <if>if<condition>(<expr><name>s</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></for>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>s</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
