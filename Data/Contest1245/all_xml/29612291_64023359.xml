<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29612291_64023359.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>mx</name><init>=<expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>maxn</name><init>=<expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>root</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>ans1</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ans2</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>c1</name></decl>,<decl><type ref="prev"/><name>c2</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<struct>struct <name>ooo</name><block>{<public type="default">
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>
</public>}</block><decl><name>now</name></decl>;</struct>
<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ooo</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>ooo</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>w</name></name><operator>!=</operator><name><name>b</name><operator>.</operator><name>w</name></name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name><name>a</name><operator>.</operator><name>w</name></name><operator>&gt;</operator><name><name>b</name><operator>.</operator><name>w</name></name></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>a</name><operator>.</operator><name>x</name></name><operator>!=</operator><name><name>b</name><operator>.</operator><name>x</name></name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name><name>a</name><operator>.</operator><name>x</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>x</name></name></expr>;</return></block></then></if>
	<return>return <expr><name><name>a</name><operator>.</operator><name>y</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>y</name></name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>ooo</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>root</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name>x</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>root</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name><name>root</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>root</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>root</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			
	}</block></for>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			
	}</block></for>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>		
	}</block></for>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>now</name><operator>.</operator><name>x</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>now</name><operator>.</operator><name>y</name></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>now</name><operator>.</operator><name>w</name></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>now</name><operator>.</operator><name>x</name></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>now</name><operator>.</operator><name>y</name></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>now</name><operator>.</operator><name>w</name></name><operator>=</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call><operator>&amp;&amp;</operator><name>cnt</name><operator>&lt;</operator><name>n</name></expr>)</condition><block>{
		<expr_stmt><expr><name>now</name><operator>=</operator><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><call><name>f</name><argument_list>(<argument><expr><name><name>now</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call><operator>!=</operator><call><name>f</name><argument_list>(<argument><expr><name><name>now</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>now</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>now</name><operator>.</operator><name>x</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>c1</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans1</name><index>[<expr><name>c1</name></expr>]</index></name><operator>=</operator><name><name>now</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
			}</block></then><else>else<block>{
				<expr_stmt><expr><name>c2</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans2</name><index>[<expr><name>c2</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>now</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans2</name><index>[<expr><name>c2</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>now</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name><name>root</name><index>[<expr><call><name>f</name><argument_list>(<argument><expr><name><name>now</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name><name>now</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>c1</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>c1</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans1</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><name>c2</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>c2</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>ans2</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
