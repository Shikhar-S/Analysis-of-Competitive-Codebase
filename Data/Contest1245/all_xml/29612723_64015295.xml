<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29612723_64015295.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>double</name></type> <name><name>p</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>q</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>h</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>jp</name><index>[<expr><literal type="number">101</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">9</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr> ;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">10</literal></expr> ;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>j</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>i</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>i</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><literal type="number">10</literal></expr>;</expr_stmt></block></else></if>
			}</block></then>
			<else>else<block>{
				<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
			}</block></else></if>
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>jp</name><index>[<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>b</name><index>[<expr><name>i</name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">100</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">5</literal></expr> ;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">100</literal><operator>-</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">100</literal></expr> ;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><literal type="number">100</literal><operator>-</operator><name>i</name></expr>]</index></name><operator>+=</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">100</literal><operator>-</operator><name>i</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>/=</operator><literal type="number">6</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><literal type="number">6</literal><operator>/</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>q</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">94</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">1</literal></expr> ;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">6</literal></expr> ;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name><name>q</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>/=</operator><literal type="number">6</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>q</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>jp</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>q</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>p</name><index>[<expr><name><name>jp</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function></unit>
