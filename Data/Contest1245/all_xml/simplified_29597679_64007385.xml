include directive file define directive macro name parameter_list parameter type name parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name parameter type name value define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name value define directive macro name value using namespace name typedef type name name name ifdef directive name define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name else directive define directive macro name parameter_list parameter type name define directive macro name parameter_list parameter type name value endif directive namespace name block function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name name block decl_stmt decl specifier type name name name index expr literal type number modifier decl type ref prev name init expr name operator literal type number decl_stmt decl specifier type specifier name name name index expr literal type number init expr literal type string literal type string literal type string literal type string literal type string literal type string literal type string literal type string literal type string literal type string decl_stmt decl specifier type specifier name name init expr literal type number define directive macro name parameter_list value decl_stmt decl type name modifier name init expr name decl_stmt decl type name name init expr literal type boolean decl_stmt decl type name name decl type ref prev name if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator operator name operator expr name operator literal type boolean while condition expr name operator name block expr_stmt expr name operator call name argument_list argument expr name operator name expr_stmt expr name operator name expr_stmt expr call name argument_list expr_stmt expr call name argument_list expr_stmt expr call name argument_list expr_stmt expr call name argument_list expr_stmt expr name operator operator name operator name while condition expr name operator literal type number block type pseudo expr_stmt expr call name argument_list if condition expr name operator literal type number then block type pseudo expr_stmt expr operator operator name operator literal type char operator name else block type pseudo expr_stmt expr call name argument_list if condition expr operator name then block type pseudo expr_stmt expr operator operator name operator literal type char expr_stmt expr call name argument_list argument expr name undef directive name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name modifier name block expr_stmt expr name operator literal type number decl_stmt decl type name name init expr call name argument_list decl_stmt decl type name name init expr literal type boolean while condition expr operator call name argument_list argument expr name block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator literal type boolean expr_stmt expr name operator call name argument_list while condition expr call name argument_list argument expr name block type pseudo expr_stmt expr name operator name operator literal type number operator operator name operator literal type number operator operator expr name operator call name argument_list if condition expr operator name then block type pseudo expr_stmt expr name operator operator name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name modifier name parameter decl type name modifier name block expr_stmt expr call name argument_list argument expr name operator expr call name argument_list argument expr name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name modifier name parameter decl type name modifier name parameter decl type name modifier name block expr_stmt expr call name argument_list argument expr name operator expr call name argument_list argument expr name operator expr call name argument_list argument expr name using namespace name decl_stmt decl type name name name index expr literal type number function type name name parameter_list block decl_stmt decl type name name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name init expr literal type number expr_stmt expr call name argument_list argument expr name expr_stmt expr call name argument_list argument expr name argument expr name argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name if condition expr name operator literal type char then block if condition expr name operator literal type number then block expr_stmt expr operator name expr_stmt expr operator name expr_stmt expr name name index expr name operator literal type char else block type pseudo expr_stmt expr name name index expr name operator literal type char if condition expr name operator literal type char then block if condition expr name operator literal type number then block expr_stmt expr operator name expr_stmt expr operator name expr_stmt expr name name index expr name operator literal type char else block type pseudo expr_stmt expr name name index expr name operator literal type char if condition expr name operator literal type char then block if condition expr name operator literal type number then block expr_stmt expr operator name expr_stmt expr operator name expr_stmt expr name name index expr name operator literal type char else block type pseudo expr_stmt expr name name index expr name operator literal type char expr_stmt expr name name index expr name operator literal type number operator literal type char if condition expr name operator operator ternary condition expr name operator literal type number operator literal type number then expr name operator literal type number else expr operator name operator literal type number operator operator literal type number operator then block expr_stmt expr name operator literal type string operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo if condition expr name name index expr name operator literal type char then block if condition expr name operator literal type number then block expr_stmt expr operator name expr_stmt expr name name index expr name operator literal type char elseif if condition expr name operator literal type number then block expr_stmt expr operator name expr_stmt expr name name index expr name operator literal type char elseif if condition expr name operator literal type number then block expr_stmt expr operator name expr_stmt expr name name index expr name operator literal type char expr_stmt expr name operator name operator literal type number operator name else block expr_stmt expr name operator literal type string operator name function type name name parameter_list block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr name while condition expr name operator block expr_stmt expr call name argument_list return expr literal type number 
