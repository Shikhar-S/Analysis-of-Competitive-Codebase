<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29573183_64030011.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"avx2"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return cout&lt;&lt;x&lt;&lt;endl,0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mkp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>er</name></cpp:macro> <cpp:value>erase</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name></cpp:macro> <cpp:value>find</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name><init>=<expr><literal type="number">0x3f3f3f3f3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>llinf</name><init>=<expr><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">62</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nmax</name><init>=<expr><literal type="number">2e3</literal><operator>+</operator><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name><name>p</name><index>[<expr><name>nmax</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sz</name><index>[<expr><name>nmax</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>id</name><index>[<expr><name>nmax</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>l</name><index>[<expr><name>nmax</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>r</name><index>[<expr><name>nmax</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><name>nmax</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><name>nmax</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vl</name><index>[<expr><name>nmax</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sm</name><index>[<expr><name>nmax</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>rs</name></decl>,<decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>vc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name><name>vec</name><index>[<expr><name>nmax</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>vcb</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>vca</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>fnd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name>x</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
	<return>return <expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>fnd</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>uni</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>z</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>xx</name><init>=<expr><name>x</name></expr></init></decl>,<decl><type ref="prev"/><name>yy</name><init>=<expr><name>y</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>x</name><operator>=</operator><call><name>fnd</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>y</name><operator>=</operator><call><name>fnd</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>x</name><operator>==</operator><name>y</name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
	<if>if<condition>(<expr><name><name>sz</name><index>[<expr><name>x</name></expr>]</index></name><operator>&lt;</operator><name><name>sz</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><call><name>min</name><argument_list>(<argument><expr><name><name>vl</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>vl</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><name>z</name><operator>+</operator><name><name>sm</name><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><name><name>sm</name><index>[<expr><name>y</name></expr>]</index></name><operator>&lt;=</operator><name><name>vl</name><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><name><name>vl</name><index>[<expr><name>y</name></expr>]</index></name><operator>+</operator><name><name>sm</name><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><name><name>sm</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sz</name><index>[<expr><name>x</name></expr>]</index></name><operator>+=</operator><name><name>sz</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vl</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>vl</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>vl</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>vl</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name><name>vl</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>id</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>id</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>sm</name><index>[<expr><name>x</name></expr>]</index></name><operator>+=</operator><name><name>sm</name><index>[<expr><name>y</name></expr>]</index></name><operator>+</operator><name>z</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sm</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>vec</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>vec</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name><name>vec</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><name>xx</name></expr></argument>,<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vec</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<comment type="line">//freopen("sol.in","r",stdin);</comment>
	<comment type="line">//freopen("sol.out","w",stdout);</comment>
	<comment type="line">//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());</comment>
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cerr</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>x</name><operator>=</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>l</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>r</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>x</name><operator>*=</operator><operator>(</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>vc</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><call><name>mkp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>vc</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>vc</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>vl</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sz</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>sm</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vc</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>v</name><operator>=</operator><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sc</name><operator>.</operator><name>fr</name></name></expr><operator>,</operator><expr><name>u</name><operator>=</operator><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sc</name><operator>.</operator><name>sc</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>=</operator><name><name>vc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>uni</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>u</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><call><name>fnd</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>!=</operator><name>i</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>rs</name><operator>+=</operator><name><name>sm</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>vl</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>vca</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name><name>vec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name><name>vcb</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>vec</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>rs</name><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><call><name><name>vca</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><call><name><name>vca</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>vca</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><call><name><name>vcb</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><operator>(</operator><name>int</name><operator>)</operator><call><name><name>vcb</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>vcb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fr</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>vcb</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sc</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
