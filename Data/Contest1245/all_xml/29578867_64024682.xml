<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29578867_64024682.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>bitset</name> <argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name></type> <name>L</name></decl>, <decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>less1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>less2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>great1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>great2</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>

        <if>if<condition>(<expr><operator>~</operator><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>less1</name></expr>]</index><index>[<expr><name>less2</name></expr>]</index><index>[<expr><name>great1</name></expr>]</index><index>[<expr><name>great2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>less1</name></expr>]</index><index>[<expr><name>less2</name></expr>]</index><index>[<expr><name>great1</name></expr>]</index><index>[<expr><name>great2</name></expr>]</index></name></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>int</name></type> <name>l1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>less1</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>L</name><index>[<expr><name>pos</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>l2</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>less2</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>L</name><index>[<expr><name>pos</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>great1</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>R</name><index>[<expr><name>pos</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r2</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>great2</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>R</name><index>[<expr><name>pos</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if>if<condition>(<expr><name>l1</name> <operator>&gt;</operator> <name>r1</name> <operator>||</operator> <name>l2</name> <operator>&gt;</operator> <name>r2</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name>  <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>l1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>l2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>f</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>less1</name> <operator>&amp;&amp;</operator> <name>l1</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>less2</name> <operator>&amp;&amp;</operator> <name>l2</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>great1</name> <operator>&amp;&amp;</operator> <name>r1</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>great2</name> <operator>&amp;&amp;</operator> <name>r2</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <if>if<condition>(<expr><name>l1</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>r1</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>l2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>f</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>less1</name> <operator>&amp;&amp;</operator> <name>l1</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>less2</name> <operator>&amp;&amp;</operator> <name>l2</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>great1</name> <operator>&amp;&amp;</operator> <name>r1</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>great2</name> <operator>&amp;&amp;</operator> <name>r2</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if<condition>(<expr><name>l2</name> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>r2</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>l1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>f</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>less1</name> <operator>&amp;&amp;</operator> <name>l1</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>less2</name> <operator>&amp;&amp;</operator> <name>l2</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>great1</name> <operator>&amp;&amp;</operator> <name>r1</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>great2</name> <operator>&amp;&amp;</operator> <name>r2</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>less1</name></expr>]</index><index>[<expr><name>less2</name></expr>]</index><index>[<expr><name>great1</name></expr>]</index><index>[<expr><name>great2</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</return>
}</block></function>


<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>test</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>test</name></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>test</name><operator>--</operator></expr>)</condition> <block>{
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>L</name> <operator>=</operator> <call><name><name>bitset</name> <argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>R</name> <operator>=</operator> <call><name><name>bitset</name> <argument_list type="generic">&lt;<argument><expr><literal type="number">32</literal></expr></argument>&gt;</argument_list></name> <argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>f</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></while>
}</block></function>
</unit>
