<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29578357_64015814.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll, ll&gt;</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>string</name></type> <name>s1</name></decl>, <decl><type ref="prev"/><name>s2</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s1</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>ch</name> <init>= <expr><name><name>s1</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>c</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>a</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>s2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></for>
        <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>ch</name><operator>:</operator> <name>s2</name></expr></init>)</control> <block>{
            <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name>a</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if></elseif> <else>else <block>{
                    <expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></for>
        <if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <operator>(</operator><name>m</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal> <operator>&lt;&lt;</operator> <name>s2</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
