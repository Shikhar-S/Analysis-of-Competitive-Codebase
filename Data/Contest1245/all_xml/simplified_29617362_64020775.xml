include directive file using namespace name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name name index expr name decl_stmt decl type name name name index expr name index expr literal type number function type name name parameter_list parameter decl type name modifier name parameter decl type name name block expr_stmt expr name operator name if condition expr name operator name then block type pseudo expr_stmt expr name operator name function type name name parameter_list block ifndef directive name expr_stmt expr call name argument_list argument expr literal type string argument expr literal type string argument expr name endif directive expr_stmt expr name operator operator name operator literal type number operator expr_stmt expr name name index expr literal type number index expr name name index expr literal type number operator literal type char operator literal type number decl_stmt decl type name name init expr literal type char operator literal type char decl_stmt decl type name name init expr literal type char operator literal type char decl_stmt decl type name name init expr call name argument_list argument expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator literal type char operator name name index expr name operator literal type char then block expr_stmt expr name operator literal type number return expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name init expr name name index expr name operator literal type char if condition expr name name index expr name operator literal type char operator name name index expr name operator literal type char then block for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block if condition expr name operator name name index expr name operator literal type char then block expr_stmt expr call name argument_list argument expr name name index expr name index expr name argument expr name name index expr name operator literal type number index expr name else block if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr call name argument_list argument expr name name index expr name index expr name argument expr name name index expr name operator literal type number index expr name else block type pseudo expr_stmt expr call name argument_list argument expr name name index expr name index expr name argument expr name name index expr name operator literal type number index expr name expr_stmt expr call name argument_list argument expr name name index expr name index expr name argument expr name name index expr name operator literal type number index expr name else block for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr name name index expr name index expr name argument expr name name index expr name operator literal type number index expr name decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr name operator block expr_stmt expr call name argument_list argument expr name argument expr name name index expr name index expr name expr_stmt expr name operator name 
