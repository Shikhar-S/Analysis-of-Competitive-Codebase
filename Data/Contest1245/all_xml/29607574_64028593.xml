<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29607574_64028593.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2000</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>in</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>flag</name><operator>|=</operator><operator>(</operator><name>ch</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><operator>(</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>val</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>dis</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>fa</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name><name>res</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>way</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>from</name></decl>,<decl><type ref="prev"/><name>to</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
</public>}</block><decl><name><name>a</name><index>[<expr><name>N</name><operator>*</operator><name>N</name></expr>]</index></name></decl>;</struct><decl_stmt><decl><type><name>int</name></type> <name>tot</name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>q</name></decl></parameter>,<parameter><decl><type><name>node</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>q</name><operator>.</operator><name>x</name></name><operator>!=</operator><name><name>p</name><operator>.</operator><name>x</name></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>q</name><operator>.</operator><name>x</name></name><operator>&lt;</operator><name><name>p</name><operator>.</operator><name>x</name></name></expr>;</return></block></then></if>
	<return>return <expr><name><name>val</name><index>[<expr><name><name>q</name><operator>.</operator><name>from</name></name></expr>]</index></name><operator>+</operator><name><name>val</name><index>[<expr><name><name>q</name><operator>.</operator><name>to</name></name></expr>]</index></name><operator>&lt;</operator><name><name>val</name><index>[<expr><name><name>p</name><operator>.</operator><name>from</name></name></expr>]</index></name><operator>+</operator><name><name>val</name><index>[<expr><name><name>p</name><operator>.</operator><name>to</name></name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>cmp1</name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>q</name></decl></parameter>,<parameter><decl><type><name>node</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>q</name><operator>.</operator><name>from</name></name><operator>!=</operator><name><name>p</name><operator>.</operator><name>from</name></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>q</name><operator>.</operator><name>from</name></name><operator>&lt;</operator><name><name>p</name><operator>.</operator><name>from</name></name></expr>;</return></block></then></if>
	<return>return <expr><name><name>q</name><operator>.</operator><name>to</name></name><operator>&lt;</operator><name><name>p</name><operator>.</operator><name>to</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>x</name><operator>!=</operator><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<return>return <expr><name>x</name></expr>;</return> 
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<comment type="line">//freopen(".in","r",stdin);</comment>
	<comment type="line">//freopen(".out","w",stdout);</comment>
	<expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><call><name>in</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>in</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name><name>a</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>.</operator><name>from</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><name>to</name><operator>=</operator><name>j</name></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><operator>(</operator><call><name>way</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name><name>dis</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>dis</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>a</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>.</operator><name>from</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><name>to</name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name><name>a</name><index>[<expr><name>tot</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><name>tot</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>m</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>m1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//printf("%d\n",ans);</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>tot</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
	<comment type="line">//	printf("%d\n",a[i].x);</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><call><name>find</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><call><name>find</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>x</name><operator>!=</operator><name>y</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>res</name><index>[<expr><operator>++</operator><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>y</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>+</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>res</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>res</name><operator>+</operator><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d "</literal></expr></argument>,<argument><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%I64d\n"</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>tot</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name><operator>&gt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>flag</name><operator>&amp;&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name><operator>!=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d %I64d\n"</literal></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>from</name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	}</block></for>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
