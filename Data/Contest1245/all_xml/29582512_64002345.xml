<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29582512_64002345.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>200005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1e9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-10</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>w</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition> <block>{<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>w</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<while>while<condition>(<expr><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition> <block>{<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<return>return <expr><ternary><condition><expr><name>w</name><operator>==</operator><literal type="number">1</literal></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><operator>-</operator><name>x</name></expr></else></ternary></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>T</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>a1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>b1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>c1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>tmp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><operator>(</operator><name>s</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>len</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a1</name><operator>++</operator></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
		<else>else <block type="pseudo"><expr_stmt><expr><name>c1</name><operator>++</operator></expr>;</expr_stmt></block></else></if></block></for>
		<expr_stmt><expr><name>tmp</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>a1</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><name>b1</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>f1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f3</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>b</name><operator>&gt;</operator><name>a1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f1</name><operator>=</operator><name>b</name><operator>-</operator><name>a1</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>c</name><operator>&gt;</operator><name>b1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f2</name><operator>=</operator><name>c</name><operator>-</operator><name>b1</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>c1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f3</name><operator>=</operator><name>a</name><operator>-</operator><name>c1</name></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>tmp</name><operator>*</operator><literal type="number">2</literal><operator>&gt;=</operator><name>n</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>len</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal><operator>&amp;&amp;</operator><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>b</name><operator>--</operator></expr>;</expr_stmt></block></then>
				<elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>c</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal><operator>&amp;&amp;</operator><name>a</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>a</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
				<else>else
				<block>{
					<if>if<condition>(<expr><name>f1</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>f1</name><operator>--</operator></expr>;</expr_stmt></block></then>
					<elseif>else <if>if<condition>(<expr><name>f2</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>f2</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
					<elseif>else <if>if<condition>(<expr><name>f3</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>f3</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif></if>
				}</block></else></if>
			}</block></for>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
