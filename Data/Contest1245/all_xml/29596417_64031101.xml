<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29596417_64031101.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>  
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>  
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>  
<typedef>typedef <type><name><name>list</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>li</name>;</typedef>  
<typedef>typedef <type><name><name>unordered_map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mii</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0; i &lt; (n); i++)</cpp:value></cpp:define>  
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (n)-1; i &gt;= 0; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rap</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a; i &lt; (n); i++)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rrap</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (n)-1; i &gt;= a; i--)</cpp:value></cpp:define> 

<decl_stmt><decl><type><name>vi</name></type> <name>parent</name></decl>,<decl><type ref="prev"/><name>size</name></decl>,<decl><type ref="prev"/><name>ks</name></decl>,<decl><type ref="prev"/><name>cs</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>make_set</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>parent</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>size</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>find_set</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>v</name> <operator>==</operator> <name><name>parent</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>v</name></expr>;</return></block></then></if>
    <return>return <expr><name><name>parent</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>find_set</name><argument_list>(<argument><expr><name><name>parent</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>union_sets</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>find_set</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>find_set</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name><name>size</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&lt;</operator> <name><name>size</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>size</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+=</operator> <name><name>size</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>info</name></decl>;</decl_stmt>

<struct>struct <name>tup</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>dist</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>v1</name></decl>,<decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>( <parameter><decl><type><name>tup</name> <modifier>&amp;</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>tup</name> <modifier>&amp;</modifier></type><name>t2</name></decl></parameter> )</parameter_list> <block>{
    <return>return <expr><name><name>t1</name><operator>.</operator><name>dist</name></name> <operator>&lt;</operator> <name><name>t2</name><operator>.</operator><name>dist</name></name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>tup</name></expr></argument>&gt;</argument_list></name></type> <name>distv</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>parent</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>size</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>make_set</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name><name>ks</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ii</name><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ks</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>info</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ii</name><block>{<expr><name>a</name></expr>,<expr><name>b</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ks</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>rap</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
        <macro><name>rap</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
            <expr_stmt><expr><call><name><name>distv</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>tup</name><block>{<expr><operator>(</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>info</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>info</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <name><name>info</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>ks</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>ks</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr>,<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
    }</block>
    <macro><name>rap</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name><name>distv</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>tup</name><block>{<expr><name><name>cs</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><literal type="number">0</literal></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>distv</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>distv</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vi</name></type> <name>vs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vii</name></type> <name>conns</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>vs</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>conns</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>a1</name></decl>,<decl><type ref="prev"/><name>a2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cost</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name><name>size</name><index>[<expr><call><name>find_set</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&lt;</operator> <name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{
        <expr_stmt><expr><name>a1</name> <operator>=</operator> <call><name>find_set</name><argument_list>(<argument><expr><name><name>distv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>a2</name> <operator>=</operator> <call><name>find_set</name><argument_list>(<argument><expr><name><name>distv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>a1</name> <operator>!=</operator> <name>a2</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>distv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v1</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>distv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <if>if <condition>(<expr><name><name>distv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v1</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>vs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>distv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>vs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>distv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
            }</block></then>
            <else>else <block>{
                <expr_stmt><expr><call><name><name>conns</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>ii</name><block>{<expr><name><name>distv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v1</name></expr>,<expr><name><name>distv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v2</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name>union_sets</name><argument_list>(<argument><expr><name>a1</name></expr></argument>,<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>distv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dist</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>cost</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>vs</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>(int)vs.size()</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>vs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>conns</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>(int)conns.size()</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>conns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>conns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block>


    <return>return <expr><literal type="number">0</literal></expr>;</return>

    <comment type="line">//compile: g++ -std=c++14 -O2 -Wall NAME.cpp -o NAME</comment>
}</block></function></unit>
