<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29583611_64028365.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>L</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>R</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>P</name></type> <name>test</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lstate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rstate</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>( <expr><name>lstate</name> <operator>&amp;&amp;</operator> <name><name>L</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>bit</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then>
        <block type="pseudo"><return>return <expr><call><name>P</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <if>if<condition>( <expr><name>rstate</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>R</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>bit</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then>
        <block type="pseudo"><return>return <expr><call><name>P</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>nl</name> <init>= <expr><name>lstate</name></expr></init></decl>, <decl><type ref="prev"/><name>nr</name> <init>= <expr><name>rstate</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>( <expr><name>bit</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>L</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>nl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>( <expr><name>bit</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>R</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>nr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <return>return <expr><call><name>P</name><argument_list>(<argument><expr><name>nl</name></expr></argument>, <argument><expr><name>nr</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>solve</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>al</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ar</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>br</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>long</name> <name>long</name><modifier>&amp;</modifier></type> <name>ref</name> <init>= <expr><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>al</name></expr>]</index><index>[<expr><name>ar</name></expr>]</index><index>[<expr><name>bl</name></expr>]</index><index>[<expr><name>br</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>ref</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then>
        <block type="pseudo"><return>return <expr><name>ref</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>ref</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>P</name></type> <name>a1</name> <init>= <expr><call><name>test</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>al</name></expr></argument>, <argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>P</name></type> <name>b1</name> <init>= <expr><call><name>test</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>P</name></type> <name>a2</name> <init>= <expr><call><name>test</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>al</name></expr></argument>, <argument><expr><name>ar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>P</name></type> <name>b2</name> <init>= <expr><call><name>test</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>br</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if<condition>( <expr><name><name>a1</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>b1</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ref</name> <operator>+=</operator> <call><name>solve</name><argument_list>( <argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>a1</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>a1</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>b1</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>b1</name><operator>.</operator><name>second</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if>
    
    <if>if<condition>( <expr><name><name>a2</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>b2</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ref</name> <operator>+=</operator> <call><name>solve</name><argument_list>( <argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>a2</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>a2</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>b2</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>b2</name><operator>.</operator><name>second</name></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if>
    
    <if>if<condition>( <expr><name><name>a2</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>b1</name><operator>.</operator><name>first</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>ref</name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>a2</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>a2</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>b1</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>b1</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    
    <return>return <expr><name>ref</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</init> <condition><expr><name>t</name><operator>--</operator></expr>;</condition> <incr/>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
        <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">40</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block>{
            <if>if<condition>( <expr><name>l</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr> )</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
            <if>if<condition>(<expr><name>r</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
        }</block></for>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>solve</name><argument_list>( <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
