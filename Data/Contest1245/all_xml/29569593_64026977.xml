<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29569593_64026977.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repi</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &lt;= b; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repd</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &gt;= b; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_end</name></cpp:macro> <cpp:value>printf("\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; '=' &lt;&lt; x &lt;&lt; ' '</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, b, sizeof(a))</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>_in</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{

    <decl_stmt><decl><type><name>va_list</name></type> <name>arg_ptr</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg_ptr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>arg_ptr</argument>, <argument>long long*</argument>)</argument_list></macro></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>temp</name></expr>)</condition><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> <operator>=</operator> <macro><name>va_arg</name><argument_list>(<argument>arg_ptr</argument>, <argument>long long*</argument>)</argument_list></macro></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>_in</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>va_list</name></type> <name>arg_ptr</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>temp</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>arg_ptr</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg_ptr</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>temp</name></expr>)</condition><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>arg_ptr</name></expr></argument>, <argument><expr><name>int</name><operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>arg_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_in(__VA_ARGS__, 0)</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>NN</name> <init>= <expr><literal type="number">1e5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>fact</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>invfac</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>exgcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>p</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>exgcd</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>b</name> <operator>%</operator> <name>p</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>k</name> <operator>-=</operator> <name>b</name> <operator>/</operator> <name>p</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt>
    <return>return;</return>
}</block></function>

<function><type><name>ll</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>exgcd</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>k</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>+=</operator> <name>p</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>a</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>C</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>invfac</name><index>[<expr><name>n</name> <operator>-</operator> <name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>*=</operator> <name><name>invfac</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><name>ret</name> <operator>%</operator> <name>MOD</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>poss</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>nn</name></decl>, <decl><type ref="prev"/><name>mn</name></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>nn</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt> <expr_stmt><expr><name>mn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>nn</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block>{
        <expr_stmt><expr><name>nn</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>mn</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>C</name><argument_list>(<argument><expr><name>nn</name> <operator>+</operator> <name>mn</name></expr></argument>, <argument><expr><name>mn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fact</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>invfac</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>inv</name><argument_list>(<argument><expr><name><name>fact</name><index>[ <expr><name>n</name></expr> ]</index></name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>invfac</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>invfac</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

    <decl_stmt><decl><type><name>char</name></type> <name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{
        <expr_stmt><expr><name><name>a</name><index>[<expr><operator>++</operator><name>p</name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></while>
    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>unum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nnum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>a</name><index>[<expr><name>p</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    <macro><name>repi</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>p + <literal type="number">1</literal></argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>nnum</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>unum</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <elseif>else <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>unum</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nnum</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
        <else>else<block>{
            <expr_stmt><expr><name>ans</name> <operator>*=</operator> <call><name>poss</name><argument_list>(<argument><expr><name>unum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>*=</operator> <call><name>poss</name><argument_list>(<argument><expr><name>nnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>nnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>unum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nnum</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>unum</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        }</block></else></if>
    }</block>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
