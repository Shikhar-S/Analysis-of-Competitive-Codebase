<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29579536_64026370.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>lol</name>;</typedef>

<decl_stmt><decl><type><name>lol</name></type> <name><name>f</name><index>[<expr><literal type="number">41</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl> , <decl><type ref="prev"/><name>l</name></decl> , <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<function><type><name>lol</name></type> <name>dp</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>dep</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>lima</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>limb</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>upa</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>upb</name></decl></parameter> )</parameter_list> <block>{
  <if>if<condition>( <expr><name>dep</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if<condition>( <expr><operator>~</operator><name><name>f</name><index>[<expr><name>dep</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>upa</name></expr>]</index><index>[<expr><name>upb</name></expr>]</index></name></expr> )</condition><then> <block type="pseudo"><return>return <expr><name><name>f</name><index>[<expr><name>dep</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>upa</name></expr>]</index><index>[<expr><name>upb</name></expr>]</index></name></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>int</name></type> <name>alim</name></decl> , <decl><type ref="prev"/><name>blim</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lol</name> <modifier>&amp;</modifier></type> <name>res</name> <init>= <expr><name><name>f</name><index>[<expr><name>dep</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>upa</name></expr>]</index><index>[<expr><name>upb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>alim</name> <operator>=</operator> <ternary><condition><expr><name>upa</name></expr> ?</condition><then> <expr><operator>(</operator> <name>lima</name> <operator>&gt;&gt;</operator> <name>dep</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name>blim</name> <operator>=</operator> <ternary><condition><expr><name>upb</name></expr> ?</condition><then> <expr><operator>(</operator> <name>limb</name> <operator>&gt;&gt;</operator> <name>dep</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>na</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>na</name> <operator>&lt;=</operator> <name>alim</name></expr> ;</condition> <incr><expr><operator>++</operator><name>na</name></expr></incr> )</control> 
    <block type="pseudo"><for>for<control>( <init><decl><type><name>int</name></type> <name>nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>nb</name> <operator>&lt;=</operator> <name>blim</name></expr> ;</condition> <incr><expr><operator>++</operator><name>nb</name></expr></incr> )</control> 
      <block type="pseudo"><if>if<condition>( <expr><name>na</name> <operator>+</operator> <name>nb</name> <operator>&lt;</operator> <literal type="number">2</literal></expr> )</condition><then> 
        <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>dp</name><argument_list>( <argument><expr><name>dep</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>na</name></expr></argument> , <argument><expr><name>nb</name></expr></argument> , <argument><expr><name>lima</name></expr></argument> , <argument><expr><name>limb</name></expr></argument> , <argument><expr><name>upa</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>na</name> <operator>==</operator> <name>alim</name> <operator>)</operator></expr></argument> , <argument><expr><name>upb</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name>nb</name> <operator>==</operator> <name>blim</name> <operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>lol</name></type> <name>solve</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>&amp;</modifier></type> <name>lima</name></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>&amp;</modifier></type> <name>limb</name></decl></parameter> )</parameter_list> <block>{ <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>f</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><sizeof>sizeof <name>f</name></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt><return>return <expr><call><name>dp</name><argument_list>( <argument><expr><literal type="number">31</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument> , <argument><expr><name>lima</name></expr></argument> , <argument><expr><name>limb</name></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</return> }</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list> <block>{
  <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>f</name></expr></argument> , <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument> , <argument><expr><sizeof>sizeof <name>f</name></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>T</name><operator>--</operator></expr> )</condition> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><call><name>solve</name><argument_list>( <argument><expr><name>r</name></expr></argument> , <argument><expr><name>r</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <decl_stmt><decl><type><name>lol</name></type> <name>ans</name> <init>= <expr><call><name>solve</name><argument_list>( <argument><expr><name>r</name></expr></argument> , <argument><expr><name>r</name></expr></argument> )</argument_list></call> <operator>-</operator> <call><name>solve</name><argument_list>( <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>r</name></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>solve</name><argument_list>( <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
