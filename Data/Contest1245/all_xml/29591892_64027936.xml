<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29591892_64027936.cpp"><comment type="line">//#pragma GCC optimize("O3")</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdexcept&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>,<parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><literal type="char">'('</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="char">','</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><literal type="char">')'</literal></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>,<parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>,<argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>in</name><operator>&gt;&gt;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&gt;&gt;</operator><name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name><modifier>&amp;</modifier></type> <name>operator <name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>in</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{
    <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator><name>v</name></expr></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>in</name><operator>&gt;&gt;</operator><name>x</name></expr>;</expr_stmt></block></for>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{
    <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator><name>v</name></expr></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>out</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name>v</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>out</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>b</name><operator>&gt;</operator><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></then><else>:<expr><name>a</name></expr></else></ternary><operator>)</operator></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>         <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro>        <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro>        <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro>        <cpp:value>pair&lt;long long,long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tiii</name></cpp:macro>       <cpp:value>pair&lt; pair&lt;int,int&gt;,int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vb</name></cpp:macro>         <cpp:value>vector&lt;bool&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro>         <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vl</name></cpp:macro>         <cpp:value>vector&lt;long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvi</name></cpp:macro>        <cpp:value>vector&lt;vector&lt;int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvl</name></cpp:macro>        <cpp:value>vector&lt;vector&lt;long long&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>First</name></cpp:macro>      <cpp:value>first.first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Second</name></cpp:macro>     <cpp:value>first.second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Third</name></cpp:macro>      <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>         <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>         <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lbnd</name></cpp:macro>       <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ubnd</name></cpp:macro>       <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>acc</name></cpp:macro>        <cpp:value>accumulate</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>          <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>          <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>throwex</name></cpp:macro>    <cpp:value>throw runtime_error("Found the error.");</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>h</name></cpp:macro>          <cpp:value>1000000007</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>double</name></type> <name>pi</name><init>=<expr><literal type="number">2</literal><operator>*</operator><call><name>asin</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vl</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vi</name></type> <name>par</name></decl>, <decl><type ref="prev"/><name>z</name></decl>, <decl><type ref="prev"/><name>in</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>root</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <while>while<condition>(<expr><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name><operator>!=</operator><name>x</name></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block></while>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>unin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="line">// int a=root(x), b=root(y);</comment>
    <if>if<condition>(<expr><name><name>z</name><index>[<expr><name>b</name></expr>]</index></name><operator>&gt;</operator><name><name>z</name><index>[<expr><name>a</name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>par</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>z</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+=</operator> <name><name>z</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>c</name><index>[<expr><name><name>in</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name><operator>&lt;</operator><name><name>c</name><index>[<expr><name><name>in</name><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>in</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name><name>in</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifdef>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cerr</name><operator>.</operator><name>setstate</name></name><argument_list>(<argument><expr><name><name>ios</name><operator>::</operator><name>failbit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>par</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>z</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>in</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>x</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>y</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>k</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>c</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>acc</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0LL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
            <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>conn</name></decl>;</decl_stmt>

    <while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>S</name><operator>.</operator><name>F</name></name></expr></init></decl>, <decl><type ref="prev"/><name>b</name><init>=<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name><name>S</name><operator>.</operator><name>S</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ra</name><init>=<expr><call><name>root</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>rb</name><init>=<expr><call><name>root</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>ra</name><operator>!=</operator><name>rb</name> <operator>&amp;&amp;</operator> <call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>F</name><operator>&lt;=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name><name>in</name><index>[<expr><name>ra</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name><name>in</name><index>[<expr><name>rb</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ans</name><operator>-=</operator><call><name>max</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name><name>in</name><index>[<expr><name>ra</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name><name>in</name><index>[<expr><name>rb</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>F</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>unin</name><argument_list>(<argument><expr><name>ra</name></expr></argument>,<argument><expr><name>rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vi</name></type> <name>v</name></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <if>if<condition>(<expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name>i</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr><operator>,</operator> <expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>cnt</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal><operator>&lt;&lt;</operator><name>v</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>conn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name>conn</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>F</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>x</name><operator>.</operator><name>S</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></for>
}</block></function>
</unit>
