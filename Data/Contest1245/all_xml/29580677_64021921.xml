<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29580677_64021921.cpp"><comment type="line" format="doxygen">///+----------------------------------------+\\\</comment>
<comment type="line" format="doxygen">///|   ___  __  __  ____  ____  ____  _  _  |\\\</comment>
<comment type="line" format="doxygen">///|  / __)(  )(  )(_  _)( ___)(_  _)( \( ) |\\\</comment>
<comment type="line" format="doxygen">///| ( (__  )(__)(   )(   )__)   )(   )  (  |\\\</comment>
<comment type="line" format="doxygen">///|  \___)(______) (__) (____) (__) (_)\_) |\\\</comment>
<comment type="line" format="doxygen">///|                                        |\\\</comment>
<comment type="line" format="doxygen">///+-----------------------QUáº¢N-TIáº¾N-NGHÄ¨A--+\\\</comment>

<comment type="line" format="doxygen">/// CODEFORCES TEMPLATE - version 1.0.3</comment>
<comment type="line" format="doxygen">/// Â© 2019 Quáº£n Tiáº¿n NghÄ©a (a.k.a CuteTN)</comment>

<comment type="line" format="doxygen">/// Háº¡nh ÄÃ¡ng iu</comment>
<comment type="line" format="doxygen">/// Háº¡nh dá» thÆ°n</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line" format="doxygen">/// OPTIMIZE SOMETHING I DONT EVEN UNDERSTAND</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/stack:200000000"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>

<comment type="line" format="doxygen">/// USEFUL MACROS</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is</name></cpp:macro> <cpp:value>==</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>isnt</name></cpp:macro> <cpp:value>!=</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>momo</name></cpp:macro> <cpp:value>% MODULO</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name></cpp:macro> <cpp:value>/ (float)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>szOf</name><parameter_list>(<parameter><type><name>container_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ll)container_.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>allV</name><parameter_list>(<parameter><type><name>container_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>container_.begin(),container_.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sortV</name><parameter_list>(<parameter><type><name>container_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(container_.begin(),container_.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>elif</name></cpp:macro> <cpp:value>else if</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loopTestCases</name></cpp:macro> <cpp:value>int numberOfCases; read(numberOfCases); while(numberOfCases--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forEach</name><parameter_list>(<parameter><type><name>element_</name></type></parameter>, <parameter><type><name>container_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto&amp;element_: container_)</cpp:value></cpp:define>
    <comment type="line">// forEach can not be used for static array</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forUp</name><parameter_list>(<parameter><type><name>iterator_</name></type></parameter>, <parameter><type><name>rangeL_</name></type></parameter>, <parameter><type><name>rangeR_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto iterator_ = rangeL_; iterator_ &lt;= rangeR_; iterator_++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forDown</name><parameter_list>(<parameter><type><name>iterator_</name></type></parameter>, <parameter><type><name>rangeR_</name></type></parameter>, <parameter><type><name>rangeL_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto iterator_ = rangeR_; iterator_ &gt;= rangeL_; iterator_--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forTimes</name><parameter_list>(<parameter><type><name>times_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll iterator_ = 1; iterator_ &lt;= times_; iterator_++)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>readNew</name><parameter_list>(<parameter><type><name>varName</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type varName; read(varName)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rnll5</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>readNew(a,ll); rnll4(b, c, d, e)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rnll4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>readNew(a,ll); rnll3(b, c, d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rnll3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>readNew(a,ll); rnll2(b, c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rnll2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>          <cpp:value>readNew(a,ll); rnll1(b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rnll1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>             <cpp:value>readNew(a,ll)</cpp:value></cpp:define>
    <comment type="line">// read New long long: readNew(.,ll) is frequently used</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>varName</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>clearedAllDebug = false; cerr&lt;&lt;"DEBUG: "&lt;&lt;#varName &lt;&lt; " = " &lt;&lt; varName &lt;&lt; "\n";</cpp:value></cpp:define>
    <comment type="line">// debug variables</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugV</name><parameter_list>(<parameter><type><name>vectorName</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>clearedAllDebug = false; cerr&lt;&lt;"DEBUG: "&lt;&lt;#vectorName&lt;&lt;" = {"; for(auto&amp;element:vectorName) cerr&lt;&lt;" "&lt;&lt;element&lt;&lt;" "; cerr&lt;&lt;"}\n";</cpp:value></cpp:define>
    <comment type="line">// debug vectors</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugN</name><parameter_list>(<parameter><type><name>noteString</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>clearedAllDebug = false; cerr&lt;&lt;"DEBUG: "&lt;&lt;noteString&lt;&lt;"\n";</cpp:value></cpp:define>
    <comment type="line">// debug notes</comment>

<comment type="line" format="doxygen">/// FREQUENTLY USED TYPES</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>

<comment type="line" format="doxygen">/// FREQUENTLY USED CONSTS</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MODULO</name> <init>= <expr><call><name>ll</name><argument_list>(<argument><expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>oo</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><operator>(</operator><call><name>atan</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>YES_ANS</name> <init>= <expr><literal type="string">"YES"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>NO_ANS</name>  <init>= <expr><literal type="string">"NO"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>HanhIsSoCute</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>clearedAllDebug</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>

<comment type="line" format="doxygen">/// FREQUENTLY USED FUNCTIONS</comment>
<function><type><name>ll</name></type> <name>myPow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name> <init>= <expr><name>MODULO</name></expr></init></decl></parameter>)</parameter_list>
<comment type="block" format="doxygen">/** (x^y)%m */</comment>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>y</name></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><operator>(</operator><name>ans</name><operator>*=</operator><name>t</name><operator>)</operator> <operator>%=</operator> <name>m</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><operator>(</operator><name>t</name><operator>*=</operator><name>t</name><operator>)</operator> <operator>%=</operator> <name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>isInc</name><parameter_list>()</parameter_list>                     <block>{ <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>isInc</name><parameter_list>(<parameter><decl><type><name>auto</name></type> <name>val1</name></decl></parameter>)</parameter_list>            <block>{ <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></function>
<function><type><name>bool</name></type> <name>isInc</name><parameter_list>(<parameter><decl><type><name>auto</name></type> <name>val1</name></decl></parameter>, <parameter><decl><type><name>auto</name></type> <name>val2</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>val1</name> <operator>&lt;=</operator> <name>val2</name></expr>;</return> }</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Type</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>isInc</name><parameter_list>(<parameter><decl><type><name>Type</name></type> <name>val1</name></decl></parameter>, <parameter><decl><type><name>Type</name></type> <name>val2</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>temp</name> <init>= <expr><call><name>isInc</name><argument_list>(<argument><expr><name>val2</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>val1</name> <operator>&lt;=</operator> <name>val2</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>temp</name></expr>;</return>
}</block></function>

<function><type><name>auto</name></type> <name>mmax</name><parameter_list>(<parameter><decl><type><name>auto</name></type> <name>x</name></decl></parameter>)</parameter_list>              <block>{ <return>return <expr><name>x</name></expr>;</return>                     }</block></function>
<function><type><name>auto</name></type> <name>mmax</name><parameter_list>(<parameter><decl><type><name>auto</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>auto</name></type> <name>y</name></decl></parameter>)</parameter_list>      <block>{ <return>return <expr><call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>              }</block></function>
<decl_stmt><decl><type><name>auto</name></type> <name>mmax</name><argument_list>(<argument><expr><name>auto</name> <name>x</name></expr></argument>, <argument><expr><name>auto</name><operator>...</operator> <name>args</name></expr></argument>)</argument_list><argument_list>{ return <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>mmax</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>; }</argument_list>

auto <name>mmin</name><argument_list>(<argument><expr><name>auto</name> <name>x</name></expr></argument>)</argument_list>              <argument_list>{ return <argument><expr><name>x</name></expr></argument>;                     }</argument_list>
auto <name>mmin</name><argument_list>(<argument><expr><name>auto</name> <name>x</name></expr></argument>, <argument><expr><name>auto</name> <name>y</name></expr></argument>)</argument_list>      <argument_list>{ return <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>;              }</argument_list>
auto <name>mmin</name><argument_list>(<argument><expr><name>auto</name> <name>x</name></expr></argument>, <argument><expr><name>auto</name><operator>...</operator> <name>args</name></expr></argument>)</argument_list><argument_list>{ return <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>mmin</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>; }</argument_list>

<name>ll</name> <name>sgn</name><argument_list>(<argument><expr><name>auto</name> <name>a</name></expr></argument>)</argument_list>
<comment type="block" format="doxygen">/** get the sign of a number a */</comment>
<argument_list>{
    if<argument><expr><operator>(</operator><name>a</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>
        <return>return <expr><literal type="number">0</literal></expr>;</return></argument_list></decl></decl_stmt>
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</return>
}

void <macro><name>varMod</name><argument_list>(<argument>ll &amp; x</argument>, <argument>bool negativeAllow = <literal type="boolean">false</literal></argument>)</argument_list></macro>
<block>{
    <expr_stmt><expr><name>x</name> <operator>%=</operator> <name>MODULO</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator> <name>negativeAllow</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>MODULO</name><operator>)</operator> <operator>%</operator> <name>MODULO</name></expr>;</expr_stmt></block></then></if>
}</block>
<function><type><name>void</name></type> <name>varMod</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>negativeAllow</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>iMODULO</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><name>MODULO</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>%=</operator> <name>iMODULO</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><operator>!</operator> <name>negativeAllow</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>+</operator> <name>iMODULO</name><operator>)</operator> <operator>%</operator> <name>iMODULO</name></expr>;</expr_stmt></block></then></if>
}</block></function>


<function><type><name>bool</name></type> <name>isf</name><parameter_list>(<parameter><decl><type><name>auto</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>auto</name></type> <name>b</name></decl></parameter>)</parameter_list>
<comment type="block" format="doxygen">/** is Equal for floating point number */</comment>
<block>{
    <return>return <expr><operator>(</operator><name>double</name><operator>)</operator><call><name>abs</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <name>b</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>eps</name></expr>;</return>
}</block></function>

<comment type="line" format="doxygen">/// FAST IO</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>ELEMENT_SEPARATOR</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>POSITION_AFTER_DECIMAL</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>print</name><parameter_list>()</parameter_list>             <block>{}</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>        <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>  , <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>)</parameter_list>  <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>a</name></decl></parameter>)</parameter_list>       <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>  , <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>       <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>  , <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>  , <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>a</name></decl></parameter>)</parameter_list>     <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>  , <argument><expr><call><name><name>a</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>a</name></decl></parameter>)</parameter_list>       <block>{ <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><ternary><condition><expr><name>a</name></expr>?</condition><then> <expr><name>YES_ANS</name></expr></then><else>:<expr><name>NO_ANS</name></expr></else></ternary></expr></argument> )</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>a</name></decl></parameter>)</parameter_list>      <block>{ <decl_stmt><decl><type><name>string</name></type> <name>format</name> <init>= <expr><literal type="string">"%."</literal> <operator>+</operator> <call><name>to_string</name><argument_list>(<argument><expr><name>POSITION_AFTER_DECIMAL</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"f"</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>)</parameter_list>     <block>{ <decl_stmt><decl><type><name>string</name></type> <name>format</name> <init>= <expr><literal type="string">"%."</literal> <operator>+</operator> <call><name>to_string</name><argument_list>(<argument><expr><name>POSITION_AFTER_DECIMAL</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">"f"</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><call><name><name>format</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument> , <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>,<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>Fi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>ELEMENT_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>Se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
    <macro><name>forEach</name><argument_list>(<argument>element</argument>,<argument>a</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>ELEMENT_SEPARATOR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
}</block></function>

<decl_stmt><decl><type><name>void</name></type> <name>print</name><argument_list>(<argument><expr><name>char</name> <name>a</name></expr></argument>, <argument><expr><name>auto</name><operator>...</operator> <name>args</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><call><name>print</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>;
    if<argument><expr><operator>(</operator><name>a</name> <operator>!=</operator> <name>endl</name><operator>)</operator>
        <call><name>print</name><argument_list>(<argument><expr><name>ELEMENT_SEPARATOR</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>print</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>
template<name/>&lt;<name><typename>typename</typename> <name>Type</name></name></decl>, <decl><type ref="prev"/><name><typename>typename</typename></name><modifier>...</modifier> <name>Args</name>&gt;
<name>void</name> <name>print</name><argument_list>(<argument><expr><name>Type</name> <name>a</name></expr></argument>, <argument><expr><name>Args</name><operator>...</operator> <name>args</name></expr></argument>)</argument_list>
<argument_list>{
    <argument><expr><call><name>print</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>print</name><argument_list>(<argument><expr><name>ELEMENT_SEPARATOR</name></expr></argument>)</argument_list></call></expr></argument>;
    <argument><expr><call><name>print</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>;
}</argument_list>

const <name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name> <name>ENDSTRING_CHARACTER</name> <init>= <expr><block>{<expr><literal type="char">'\n'</literal></expr>, <expr><literal type="char">' '</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>        <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>   , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>  <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>float</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>      <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%f"</literal></expr></argument>   , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>double</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>     <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lf"</literal></expr></argument>  , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>       <block>{ <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>   , <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>readc</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<comment type="block" format="doxygen">/** ignore all unneccesary characters */</comment>
<block>{
    <decl_stmt><decl><type><name>char</name></type> <name>tempChar</name></decl>;</decl_stmt>
    <do>do
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    while<condition>(<expr><call><name><name>ENDSTRING_CHARACTER</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>tempChar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>;</do>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>tempChar</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>string</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>string</name></type> <name>res</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>tempChar</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tempChar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name><name>ENDSTRING_CHARACTER</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>tempChar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><call><name><name>res</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <name>res</name> <operator>+</operator> <name>tempChar</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>res</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>,<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>Fi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>Se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{
    <macro><name>forEach</name><argument_list>(<argument>element</argument>, <argument>a</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>element</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Type</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>Type</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>readVector</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>vectorName</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>vectorSize</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>vectorName</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>vectorSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>vectorName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>readVector</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><specifier>auto</specifier></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>vectorName</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>startPos</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>endPos</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>vectorName</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>endPos</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>forUp</name><argument_list>(<argument>i</argument>, <argument>startPos</argument>, <argument>endPos</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>vectorName</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="line" format="doxygen">/// START &amp; END</comment>
<function><type><name>void</name></type> <name>onStartMain</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>onEndMain</name><parameter_list>()</parameter_list>
<block>{
    <if>if<condition>(<expr><operator>!</operator> <name>clearedAllDebug</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"+-------------------------------------+\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"| WARNING: NOT REMOVED DEBUG MESSAGES |\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"+-------------------------------------+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">10101010</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="line" format="doxygen">///~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>
<comment type="line" format="doxygen">/// ALGORITHM TEMPLATE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>
<comment type="line" format="doxygen">///~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>


<comment type="line" format="doxygen">///~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>
<comment type="line" format="doxygen">/// SOLUTION ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>
<comment type="line" format="doxygen">///~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>

<function><type><name>char</name></type> <name>doStuff</name><parameter_list>(<parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type><name>rd</name></decl></parameter>,<parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type><name>pd</name></decl></parameter>,<parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type><name>sd</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>rd</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>rd</name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><literal type="char">'R'</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>pd</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>pd</name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><literal type="char">'P'</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>sd</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>sd</name><operator>--</operator></expr>;</expr_stmt>
        <return>return <expr><literal type="char">'S'</literal></expr>;</return>
    }</block></then></if>
}</block></function>

<decl_stmt><decl><type><name>vi</name></type> <name>f</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//onStartMain();</comment>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="char">'.'</literal> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name> <init>= <expr><call><name>szOf</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <macro><name>forUp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>n</argument>)</argument_list></macro>
    <block>{
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <if>if<condition>( <expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <name>is</name> <name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <name>is</name> <literal type="char">'n'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <name>is</name> <literal type="char">'u'</literal><operator>)</operator><operator>)</operator></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>varMod</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>

        <if>if<condition>( <expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <name>is</name> <literal type="char">'m'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <name>is</name> <literal type="char">'w'</literal><operator>)</operator></expr> )</condition><then>
        <block>{
            <expr_stmt><expr><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block>

    <if>if<condition>( <expr><operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <name>is</name> <literal type="char">'m'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <name>is</name> <literal type="char">'w'</literal><operator>)</operator></expr> )</condition><then>
        <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>onEndMain</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line" format="doxygen">/// Háº¡nh ÄÃ¡ng iu</comment>
<comment type="line" format="doxygen">/// Háº¡nh dá» thÆ°n</comment>


<comment type="line" format="doxygen">///~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>
<comment type="line" format="doxygen">/// TEST CASES ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>
<comment type="line" format="doxygen">///~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\\</comment>

<comment type="block">/* Test case 1
input

output
*/</comment>
</unit>
