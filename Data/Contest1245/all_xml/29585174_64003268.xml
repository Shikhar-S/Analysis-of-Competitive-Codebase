<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29585174_64003268.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">100</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>,<decl><type ref="prev"/><name>T</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>R</name></decl>,<decl><type ref="prev"/><name>P</name></decl>,<decl><type ref="prev"/><name>S</name></decl>,<decl><type ref="prev"/><name><name>sum</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sum</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d%s"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>P</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>S</name></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal><operator>&amp;&amp;</operator><name>P</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>P</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then>
			<elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal><operator>&amp;&amp;</operator><name>S</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>S</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal><operator>&amp;&amp;</operator><name>R</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>R</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if></elseif></if></block></for>
		<if>if<condition>(<expr><name>ans</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><if>if<condition>(<expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
				<elseif>else <if>if<condition>(<expr><name>P</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>P</name><operator>--</operator></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name>R</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>R</name><operator>--</operator></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name>S</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>S</name><operator>--</operator></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if></block></for>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
