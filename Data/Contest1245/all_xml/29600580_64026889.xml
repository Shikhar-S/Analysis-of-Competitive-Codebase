<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29600580_64026889.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>T</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>X</name></decl>,<decl><type ref="prev"/><name>Y</name></decl>,<decl><type ref="prev"/><name>t1</name></decl>,<decl><type ref="prev"/><name>t2</name></decl>,<decl><type ref="prev"/><name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>,<decl><type ref="prev"/><name>S1</name></decl>,<decl><type ref="prev"/><name>S2</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>gg</name></decl>,<decl><type ref="prev"/><name>u1</name></decl>,<decl><type ref="prev"/><name>u2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><literal type="number">55</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>W1</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>W2</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>mi</name><index>[<expr><literal type="number">55</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>js</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>L1</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>L2</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><operator>(</operator><name>L1</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>L2</name><operator>&lt;</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">50</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name><name>W1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>L1</name><operator>/</operator><name><name>mi</name><index>[<expr><literal type="number">50</literal><operator>-</operator><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>W2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>L2</name><operator>/</operator><name><name>mi</name><index>[<expr><literal type="number">50</literal><operator>-</operator><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><literal type="number">2</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">50</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if <condition>(<expr><name>i</name><operator>==</operator><literal type="number">48</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>gg</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<for>for <control>(<init><expr><name>s1</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>s1</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>s1</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<for>for <control>(<init><expr><name>s2</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>s2</name><operator>&lt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>s2</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<if>if <condition>(<expr><name>s1</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>u1</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>u1</name><operator>=</operator><name><name>W1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>s2</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>u2</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>u2</name><operator>=</operator><name><name>W2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
				<for>for <control>(<init><expr><name>t1</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>t1</name><operator>&lt;=</operator><name>u1</name></expr>;</condition><incr><expr><name>t1</name><operator>++</operator></expr></incr>)</control>
				<block>{
					<for>for <control>(<init><expr><name>t2</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>t2</name><operator>&lt;=</operator><name>u2</name></expr>;</condition><incr><expr><name>t2</name><operator>++</operator></expr></incr>)</control>
					<block>{
						<if>if <condition>(<expr><operator>(</operator><name>t1</name><operator>==</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>t2</name><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
						<if>if <condition>(<expr><operator>(</operator><name>s1</name><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>t1</name><operator>==</operator><name><name>W1</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>S1</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>S1</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
						<if>if <condition>(<expr><operator>(</operator><name>s2</name><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>t2</name><operator>==</operator><name><name>W2</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>S2</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>S2</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
						<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>S1</name></expr>]</index><index>[<expr><name>S2</name></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>s1</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index></name></expr>;</expr_stmt>
					}</block></for>
				}</block></for>
			}</block></for>
		}</block></for>
	}</block></for>
	<return>return <expr><name><name>f</name><index>[<expr><literal type="number">50</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">50</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">50</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><literal type="number">50</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//	freopen("read.in","r",stdin);</comment>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>mi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">50</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>mi</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>mi</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><literal type="number">2</literal></expr>;</expr_stmt></block></for>
	<while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>=</operator><call><name>js</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>js</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><call><name>js</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>js</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function></unit>
