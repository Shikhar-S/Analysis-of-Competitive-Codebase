include directive file using namespace name typedef type name name argument_list type generic argument expr name argument expr name name decl_stmt decl type name name name index expr literal type number decl type ref prev name name index expr literal type number function type name name parameter_list block decl_stmt decl type name name decl type ref prev name name index expr literal type number decl type ref prev name name index expr literal type number init expr block expr literal type number expr literal type number expr literal type number decl type ref prev name name index expr literal type number init expr block expr literal type number expr literal type number expr literal type number decl type ref prev name init expr literal type number expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name name index expr literal type number argument expr operator name name index expr literal type number argument expr operator name name index expr literal type number expr_stmt expr call name argument_list argument expr literal type string argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr name name index expr name operator literal type char if condition expr name name index expr name operator literal type char then block if condition expr name name index expr literal type number operator literal type number then block type pseudo expr_stmt expr name operator operator expr name name index expr literal type number operator operator expr name name index expr name operator literal type char elseif if condition expr name name index expr name operator literal type char then block if condition expr name name index expr literal type number operator literal type number then block type pseudo expr_stmt expr name operator operator expr name name index expr literal type number operator operator expr name name index expr name operator literal type char elseif if condition expr name name index expr literal type number operator literal type number then block expr_stmt expr name operator operator expr name name index expr literal type number operator operator expr name name index expr name operator literal type char if condition expr name operator operator name operator literal type number operator operator operator name operator literal type number operator then block type pseudo expr_stmt expr call name argument_list argument expr literal type string else block expr_stmt expr call name argument_list argument expr literal type string for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator literal type char then block if condition expr name name index expr literal type number operator literal type number then block type pseudo expr_stmt expr name name index expr name operator literal type char operator expr name name index expr literal type number operator elseif if condition expr name name index expr literal type number operator literal type number then block type pseudo expr_stmt expr name name index expr name operator literal type char operator expr name name index expr literal type number operator else block type pseudo expr_stmt expr name name index expr name operator literal type char operator expr name name index expr literal type number operator expr_stmt expr name name index expr name operator literal type char expr_stmt expr call name argument_list argument expr literal type string argument expr name return function type name name parameter_list block decl_stmt decl type name name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name while condition expr name operator block expr_stmt expr call name argument_list 
