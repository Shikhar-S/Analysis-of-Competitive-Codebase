<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617384_64010627.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ull</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using>using <name>vll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pll</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>tll</name> <init>= <type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(), (v).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i = 0; i &lt; (n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i = (m); i &lt; (n); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for3</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i = (m); i &lt; (n); i += (d))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rfor2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i = (m); i &gt; (n); i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rfor3</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i = (m); i &gt; (n); i += (d))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.1415926535897932384626433832795028841971693993751</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1111111111111111111LL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007LL</cpp:value></cpp:define>  <comment type="line">// 10**9 + 7</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>print_1(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>in</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>in_1(__VA_ARGS__)</cpp:value></cpp:define>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DEBUG</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dump_1(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dumpa</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dumpa_1(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dumpa</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Head</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>dump_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>Head</name><modifier>&amp;&amp;</modifier></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>str</name> <operator>&lt;&lt;</operator> <literal type="string">": "</literal> <operator>&lt;&lt;</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Head</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Tail</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>dump_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>Head</name><modifier>&amp;&amp;</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>Tail</name><modifier>&amp;&amp;</modifier><modifier>...</modifier></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{
    <while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">": "</literal> <operator>&lt;&lt;</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>dump_1</name><argument_list>(<argument><expr><name>str</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>t</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>dumpa_1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name><name>v</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ll</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{
    <while>while <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">','</literal></expr>)</condition> <block>{
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>str</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">": "</literal></expr>;</expr_stmt>
    <macro><name>for1</name> <argument_list>(<argument>i</argument>, <argument>size</argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'('</literal> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>v</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
    <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>, <parameter><type><name>typename</name></type> <name>T3</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>, <argument><expr><name>T3</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'('</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">')'</literal></expr>;</expr_stmt>
    <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'{'</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>it</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>it</name> <operator>!=</operator> <call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">':'</literal> <operator>&lt;&lt;</operator> <name><name>it</name><operator>-&gt;</operator><name>second</name></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="char">'}'</literal></expr>;</expr_stmt>
    <return>return <expr><name>os</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>Yes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>No</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>YES</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt> }</block></function>
<function><type><name>void</name></type> <name>NO</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>vin</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{
    <macro><name>for1</name> <argument_list>(<argument>i</argument>, <argument>len</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Head</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>in_1</name><parameter_list>(<parameter><decl><type><name>Head</name><modifier>&amp;</modifier></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>h</name></expr>;</expr_stmt>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Head</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Tail</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>in_1</name><parameter_list>(<parameter><decl><type><name>Head</name><modifier>&amp;</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>Tail</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>h</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>in_1</name><argument_list>(<argument><expr><name>t</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Head</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>print_1</name><parameter_list>(<parameter><decl><type><name>Head</name><modifier>&amp;&amp;</modifier></type> <name>h</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Head</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Tail</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>print_1</name><parameter_list>(<parameter><decl><type><name>Head</name><modifier>&amp;&amp;</modifier></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>Tail</name><modifier>&amp;&amp;</modifier><modifier>...</modifier></type> <name>t</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>h</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_1</name><argument_list>(<argument><expr><name>t</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<comment type="line">//---------------------------------------------------------</comment>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>T</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>for1</name> <argument_list>(<argument>t</argument>, <argument>T</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>in</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>len</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>a2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>b2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>c2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <macro><name>for1</name> <argument_list>(<argument>i</argument>, <argument>len</argument>)</argument_list></macro> <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>b2</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>c2</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif>
            <elseif>else <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>a2</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block>
        <decl_stmt><decl><type><name>ll</name></type> <name>a3</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>b3</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>c3</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">// dump(a, b, c);</comment>
        <comment type="line">// dump(a2, b2, c2);</comment>
        <comment type="line">// dump(a3, b3, c3, (n + 1) / 2);</comment>
        <if>if <condition>(<expr><name>a3</name> <operator>+</operator> <name>b3</name> <operator>+</operator> <name>c3</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>YES</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>string</name></type> <name>ans</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <macro><name>for1</name> <argument_list>(<argument>i</argument>, <argument>len</argument>)</argument_list></macro> <block>{
                <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then>
                <elseif>else <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if></elseif>
                <elseif>else <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></then></if></elseif></if>
            }</block>
            <macro><name>for1</name> <argument_list>(<argument>i</argument>, <argument>len</argument>)</argument_list></macro> <block>{
                <decl_stmt><decl><type><name>char</name></type> <name>ch</name> <init>= <expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <comment type="line">// dump(i, ch, a, b, c);</comment>
                <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then>
                    <elseif>else <if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then></if></elseif>
                    <elseif>else <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then></if></elseif></if>
                }</block></then></if>
            }</block>
            <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>NO</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
