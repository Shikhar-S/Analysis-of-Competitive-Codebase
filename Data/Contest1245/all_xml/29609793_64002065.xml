<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29609793_64002065.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;x);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>x</name></type></parameter> ,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int x=0; x&lt;n; x++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>finish</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>return cout &lt;&lt; x &lt;&lt; endl,0;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scarr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int x=0; x&lt;n; x++)scanf("%d",&amp;a[x]);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_N</name></cpp:macro> <cpp:value>2003</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <macro><name>sc</name><argument_list>(<argument>t</argument>)</argument_list></macro>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ,<decl><type ref="prev"/><name>a</name></decl> ,<decl><type ref="prev"/><name>b</name></decl> ,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <macro><name>sc</name><argument_list>(<argument>n</argument>)</argument_list></macro><macro><name>sc</name><argument_list>(<argument>a</argument>)</argument_list></macro><macro><name>sc</name><argument_list>(<argument>b</argument>)</argument_list></macro><macro><name>sc</name><argument_list>(<argument>c</argument>)</argument_list></macro>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>R</name> <init>= <expr><call><name>count</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument> ,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument> ,<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>P</name> <init>= <expr><call><name>count</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument> ,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument> ,<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>S</name> <init>= <expr><call><name>count</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument> ,<argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument> ,<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>to</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument> ,<argument><expr><name>S</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument> ,<argument><expr><name>P</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument> ,<argument><expr><name>R</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if<condition>(<expr><name>to</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>string</name></type> <name>ans</name><argument_list>(<argument><expr><name>n</name></expr></argument> ,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr> <operator>,</operator><expr><name>b</name><operator>--</operator></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>c</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr> <operator>,</operator><expr><name>c</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>a</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr> <operator>,</operator><expr><name>a</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif></if>
            }</block></for>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name>b</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr> <operator>,</operator><expr><name>b</name><operator>--</operator></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>(<expr><name>c</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr> <operator>,</operator><expr><name>c</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name>a</name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr> <operator>,</operator><expr><name>a</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif></if>
            }</block></then></if></block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>

    }</block></while>
}</block></function>
</unit>
