pragma directive name name name literal name pragma directive name name name literal name include directive file define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value using namespace name typedef type name name name typedef type name name name typedef type name name argument_list type generic argument expr name argument expr name name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl type ref prev name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type number operator expr call name name operator name argument_list argument expr literal type number decl_stmt decl type name name expr_stmt expr name operator name while condition expr name operator block decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name decl type ref prev name decl type ref prev name expr_stmt expr name operator name operator name operator name decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name init expr literal type string decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator literal type char then block if condition expr operator name then block expr_stmt expr name operator literal type string continue expr_stmt expr name operator expr_stmt expr name operator literal type string expr_stmt expr name operator if condition expr name name index expr name operator literal type char then block if condition expr operator name then block expr_stmt expr name operator literal type string continue expr_stmt expr name operator expr_stmt expr name operator expr_stmt expr name operator literal type string if condition expr name name index expr name operator literal type char then block if condition expr operator name then block expr_stmt expr name operator literal type string continue expr_stmt expr name operator expr_stmt expr name operator expr_stmt expr name operator literal type string if condition expr name operator literal type number operator name then block type pseudo expr_stmt expr name operator literal type string else block expr_stmt expr name operator literal type string for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr operator name then block type pseudo continue if condition expr name name index expr name operator literal type char then block type pseudo continue expr_stmt expr name name index expr name operator literal type char expr_stmt expr name operator for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr operator name then block type pseudo continue if condition expr name name index expr name operator literal type char then block type pseudo continue expr_stmt expr name name index expr name operator literal type char expr_stmt expr name operator for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr operator name then block type pseudo continue if condition expr name name index expr name operator literal type char then block type pseudo continue expr_stmt expr name name index expr name operator literal type char expr_stmt expr name operator expr_stmt expr name operator name operator literal type char return expr operator literal type number operator 
