<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29577386_64012688.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//coded by _Int_</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>Mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ln</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">3</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>Mod</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ln</name><operator>=</operator><call><name>strlen</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>ln</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal><operator>||</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>u</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><literal type="number">1ll</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>Mod</name></expr><operator>,</operator><expr><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>u</name><operator>++</operator></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><literal type="number">1ll</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>Mod</name></expr><operator>,</operator><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		}</block></then></if></elseif>
		<else>else<block>{
			<if>if<condition>(<expr><name>u</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><literal type="number">1ll</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>Mod</name></expr><operator>,</operator><expr><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><literal type="number">1ll</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>Mod</name></expr><operator>,</operator><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		}</block></else></if>
	}</block></for>
	<if>if<condition>(<expr><name>u</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><literal type="number">1ll</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>Mod</name></expr><operator>,</operator><expr><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>n</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><literal type="number">1ll</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>n</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>Mod</name></expr><operator>,</operator><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block">/*
n=&gt;1
nn=&gt;2
nnn=&gt;3
nnnn=&gt;5

*/</comment>
</unit>
