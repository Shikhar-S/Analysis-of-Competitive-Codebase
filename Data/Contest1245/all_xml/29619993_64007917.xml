<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619993_64007917.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>GCD</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
    <return>return<expr><operator>(</operator><call><name>GCD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>us</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>aa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>otv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <switch>switch<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{
            <case>case <expr><literal type="char">'R'</literal></expr>:</case>
                <expr_stmt><expr><name>aa</name><operator>++</operator></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'P'</literal></expr>:</case>
                <expr_stmt><expr><name>bb</name><operator>++</operator></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'S'</literal></expr>:</case>
                <expr_stmt><expr><name>cc</name><operator>++</operator></expr>;</expr_stmt>
                <break>break;</break>
            }</block></switch>
        }</block></for>
        <if>if<condition>(<expr><name>b</name><operator>&gt;=</operator> <name>aa</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>otv</name><operator>+=</operator><name>aa</name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>b</name><operator>-</operator><name>aa</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><call><name><name>us</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>otv</name><operator>+=</operator> <name>b</name></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name>c</name><operator>&gt;=</operator> <name>bb</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>otv</name><operator>+=</operator><name>bb</name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>c</name><operator>-</operator><name>bb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><call><name><name>us</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>otv</name><operator>+=</operator> <name>c</name></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name>a</name><operator>&gt;=</operator> <name>cc</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>otv</name><operator>+=</operator><name>cc</name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>a</name><operator>-</operator><name>cc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><call><name><name>us</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>otv</name><operator>+=</operator> <name>a</name></expr>;</expr_stmt></block></else></if>
        <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>otv</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <switch>switch<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{
            <case>case <expr><literal type="char">'R'</literal></expr>:</case>
                <if>if<condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"P"</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>us</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
                }</block></else></if>
                <break>break;</break>
            <case>case <expr><literal type="char">'P'</literal></expr>:</case>
                <if>if<condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"S"</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>us</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
                }</block></else></if>
                <break>break;</break>
            <case>case <expr><literal type="char">'S'</literal></expr>:</case>
                <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"R"</literal></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>us</name><index>[<expr><name>p</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
                }</block></else></if>
                <break>break;</break>
            }</block></switch>
            }</block></for>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>


    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
