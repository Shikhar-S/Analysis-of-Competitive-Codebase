<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618667_64020556.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>llu</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ldo</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forz</name><parameter_list>(<parameter><type><name>iter</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>for(ll iter=0;iter&lt;n;++iter)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>iter</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>for(ll iter=s;iter&lt;e;++iter)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>urep</name><parameter_list>(<parameter><type><name>iter</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>for(ll iter=s;iter&gt;=e;--iter)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro>				<cpp:value>(ll)1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pp</name></cpp:macro>				<cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro>				<cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro>				<cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpp</name></cpp:macro>				<cpp:value>vector&lt;pp&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vss</name></cpp:macro>				<cpp:value>vector&lt;string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>take</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>{forz(iter,n)cin&gt;&gt;A[iter];}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>				<cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pob</name></cpp:macro>				<cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro>				<cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro>				<cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pof</name></cpp:macro>				<cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mkp</name></cpp:macro>				<cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro>				<cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro>				<cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lcm</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>		<cpp:value>(a*b)/__gcd(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bs</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>binary_search(all(v),x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>upper_bound(all(v),x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name><parameter_list>(<parameter><type><name>v</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>			<cpp:value>lower_bound(all(v),x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>zoom</name></cpp:macro>			<cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);</cpp:value></cpp:define>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>setmin</name><parameter_list>(<parameter><decl><type><name>C</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>C</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><name>b</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>setmax</name><parameter_list>(<parameter><decl><type><name>C</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><name>C</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>a</name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>printv</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name></decl></parameter>,<parameter><decl><type><name>string</name></type> <name>end</name><init>=<expr><literal type="string">" "</literal></expr></init></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><specifier>auto</specifier> <specifier>const</specifier><modifier>&amp;</modifier></type><name>iter</name><range>:<expr><name>vec</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>iter</name><operator>&lt;&lt;</operator><name>end</name></expr>;</expr_stmt></block></for><if>if<condition>(<expr><name>end</name><operator>!=</operator><literal type="string">"\n"</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>printv</name><parameter_list>(<parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>C</name></expr></argument>&gt;</argument_list></name></type> <name>setc</name></decl></parameter>,<parameter><decl><type><name>string</name></type> <name>end</name><init>=<expr><literal type="string">" "</literal></expr></init></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><specifier>auto</specifier> <specifier>const</specifier><modifier>&amp;</modifier></type><name>iter</name><range>:<expr><name>setc</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>iter</name><operator>&lt;&lt;</operator><name>end</name></expr>;</expr_stmt></block></for><if>if<condition>(<expr><name>end</name><operator>!=</operator><literal type="string">"\n"</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>print</name><parameter_list>(<parameter><decl><type><name>C</name></type> <name><name>A</name><index>[]</index></name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>string</name></type> <name>end</name><init>=<expr><literal type="string">" "</literal></expr></init></decl></parameter>)</parameter_list><block>{<macro><name>forz</name><argument_list>(<argument>iter</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>A</name><index>[<expr><name>iter</name></expr>]</index></name><operator>&lt;&lt;</operator><name>end</name></expr>;</expr_stmt><if>if<condition>(<expr><name>end</name><operator>!=</operator><literal type="string">"\n"</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></then></if>}</block></function>
<comment type="line">//for(auto const&amp;x:mp)</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>fu</name><init>=<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1</literal><operator>)</operator><operator>&lt;&lt;</operator><literal type="number">20</literal><operator>)</operator><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<class>class <name>Solution</name>
<block>{<private type="default">
	</private><public>public:
	<function><type><name>void</name></type> <name>SolutionFunc</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>q</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="char">'#'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>win</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<macro><name>forz</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
		<block>{
			<if>if<condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>b</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>win</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>a</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>win</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>c</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>win</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block>
		<macro><name>forz</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
		<block>{
			<if>if<condition>(<expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'#'</literal></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr><operator>,</operator><expr><name>b</name><operator>--</operator></expr>;</expr_stmt></block></then>
				<elseif>else <if>if<condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr><operator>,</operator><expr><name>c</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
				<else>else
					<block type="pseudo"><expr_stmt><expr><name><name>q</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr><operator>,</operator><expr><name>a</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
			}</block></then></if>
		}</block>
		<if>if<condition>(<expr><name>win</name><operator>&lt;</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>q</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></function>
</public>}</block>;</class>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>zoom</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Solution</name></type> <name>ob</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<macro><name>forz</name><argument_list>(<argument>t1</argument>,<argument>t</argument>)</argument_list></macro>
	<block>{
		<comment type="line">// cout&lt;&lt;"Case #"&lt;&lt;t1+1&lt;&lt;": ";</comment>
		<expr_stmt><expr><call><name><name>ob</name><operator>.</operator><name>SolutionFunc</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
