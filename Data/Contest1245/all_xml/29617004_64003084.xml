<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617004_64003084.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>err</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{}</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_debug.cpp"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>lim</name> <init>= <type><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <for>for<control>(<init><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>x</name> <range>: <expr><name>a</name></expr></range></decl></init>)</control> <block>{ <expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt> }</block></for> <return>return <expr><name>is</name></expr>;</return> }</block></function>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__FASTPOW_INCLUDED_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__FASTPOW_INCLUDED_</name></cpp:macro></cpp:define>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>constexpr</specifier> <type><name>T</name></type> <name>fpow_eq</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>identity</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <block>{
    <for>for<control>(<init>;</init> <condition><expr><name>y</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>x</name> <operator>*=</operator> <name>x</name></expr><operator>,</operator> <expr><name>y</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>identity</name> <operator>*=</operator> <name>x</name></expr>;</expr_stmt></block></then></if></block></for>
    <return>return <expr><name>x</name> <operator>=</operator> <name>identity</name></expr>;</return>
}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>constexpr</specifier> <type><name>T</name></type> <name>fpow</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>identity</name> <init>= <expr><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>fpow_eq</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>identity</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>__FASTPOW_INCLUDED_</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Math - Fast Pow.cpp"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__TOTIENT_INCLUDED_</name></cpp:ifdef>
<template>template <parameter_list>&lt;<parameter><type><name>int</name></type> <name>M</name></parameter>, <parameter><type><name>int</name></type> <name>PHI_M</name> <init>= <expr><call><name>phi</name><argument_list>(<argument><expr><name>M</name></expr></argument>)</argument_list></call></expr></init></parameter>&gt;</parameter_list> <struct>struct <name>modint</name> <block>{<public type="default">
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<struct><template>template <parameter_list>&lt;<parameter><type><name>int</name></type> <name>M</name></parameter>, <parameter><type><name>int</name></type> <name>PHI_M</name></parameter>&gt;</parameter_list></template> struct <name>modint</name> <block>{<public type="default">
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><specifier>static</specifier> <specifier>constexpr</specifier> <type><name>int</name></type> <name>MOD</name> <init>= <expr><name>M</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
    <constructor><specifier>constexpr</specifier> <name>modint</name><parameter_list>()</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    <constructor><specifier>constexpr</specifier> <name>modint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><name>x</name> <operator>%</operator> <name>M</name></expr></argument>)</argument_list></call> </member_init_list><block>{ <expr_stmt><expr><name>val</name> <operator>+=</operator> <ternary><condition><expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>M</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt> }</block></constructor>
    <constructor><specifier>constexpr</specifier> <name>modint</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>modint</name><argument_list>(<argument><expr><call><name>int</name><argument_list>(<argument><expr><name>x</name> <operator>%</operator> <name>M</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    <function type="operator"><specifier>constexpr</specifier> <specifier>explicit</specifier> <name>operator <name>int</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name> <operator>==</operator> <name><name>y</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name> <operator>!=</operator> <name><name>y</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>bool</name></type> <name>operator<name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name> <operator>&lt;</operator>  <name><name>y</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>bool</name></type> <name>operator<name>&lt;=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name> <operator>&lt;=</operator> <name><name>y</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>bool</name></type> <name>operator<name>&gt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name> <operator>&gt;</operator>  <name><name>y</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>bool</name></type> <name>operator<name>&gt;=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name> <operator>&gt;=</operator> <name><name>y</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>y</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>+=</operator> <name><name>y</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>val</name> <operator>-=</operator> <ternary><condition><expr><name>val</name> <operator>&gt;=</operator> <name>M</name></expr> ?</condition><then> <expr><name>M</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>-=</operator> <name><name>y</name><operator>.</operator><name>val</name></name></expr>;</expr_stmt> <expr_stmt><expr><name>val</name> <operator>+=</operator> <ternary><condition><expr><name>val</name> <operator>&lt;</operator>  <literal type="number">0</literal></expr> ?</condition><then> <expr><name>M</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ll</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>y</name><operator>.</operator><name>val</name></name> <operator>%</operator> <name>M</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ll</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>fpow</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>PHI_M</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>.</operator><name>val</name> <operator>%</operator> <name>M</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>^=</name></name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>fpow_eq</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>y</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>y</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>y</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>y</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>^</name></name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>^=</operator> <name>y</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>-</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>-=</operator> <operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>~</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>/=</operator> <operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>++</name></name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><name>val</name> <operator>==</operator> <name>M</name> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name><modifier>&amp;</modifier></type> <name>operator<name>--</name></name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <ternary><condition><expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>M</name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>val</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>++</name></name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>modint</name></type> <name>m</name> <init>= <expr><operator>*</operator><name>this</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;</expr_stmt> <return>return <expr><name>m</name></expr>;</return> }</block></function>
    <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>--</name></name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>modint</name></type> <name>m</name> <init>= <expr><operator>*</operator><name>this</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><operator>--</operator><operator>(</operator><operator>*</operator><name>this</name><operator>)</operator></expr>;</expr_stmt> <return>return <expr><name>m</name></expr>;</return> }</block></function>
    <friend>friend <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>y</name></expr>;</return> }</block></function></friend>
    <friend>friend <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>y</name></expr>;</return> }</block></function></friend>
    <friend>friend <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>y</name></expr>;</return> }</block></function></friend>
    <friend>friend <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>y</name></expr>;</return> }</block></function></friend>
    <friend>friend <function type="operator"><type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>modint</name><modifier>&amp;</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>m</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function></friend>
    <friend>friend <function type="operator"><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name>modint</name><modifier>&amp;</modifier></type> <name>m</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>ll</name></type> <name>val</name></decl>;</decl_stmt> <name>is</name> <expr_stmt><expr><operator>&gt;&gt;</operator> <name>val</name></expr>;</expr_stmt> <name>m</name> <expr_stmt><expr><operator>=</operator> <call><name>modint</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>is</name></expr>;</return> }</block></function></friend>
</public>}</block>;</struct>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>int</name></type> <name>M</name> <init>= <expr><literal type="number">1</literal><literal type="char">'000'</literal><literal type="number">000</literal><literal type="char">'007;
using mint = modint&lt;M, M - 1&gt;;
mint operator""_m(unsigned long long int x) { return mint(ll(x)); }
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(0);
    string s;
    cin &gt;&gt; s;
    vector&lt;mint&gt; C(s.size() + 1);
    for(int i = s.size(); i &gt;= 0; i--) {
        if(i == s.size()) {
            C[i] = 1;
        } else if(s[i] == '</literal><name>m</name><literal type="char">' or s[i] == '</literal><name>w</name><literal type="char">') {
            C[i] = 0;
        } else if(i + 1 &lt; s.size() and ((s[i] == '</literal><name>n</name><literal type="char">' and s[i+1] == '</literal><name>n</name><literal type="char">') or (s[i] == '</literal><literal type="string">u'</literal> and s[i+1] == '<literal type="string">u'</literal></expr></init></decl></decl_stmt></public></block></struct></template>))) {
            C[i] = C[i + 1] + C[i + 2];
        } else {
            C[i] = C[i + 1];
        }
    }
    cout &lt;&lt; C[0] &lt;&lt; endl;
    return 0;
}
</unit>
