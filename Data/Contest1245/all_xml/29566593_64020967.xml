<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29566593_64020967.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>MyGCD</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>MyGCD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<return>return <expr><name>a</name></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>ModPow</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>z</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>x</name> <operator>%=</operator> <name>z</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>y</name></expr>)</condition> <block>{
		<if>if<condition>(<expr><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <name>x</name> <operator>%</operator> <name>z</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>%</operator> <name>z</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<class>class <name>C_Edge</name> <block>{<private type="default">
</private><public>public:
	<friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>C_Edge</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>C_Edge</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><name><name>x</name><operator>.</operator><name>cost</name></name> <operator>&gt;</operator> <name><name>y</name><operator>.</operator><name>cost</name></name></expr>;</return>
	}</block></function></friend>

	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cost</name></decl>;</decl_stmt>
</public>}</block> <decl><name>tmp</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>;</class>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>unvis</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>MyAbs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><name>x</name></expr>;</return></block></then></if>
	<return>return <expr><name>x</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>x</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>k</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></name></type> <name>pp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></name></expr></argument> &gt;</argument_list></name></name></type> <name>qq</name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>Prim</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>st</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>priority_queue</name><argument_list type="generic">&lt; <argument><expr><name>C_Edge</name></expr></argument> &gt;</argument_list></name></name></type> <name>q</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>st</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>cost</name></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>st</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>unvis</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>unvis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><operator>!</operator><name><name>unvis</name><index>[<expr><name><name>tmp</name><operator>.</operator><name>v</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name><name>unvis</name><index>[<expr><name><name>tmp</name><operator>.</operator><name>v</name></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>tmp</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>tmp</name><operator>.</operator><name>cost</name></name> <operator>==</operator> <name><name>c</name><index>[<expr><name><name>tmp</name><operator>.</operator><name>v</name></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>pp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>qq</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>std</name><operator>::</operator><name>make_pair</name></name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>u</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name><name>tmp2</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name><name>tmp</name><operator>.</operator><name>v</name></name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name><name>unvis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name><name>tmp2</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>tmp2</name><operator>.</operator><name>cost</name></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><call><name>MyAbs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name><name>tmp</name><operator>.</operator><name>v</name></name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>MyAbs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name><name>tmp</name><operator>.</operator><name>v</name></name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>k</name><index>[<expr><name><name>tmp</name><operator>.</operator><name>v</name></name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>tmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if></block></for>
	}</block></while>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name>  <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name>  <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>c</name><index>[<expr><name>st</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>st</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name>  <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><call><name>Prim</name><argument_list>(<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lu\n"</literal></expr></argument>, <argument><expr><call><name><name>pp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>space_flag</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <range>: <expr><name>pp</name></expr></range></decl></init>)</control> <block>{
		<if>if<condition>(<expr><name>space_flag</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>space_flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%lu\n"</literal></expr></argument>, <argument><expr><call><name><name>qq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>qq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>qq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><name><name>qq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
