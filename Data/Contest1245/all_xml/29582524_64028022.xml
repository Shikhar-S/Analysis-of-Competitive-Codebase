<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29582524_64028022.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>si</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>ONLINE_JUDGE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"debugging.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pii</name></type> <name><name>city</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>dp</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name><name>g</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type><name>st</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>wire</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{
   <decl_stmt><decl><type><name>int</name></type> <name>dist</name><init>=<expr><call><name>abs</name><argument_list>(<argument><expr><name><name>city</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name> <operator>-</operator> <name><name>city</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>F</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>city</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name> <operator>-</operator> <name><name>city</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>S</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
   <expr_stmt><expr><name>dist</name><operator>*=</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
   <return>return <expr><name>dist</name></expr>;</return>
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
   <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
   <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
   <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
   <block>{
      <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>city</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name><operator>&gt;&gt;</operator><name><name>city</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr>;</expr_stmt>
   }</block></for>
   <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
   <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
   
   <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
   <block>{
      <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
   }</block></for>
   <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
   <while>while<condition>(<expr><operator>!</operator><call><name><name>st</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
   <block>{
      <decl_stmt><decl><type><name>pii</name></type> <name>p</name><init>=<expr><operator>*</operator><call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>node</name><init>=<expr><name><name>p</name><operator>.</operator><name>S</name></name></expr></init></decl>,<decl><type ref="prev"/><name>d</name><init>=<expr><name><name>p</name><operator>.</operator><name>F</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>vis</name><index>[<expr><name>node</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name><operator>+=</operator><name><name>dp</name><index>[<expr><name>node</name></expr>]</index></name></expr>;</expr_stmt>
      <comment type="line">//dbgm(node,dp[node]);</comment>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
      <block>{
         <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
         <if>if<condition>( <expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <call><name>wire</name><argument_list>(<argument><expr><name>node</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then>
         <block>{
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>( <argument><expr><block>{<expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name></expr>,<expr><name>j</name></expr>}</block></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>wire</name><argument_list>(<argument><expr><name>node</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>( <argument><expr><block>{<expr><name><name>dp</name><index>[<expr><name>j</name></expr>]</index></name></expr>,<expr><name>j</name></expr>}</block></expr></argument> )</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ans</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>node</name></expr>;</expr_stmt>
         }</block></then></if>
      }</block></for>
   }</block></while>
   <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>grid</name></decl>;</decl_stmt>
   <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
   <block>{
      <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><call><name><name>grid</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
   }</block></for>
   <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>grid</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
   <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><range>:<expr><name>grid</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
   <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
   <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type><name>conn</name></decl>;</decl_stmt>
   <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
   <block>{
      <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
      <comment type="line">//dbgm(i,ans[i]);</comment>
   }</block></for>
   <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>conn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
   <for>for<control>(<init><decl><type><name>pii</name></type> <name>p</name><range>:<expr><name>conn</name></expr></range></decl></init>)</control>
   <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>F</name></name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>S</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
   <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
