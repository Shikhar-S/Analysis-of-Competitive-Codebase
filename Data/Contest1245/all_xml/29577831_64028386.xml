<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29577831_64028386.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;climits&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a),0,sizeof((a)));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&gt;(b)?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;(b)?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tv</name></cpp:macro> <cpp:value>t[p].val</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tl</name></cpp:macro> <cpp:value>t[p].l</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tr</name></cpp:macro> <cpp:value>t[p].r</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxa</name></cpp:macro> <cpp:value>4000005</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>long</name> <name>long</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>xyz135</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>paage46</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>cc1</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>cc1</name><operator>&gt;</operator><literal type="char">'9'</literal><operator>||</operator><name>cc1</name><operator>&lt;</operator><literal type="char">'0'</literal></expr>)</condition><block>{
		<if>if<condition>(<expr><name>cc1</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>paage46</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>cc1</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while<condition>(<expr><name>cc1</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>cc1</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{
		<expr_stmt><expr><name>xyz135</name><operator>=</operator><name>xyz135</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>cc1</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cc1</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>xyz135</name><operator>*</operator><name>paage46</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{
		<expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while<condition>(<expr><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition><block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return ;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>w1</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>x</name></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>w1</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<return>return ;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>w1</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	<return>return ;</return>
}</block></function>
<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>,<decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>c</name><index>[<expr><name>maxa</name></expr>]</index></name></decl>;</struct><decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>top</name></decl>;</decl_stmt>
<struct>struct <name>dd</name><block>{<public type="default">
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>val</name></decl>,<decl><type ref="prev"/><name>xu</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>d</name><index>[<expr><name>maxa</name></expr>]</index></name></decl>;</struct>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>node</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name><name>x</name><operator>.</operator><name>val</name></name><operator>&lt;</operator><name><name>y</name><operator>.</operator><name>val</name></name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>cmp1</name><parameter_list>(<parameter><decl><type><name>dd</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>dd</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name><name>x</name><operator>.</operator><name>val</name></name><operator>&lt;</operator><name><name>y</name><operator>.</operator><name>val</name></name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>fa</name><index>[<expr><name>maxa</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><ternary><condition><expr><name>x</name><operator>==</operator><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>get</name><argument_list>(<argument><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>fa</name><index>[<expr><call><name>get</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><call><name>get</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return ;</return>}</block></function>
<function><type><name>void</name></type> <name>psh</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>u</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>v</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>va</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name><name>c</name><index>[<expr><operator>++</operator><name>top</name></expr>]</index></name><operator>.</operator><name>u</name><operator>=</operator><name>u</name></expr>;</expr_stmt><expr_stmt><expr><name><name>c</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>v</name><operator>=</operator><name>v</name></expr>;</expr_stmt><expr_stmt><expr><name><name>c</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>val</name><operator>=</operator><name>va</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>c</name><index>[<expr><operator>++</operator><name>top</name></expr>]</index></name><operator>.</operator><name>v</name><operator>=</operator><name>u</name></expr>;</expr_stmt><expr_stmt><expr><name><name>c</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>u</name><operator>=</operator><name>v</name></expr>;</expr_stmt><expr_stmt><expr><name><name>c</name><index>[<expr><name>top</name></expr>]</index></name><operator>.</operator><name>val</name><operator>=</operator><name>va</name></expr>;</expr_stmt>
	<return>return ;</return>
}</block></function>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>b</name><index>[<expr><name>maxa</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><name>maxa</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>maxa</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt><decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>maxa</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>t1</name></decl>,<decl><type ref="prev"/><name>t2</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>prim</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>c</name><operator>+</operator><name>top</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>d</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>d</name><operator>+</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>cmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>p1</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,<decl><type ref="prev"/><name>p2</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><comment type="line">//ç¹ï¼è¾¹</comment>
	<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>xu</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>b</name><index>[<expr><operator>++</operator><name>t1</name></expr>]</index></name><operator>=</operator><name><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>xu</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>cnt</name><operator>&lt;</operator><name>n</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name><name>d</name><index>[<expr><name>p1</name></expr>]</index></name><operator>.</operator><name>val</name><operator>&lt;=</operator><name><name>c</name><index>[<expr><name>p2</name></expr>]</index></name><operator>.</operator><name>val</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>vis</name><index>[<expr><call><name>get</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>p1</name></expr>]</index></name><operator>.</operator><name>xu</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			}</block></then></if>
			<expr_stmt><expr><name><name>b</name><index>[<expr><operator>++</operator><name>t1</name></expr>]</index></name><operator>=</operator><name><name>d</name><index>[<expr><name>p1</name></expr>]</index></name><operator>.</operator><name>xu</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>vis</name><index>[<expr><call><name>get</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>p1</name></expr>]</index></name><operator>.</operator><name>xu</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>d</name><index>[<expr><name>p1</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p1</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<if>if<condition>(<expr><operator>(</operator><name><name>vis</name><index>[<expr><call><name>get</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>p2</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name><name>vis</name><index>[<expr><call><name>get</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>p2</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="number">1</literal><operator>)</operator><operator>||</operator><operator>(</operator><call><name>get</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>p2</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>get</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>p2</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then><block>{
				<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>
				<continue>continue;</continue>
			}</block></then></if>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>c</name><index>[<expr><name>p2</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>vis</name><index>[<expr><call><name>get</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>p2</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>fa</name><index>[<expr><call><name>get</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>p2</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><call><name>get</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>p2</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name><name>fa</name><index>[<expr><call><name>get</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>p2</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><call><name>get</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>p2</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><name><name>c</name><index>[<expr><operator>++</operator><name>t2</name></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>p2</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<return>return ;</return>
}</block></function>
<function><name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr><operator>,</operator><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>xu</name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>psh</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	}</block></for></block></for>
	<expr_stmt><expr><call><name>prim</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>t1</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>t1</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>t2</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>long</name> <name>long</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>t2</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
