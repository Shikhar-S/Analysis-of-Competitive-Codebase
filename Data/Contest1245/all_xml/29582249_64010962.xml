<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29582249_64010962.cpp"><comment type="line">//</comment>
<comment type="line">//  main.cpp</comment>
<comment type="line">//  Codeforces Round #597 (Div. 2)</comment>
<comment type="line">//</comment>
<comment type="line">//  Created by Augustinas Jucas on 01/11/2019.</comment>
<comment type="line">//  Copyright Â© 2019 Augustinas Jucas. All rights reserved.</comment>
<comment type="line">//</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>fib</name><index>[<expr><literal type="number">100001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>fibo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>kek</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>kek</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>fib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>fib</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
    }</block></for>
    
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fibo</name><argument_list>(<argument><expr><literal type="number">100001</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ats</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>kas</name> <init>= <expr><literal type="char">'-'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>kek</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>kas</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>kek</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <if>if<condition>(<expr><name>kas</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>ats</name> <operator>=</operator> <operator>(</operator><name>ats</name> <operator>*</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>kek</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator></expr>;</expr_stmt>
                <comment type="line">//cout &lt;&lt; "Baigesi " &lt;&lt; kas &lt;&lt; "intervalas, ilgis = " &lt;&lt; kek;</comment>
                <comment type="line">//cout &lt;&lt; endl;</comment>
                <expr_stmt><expr><name>kas</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>kek</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>kas</name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>kek</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>}</block></then>
            <elseif>else <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>kas</name> <operator>=</operator> <literal type="char">'u'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>kek</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>}</block></then></if></elseif>
            <else>else <block type="pseudo"><continue>continue;</continue></block></else></if>
        }</block></else></if>
    }</block></for>
    <if>if<condition>(<expr><name>kas</name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>ats</name> <operator>=</operator> <operator>(</operator><name>ats</name> <operator>*</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>kek</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator></expr>;</expr_stmt>
<comment type="line">//        cout &lt;&lt; "Baigesi " &lt;&lt; kas &lt;&lt; "intervalas, ilgis = " &lt;&lt; kek;</comment>
  <comment type="line">//      cout &lt;&lt; endl;</comment>
        <expr_stmt><expr><name>kas</name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>kek</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ats</name></expr> ;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
