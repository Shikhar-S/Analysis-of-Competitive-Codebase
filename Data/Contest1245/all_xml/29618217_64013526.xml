<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618217_64013526.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vii</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1000006</literal></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>x</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>k</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vi</name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vii</name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>p</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>parent</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><operator>(</operator><ternary><condition><expr><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>?</condition><then> <expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr> </then><else>: <expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>parent</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  <using>using <name>lii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
  <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>lii</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>lii</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>lii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>myq</name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
      <decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>myq</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name>cost</name></expr></argument>, <argument><expr><call><name>ii</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name><name>myq</name><operator>.</operator><name>emplace</name></name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>ii</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>ncc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>ncc</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>lii</name></type> <name>con</name> <init>= <expr><call><name><name>myq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>myq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>parent</name><argument_list>(<argument><expr><name><name>con</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>parent</name><argument_list>(<argument><expr><name><name>con</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
    <expr_stmt><expr><name><name>p</name><index>[<expr><name><name>p</name><index>[<expr><name><name>con</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name><name>con</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>con</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>con</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name> <operator>==</operator> <name>n</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>con</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>con</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>ncc</name><operator>++</operator></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <range>: <expr><name>v</name></expr></range></decl></init>)</control> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <call><name><name>e</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>p</name> <range>: <expr><name>e</name></expr></range></decl></init>)</control> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></for>
  
}</block></function>
</unit>
