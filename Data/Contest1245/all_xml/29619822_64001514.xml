<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619822_64001514.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repeat</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register LL ______________ = (n); ______________ &gt; 0; --______________)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register LL i = (l), ________r = (r); i &lt;= ________r; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iloop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register LL i = (l), ________r = (r); i &lt; ________r; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rloop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>r</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register LL i = (r), ________l = (l); i &gt;= ________l; --i)</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAI_WEI_HAN</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"LOG.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>CAI_WEI_HAN</name></cpp:ifdef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"test.in"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cout</name></cpp:macro> <cpp:value>cerr</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><specifier>constexpr</specifier> <type><name>char</name></type> <name>endl</name> <init>= <expr><literal type="char">'\n'</literal></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>z</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>z</name></expr>;</expr_stmt>
	
	<macro><name>repeat</name><argument_list>(<argument>z</argument>)</argument_list></macro> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
		
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
		<macro><name>repeat</name><argument_list>(<argument>n</argument>)</argument_list></macro> <block>{
			<decl_stmt><decl><type><name>char</name></type> <name>x</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt>
			
			<if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>b</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
			}</block></then>
			
			<elseif>else <if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
			}</block></then></if></elseif>
			
			<elseif>else <if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>a</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
			}</block></then></if></elseif>
			
			<else>else
				<block type="pseudo"><expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="char">'?'</literal></expr>;</expr_stmt></block></else></if>
		}</block>
		
		<if>if<condition>(<expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>n</name><operator>-</operator><name>a</name><operator>-</operator><name>b</name><operator>-</operator><name>c</name><operator>)</operator> <operator>&gt;=</operator> <name>n</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes\n"</literal></expr>;</expr_stmt>
			<for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>x</name> <operator>:</operator> <name>s</name></expr></init>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><then> <block>{
				<if>if<condition>(<expr><name>a</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then>
				<elseif>else <if>if<condition>(<expr><name>b</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
				}</block></then></if></elseif>
				<else>else <block>{
					<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if></block></for>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>s</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></then>
		
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
	}</block>
}</block></function></unit>
