<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29581196_64002381.cpp"><comment type="block">/* winners never quit and quitters never win.
      #swap                                 */</comment>
      
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include> 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"-O3"</cpp:literal><name>)</name></cpp:pragma>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1000000000000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>rk</name> <init>= <expr><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;
<argument><expr><name>ll</name></expr></argument>,
<argument><expr><name>null_type</name></expr></argument>,
<argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>,
<argument><expr><name>rb_tree_tag</name></expr></argument>,
<argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type>
<name>ordered_set</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vc</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sec</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pq</name></cpp:macro> <cpp:value>priority_queue</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lb</name></cpp:macro> <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ub</name></cpp:macro> <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pls</name></cpp:macro> <cpp:value>pair&lt;ll,string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psl</name></cpp:macro> <cpp:value>pair&lt;string,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>plc</name></cpp:macro> <cpp:value>pair&lt;ll,char&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pcl</name></cpp:macro> <cpp:value>pair&lt;char,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pss</name></cpp:macro> <cpp:value>pair&lt;string,string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tol</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>transform(s.begin(),s.end(),s.begin(),::tolower);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tou</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>transform(s.begin(),s.end(),s.begin(),::toupper);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>error</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator&lt;string&gt; _it(_ss); err(_it, args); }</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>err</name><parameter_list>(<parameter><decl><type><name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>it</name></decl></parameter>)</parameter_list> <block>{}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>err</name><parameter_list>(<parameter><decl><type><name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>it</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><operator>++</operator><name>it</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>begin</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (__typeof(end) i = (begin) - ((begin) &gt; (end)); i != (end) - ((begin) &gt; (end)); i += 1 - 2 * ((begin) &gt; (end)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>T</name></cpp:macro> <cpp:value>ll t=0;cin&gt;&gt;t;for(ll test=0;test&lt;t;test++)</cpp:value></cpp:define>

 
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//isprime();</comment>
	<comment type="line">//coeff();</comment>
	<comment type="block">/*freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);*/</comment>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>m</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>m</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s1</name><init>=<expr><literal type="string">"RPS"</literal></expr></init></decl>;</decl_stmt>
    <macro><name>T</name></macro>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>rep</name><argument_list>(<argument>a</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>b</name><init>=<expr><name><name>m</name><index>[<expr><name><name>s</name><index>[<expr><name>a</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>req</name><init>=<expr><operator>(</operator><name>b</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
            <comment type="line">//cout&lt;&lt;b&lt;&lt;" "&lt;&lt;req&lt;&lt;endl;</comment>
            <if>if<condition>(<expr><name><name>x</name><index>[<expr><name>req</name></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>x</name><index>[<expr><name>req</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name><name>s1</name><index>[<expr><name>req</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></then></if>
        }</block>

        <if>if<condition>(<expr><name>cnt</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <macro><name>rep</name><argument_list>(<argument>a</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
            <block>{
                <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then>
                <block>{
                    <if>if<condition>(<expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"R"</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then>
                    <elseif>else <if>if<condition>(<expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"P"</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then></if></elseif>
                    <else>else
                    <block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"S"</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else
                    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
            }</block>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
