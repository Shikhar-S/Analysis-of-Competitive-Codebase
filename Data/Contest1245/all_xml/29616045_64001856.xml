<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616045_64001856.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>  <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>p</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>string</name></type> <name>S</name></decl>;</decl_stmt>   <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>S</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>T</name></decl>;</decl_stmt>   <expr_stmt><expr><call><name><name>T</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>    <block>{
            <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>p</name></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>p</name></expr><operator>,</operator> <expr><operator>++</operator><name>ans</name></expr><operator>,</operator> <expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>s</name></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>s</name></expr><operator>,</operator> <expr><operator>++</operator><name>ans</name></expr><operator>,</operator> <expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>r</name></expr>)</condition><then>   <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>r</name></expr><operator>,</operator> <expr><operator>++</operator><name>ans</name></expr><operator>,</operator> <expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt></block></then></if>
        }</block></for>

        <if>if <condition>(<expr><name>ans</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>    <block type="pseudo"><if>if <condition>(<expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><then>    <block>{
                <if>if <condition>(<expr><name>p</name></expr>)</condition><then>  <block>{   <expr_stmt><expr><operator>--</operator><name>p</name></expr>;</expr_stmt>    <expr_stmt><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> <continue>continue;</continue>   }</block></then></if>
                <if>if <condition>(<expr><name>s</name></expr>)</condition><then>  <block>{   <expr_stmt><expr><operator>--</operator><name>s</name></expr>;</expr_stmt>    <expr_stmt><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> <continue>continue;</continue>   }</block></then></if>
                <if>if <condition>(<expr><name>r</name></expr>)</condition><then>  <block>{   <expr_stmt><expr><operator>--</operator><name>r</name></expr>;</expr_stmt>    <expr_stmt><expr><name><name>T</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> <continue>continue;</continue>   }</block></then></if>
            }</block></then></if></block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>T</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
}</block></function></unit>
