<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29608815_64021159.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e3</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>arr1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>arr2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>coor</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>C</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>K</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dsu</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>sz</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>cool</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name><name>dsu</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <name>v</name></expr>)</condition><then> <block>{
    <return>return <expr><name>v</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><name><name>dsu</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>get</name><argument_list>(<argument><expr><name><name>dsu</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>get</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>get</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><then> <block>{
    <return>return;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name><name>sz</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&lt;</operator> <name><name>sz</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name><name>sz</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+=</operator> <name><name>sz</name><index>[<expr><name>a</name></expr>]</index></name> <operator>==</operator> <name><name>sz</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cool</name><index>[<expr><name>a</name></expr>]</index></name> <operator>|=</operator> <name><name>cool</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>dsu</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>iota</name><argument_list>(<argument><expr><name>dsu</name></expr></argument>, <argument><expr><name>dsu</name> <operator>+</operator> <name>N</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><name>sz</name></expr></argument>, <argument><expr><name>sz</name> <operator>+</operator> <name>N</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>coor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;&gt;</operator> <name><name>coor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
  }</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>arr1</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>K</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name><name>arr2</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>coor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>coor</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>coor</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <name><name>coor</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>K</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></for>
  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>arr1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>arr1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>sort</name><argument_list>(<argument>arr2.begin()</argument>, <argument>arr2.end()</argument>, <argument>greater&lt;tuple&lt;long long</argument>, <argument>int</argument>, <argument>int&gt;&gt;()</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>RES</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>res1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>res2</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>!</operator><call><name><name>arr1</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><call><name><name>arr2</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>a</name> <init>= <expr><name>LLONG_MAX</name></expr></init></decl>, <decl><type ref="prev"/><name>c</name> <init>= <expr><name>LLONG_MAX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>arr1</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>tie</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>arr1</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><operator>!</operator><call><name><name>arr2</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>tie</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name><name>arr2</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>c</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name><name>arr1</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><name><name>cool</name><index>[<expr><call><name>get</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then> <block>{
        <continue>continue;</continue>
      }</block></then></if>
      <expr_stmt><expr><name>RES</name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>cool</name><index>[<expr><call><name>get</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>res1</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>
    <expr_stmt><expr><call><name><name>arr2</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>get</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>get</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <continue>continue;</continue>
    }</block></then></if>
    <if>if <condition>(<expr><name><name>cool</name><index>[<expr><call><name>get</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>cool</name><index>[<expr><call><name>get</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then> <block>{
      <continue>continue;</continue>
    }</block></then></if>
    <expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>RES</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>res2</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>RES</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <call><name><name>res1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>res1</name></expr></range></decl></init>)</control> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <call><name><name>res2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>res2</name></expr></range></decl></init>)</control> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>first</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>second</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
  }</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
