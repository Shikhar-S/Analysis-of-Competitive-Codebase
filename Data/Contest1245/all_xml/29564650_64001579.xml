<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29564650_64001579.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<namespace>namespace <name>RNG</name><block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl>;</decl_stmt>
    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>seed</name><operator>=</operator><name>p</name></expr>;</expr_stmt>}</block></function>
    <function><type><name>unsigned</name> <name>int</name></type> <name>rnd</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>res</name><init>=<expr><operator>(</operator><name>seed</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>seed</name><operator>^</operator><literal type="number">0x23414326</literal><operator>)</operator><operator>-</operator><operator>(</operator><name>seed</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>-</operator><operator>(</operator><name>seed</name><operator>^</operator><literal type="number">0x54378320</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>seed</name><operator>=</operator><operator>(</operator><operator>(</operator><name>seed</name><operator>+</operator><name>res</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>^</operator><name>res</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    }</block></function>
}</block></namespace>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>s</name></decl>,<decl><type ref="prev"/><name>wins</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>str2</name><index>[<expr><literal type="number">105</literal></expr>]</index></name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>r</name><operator>&gt;&gt;</operator><name>p</name><operator>&gt;&gt;</operator><name>s</name><operator>&gt;&gt;</operator><name>str</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><name>p</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>p</name></expr><operator>,</operator><expr><operator>++</operator><name>wins</name></expr><operator>,</operator><expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if>
			<comment type="line">//else if(r)--r,str2.push_back('R');</comment>
			<comment type="line">//else --s,str2.push_back('S');</comment>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><name>r</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>r</name></expr><operator>,</operator><expr><operator>++</operator><name>wins</name></expr><operator>,</operator><expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt></block></then></if>
			<comment type="line">//else if(s)--s,str2.push_back('S');</comment>
			<comment type="line">//else --p,str2.push_back('P');</comment>
		}</block></then></if>
		<if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><name>s</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>s</name></expr><operator>,</operator><expr><operator>++</operator><name>wins</name></expr><operator>,</operator><expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt></block></then></if>
			<comment type="line">//else if(p)--p,str2.push_back('P');</comment>
			<comment type="line">//else --r,str2.push_back('R');</comment>
		}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><name>wins</name><operator>*</operator><literal type="number">2</literal><operator>&gt;=</operator><name>n</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block>{
			<if>if<condition>(<expr><operator>!</operator><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><name>r</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>r</name></expr><operator>,</operator><expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt></block></then>
				<elseif>else <if>if<condition>(<expr><name>s</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>s</name></expr><operator>,</operator><expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt></block></then></if></elseif>
				<else>else <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>p</name></expr><operator>,</operator><expr><name><name>str2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt></block></else></if>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>str2</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function></unit>
