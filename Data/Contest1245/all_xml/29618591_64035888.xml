<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618591_64035888.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name><name>ara</name><index>[<expr><name>M</name></expr>]</index><index>[<expr><name>M</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>dp</name><index>[<expr><name>M</name></expr>]</index><index>[<expr><name>M</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>pii</name></type> <name>getNxt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><operator>!</operator><name>i</name> <operator>||</operator> <operator>!</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</return></block></then></if>

    <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><block>{<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>j</name></expr>}</block></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><block>{<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>j</name></expr>}</block></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><block>{<expr><name>i</name></expr>, <expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr>;</return></block></then></if>
    <return>return <expr><block>{<expr><name>i</name></expr>, <expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>;</return>
}</block></function>

<function><type><name>double</name></type> <name>cnt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>double</name> <modifier>&amp;</modifier></type><name>res</name> <init>= <expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>flag</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>res</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">.5</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>res</name></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>int</name></type> <name>nx</name> <init>= <expr><name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>ny</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cutu</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>pii</name></type> <name>p</name> <init>= <expr><call><name>getNxt</name><argument_list>(<argument><expr><name>nx</name></expr></argument>, <argument><expr><name>ny</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if<condition>(<expr><operator>!</operator><name><name>p</name><operator>.</operator><name>first</name></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cutu</name><operator>--</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>cnt</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>

        <expr_stmt><expr><name>nx</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>first</name></name></expr><operator>,</operator> <expr><name>ny</name> <operator>=</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    }</block></for>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>sum</name><operator>/</operator><name>cutu</name></expr>;</expr_stmt>

    <if>if<condition>(<expr><operator>!</operator><name>flag</name> <operator>&amp;&amp;</operator> <name><name>ara</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><call><name>cnt</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><name><name>ara</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ara</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>M</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    }</block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.10lf\n"</literal></expr></argument>, <argument><expr><call><name>cnt</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
