<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29598011_64029012.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>
<typedef>typedef <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>cp</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">2e5</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>db</name></type> <name>pi</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>db</name></type> <name>eps</name><init>=<expr><literal type="number">1e-15</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;#x&lt;&lt;" is "&lt;&lt;x&lt;&lt;endl;</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><literal type="number">2009</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dis</name><index>[<expr><literal type="number">2009</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>fa</name><index>[<expr><literal type="number">2009</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>k</name><index>[<expr><literal type="number">2009</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><literal type="number">2009</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">2009</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>E</name><block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name>v</name></decl>,<decl><type ref="prev"/><name>u</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
	<constructor><name>E</name><parameter_list>()</parameter_list><block>{
		<expr_stmt><expr><name>v</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>E</name></type> <name><name>e</name><index>[<expr><literal type="number">2009</literal><operator>*</operator><literal type="number">2009</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ord</name><index>[<expr><literal type="number">2009</literal><operator>*</operator><literal type="number">2009</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>bcj</name><index>[<expr><literal type="number">2009</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><name>u</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><name>v</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><name>c</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>op</name><operator>++</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>bcj</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name>int</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>e</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>c</name><operator>!=</operator><name><name>e</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>c</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>e</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>c</name><operator>&lt;</operator><name><name>e</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</return></block></then>
	<elseif>else <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>v</name><operator>!=</operator><name><name>e</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>v</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>e</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>v</name><operator>&lt;</operator><name><name>e</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>v</name></expr>;</return></block></then></if></elseif></if>
	<return>return <expr><name><name>e</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>u</name><operator>&lt;</operator><name><name>e</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>u</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>fd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>bcj</name><index>[<expr><name>h</name></expr>]</index></name><operator>==</operator><name>h</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>h</name></expr>;</return></block></then></if>
	<return>return <expr><name><name>bcj</name><index>[<expr><name>h</name></expr>]</index></name><operator>=</operator><call><name>fd</name><argument_list>(<argument><expr><name><name>bcj</name><index>[<expr><name>h</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>op</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>tmp</name><init>=<expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>e</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><name>u</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>e</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><name>v</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>e</name><index>[<expr><name>op</name></expr>]</index></name><operator>.</operator><name>c</name><operator>=</operator><name>tmp</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>op</name><operator>++</operator></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>op</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>ord</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>ord</name></expr></argument>,<argument><expr><name>ord</name><operator>+</operator><name>op</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>cst</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>cp</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type><name>sp</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>cp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>sp</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>op</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><name><name>ord</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><call><name>fd</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>q</name><init>=<expr><call><name>fd</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>p</name><operator>==</operator><name>q</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name><name>bcj</name><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator><name>q</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>e</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>u</name><operator>&amp;&amp;</operator><name><name>e</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>v</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>sp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>e</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>u</name></expr>,<expr><name><name>e</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>v</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then><elseif>else <if>if<condition>(<expr><name><name>e</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>u</name></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>cp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif><else>else<block>{
			<expr_stmt><expr><call><name><name>cp</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>cst</name><operator>+=</operator><name><name>e</name><index>[<expr><name>l</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>cst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>,<argument><expr><call><name><name>cp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><range>:<expr><name>cp</name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>,<argument><expr><call><name><name>sp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name>sp</name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument>,<argument><expr><name><name>x</name><operator>.</operator><name>first</name></name></expr></argument>,<argument><expr><name><name>x</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
