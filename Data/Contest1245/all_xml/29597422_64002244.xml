<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29597422_64002244.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>,<decl><type ref="prev"/><name>res</name></decl>;</decl_stmt><comment type="block">/*
int gcd(int x,int y){
	if(!y) return x;return gcd(y,x%y);
}*/</comment>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><literal type="number">1005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">1005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name><operator>&gt;&gt;</operator><name>z</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'0'</literal></expr>;</expr_stmt>
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr><operator>,</operator><expr><operator>--</operator><name>y</name></expr><operator>,</operator><expr><operator>++</operator><name>res</name></expr>;</expr_stmt></block></then></if>
		    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>z</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr><operator>,</operator> <expr><operator>--</operator><name>z</name></expr><operator>,</operator><expr><operator>++</operator><name>res</name></expr>;</expr_stmt></block></then></if>
		    <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr><operator>,</operator><expr><operator>--</operator><name>x</name></expr><operator>,</operator><expr><operator>++</operator><name>res</name></expr>;</expr_stmt></block></then></if>
		}</block>
		<if>if<condition>(<expr><name>res</name><operator>&lt;</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else<block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
				<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'0'</literal></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr><operator>,</operator><expr><operator>--</operator><name>x</name></expr>;</expr_stmt></block></then>
					<elseif>else <if>if<condition>(<expr><name>y</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr><operator>,</operator><expr><operator>--</operator><name>y</name></expr>;</expr_stmt></block></then></if></elseif>
					<elseif>else <if>if<condition>(<expr><name>z</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr><operator>,</operator><expr><operator>--</operator><name>z</name></expr>;</expr_stmt></block></then></if></elseif></if>
				}</block></then></if> 
			}</block>
			<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
    
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
