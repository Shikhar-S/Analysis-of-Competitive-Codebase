<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619004_64030625.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>dp</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int64_t</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>a_full</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>b_full</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>pos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>a_full</name></expr>]</index><index>[<expr><name>b_full</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>a_full</name></expr>]</index><index>[<expr><name>b_full</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>a_full</name></expr>]</index><index>[<expr><name>b_full</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>auto</name> <operator>&amp;</operator><name>ans</name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>a_full</name></expr>]</index><index>[<expr><name>b_full</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<block>{ <comment type="line">// 00</comment>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a_full</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pos</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>b_full</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pos</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<block>{ <comment type="line">// 01</comment>
		<if>if <condition>(<expr><operator>!</operator><name>b_full</name> <operator>||</operator> <operator>(</operator><name>b</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pos</name><operator>)</operator><operator>)</operator></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a_full</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>a</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pos</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><name>b_full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block>
	<block>{ <comment type="line">// 10</comment>
		<if>if <condition>(<expr><operator>!</operator><name>a_full</name> <operator>||</operator> <operator>(</operator><name>a</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pos</name><operator>)</operator><operator>)</operator></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>a_full</name></expr></argument>, <argument><expr><name>b_full</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pos</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>l</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><operator>--</operator><name>l</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>rr</name> <init>= <expr><call><name>dfs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>rl</name> <init>= <expr><call><name>dfs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>ll</name> <init>= <expr><call><name>dfs</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>rr</name> <operator>-</operator> <name>rl</name> <operator>-</operator> <name>rl</name> <operator>+</operator> <name>ll</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>rr</name> <init>= <expr><call><name>dfs</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>rr</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
}</block></function>
</unit>
