<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613532_64028123.cpp"><comment type="line">//#pragma GCC optimize(3)</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>500005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>(1e-11)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lyh</name></cpp:macro> <cpp:value>19260817</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>njj</name></cpp:macro> <cpp:value>19491001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pp</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>LL</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>k</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>P</name></type> <name><name>poi</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>answay</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ansbu</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cont1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cont2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>tmpp</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>cmp</name> <block>{<public type="default"><comment type="line">//å®ä¹ç»ææ¥éè½½è¿ç®ç¬¦</comment>
	<function type="operator"><type><name>bool</name></type> <name>operator <name>()</name></name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><name><name>c</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&gt;</operator> <name><name>c</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</return><comment type="line">//æå°å¼ä¼å</comment>
	}</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>gettop</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>minn</name> <init>= <expr><name>LLONG_MAX</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>minn</name> <operator>&gt;=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ind</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>minn</name> <operator>=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if>
	}</block></for>
	<return>return <expr><name>ind</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>cost</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>dis</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>poi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>poi</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>poi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <name><name>poi</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>dis</name> <operator>*</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>poi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>poi</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>count</name><operator>&lt;</operator><name>n</name></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>now</name> <init>= <expr><call><name>gettop</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name><name>c</name><index>[<expr><name>now</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>tmpind</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <call><name>cost</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
					<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>cost</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>tmpind</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then></if>
		}</block></for>
		<if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>flag</name><operator>)</operator><operator>&amp;&amp;</operator><name><name>tmpp</name><index>[<expr><name>now</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>ansbu</name><index>[<expr><name>cont1</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name><name>answay</name><index>[<expr><name>cont2</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>answay</name><index>[<expr><name>cont2</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tmpp</name><index>[<expr><name>now</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cont2</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<expr_stmt><expr><name><name>answay</name><index>[<expr><name>cont2</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>answay</name><index>[<expr><name>cont2</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmpind</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>cont2</name><operator>++</operator></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <call><name>cost</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>tmpp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>now</name></expr>;</expr_stmt></block></then></if>
				<expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>cost</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<expr_stmt><expr><name><name>vis</name><index>[<expr><name>now</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>cont1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cont1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>, <argument><expr><name><name>ansbu</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>cont2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cont2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument>, <argument><expr><name><name>answay</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>answay</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
