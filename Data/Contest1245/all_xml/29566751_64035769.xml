<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29566751_64035769.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lp</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>start</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll var = start; var &lt;end ; ++var)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rlp</name><parameter_list>(<parameter><type><name>var</name></type></parameter>,<parameter><type><name>start</name></type></parameter>,<parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll var = start; var&gt;=end ; var--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vld</name></cpp:macro> <cpp:value>vector&lt;ld&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pld</name></cpp:macro> <cpp:value>pair&lt;ld,ld&gt;</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpll</name></cpp:macro> <cpp:value>vector&lt;pll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpld</name></cpp:macro> <cpp:value>vector&lt;pld&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>X.begin(),X.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((ll)((x).size()))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>,<decl><type ref="prev"/><name>inf</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>r1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">31</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>f1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>f2</name></decl></parameter>)</parameter_list>
<block>{
	<comment type="line">// 1 &gt; l</comment>
	<comment type="line">// 2 &lt; r</comment>
	<comment type="line">// 3 both</comment>
	<if>if<condition>(<expr><name>i</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>bl</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>br</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>br1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>&amp;</operator><name>r</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>br</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>&amp;</operator><name>l</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>bl</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>&amp;</operator><name>r1</name><operator>)</operator><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>br1</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if>
		<if>if<condition>(<expr><name>f2</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><name>f1</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><name>br</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>bl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<elseif>else <if>if<condition>(<expr><name>br</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>bl</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal><operator>*</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name>br</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>bl</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal><operator>*</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if></elseif></if>					
			}</block></then>
			<elseif>else <if>if<condition>(<expr><name>f1</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
			<block>{	
				<if>if<condition>(<expr><name>br</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal><operator>*</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal><operator>*</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				}</block></else></if>
			}</block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name>f1</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><name>bl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal><operator>*</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then></if></elseif>
			<else>else
			<block>{
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><literal type="number">3</literal><operator>*</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then>
		<else>else
		<block>{
			<if>if<condition>(<expr><name>br1</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><name>f1</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<if>if<condition>(<expr><name>br</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>bl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<elseif>else <if>if<condition>(<expr><name>br</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>bl</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif>
					<elseif>else <if>if<condition>(<expr><name>br</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>bl</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif></if>					
				}</block></then>
				<elseif>else <if>if<condition>(<expr><name>f1</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
				<block>{	
					<if>if<condition>(<expr><name>br</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else>else
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></else></if>
				}</block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name>f1</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
				<block>{
					<if>if<condition>(<expr><name>bl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else>else
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if></elseif>
				<else>else
				<block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><literal type="number">2</literal><operator>*</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then>
			<else>else
			<block>{
				<if>if<condition>(<expr><name>f1</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
				<block>{
					<if>if<condition>(<expr><name>br</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>bl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<elseif>else <if>if<condition>(<expr><name>br</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>bl</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif>
					<elseif>else <if>if<condition>(<expr><name>br</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>bl</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then></if></elseif></if>					
				}</block></then>
				<elseif>else <if>if<condition>(<expr><name>f1</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
				<block>{	
					<if>if<condition>(<expr><name>br</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else>else
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					}</block></else></if>
				}</block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name>f1</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
				<block>{
					<if>if<condition>(<expr><name>bl</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></then>
					<else>else
					<block>{
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if></elseif>
				<else>else
				<block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>,<argument><expr><name>f2</name></expr></argument>	)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></else></if>			
		}</block></else></if>

	}</block></then></if>
	<return>return <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>f1</name></expr>]</index><index>[<expr><name>f2</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>r1</name><operator>=</operator><name>r</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><call><name>solve</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>l</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r1</name><operator>=</operator><name>l</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>y</name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>x</name><operator>-</operator><name>y</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></while>	    
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
