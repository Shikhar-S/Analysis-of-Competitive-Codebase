<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617253_64028652.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">1005</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">1005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><literal type="number">45</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>m</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>lim</name> <init>= <expr><literal type="number">40</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lim</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>lim</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>%</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>n</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>lim</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>lim</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>m</name> <operator>%</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>m</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>f</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>lim</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>k0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k0</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>k0</name> <operator>++</operator></expr></incr>)</control> <block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>k1</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k1</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>k1</name> <operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if<condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>k0</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
					<if>if<condition>(<expr><name>k1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name> <operator>+=</operator> <literal type="number">3ll</literal> <operator>*</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
							<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">2ll</literal> <operator>*</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
						}</block></then> <else>else <block>{
							<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name> <operator>+=</operator> <literal type="number">2ll</literal> <operator>*</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
						}</block></else></if>
					}</block></else></if>
				}</block></then> <else>else <block>{
					<if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{ <comment type="line">//printf("*");</comment>
						<if>if<condition>(<expr><name>k1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
						}</block></then> <else>else <block>{
							<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
								<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
							}</block></then> <else>else <block>{
								<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name> <operator>+=</operator>  <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name> <operator>+=</operator>  <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
							}</block></else></if>
						}</block></else></if>
					}</block></then> <else>else <block>{
						<if>if<condition>(<expr><name>k1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
							<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name> <operator>+=</operator> <literal type="number">2ll</literal> <operator>*</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
						}</block></then> <else>else <block>{
							<if>if<condition>(<expr><name><name>b</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
								<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
								<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
							}</block></then> <else>else <block>{
								<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name> <operator>+=</operator>  <name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k0</name></expr>]</index><index>[<expr><name>k1</name></expr>]</index></name></expr>;</expr_stmt>
							}</block></else></if>
						}</block></else></if>
					}</block></else></if>
					
				}</block></else></if>
			}</block></then></if></block></for>
		}</block></for>
	}</block></for>
<comment type="block">/*	for(int i = 1; i &lt;= lim; i ++) printf("%d ", a[i]); printf("\n");
	for(int i = 1; i &lt;= lim; i ++) printf("%d ", b[i]); printf("\n");
	for(int i = 1; i &lt;= lim; i ++) printf("%d ", f[i][0][0]); printf("\n");
	for(int i = 1; i &lt;= lim; i ++) printf("%d ", f[i][0][1]); printf("\n");
	for(int i = 1; i &lt;= lim; i ++) printf("%d ", f[i][1][0]); printf("\n");
	for(int i = 1; i &lt;= lim; i ++) printf("%d ", f[i][1][1]); printf("\n");*/</comment>
	<return>return <expr><name><name>f</name><index>[<expr><name>lim</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><name>lim</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><name>lim</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><name>lim</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name> <operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<comment type="line">//	printf("%I64d", calc(4, 4));</comment>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>, <argument><expr><call><name>calc</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>calc</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>calc</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>	
	}</block></while>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
