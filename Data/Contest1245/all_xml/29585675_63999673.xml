<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29585675_63999673.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>upd</name><index>[<expr><literal type="number">1005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>solve</name> <parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>r</name></expr><operator>,</operator> <expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>p</name></expr><operator>,</operator> <expr><name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>upd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>--</operator></expr><operator>,</operator> <expr><name><name>upd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>--</operator></expr><operator>,</operator> <expr><name><name>upd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
        <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr><operator>,</operator> <expr><name><name>upd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif></if> 
    }</block></for>
    <if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>n</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>upd</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>upd</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then>
        <else>else <block>{
            <if>if <condition>(<expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></then>
            <elseif>else <if>if <condition>(<expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
            <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block></else></if>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
 
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function>
 </unit>
