<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29564280_64004105.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>SZ</name> <init>= <expr><literal type="number">26</literal></expr></init></decl>, <decl><type ref="prev"/><name>MAXN</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">20</literal></expr></init></decl>, <decl><type ref="prev"/><name>MAXM</name> <init>= <expr><literal type="number">1410</literal></expr></init></decl>, <decl><type ref="prev"/><name>mod</name> <init>= <expr><literal type="number">1e8</literal></expr></init></decl>, <decl><type ref="prev"/><name>inf</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">100</literal></expr></init></decl>, <decl><type ref="prev"/><name>L</name> <init>= <expr><literal type="number">19</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>, <decl><type ref="prev"/><name>Pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>q</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>gcd</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <while>while <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition> <block>{
        <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>a</name> <operator>+</operator> <name>b</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>solve</name> <parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>unordered_map</name> <argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>um</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>char</name></type> <name>si</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>um</name><index>[<expr><name>si</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>um</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>um</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>um</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>sum</name> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
        <return>return;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>um</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>um</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>um</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>char</name></type> <name>si</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control> <block>{
        <if>if <condition>(<expr><name>si</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>d</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>--</operator><name>d</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>e</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>--</operator><name>c</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then>
        <elseif>else <if>if <condition>(<expr><name>si</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name>e</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>--</operator><name>e</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <name>d</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>--</operator><name>c</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if></elseif>
        <else>else <block>{
            <if>if <condition>(<expr><name>f</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>--</operator><name>f</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>--</operator><name>c</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else <block>{
                <if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <name>d</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"P"</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
                }</block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function></unit>
