<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29575402_64027146.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>DIM</name> <init>= <expr><literal type="number">2007</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>k</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>muchie</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>cost</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>v</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>cmp</name>
<block>{<public type="default">
	<function type="operator"><type><name>bool</name></type> <name>operator<name>()</name></name> <parameter_list>(<parameter><decl><type><name>muchie</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>muchie</name></type> <name>b</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><name><name>a</name><operator>.</operator><name>cost</name></name> <operator>&gt;</operator> <name><name>b</name><operator>.</operator><name>cost</name></name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<function><type><name>bool</name></type> <name>cmp2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>c</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name><name>c</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name><name>priority_queue</name> <argument_list type="generic">&lt;<argument><expr><name>muchie</name></expr></argument>, <argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>muchie</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>cmp</name></expr></argument>&gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>bitset</name> <argument_list type="generic">&lt;<argument><expr><name>DIM</name></expr></argument>&gt;</argument_list></name></type> <name>vis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>dist</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>dist</name> <operator>*=</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>b</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
	
	<return>return <expr><name>dist</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>baga</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nod</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>nod</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="boolean">false</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>muchie</name><block>{<expr><name>nod</name></expr>, <expr><name>i</name></expr>, <macro><name>get</name><argument_list>(<argument>nod</argument>, <argument>i</argument>)</argument_list></macro>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&gt;&gt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name><name>t</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
	
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>t</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>t</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>baga</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><name><name>c</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>statie</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type>  <name>fir</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>statie</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while<condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>n</name></expr>)</condition>
	<block>{
		<while>while<condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>vis</name><index>[<expr><name><name>t</name><index>[<expr><name>pos</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt></block></while>
		
		<if>if<condition>(<expr><name>pos</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition><then>
			<block type="pseudo"><break>break;</break></block></then></if>
		
		<decl_stmt><decl><type><name>int</name></type> <name>nod1</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nod2</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cost</name></decl>;</decl_stmt>
		
		<if>if<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>nod1</name> <operator>=</operator> <call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>nod2</name> <operator>=</operator> <call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>y</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>cost</name> <operator>=</operator> <call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>cost</name></expr>;</expr_stmt>
			
			<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>nod2</name></expr>]</index></name> <operator>==</operator> <literal type="boolean">true</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			}</block></then></if>
		}</block></then></if>
		
		<if>if<condition>(<expr><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="boolean">true</literal> <operator>||</operator> <name>cost</name> <operator>&gt;</operator> <name><name>c</name><index>[<expr><name><name>t</name><index>[<expr><name>pos</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>nod</name> <init>= <expr><name><name>t</name><index>[<expr><name>pos</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
			
			<expr_stmt><expr><call><name>baga</name><argument_list>(<argument><expr><name>nod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name>nod</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>statie</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>nod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>pos</name><operator>++</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>cost</name></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name>baga</name><argument_list>(<argument><expr><name>nod2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><call><name><name>fir</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>nod1</name></expr>, <expr><name>nod2</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
	
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>statie</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>statie</name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
	
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>fir</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>fir</name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></for>
}</block></function></unit>
