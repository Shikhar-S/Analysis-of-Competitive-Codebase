<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29584494_64001779.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast,no-stack-protector,unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name> ;</typedef> 
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name> ;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument> , <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name> ;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>N</name> <init>= <expr><literal type="number">2e5</literal> <operator>+</operator> <literal type="number">30</literal></expr></init></decl> , <decl><type ref="prev"/><name>Mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>SQ</name> <init>= <expr><literal type="number">330</literal></expr></init></decl> ;</decl_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>q</name></decl>;</decl_stmt> 
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>q</name></expr> ;</expr_stmt>
    <while>while <condition>(<expr><name>q</name> <operator>--</operator></expr>)</condition> <block>{
    	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl> ;</decl_stmt> 
    	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt> 
    	<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl> , <decl><type ref="prev"/><name>b</name></decl> , <decl><type ref="prev"/><name>c</name></decl> ;</decl_stmt>
    	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr> ;</expr_stmt>
    	<decl_stmt><decl><type><name>string</name></type> <name>t</name></decl> ;</decl_stmt>
    	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr> ;</expr_stmt>
    	<decl_stmt><decl><type><name>string</name></type> <name>ans</name> <init>= <expr><literal type="string">""</literal></expr></init></decl> ;</decl_stmt>
    	<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
    		<if>if <condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block>{
    			<if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><then> <block>{
    				<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="string">"0"</literal></expr> ;</expr_stmt>
    				<continue>continue ;</continue>
				}</block></then></if>
    			<expr_stmt><expr><name>a</name> <operator>--</operator></expr> ;</expr_stmt>
    			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="string">"R"</literal></expr> ;</expr_stmt>
    			<expr_stmt><expr><name>cnt</name> <operator>++</operator></expr> ;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="string">"0"</literal></expr> ;</expr_stmt>
					<continue>continue ;</continue>
				}</block></then></if>
				<expr_stmt><expr><name>b</name> <operator>--</operator></expr> ;</expr_stmt>
				<expr_stmt><expr><name>cnt</name> <operator>++</operator></expr> ;</expr_stmt>
				<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="string">"P"</literal></expr> ;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="string">"0"</literal></expr> ;</expr_stmt>
					<continue>continue ;</continue>
				}</block></then></if>
				<expr_stmt><expr><name>c</name> <operator>--</operator></expr> ;</expr_stmt>
				<expr_stmt><expr><name>cnt</name> <operator>++</operator></expr> ;</expr_stmt>
				<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="string">"S"</literal></expr> ;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<if>if <condition>(<expr><name>cnt</name> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr> ;</expr_stmt></block></then>
		<else>else <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr> ;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=  <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><operator>!</operator><name>a</name></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
				<if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
				<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name>a</name> <operator>--</operator></expr> ;</expr_stmt>
			}</block></for>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=  <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
				<if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
				<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name>b</name> <operator>--</operator></expr> ;</expr_stmt>
			}</block></for>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=  <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
				<if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
				<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr> ;</expr_stmt>
				<expr_stmt><expr><name>c</name> <operator>--</operator></expr> ;</expr_stmt>
			}</block></for>
			
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr> ;</expr_stmt>
		}</block></else></if>
	}</block></while>
    
    <return>return <expr><operator>(</operator><literal type="number">0</literal><operator>)</operator></expr> ;</return>
}</block></function>
</unit>
