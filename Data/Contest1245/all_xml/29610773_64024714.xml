<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610773_64024714.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFL</name></cpp:macro> <cpp:value>0x3f3f3f3f3f3f3f3fLL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ cout&lt;&lt;x; exit(0); }</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=x; i&lt;n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>,<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=n; i--&gt;x;)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name><init>=<type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>pii</name><init>=<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>iii</name><init>=<type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<struct>struct <name>dset</name> <block>{<public type="default">
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>P</name></decl>, <decl><type ref="prev"/><name>R</name></decl>;</decl_stmt>
	<constructor><name>dset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>P</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call>, <call><name>R</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{ <expr_stmt><expr><call><name>iota</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>(<argument><expr><name>P</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></constructor><empty_stmt>;</empty_stmt>
	<function><type><name>int</name></type> <name>root</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><ternary><condition><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name>i</name></expr> ?</condition><then> <expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>i</name></expr></else></ternary></expr>;</return>
	}</block></function>
	<function><type><name>int</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
		<expr_stmt><expr><name>i</name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>j</name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>R</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>P</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<return>return <expr><name><name>R</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><name><name>R</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>
<struct>struct <name>edge</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>edge</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
		<return>return <expr><name>x</name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>x</name></name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>s</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>N</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>A</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>B</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>C</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>D</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name>E</name><argument_list>(<argument><expr><name>N</name><operator>*</operator><name>N</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>F</name><argument_list>(<argument><expr><name>N</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>G</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>dset</name></type> <name>ds</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <macro><name>rep</name><argument_list>(<argument>j</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <block>{
		<expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name><operator>*</operator><name>N</name><operator>+</operator><name>j</name></expr>]</index></name><operator>=</operator><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>, <expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>B</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><macro><name>ll</name><argument_list>(<argument>D[i]+D[j]</argument>)</argument_list></macro></expr>}</block></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><expr><name>auto</name><index>[<expr><name>i</name></expr><operator>,</operator><name>j</name><operator>,</operator><name>x</name>]</index><operator>:</operator><name>E</name></expr></init>)</control> <block type="pseudo"><if>if<condition>(<expr><call><name><name>ds</name><operator>.</operator><name>root</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>!=</operator><call><name><name>ds</name><operator>.</operator><name>root</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
		<expr_stmt><expr><call><name><name>ds</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>, <expr><name>x</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>G</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name><operator>+=</operator><name>x</name></expr>;</expr_stmt>
	}</block></then></if></block></for>

	<decl_stmt><decl><type><name>int</name></type> <name>min_first</name><init>=<expr><call><name>min_element</name><argument_list>(<argument><expr><call><name>begin</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>end</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><call><name>begin</name><argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>s</name><operator>+=</operator><name><name>C</name><index>[<expr><name>min_first</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>C</name><index>[<expr><name>min_first</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

	<expr_stmt><expr><name>M</name><operator>=</operator><name>N</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>rbegin</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>rend</name><argument_list>(<argument><expr><name>F</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>auto</name><operator>&amp;</operator><index>[<expr><name>u</name></expr><operator>,</operator><name>v</name><operator>,</operator><name>x</name>]</index><operator>:</operator><name>F</name></expr></init>)</control> <block>{
		<expr_stmt><expr><name>function</name><operator>&lt;</operator><call><name>int</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call><operator>&gt;</operator> <name>f</name><operator>=</operator><lambda><capture>[<argument><modifier>&amp;</modifier></argument>]</capture><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><range>:<expr><name><name>G</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><if>if<condition>(<expr><name>j</name><operator>!=</operator><name>i</name> <operator>&amp;&amp;</operator> <name>j</name><operator>!=</operator><name>p</name></expr>)</condition><then> <block>{
				<decl_stmt><decl><type><name>int</name></type> <name>l</name><init>=<expr><call><name>f</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if<condition>(<expr><name><name>C</name><index>[<expr><name>l</name></expr>]</index></name><operator>&lt;</operator><name><name>C</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name><operator>=</operator><name>l</name></expr>;</expr_stmt></block></then></if>
			}</block></then></if></block></for>
			<return>return <expr><name>k</name></expr>;</return>
		}</block></lambda></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>int</name><modifier>&amp;</modifier></type><name>j</name><range>:<expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><if>if<condition>(<expr><name>j</name><operator>==</operator><name>v</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>j</name><operator>=</operator><name>u</name></expr>;</expr_stmt></block></then></if></block></for>
		<for>for<control>(<init><decl><type><name>int</name><modifier>&amp;</modifier></type><name>j</name><range>:<expr><name><name>G</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><if>if<condition>(<expr><name>j</name><operator>==</operator><name>u</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>j</name><operator>=</operator><name>v</name></expr>;</expr_stmt></block></then></if></block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><call><name>f</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>b</name><init>=<expr><call><name>f</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>c</name><init>=<expr><ternary><condition><expr><name><name>C</name><index>[<expr><name>a</name></expr>]</index></name><operator>&gt;</operator><name><name>C</name><index>[<expr><name>b</name></expr>]</index></name></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><name>b</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>C</name><index>[<expr><name>c</name></expr>]</index></name><operator>&lt;=</operator><name>x</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>s</name><operator>+=</operator><name><name>C</name><index>[<expr><name>c</name></expr>]</index></name><operator>-</operator><name>x</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>C</name><index>[<expr><name>c</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>u</name><operator>=</operator><name>v</name><operator>=</operator><name>x</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>M</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<for>for<control>(<init><decl><type><name>int</name><modifier>&amp;</modifier></type><name>j</name><range>:<expr><name><name>G</name><index>[<expr><name>u</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><if>if<condition>(<expr><name>j</name><operator>==</operator><name>u</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>j</name><operator>=</operator><name>v</name></expr>;</expr_stmt></block></then></if></block></for>
			<for>for<control>(<init><decl><type><name>int</name><modifier>&amp;</modifier></type><name>j</name><range>:<expr><name><name>G</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block type="pseudo"><if>if<condition>(<expr><name>j</name><operator>==</operator><name>v</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>j</name><operator>=</operator><name>u</name></expr>;</expr_stmt></block></then></if></block></for>
		}</block></else></if>
	}</block></for>

	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>s</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>N</name><operator>-</operator><name>M</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>N</argument>)</argument_list></macro> <if>if<condition>(<expr><operator>!</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>M</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>auto</name><index>[<expr><name>u</name></expr><operator>,</operator><name>v</name><operator>,</operator><name>x</name>]</index><operator>:</operator><name>F</name></expr></init>)</control> <block type="pseudo"><if>if<condition>(<expr><operator>~</operator><name>u</name> <operator>&amp;&amp;</operator> <operator>~</operator><name>v</name> <operator>&amp;&amp;</operator> <operator>~</operator><name>x</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>u</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name>v</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
	}</block></then></if></block></for>
}</block></function></unit>
