<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617932_64002906.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>N</name></decl>, <decl><type ref="prev"/><name>M</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>R</name> <name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>R</name> <name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><ternary><condition><expr><name>b</name></expr>?</condition><then> <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>)</argument_list></call></expr></then><else>: <expr><name>a</name></expr></else></ternary></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<for>for<control>(<init><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>T</name><operator>--</operator></expr>;</condition> <incr/>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>M</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><ternary><condition><expr><call><name>gcd</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>?</condition><then> <expr><literal type="string">"Finite"</literal></expr></then><else>: <expr><literal type="string">"Infinite"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
