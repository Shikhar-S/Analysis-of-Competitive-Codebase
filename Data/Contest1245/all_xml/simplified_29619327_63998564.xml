include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file using namespace name using name init type name name using name init type name name name decl_stmt decl specifier type name name init expr literal type number literal type char literal type number literal type char literal type number literal type char literal type number namespace name block define directive macro name parameter_list parameter type name value define directive macro name parameter_list parameter type name value using template parameter_list parameter type name name parameter type name name name init type name name argument_list type generic argument expr name argument expr name name argument_list type generic argument expr name argument expr name using template parameter_list parameter type name name name init type name name argument_list type generic argument expr name argument expr name name argument_list type generic argument expr name using template parameter_list parameter type name name name init type name name argument_list type generic argument expr name argument expr name name argument_list type generic argument expr name function template parameter_list parameter type name name type name name parameter_list parameter decl type name modifier name parameter decl type specifier name modifier name block if condition expr name operator name then block expr_stmt expr name operator name return expr literal type boolean return expr literal type boolean function template parameter_list parameter type name name type name name parameter_list parameter decl type name modifier name parameter decl type specifier name modifier name block if condition expr name operator name then block expr_stmt expr name operator name return expr literal type boolean return expr literal type boolean using name init type name name argument_list type generic argument expr name using name init type name name argument_list type generic argument expr name argument expr name function type operator type name name name parameter_list parameter decl type name name name name block return expr call name argument_list argument expr name function type operator type name name name parameter_list parameter decl type name name name name block return expr call name argument_list argument expr name function template parameter_list parameter type name name type name name argument_list type generic argument expr name name parameter_list parameter decl type name name parameter decl type name name block return expr call name name argument_list type generic argument expr name argument_list argument expr name argument expr name function template parameter_list parameter type name modifier name type name name parameter_list parameter decl type name name parameter decl type name modifier name block return expr call name name argument_list type generic argument expr decltype argument_list argument expr call name argument_list argument expr name operator argument_list argument expr name argument expr call name argument_list argument expr name operator function type operator template parameter_list parameter type name name type name modifier name name parameter_list parameter decl type name modifier name parameter decl type specifier name name argument_list type generic argument expr name modifier name block for control init expr name operator name operator name block expr_stmt expr name operator name operator literal type char expr_stmt expr name operator name return expr name using namespace name class name block private type default decl_stmt decl type name modifier name decl_stmt decl type name modifier name public constructor name parameter_list parameter decl type name modifier name parameter decl type name modifier name member_init_list call name argument_list argument expr name call name argument_list argument expr name block function type name name parameter_list parameter decl type name name parameter decl type name name block if condition expr name operator literal type number then block type pseudo return expr name return expr call name argument_list argument expr name argument expr name operator name function type name name parameter_list block decl_stmt decl type name name expr_stmt expr name operator name if condition expr operator name then block type pseudo return while condition expr name operator block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name if condition expr call name argument_list argument expr name argument expr name operator literal type number then block expr_stmt expr name operator literal type string else block expr_stmt expr name operator literal type string function type name name parameter_list parameter decl type name name parameter decl type name modifier name name index block expr_stmt expr call name name operator name argument_list argument expr literal type null expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr name operator call name argument_list argument expr literal type number operator name ifdef directive name decl_stmt decl type name name init expr literal type string expr_stmt expr name operator name operator literal type string operator name decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name name operator name decl_stmt decl type name name init expr literal type number while condition expr name block expr_stmt expr name operator expr_stmt expr name operator literal type char operator name operator literal type string expr_stmt expr call name argument_list argument expr name argument expr name operator call name argument_list if condition expr name operator literal type number then block expr_stmt expr name operator literal type string operator name while condition expr name block type pseudo expr_stmt expr call name argument_list argument expr name argument expr name operator call name argument_list else directive expr_stmt expr call name argument_list argument expr name argument expr name operator call name argument_list endif directive return expr literal type number 
