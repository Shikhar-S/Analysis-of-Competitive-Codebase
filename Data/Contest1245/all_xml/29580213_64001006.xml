<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29580213_64001006.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>db</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; (x) &lt;&lt; '\n';</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>res</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>d</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <decl_stmt><decl><type><name>string</name></type> <name>add</name><init>=<expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>add</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>add</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>add</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>+</operator><name>add</name></expr>;</expr_stmt>
        }</block></for>
        <if>if<condition>(<expr><name>d</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <macro><name>db</name><argument_list>(<argument><literal type="string">"YES"</literal></argument>)</argument_list></macro>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block>{
                <if>if<condition>(<expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">' '</literal></expr>)</condition><then>
                <block>{
                    <if>if<condition>(<expr><name>a</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                    }</block></then>
                    <elseif>else <if>if<condition>(<expr><name>b</name></expr>)</condition><then>
                    <block>{
                        <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                    }</block></then></if></elseif>
                    <else>else
                    <block>{
                        <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then></if>
            }</block></for>
            <macro><name>db</name><argument_list>(<argument>res</argument>)</argument_list></macro>
        }</block></then>
        <else>else
            <block type="pseudo"><macro><name>db</name><argument_list>(<argument><literal type="string">"NO"</literal></argument>)</argument_list></macro></block></else></if>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
