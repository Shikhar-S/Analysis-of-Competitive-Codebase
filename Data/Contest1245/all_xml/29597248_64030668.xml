<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29597248_64030668.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition> <block>{ <if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if> <expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></while>
	<while>while<condition>(<expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block>{ <expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>ch</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr>;</expr_stmt> <expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></while>
	<return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>n</name><init>=<expr><literal type="number">10</literal></expr></init></decl>,<decl><type ref="prev"/><name>N</name><init>=<expr><literal type="number">107</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>id</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>to</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>db</name></type> <name><name>f</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>tot</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>tot</name></expr>;</expr_stmt></block></for></block></then>
		<else>else
			<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>n</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>tot</name></expr>;</expr_stmt></block></for></block></else></if>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>a</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>to</name><index>[<expr><name><name>id</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>id</name><index>[<expr><name>i</name><operator>-</operator><name>a</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
		}</block></for></block></for>
	<comment type="line">// f[2]=(f[2]+1)*5/6 + 1/6</comment>
	<comment type="line">// f[3]=(f[3]+1)*4/6 + 1/6 + (f[2]+1)/6</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1.0</literal><operator>)</operator><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><operator>(</operator><literal type="number">7.0</literal><operator>-</operator><name>i</name><operator>)</operator><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>/=</operator><operator>(</operator><literal type="number">1.0</literal><operator>-</operator><operator>(</operator><literal type="number">7.0</literal><operator>-</operator><name>i</name><operator>)</operator><operator>/</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">7</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>tot</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1.0</literal><operator>)</operator><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt></block></for>
		<if>if<condition>(<expr><operator>!</operator><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<decl_stmt><decl><type><name>db</name></type> <name>mi</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>t</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if<condition>(<expr><name>t</name><operator>-</operator><name>j</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>mi</name><operator>+=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>t</name><operator>-</operator><name>j</name></expr>]</index></name><operator>+</operator><literal type="number">1.0</literal><operator>)</operator><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt></block></then></if></block></for>
		<if>if<condition>(<expr><name>t</name><operator>&lt;=</operator><literal type="number">6</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>mi</name><operator>+=</operator><operator>(</operator><literal type="number">7.0</literal><operator>-</operator><name>t</name><operator>)</operator><operator>/</operator><literal type="number">6</literal></expr><operator>,</operator><expr><name>mi</name><operator>/=</operator><operator>(</operator><literal type="number">1.0</literal><operator>-</operator><operator>(</operator><literal type="number">7.0</literal><operator>-</operator><name>t</name><operator>)</operator><operator>/</operator><literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name>mi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.10f\n"</literal></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name>tot</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
