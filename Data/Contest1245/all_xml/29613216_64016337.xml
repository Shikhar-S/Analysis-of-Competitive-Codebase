<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613216_64016337.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<namespace>namespace <name>jumpmelon</name>
<block>{
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>H</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name><name>F</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	
	<function><type><name>void</name></type> <name>work</name><parameter_list>()</parameter_list>
	<block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>H</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block>{
				<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
					<block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name><name>F</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then> 
					<else>else
					<block>{
						<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>j</name></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
						<block>{
							<if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
								<block type="pseudo"><expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt></block></then>
							<else>else
							<block>{
								<if>if <condition>(<expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>y</name> <operator>==</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>y</name> <operator>==</operator> <name>N</name></expr></else></ternary></expr>)</condition><then>
									<block type="pseudo"><expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt></block></then>
								<elseif>else <if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
									<block type="pseudo"><expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
								<else>else
									<block type="pseudo"><expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
								<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>F</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>F</name><index>[<expr><name>x</name> <operator>-</operator> <name><name>H</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>
							}</block></else></if>
						}</block></for>
						<expr_stmt><expr><name><name>F</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">6</literal> <operator>/</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>t</name><operator>)</operator></expr>;</expr_stmt>
					}</block></else></if></block></for>
			}</block></then>
			<else>else
			<block>{
				<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>N</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
					<block type="pseudo"><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name><name>F</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then> 
					<else>else
					<block>{
						<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name>j</name></expr></init></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
						<decl_stmt><decl><type><name>double</name></type> <name>s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
						<for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control>
						<block>{
							<if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
								<block type="pseudo"><expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt></block></then>
							<else>else
							<block>{
								<if>if <condition>(<expr><ternary><condition><expr><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name>y</name> <operator>==</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>y</name> <operator>==</operator> <name>N</name></expr></else></ternary></expr>)</condition><then>
									<block type="pseudo"><expr_stmt><expr><name>x</name><operator>--</operator></expr>;</expr_stmt></block></then>
								<elseif>else <if>if <condition>(<expr><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
									<block type="pseudo"><expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
								<else>else
									<block type="pseudo"><expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
								<expr_stmt><expr><name>s</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>F</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>F</name><index>[<expr><name>x</name> <operator>-</operator> <name><name>H</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>
							}</block></else></if>
						}</block></for>
						<expr_stmt><expr><name><name>F</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">6</literal> <operator>/</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>t</name><operator>)</operator></expr>;</expr_stmt>
					}</block></else></if></block></for>
			}</block></else></if></block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.10lf\n"</literal></expr></argument>, <argument><expr><name><name>F</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
}</block></namespace>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>jumpmelon</name><operator>::</operator><name>work</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
