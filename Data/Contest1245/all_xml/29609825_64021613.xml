<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29609825_64021613.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name><name>a</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt><decl_stmt><decl><type><name>LL</name></type> <name><name>dp</name><index>[<expr><literal type="number">100</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>big1</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>sml1</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>big2</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>sml2</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><operator>~</operator><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>big1</name></expr>]</index><index>[<expr><name>sml1</name></expr>]</index><index>[<expr><name>big2</name></expr>]</index><index>[<expr><name>sml2</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>big1</name></expr>]</index><index>[<expr><name>sml1</name></expr>]</index><index>[<expr><name>big2</name></expr>]</index><index>[<expr><name>sml2</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>l1</name><init>=<expr><ternary><condition><expr><name>big1</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name></expr></else></ternary></expr></init></decl>,<decl><type ref="prev"/><name>r1</name><init>=<expr><ternary><condition><expr><name>sml1</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>l2</name><init>=<expr><ternary><condition><expr><name>big2</name></expr>?</condition><then><expr><literal type="number">0</literal></expr></then><else>:<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name></expr></else></ternary></expr></init></decl>,<decl><type ref="prev"/><name>r2</name><init>=<expr><ternary><condition><expr><name>sml2</name></expr>?</condition><then><expr><literal type="number">1</literal></expr></then><else>:<expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>dat</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l1</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>r1</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>l2</name></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>r2</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>+</operator><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>dat</name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>big1</name><operator>||</operator><name>i</name><operator>&gt;</operator><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name>sml1</name><operator>||</operator><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name>big2</name><operator>||</operator><name>j</name></expr></argument>&gt;</argument_list></name><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>,<argument><expr><name>sml2</name><operator>||</operator><name>j</name><operator>&lt;</operator><name><name>b</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></block></for>
    <return>return <expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>big1</name></expr>]</index><index>[<expr><name>sml1</name></expr>]</index><index>[<expr><name>big2</name></expr>]</index><index>[<expr><name>sml2</name></expr>]</index></name><operator>=</operator><name>dat</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>l</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator><expr><name>l</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>l</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><expr><name>n</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>r</name></expr>;</condition><incr><expr><name>n</name><operator>++</operator></expr><operator>,</operator><expr><name>r</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>b</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><name>r</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>solve</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
