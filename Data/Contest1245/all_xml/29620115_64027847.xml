<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29620115_64027847.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>a2</name> <init>= <expr><call><name>count</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr></init></decl>, 
		    <decl><type ref="prev"/><name>b2</name> <init>= <expr><call><name>count</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr></init></decl>,
		    <decl><type ref="prev"/><name>c2</name> <init>= <expr><call><name>count</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>string</name></type> <name>ans</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>win</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a2</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>b2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if>if <condition>(<expr><literal type="number">2</literal><operator>*</operator><name>win</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>at</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>char</name></type> <name>ch</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control> <block>{
				<if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>and</operator> <name>ch</name> <operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ans</name><index>[<expr><name>at</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
				}</block></then></if>
				<if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>and</operator> <name>ch</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ans</name><index>[<expr><name>at</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
				}</block></then></if>
				<if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>and</operator> <name>ch</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>ans</name><index>[<expr><name>at</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name>at</name><operator>++</operator></expr>;</expr_stmt>
			}</block></for>

			<for>for <control>(<init><decl><type><name>char</name><modifier>&amp;</modifier></type> <name>ch</name> <range>: <expr><name>ans</name></expr></range></decl></init>)</control> <block>{
				<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name>a</name><operator>--</operator></expr>;</expr_stmt></block></then>
					<elseif>else <if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name>b</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
					<else>else <block type="pseudo"><expr_stmt><expr><name>ch</name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name>c</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
				}</block></then></if>
			}</block></for>

			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
	}</block></while>
}</block></function></unit>
