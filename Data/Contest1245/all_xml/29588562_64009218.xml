<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29588562_64009218.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>dp</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


    <decl_stmt><decl><type><name>int</name></type> <name>sta</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>res</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal><operator>||</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal></expr>)</condition><then><block>{
            <return>return <expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>sta</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>sta</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then><else>else <block>{
                <if>if<condition>(<expr><name>sta</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt></block></then>
                <else>else <block>{
                    <expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name><name>dp</name><index>[<expr><name>res</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>sta</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then><elseif>else <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>sta</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>sta</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <if>if<condition>(<expr><name>sta</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt></block></then>
                <else>else<block>{
                    <expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name><name>dp</name><index>[<expr><name>res</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>sta</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></then></if></elseif><else>else <block>{
            <expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name><name>dp</name><index>[<expr><name>res</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sta</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
  <comment type="line">//  cout&lt;&lt;ans&lt;&lt;' '&lt;&lt;res&lt;&lt;endl;</comment>
    <expr_stmt><expr><name>ans</name><operator>=</operator><name>ans</name><operator>*</operator><name><name>dp</name><index>[<expr><name>res</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
