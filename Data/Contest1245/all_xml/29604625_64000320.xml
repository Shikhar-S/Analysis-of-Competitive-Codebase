<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29604625_64000320.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">// #include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
 
<comment type="line">// using namespace __gnu_pbds;</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<comment type="line">// template &lt;typename T&gt;</comment>
<comment type="line">// using ordered_set = tree&lt;T, null_type, less&lt;T&gt;, rb_tree_tag, tree_order_statistics_node_update&gt;;</comment>
 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<comment type="line">// typedef complex&lt;long double&gt; point;</comment>

 <comment type="line">// a  rock</comment>
 <comment type="line">// b paper</comment>
 <comment type="line">// c sc</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>t</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>ans</name></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>z</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then><block>{
				<if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="string">"P"</literal></expr>;</expr_stmt>
				}</block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="string">"*"</literal></expr>;</expr_stmt></block></else></if>
			}</block></then> <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>z</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then><block>{
				<if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="string">"S"</literal></expr>;</expr_stmt>
				}</block></then>  <else>else <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="string">"*"</literal></expr>;</expr_stmt></block></else></if>
			}</block></then></if></elseif> <else>else <block>{
				<if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
					<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
					<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="string">"R"</literal></expr>;</expr_stmt>
				}</block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="string">"*"</literal></expr>;</expr_stmt></block></else></if>
			}</block></else></if>
		}</block></for>
		<if>if <condition>(<expr><name>count</name> <operator>&gt;=</operator> <call><name>ceil</name><argument_list>(<argument><expr><call><name>ld</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>/</operator><call><name>ld</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<for>for <control>(<init><decl><type><name>int</name></type> <name>z</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>z</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>z</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>z</name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><then><block>{
					<if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>ans</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
					}</block></then>
					<elseif>else <if>if <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block>{
						<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>ans</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
					}</block></then></if></elseif>
					<else>else <block>{
						<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>ans</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
					}</block></else></if>
				}</block></then></if>
			}</block></for>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
}</block></function>
 
 </unit>
