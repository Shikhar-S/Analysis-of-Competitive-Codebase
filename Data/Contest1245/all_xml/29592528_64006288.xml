<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29592528_64006288.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>fast</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>R</name></decl>, <decl><type ref="prev"/><name>P</name></decl>, <decl><type ref="prev"/><name>S</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>R</name> <operator>&gt;&gt;</operator> <name>P</name> <operator>&gt;&gt;</operator> <name>S</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>pt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>out</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>: <expr><name>s</name></expr></range></decl></init>)</control><block>{
			<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>
		}</block></for>
		<decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<while>while<condition>(<expr><name>pt</name> <operator>!=</operator> <name>sz</name> <operator>&amp;&amp;</operator> <name>R</name></expr>)</condition><block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>R</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>out</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>pt</name><operator>++</operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>pt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>pt</name> <operator>!=</operator> <name>sz</name> <operator>&amp;&amp;</operator> <name>P</name></expr>)</condition><block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>P</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>out</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>pt</name><operator>++</operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>pt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>pt</name> <operator>!=</operator> <name>sz</name> <operator>&amp;&amp;</operator> <name>S</name></expr>)</condition><block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>S</name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>out</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>pt</name><operator>++</operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>pt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>R</name> <operator>&amp;&amp;</operator> <name>pt</name> <operator>!=</operator> <name>sz</name></expr>)</condition><block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>out</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>R</name><operator>--</operator></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>pt</name><operator>++</operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>pt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>P</name> <operator>&amp;&amp;</operator> <name>pt</name> <operator>!=</operator> <name>sz</name></expr>)</condition><block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>out</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>P</name><operator>--</operator></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>pt</name><operator>++</operator></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>pt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<while>while<condition>(<expr><name>S</name> <operator>&amp;&amp;</operator> <name>pt</name> <operator>!=</operator> <name>sz</name></expr>)</condition><block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>out</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>s</name><index>[<expr><name>pt</name></expr>]</index></name> <operator>=</operator> <literal type="char">'#'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>S</name><operator>--</operator></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>pt</name><operator>++</operator></expr>;</expr_stmt>
		}</block></while>
		<if>if<condition>(<expr><name>res</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>sz</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
	}</block></while>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
