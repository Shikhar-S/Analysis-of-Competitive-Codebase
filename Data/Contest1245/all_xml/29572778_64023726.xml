<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29572778_64023726.cpp">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include> 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>



<function><type><name>char</name></type> <name>win</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="char">'P'</literal></expr>;</return></block></then>
	<elseif>else <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="char">'S'</literal></expr>;</return></block></then></if></elseif>
	<else>else
		<block type="pseudo"><return>return <expr><literal type="char">'R'</literal></expr>;</return></block></else></if>
}</block></function>

<function><type><name>string</name></type> <name>win</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>string</name></type> <name>ans</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>char</name></type> <name>c</name><range>:<expr><name>s</name></expr></range></decl></init>)</control><block>{
		<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>win</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">//ios_base::sync_with_stdio(false);</comment>
	<comment type="line">//cin.tie(0);</comment>
	<comment type="line">//cout.tie(0);</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name><operator>&gt;&gt;</operator><name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl> ;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>ws</name> <init>= <expr><call><name>win</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>char</name></type> <name>c</name><range>: <expr><name>ws</name></expr></range></decl></init>)</control>
			<block type="pseudo"><expr_stmt><expr><name><name>m</name><index>[<expr><name>c</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>tw</name> <init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>tw</name><operator>+=</operator><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tw</name><operator>+=</operator><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tw</name><operator>+=</operator><call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>m</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><literal type="number">2</literal><operator>*</operator><name>tw</name><operator>&gt;=</operator><name>n</name></expr>)</condition><then> <block>{	
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>string</name></type> <name>ans</name> <init>= <expr><name>ws</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name><name>multiset</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>a</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>	
				<block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>b</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>c</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
			
			<for>for<control>(<init><decl><type><name>char</name> <modifier>&amp;</modifier></type><name>c</name><range>: <expr><name>ans</name></expr></range></decl></init>)</control><block>{
				<if>if<condition>(<expr><call><name><name>st</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>==</operator><call><name><name>st</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
					<expr_stmt><expr><name>c</name><operator>=</operator><literal type="char">'?'</literal></expr>;</expr_stmt>
				}</block></then>
				<else>else <block>{
					<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>st</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></else></if>
			}</block></for>
			<for>for<control>(<init><decl><type><name>char</name> <modifier>&amp;</modifier></type><name>c</name><range>: <expr><name>ans</name></expr></range></decl></init>)</control><block>{
				<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'?'</literal></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>c</name><operator>=</operator><operator>*</operator><call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>st</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
			<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name><name>st</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>

		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>


	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
