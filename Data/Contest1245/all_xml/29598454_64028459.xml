<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29598454_64028459.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (x), i##END = (y); i &lt;= i##END; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (x), i##END = (y); i &gt;= i##END; --i)</cpp:value></cpp:define>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>_T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chk_min</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>y</name> <operator>&lt;</operator> <name>x</name></expr> ?</condition><then> <expr><name>x</name> <operator>=</operator> <name>y</name></expr></then></ternary></expr><operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>_T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chk_max</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>_T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><name>x</name> <operator>=</operator> <name>y</name></expr></then></ternary></expr><operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>;</return>}</block></function>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name><name>pw3</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>erase</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><operator>(</operator><name>a</name> <operator>|</operator> <name>b</name><operator>)</operator> <operator>^</operator> <name>b</name></expr>;</return>}</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>cnt</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>l</argument>, <argument>r</argument>)</argument_list></macro> <expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>(</operator><name>a</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name>a</name><operator>++</operator></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>a</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0ll</literal></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>DOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">30</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <if>if<condition>(<expr><name>a</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
	<block>{
		<macro><name>DOR</name><argument_list>(<argument>j</argument>, <argument><literal type="number">30</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro> <if>if<condition>(<expr><name>b</name> <operator>&gt;&gt;</operator> <name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>v</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <name>j</name></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><call><name>erase</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>erase</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><name>v</name> <operator>*=</operator> <literal type="number">1ll</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>cnt</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>v</name> <operator>*=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>pw3</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then>
			<elseif>else <if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>j</name></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><call><name>erase</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>erase</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><name>v</name> <operator>*=</operator> <name><name>pw3</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<elseif>else <if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><then>
			<block>{
				<if>if<condition>(<expr><call><name>erase</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <call><name>erase</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>j</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><continue>continue;</continue></block></then></if>
				<expr_stmt><expr><name>v</name> <operator>*=</operator> <literal type="number">1ll</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>j</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <call><name>cnt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>v</name> <operator>*=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>pw3</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then></if></elseif></if>
			<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>v</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></then></if>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name><name>pw3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">31</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>pw3</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pw3</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><call><name>solve</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>solve</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>solve</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
