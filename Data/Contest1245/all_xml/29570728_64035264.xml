<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29570728_64035264.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a=b;a&lt;c;a++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int a=b;a&lt;=c;a++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,b,sizeof(a))</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">2005</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>useiostream</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<struct>struct <name>city</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>ci</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>root</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>cj</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>ci</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name><name>ci</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>ci</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><name><name>ci</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<struct>struct <name>edge</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nex</name></decl>;</decl_stmt>
	<constructor><name>edge</name><parameter_list>()</parameter_list><block>{}</block></constructor>
	<constructor><name>edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name>u</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>v</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>w</name><operator>=</operator><name>c</name></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block><decl><name><name>e</name><index>[<expr><name>maxn</name><operator>*</operator><name>maxn</name></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name><name>head</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>maxn</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>root</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>mem</name><argument_list>(<argument><expr><name>head</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>u</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>v</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>w</name><operator>=</operator><name>c</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>e</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>.</operator><name>nex</name><operator>=</operator><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>head</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
}</block></function>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>edge</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>edge</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>w</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>w</name></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>num</name><operator>==</operator><name><name>root</name><index>[<expr><name>num</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>root</name><index>[<expr><name>num</name></expr>]</index></name></expr>;</return></block></then>
	<else>else
	<block>{
		<expr_stmt><expr><name><name>root</name><index>[<expr><name>num</name></expr>]</index></name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name><name>root</name><index>[<expr><name>num</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name><name>root</name><index>[<expr><name>num</name></expr>]</index></name></expr>;</return>
	}</block></else></if>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>val</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>vis</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type><name>evis</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>kru</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>e</name><operator>+</operator><name>cnt</name></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>cnt</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>u</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>w</name><init>=<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><call><name>find</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>y</name><init>=<expr><call><name>find</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>x</name><operator>==</operator><name>y</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name><name>root</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><name>w</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>u</name><operator>==</operator><literal type="number">0</literal><operator>||</operator><name>v</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name><name>vis</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>max</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name><name>evis</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mk</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<macro><name>repp</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>ci</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>&gt;&gt;</operator><name><name>ci</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
	}</block>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>lins</name><init>=<expr><call><name>cj</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>val</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>lins</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>kru</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>vis</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vis</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>evis</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>evis</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>evis</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>evis</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	}</block></for>
}</block></function></unit>
