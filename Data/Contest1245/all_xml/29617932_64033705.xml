<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617932_64033705.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>stk1</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>stk2</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>top</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>R</name> <name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>R</name> <name>bool</name></type> <name>lim1</name></decl></parameter>, <parameter><decl><type><name>R</name> <name>bool</name></type> <name>lim2</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><operator>!</operator><operator>~</operator><name>pos</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><operator>~</operator><name><name>f</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>f</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>R</name> <name>long</name> <name>long</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>R</name> <name>int</name></type> <name>up1</name> <init>= <expr><ternary><condition><expr><name>lim1</name></expr>?</condition><then> <expr><name><name>stk1</name><index>[<expr><name>pos</name></expr>]</index></name></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>R</name> <name>int</name></type> <name>up2</name> <init>= <expr><ternary><condition><expr><name>lim2</name></expr>?</condition><then> <expr><name><name>stk2</name><index>[<expr><name>pos</name></expr>]</index></name></expr></then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>up1</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<for>for<control>(<init><decl><type><name>R</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>up2</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
			<if>if<condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>dfs</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lim1</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>up1</name></expr></argument>, <argument><expr><name>lim2</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <name>up2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name><name>f</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>lim1</name></expr>]</index><index>[<expr><name>lim2</name></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>R</name> <name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>R</name> <name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
	<if>if<condition>(<expr><operator>!</operator><operator>~</operator><name>x</name> <operator>||</operator> <operator>!</operator><operator>~</operator><name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<for>for<control>(<init><expr><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>||</operator> <name>y</name></expr>;</condition> <incr><expr><name>x</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>y</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>stk1</name><index>[<expr><name>top</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name><name>stk2</name><index>[<expr><name>top</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>dfs</name><argument_list>(<argument><expr><name>top</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<for>for<control>(<init><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>T</name><operator>--</operator></expr>;</condition> <incr/>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><call><name>solve</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>solve</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>solve</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>solve</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
