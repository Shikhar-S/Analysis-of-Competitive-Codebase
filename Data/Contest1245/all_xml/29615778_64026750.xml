<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615778_64026750.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/STACK:134217728"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"fast-maths"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"no-stack-protector"</cpp:literal><name>)</name></cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_USE_MATH_DEFINES</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forx</name><parameter_list>(<parameter><type><name>_name</name></type></parameter>,<parameter><type><name>_from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int name = from; name &lt; to; name += value)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rforx</name><parameter_list>(<parameter><type><name>_name</name></type></parameter>, <parameter><type><name>from</name></type></parameter>, <parameter><type><name>to</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int name = from; name &gt; to; name -= _value)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>_STL_NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_STL_NAME.begin(), _STL_NAME.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>_STL_NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_STL_NAME.rbegin(), _STL_NAME.rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name><parameter_list>(<parameter><type><name>_FIRST</name></type></parameter>,<parameter><type><name>_SECOND</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(_FIRST,_SECOND)</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>llu</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ld</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-12</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>mt19937</name></type> <name>rndm</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>start</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>precision</name></name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>setf</name></name><argument_list>(<argument><expr><name><name>ios</name><operator>::</operator><name>fixed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>FILENAME</name> <init>= <expr><literal type="string">"navalny"</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>rndm</name><operator>.</operator><name>seed</name></name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_DEBUG</name></cpp:ifdef>
	<comment type="line">//freopen("input.txt", "rt", stdin);</comment>
	<comment type="line">//freopen("output.txt", "wt", stdout);</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="line">//freopen((FILENAME + ".in").c_str(), "rt", stdin);</comment>
	<comment type="line">//freopen((FILENAME + ".out").c_str(), "wt", stdout);</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>FastIn</name><parameter_list>(<parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>streamin</name> <init>= <expr><name>stdin</name></expr></init></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="char">' '</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>mns</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
		<expr_stmt><expr><name>mns</name> <operator>=</operator> <name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>_getc_nolock</name><argument_list>(<argument><expr><name>streamin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{
		<expr_stmt><expr><name>a</name> <operator>*=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>_getc_nolock</name><argument_list>(<argument><expr><name>streamin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><operator>(</operator><ternary><condition><expr><name>mns</name></expr> ?</condition><then> <expr><operator>-</operator><name>a</name></expr> </then><else>: <expr><name>a</name></expr></else></ternary><operator>)</operator></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>FastOut</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>FILE</name><modifier>*</modifier></type> <name>streamout</name> <init>= <expr><name>stdout</name></expr></init></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><name>val</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>_putc_nolock</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><name>streamout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name>bool</name></type> <name>fst</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>degree</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>degree</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>/=</operator> <literal type="number">10</literal></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>dl</name> <init>= <expr><name>val</name> <operator>/</operator> <name>i</name></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>dl</name> <operator>||</operator> <operator>!</operator><name>fst</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>_putc_nolock</name><argument_list>(<argument><expr><literal type="char">'0'</literal> <operator>+</operator> <name>dl</name></expr></argument>, <argument><expr><name>streamout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>fst</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>val</name> <operator>%=</operator> <name>i</name></expr>;</expr_stmt>
	}</block></for>
	<if>if <condition>(<expr><name>fst</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>_putc_nolock</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><name>streamout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>_putc_nolock</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>streamout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<struct>struct <name>edge</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>cost</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name> <parameter_list>(<parameter><decl><type><name>edge</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>edge</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>cost</name></name> <operator>!=</operator> <name><name>m</name><operator>.</operator><name>cost</name></name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name><name>n</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <name><name>m</name><operator>.</operator><name>cost</name></name></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>n</name><operator>.</operator><name>u</name></name> <operator>!=</operator> <name><name>m</name><operator>.</operator><name>u</name></name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name><name>n</name><operator>.</operator><name>u</name></name> <operator>&lt;</operator> <name><name>m</name><operator>.</operator><name>u</name></name></expr>;</return></block></then></if>
	<return>return <expr><name><name>n</name><operator>.</operator><name>v</name></name> <operator>&lt;</operator> <name><name>m</name><operator>.</operator><name>v</name></name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">2005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cost</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>k</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>par</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rnk</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>savcost</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>find_par</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
	<if>if <condition>(<expr><name><name>par</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <name>v</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name>v</name></expr>;</return></block></then></if>
	<return>return <expr><name><name>par</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>find_par</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name>cans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>backup_rnk</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>backup_par</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>backup_cost</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>backup</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>cost</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>backup_cost</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>rnk</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>backup_rnk</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>backup_par</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<function><type><name>bool</name></type> <name>union_sets</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>backup_cost</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>backup_cost</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>backup_par</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>backup_par</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>backup_rnk</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>rnk</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>backup_rnk</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>rnk</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>find_par</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>find_par</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>v</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name><name>rnk</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;</operator> <name><name>rnk</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<if>if <condition>(<expr><name><name>rnk</name><index>[<expr><name>u</name></expr>]</index></name> <operator>==</operator> <name><name>rnk</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><operator>++</operator><name><name>rnk</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name><name>par</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>cst</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>savcost</name><index>[<expr><name><name>cost</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>savcost</name><index>[<expr><name><name>cost</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cans</name> <operator>-=</operator> <call><name>max</name><argument_list>(<argument><expr><name><name>savcost</name><index>[<expr><name><name>cost</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>savcost</name><index>[<expr><name><name>cost</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>cst</name> <operator>!=</operator> <name><name>savcost</name><index>[<expr><name><name>cost</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><name><name>cost</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name><name>cost</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>qp</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>qp</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>savcost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cans</name> <operator>+=</operator> <name><name>savcost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rnk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>


	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>edge</name></type> <name>nv</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>nv</name><operator>.</operator><name>cost</name></name> <operator>=</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>qp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>qp</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>qp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <name><name>qp</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nv</name><operator>.</operator><name>u</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>nv</name><operator>.</operator><name>v</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>nv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name>sav_e</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name>cans</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><call><name>union_sets</name><argument_list>(<argument><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>, <argument><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cans</name> <operator>+=</operator> <name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>sav_e</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>cans</name> <operator>&lt;</operator> <name>ans</name></expr>)</condition><then>
				<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>cans</name></expr><operator>,</operator> <expr><name>pos</name> <operator>=</operator> <call><name><name>sav_e</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block>{
				<expr_stmt><expr><call><name>backup</name><argument_list>(<argument><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>backup</name><argument_list>(<argument><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cans</name> <operator>=</operator> <name>ans</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>sav_e</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rnk</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pos</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>union_sets</name><argument_list>(<argument><expr><name><name>sav_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>, <argument><expr><name><name>sav_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>


	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>el</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if <condition>(<expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name><name>el</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>el</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>el</name></expr></range></decl></init>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal> <operator>&lt;&lt;</operator> <name>pos</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pos</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>sav_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>sav_e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
