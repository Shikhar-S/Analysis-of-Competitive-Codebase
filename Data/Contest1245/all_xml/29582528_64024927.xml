<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29582528_64024927.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>k</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>item</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>cst</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>item</name> <modifier>&amp;</modifier></type><name>it2</name></decl></parameter>)</parameter_list> <specifier>const</specifier>
    <block>{
        <if>if <condition>(<expr><name>cst</name> <operator>&lt;</operator> <name><name>it2</name><operator>.</operator><name>cst</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>cst</name> <operator>&gt;</operator> <name><name>it2</name><operator>.</operator><name>cst</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <return>return <expr><name>type</name> <operator>&lt;</operator> <name><name>it2</name><operator>.</operator><name>type</name></name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>item</name></expr></argument>&gt;</argument_list></name></type> <name>items</name></decl>, <decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>dst</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>&amp;</modifier></type><name>i</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>&amp;</modifier></type><name>j</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>par</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>light</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>fi</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
    <if>if <condition>(<expr><name>u</name> <operator>==</operator> <name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
    <block>{
        <return>return <expr><name>u</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>fi</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>fili</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>li</name> <init>= <expr><name><name>light</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>u</name> <operator>==</operator> <name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then>
    <block>{
        <return>return <expr><name><name>light</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>fi</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>light</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>li</name> <operator>||</operator> <name><name>light</name><index>[<expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>light</name><index>[<expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>light</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><name><name>light</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>bool</name></type> <name>un</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>li</name> <init>= <expr><name><name>light</name><index>[<expr><name>v</name></expr>]</index></name> <operator>||</operator> <name><name>light</name><index>[<expr><name>u</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>fi</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>fi</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>li</name> <operator>=</operator> <name>li</name> <operator>||</operator> <name><name>light</name><index>[<expr><name>u</name></expr>]</index></name> <operator>||</operator> <name><name>light</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>v</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>light</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>light</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>li</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>item</name></expr></argument>&gt;</argument_list></name></type> <name>ligh</name></decl>, <decl><type ref="prev"/><name>pat</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>iota</name><argument_list>(<argument><expr><name>par</name></expr></argument>, <argument><expr><name>par</name> <operator>+</operator> <literal type="number">2020</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>i</name></expr>, <expr><name>i</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>items</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><call><name>dst</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>items</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>items</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>it</name> <range>: <expr><name>items</name></expr></range></decl></init>)</control>
    <block>{
        <if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>li</name> <init>= <expr><call><name>fili</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>li</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name><name>light</name><index>[<expr><name><name>it</name><operator>.</operator><name>a</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>light</name><index>[<expr><call><name>fi</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>ligh</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>it</name><operator>.</operator><name>cst</name></name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <else>else
        <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>it</name><operator>.</operator><name>a</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>it</name><operator>.</operator><name>b</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>fi</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>fi</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>fili</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>a</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>fili</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><call><name><name>pat</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>un</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>it</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>it</name><operator>.</operator><name>cst</name></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name><name>ligh</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ligh</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <if>if <condition>(<expr><name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>ligh</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <if>if <condition>(<expr><call><name><name>ligh</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name><name>pat</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>pat</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>pat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument> , <argument><expr><name><name>pat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
