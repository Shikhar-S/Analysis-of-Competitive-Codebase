<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29568571_64003573.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_USE_MATH_DEFINES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(m);i&lt;(n);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR(i,0,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(),(v).end()</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>LINF</name> <init>= <expr><literal type="number">0x3f3f3f3f3f3f3f3fLL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 998244353;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>dx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>IOSetup</name> <block>{<public type="default">
  <constructor><name>IOSetup</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>
</public>}</block> <decl><name>iosetup</name></decl>;</struct>
<comment type="block">/*-------------------------------------------------*/</comment>
<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><name>MOD</name></expr></init></decl>;</decl_stmt>
<struct>struct <name>ModInt</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>unsigned</name></type> <name>val</name></decl>;</decl_stmt>
  <constructor><name>ModInt</name><parameter_list>()</parameter_list><member_init_list>: <call><name>val</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
  <constructor><name>ModInt</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><ternary><condition><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>x</name> <operator>%</operator> <name>mod</name></expr> </then><else>: <expr><name>x</name> <operator>%</operator> <name>mod</name> <operator>+</operator> <name>mod</name></expr></else></ternary></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
  <function><type><name>ModInt</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>exponent</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ModInt</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>this</name></expr></init></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>exponent</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
      <if>if <condition>(<expr><name>exponent</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>*=</operator> <name>tmp</name></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><name>tmp</name> <operator>*=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>exponent</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{ <if>if<condition>(<expr><operator>(</operator><name>val</name> <operator>+=</operator> <name><name>rhs</name><operator>.</operator><name>val</name></name><operator>)</operator> <operator>&gt;=</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>-=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{ <if>if<condition>(<expr><operator>(</operator><name>val</name> <operator>+=</operator> <name>mod</name> <operator>-</operator> <name><name>rhs</name><operator>.</operator><name>val</name></name><operator>)</operator> <operator>&gt;=</operator> <name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name> <operator>-=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>val</name> <operator>=</operator> <cast type="static">static_cast<argument_list type="generic">&lt;<argument><expr><name>unsigned</name> <name>long</name> <name>long</name></expr></argument>&gt;</argument_list><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></cast> <operator>*</operator> <name><name>rhs</name><operator>.</operator><name>val</name></name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt> <return>return <expr><operator>*</operator><name>this</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>*</operator><name>this</name> <operator>*=</operator> <call><name><name>rhs</name><operator>.</operator><name>inv</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name> <operator>==</operator> <name><name>rhs</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>!=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name> <operator>!=</operator> <name><name>rhs</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name> <operator>&lt;=</operator> <name><name>rhs</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name> <operator>&gt;</operator> <name><name>rhs</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
  <function type="operator"><type><name>bool</name></type> <name>operator<name>&gt;=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><name>val</name> <operator>&gt;=</operator> <name><name>rhs</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
  <function type="operator"><type><name>ModInt</name></type> <name>operator<name>-</name></name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><name>mod</name> <operator>-</operator> <name>val</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
  <function type="operator"><type><name>ModInt</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>rhs</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>ModInt</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>rhs</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>ModInt</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>rhs</name></expr>;</return> }</block></function>
  <function type="operator"><type><name>ModInt</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{ <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>rhs</name></expr>;</return> }</block></function>
  <friend>friend <function type="operator"><type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>os</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <name><name>rhs</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function></friend>
  <friend>friend <function type="operator"><type><name>istream</name> <modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>is</name></decl></parameter>, <parameter><decl><type><name>ModInt</name> <modifier>&amp;</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt> <name>is</name> <expr_stmt><expr><operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt> <name>rhs</name> <expr_stmt><expr><operator>=</operator> <call><name>ModInt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>is</name></expr>;</return> }</block></function></friend>
</public><private>private:
  <function><type><name>ModInt</name></type> <name>inv</name><parameter_list>()</parameter_list> <specifier>const</specifier> <block>{
    <comment type="line">// if (__gcd(val, mod) != 1) assert(false);</comment>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>a</name> <init>= <expr><name>val</name></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><name>mod</name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>b</name></expr>)</condition> <block>{
      <decl_stmt><decl><type><name>unsigned</name></type> <name>tmp</name> <init>= <expr><name>a</name> <operator>/</operator> <name>b</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name> <operator>-=</operator> <name>tmp</name> <operator>*</operator> <name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name> <operator>-=</operator> <name>tmp</name> <operator>*</operator> <name>y</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>
</private>}</block>;</struct>
<function><type><name>int</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ModInt</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name><name>x</name><operator>.</operator><name>val</name></name></expr>;</return> }</block></function>
<struct>struct <name>Combinatorics</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ModInt</name></expr></argument>&gt;</argument_list></name></type> <name>fact</name></decl>, <decl><type ref="prev"/><name>fact_inv</name></decl>, <decl><type ref="prev"/><name>inv</name></decl>;</decl_stmt>
  <constructor><name>Combinatorics</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name> <init>= <expr><literal type="number">10000000</literal></expr></init></decl></parameter>)</parameter_list> <member_init_list>: <call><name>val</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call>, <call><name>fact</name><argument_list>(<argument><expr><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>, <call><name>fact_inv</name><argument_list>(<argument><expr><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call>, <call><name>inv</name><argument_list>(<argument><expr><name>val</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{
    <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>val + <literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fact</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fact_inv</name><index>[<expr><name>val</name></expr>]</index></name> <operator>=</operator> <call><name>ModInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>/</operator> <name><name>fact</name><index>[<expr><name>val</name></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>val</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>fact_inv</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>fact_inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>i</name></expr>;</expr_stmt></block></for>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>val + <literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fact</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>fact_inv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></constructor>
  <function><type><name>ModInt</name></type> <name>nCk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <name>k</name> <operator>||</operator> <name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <comment type="line">// assert(n &lt;= val &amp;&amp; k &lt;= val);</comment>
    <return>return <expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>fact_inv</name><index>[<expr><name>k</name></expr>]</index></name> <operator>*</operator> <name><name>fact_inv</name><index>[<expr><name>n</name> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</return>
  }</block></function>
  <function><type><name>ModInt</name></type> <name>nPk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <name>k</name> <operator>||</operator> <name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <comment type="line">// assert(n &lt;= val);</comment>
    <return>return <expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>fact_inv</name><index>[<expr><name>n</name> <operator>-</operator> <name>k</name></expr>]</index></name></expr>;</return>
  }</block></function>
  <function><type><name>ModInt</name></type> <name>nHk</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>ModInt</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <return>return <expr><operator>(</operator><ternary><condition><expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>ModInt</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>nCk</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></else></ternary><operator>)</operator></expr>;</return>
  }</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control> <block>{
    <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'w'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'m'</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
  }</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ModInt</name></expr></argument>&gt;</argument_list></name></type> <name>dp</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">2</literal></argument>, <argument>n + <literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ModInt</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr/>)</control> <block>{
    <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'u'</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>
    <decl_stmt><decl><type><name>char</name></type> <name>now</name> <init>= <expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>now</name></expr>)</condition> <block>{
      <expr_stmt><expr><operator>++</operator><name>j</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>ans</name> <operator>*=</operator> <name><name>dp</name><index>[<expr><name>cnt</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
