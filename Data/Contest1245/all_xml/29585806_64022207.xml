<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29585806_64022207.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>R</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>Readin</name><parameter_list>( <parameter><decl><type><name>R</name> <modifier>&amp;</modifier></type><name>K</name></decl></parameter> )</parameter_list> <block>{<decl_stmt><decl><type><name>bool</name></type> <name>F</name><init>=<expr><name>K</name><operator>=</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>C</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name><name>C</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>C</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition>
<block>{<if>if<condition>(<expr><name>C</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>F</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>C</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><while>while<condition>(<expr><name>C</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>&amp;&amp;</operator><name>C</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>K</name><operator>=</operator><operator>(</operator><name>K</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>K</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><name>C</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>C</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while><if>if<condition>(<expr><name>F</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>K</name><operator>=</operator><operator>-</operator><name>K</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>R</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>Checkmax</name><parameter_list>( <parameter><decl><type><name>R</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter> , <parameter><decl><type><name>R</name></type> <name>B</name></decl></parameter> )</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>A</name> <operator>&lt;</operator> <name>B</name></expr> ?</condition><then> <expr><name>A</name> <operator>=</operator> <name>B</name></expr></then></ternary></expr> <operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr> ;</return> }</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>R</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>Checkmin</name><parameter_list>( <parameter><decl><type><name>R</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter> , <parameter><decl><type><name>R</name></type> <name>B</name></decl></parameter> )</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>A</name> <operator>&gt;</operator> <name>B</name></expr> ?</condition><then> <expr><name>A</name> <operator>=</operator> <name>B</name></expr></then></ternary></expr> <operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr> ;</return> }</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MaxN</name> <init>= <expr><literal type="number">2000</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MaxM</name> <init>= <expr><literal type="number">4000000</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl> , <decl><type ref="prev"/><name>M</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>X</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>Y</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>C</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>K</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> ;</decl_stmt>
<struct>struct <name>Edge</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>U</name></decl> , <decl><type ref="prev"/><name>V</name></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>W</name></decl> ;</decl_stmt>
</public>}</block> ;</struct>
<decl_stmt><decl><type><name>Edge</name></type> <name><name>E</name><index>[<expr><name>MaxM</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Find</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>Min</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> ;</decl_stmt>
<function><type><name>int</name></type> <name>F</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter> )</parameter_list> <block>{
	<return>return <expr><ternary><condition><expr><name>N</name> <operator>==</operator> <name><name>Find</name><index>[<expr><name>N</name></expr>]</index></name></expr> ?</condition><then> <expr><name>N</name></expr> </then><else>: <expr><name><name>Find</name><index>[<expr><name>N</name></expr>]</index></name> <operator>=</operator> <call><name>F</name><argument_list>( <argument><expr><name><name>Find</name><index>[<expr><name>N</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></else></ternary></expr> ;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>Opt</name><index>[<expr><name>MaxM</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl> , <decl><type ref="prev"/><name>Opts</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Ans</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name>Nods</name></decl> ;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>Readin</name><argument_list>( <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>Readin</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> <operator>,</operator> <expr><call><name>Readin</name><argument_list>( <argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>Readin</name><argument_list>( <argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>Readin</name><argument_list>( <argument><expr><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>j</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control> <block>{
			<expr_stmt><expr><operator>++</operator><name>M</name></expr> ;</expr_stmt>
			<expr_stmt><expr><name><name>E</name><index>[<expr><name>M</name></expr>]</index></name><operator>.</operator><name>U</name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt>
			<expr_stmt><expr><name><name>E</name><index>[<expr><name>M</name></expr>]</index></name><operator>.</operator><name>V</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
			<expr_stmt><expr><name><name>E</name><index>[<expr><name>M</name></expr>]</index></name><operator>.</operator><name>W</name> <operator>=</operator> <literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>X</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>Y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name><name>K</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>K</name><index>[<expr><name>j</name></expr>]</index></name> <operator>)</operator></expr> ;</expr_stmt>
		}</block></for></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>( <argument><expr><name>E</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>E</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>M</name></expr></argument> , <argument><expr><lambda><capture>[]</capture><parameter_list>( <parameter><decl><type><name>Edge</name></type> <name>A</name></decl></parameter> , <parameter><decl><type><name>Edge</name></type> <name>B</name></decl></parameter> )</parameter_list> <block>{
		<return>return <expr><name><name>A</name><operator>.</operator><name>W</name></name> <operator>&lt;</operator> <name><name>B</name><operator>.</operator><name>W</name></name></expr> ;</return>
	}</block></lambda></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>Find</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>Min</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block></for>
	<decl_stmt><decl><type><specifier>register</specifier> <name>long</name> <name>long</name></type> <name>Minans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>M</name></expr> ;</condition> <incr/>)</control> <block>{
		<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>U</name> <init>= <expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>U</name></expr></init></decl> , <decl><type ref="prev"/><name>V</name> <init>= <expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>V</name></expr></init></decl> ;</decl_stmt>
		<expr_stmt><expr><name>U</name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>U</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<expr_stmt><expr><name>V</name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>V</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<if>if<condition>( <expr><name>U</name> <operator>==</operator> <name>V</name></expr> )</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
		<if>if<condition>( <expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>W</name> <operator>&gt;=</operator> <call><name>max</name><argument_list>( <argument><expr><name><name>C</name><index>[<expr><name><name>Min</name><index>[<expr><name>U</name></expr>]</index></name></expr>]</index></name></expr></argument> , <argument><expr><name><name>C</name><index>[<expr><name><name>Min</name><index>[<expr><name>V</name></expr>]</index></name></expr>]</index></name></expr></argument> )</argument_list></call></expr> )</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
		<expr_stmt><expr><name>Minans</name> <operator>+=</operator> <name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>W</name></expr> ;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name>Opts</name></expr> ;</expr_stmt>
		<expr_stmt><expr><name><name>Opt</name><index>[<expr><name>Opts</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>U</name></expr> ;</expr_stmt>
		<expr_stmt><expr><name><name>Opt</name><index>[<expr><name>Opts</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>E</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>V</name></expr> ;</expr_stmt>
		<expr_stmt><expr><name><name>Find</name><index>[<expr><name>U</name></expr>]</index></name> <operator>=</operator> <name>V</name></expr> ;</expr_stmt>
		<if>if<condition>( <expr><name><name>C</name><index>[<expr><name><name>Min</name><index>[<expr><name>V</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <name><name>C</name><index>[<expr><name><name>Min</name><index>[<expr><name>U</name></expr>]</index></name></expr>]</index></name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>Min</name><index>[<expr><name>V</name></expr>]</index></name> <operator>=</operator> <name><name>Min</name><index>[<expr><name>U</name></expr>]</index></name></expr> ;</expr_stmt></block></then></if>
	}</block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control> 
		<block type="pseudo"><if>if<condition>( <expr><name><name>Find</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>i</name></expr> )</condition><then> <block>{
			<expr_stmt><expr><name><name>Ans</name><index>[<expr><operator>++</operator><name>Nods</name></expr>]</index></name> <operator>=</operator> <name><name>Min</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
			<expr_stmt><expr><name>Minans</name> <operator>+=</operator> <name><name>C</name><index>[<expr><name><name>Min</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr> ;</expr_stmt>
		}</block></then></if></block></for>
	<expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>Nods</name> <operator>+</operator> <name>Opts</name> <operator>==</operator> <name>N</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%I64d\n"</literal></expr></argument> , <argument><expr><name>Minans</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%d\n"</literal></expr></argument> , <argument><expr><name>Nods</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>Nods</name></expr> ;</condition> <incr/>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%d "</literal></expr></argument> , <argument><expr><name><name>Ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"\n%d\n"</literal></expr></argument> , <argument><expr><name>Opts</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>Opts</name></expr> ;</condition> <incr/>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%d %d\n"</literal></expr></argument> , <argument><expr><name><name>Opt</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument> , <argument><expr><name><name>Opt</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function></unit>
