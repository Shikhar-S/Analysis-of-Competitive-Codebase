<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29572012_64029331.cpp"><comment type="block">/*enjoy karo yaar*/</comment>

<comment type="line">//CF,CC,AtC,SPOJ: hp1999</comment>
<comment type="line">//HE: hemant269</comment>
<comment type="line">//HR: hemant2132</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>int</name></cpp:macro>          <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>fast</name><parameter_list>()</parameter_list></cpp:macro>       <cpp:value>ios::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>memset(a,b,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>gcd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>(__gcd((a),(b)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>lcm</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>     <cpp:value>(((a)*(b))/gcd((a),(b)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>pb</name></cpp:macro>           <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>ins</name></cpp:macro>          <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>F</name></cpp:macro>            <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>     <cpp:macro><name>S</name></cpp:macro>            <cpp:value>second</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><literal type="number">1e18</literal></expr></init></decl>,<decl><type ref="prev"/><name>M</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2e3</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
<function_decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>v</name><parameter_list>(<parameter><decl><type><name>N</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>k</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>elec</name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>arr</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>,<decl><type ref="prev"/><name>siz</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>one</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>two</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cost</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>mn</name></decl>,<decl><type ref="prev"/><name>fl</name></decl>,<decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<comment type="line">//vector&lt;int&gt; adj[N],vis(N,0);</comment>

<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>siz</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>root</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<while>while<condition>(<expr><name><name>arr</name><index>[<expr><name>x</name></expr>]</index></name><operator>!=</operator><name>x</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name><name>arr</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>arr</name><index>[<expr><name><name>arr</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name><operator>=</operator><name><name>arr</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>x</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>kruskal</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>c</name><range>:<expr><name>edges</name></expr></range></decl></init>)</control>
    <block>{
        <comment type="line">//cout&lt;&lt;"\n";</comment>
        <comment type="line">//cout&lt;&lt;c.F&lt;&lt;" "&lt;&lt;c.S.F&lt;&lt;" "&lt;&lt;c.S.S&lt;&lt;"\n";</comment>

        <expr_stmt><expr><name>a</name><operator>=</operator><name><name>c</name><operator>.</operator><name>S</name><operator>.</operator><name>F</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name><name>c</name><operator>.</operator><name>S</name><operator>.</operator><name>S</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>x</name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>(<expr><name>a</name><operator>==</operator><name>b</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>elec</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c</name><operator>.</operator><name>F</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>one</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>elec</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>

        <if>if<condition>(<expr><name>x</name><operator>!=</operator><name>y</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>elec</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>elec</name><index>[<expr><name>y</name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
        <block>{
            <comment type="line">//cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;"\n";</comment>

            <expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c</name><operator>.</operator><name>F</name></name></expr>;</expr_stmt>

            <if>if<condition>(<expr><name><name>siz</name><index>[<expr><name>x</name></expr>]</index></name><operator>&lt;</operator><name><name>siz</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name><name>arr</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>siz</name><index>[<expr><name>x</name></expr>]</index></name><operator>+=</operator><name><name>siz</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>siz</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">0ll</literal></expr>;</expr_stmt>

            <if>if<condition>(<expr><name><name>elec</name><index>[<expr><name>x</name></expr>]</index></name> <operator>||</operator> <name><name>elec</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name><name>elec</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>elec</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>

            <expr_stmt><expr><call><name><name>two</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr>,<expr><name>b</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">//cout&lt;&lt;a&lt;&lt;" "&lt;&lt;b&lt;&lt;"\n";</comment>
            <comment type="line">//adj[a].pb(b);</comment>
            <comment type="line">//adj[b].pb(a);</comment>
        }</block></then></if>
    }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>F</name><operator>-</operator><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>F</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>S</name><operator>-</operator><name><name>v</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>S</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></function>

<comment type="block">/*void dfs(int x)
{
    vis[x]=1;

    if(elec[x])
        fl=1;

    if(c[x]&lt;mn)
    {
        mn=c[x];
        pos=x;
    }

    for(auto u:adj[x])
    {
        //cout&lt;&lt;u&lt;&lt;" "&lt;&lt;vis[u]&lt;&lt;"\n";
        if(!vis[u])
            dfs(u);
    }
}*/</comment>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>S</name></expr>;</expr_stmt></block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><block>{<expr><name>i</name></expr>,<expr><name>i</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>tmp</name><operator>=</operator><call><name>dist</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>tmp</name></expr>,<expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>

    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>kruskal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*if(two.size())
    {
        for(int i=1;i&lt;=n;++i)
        {
            if(!vis[i])
            {
                fl=0;
                pos=i;
                mn=c[i];

                //cout&lt;&lt;i&lt;&lt;" "&lt;&lt;adj[i].size()&lt;&lt;"\n";

                dfs(i);

                if(!fl)
                {
                    cost+=mn;
                    one.pb(pos);
                }
            }
        }
    }*/</comment>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>cost</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>one</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>c</name><range>:<expr><name>one</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>c</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>two</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>c</name><range>:<expr><name>two</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>c</name><operator>.</operator><name>F</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>c</name><operator>.</operator><name>S</name></name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//fast();</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//cin&gt;&gt;t;</comment>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
