<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29597492_64020019.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>P</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i = m; i &lt; n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i = n - 1; i &gt;= m; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR(i, 0, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IREP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IFOR(i, 0, n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREACH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto&amp;(x) : (a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(), (v).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ll(x.size())</cpp:value></cpp:define>

<struct>struct <name>UnionFind</name> <block>{<public type="default">
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>par</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>sizes</name></decl>;</decl_stmt>

  <constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>par</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call>, <call><name>sizes</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>par</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
  }</block></constructor>

  <function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><call><name><name>par</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
    <return>return <expr><call><name><name>par</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><call><name><name>par</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
  }</block></function>

  <function><type><name>void</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>rx</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ry</name> <init>= <expr><call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>rx</name> <operator>==</operator> <name>ry</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <if>if <condition>(<expr><call><name><name>sizes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>rx</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name><name>sizes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>rx</name></expr></argument>, <argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><call><name><name>par</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>ry</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>rx</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>sizes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>rx</name></expr></argument>)</argument_list></call> <operator>+=</operator> <call><name><name>sizes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><name>ry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></function>

  <function><type><name>bool</name></type> <name>same</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

  <function><type><name>int</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>sizes</name><operator>.</operator><name>at</name></name><argument_list>(<argument><expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

  <function><type><name>int</name></type> <name>num_of_connected_components</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>par</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
    }</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
  }</block></function>
</public>}</block>;</struct>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>x</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>y</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{ <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> }</block>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>k</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="line">// 0--n-1 ä¸ç©º</comment>
  <comment type="line">// n--2n-1 ä¸ç</comment>
  <comment type="line">//(cost, from, to)</comment>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{ <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><name>i</name></expr>, <expr><name>i</name> <operator>+</operator> <name>n</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block>
  <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n - <literal type="number">1</literal></argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument>i + <literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>cost</name></expr>, <expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>ALL</name><argument_list>(<argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>UnionFind</name></type> <name>uf</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument>n</argument>, <argument><literal type="number">2</literal> * n - <literal type="number">1</literal></argument>)</argument_list></macro> <block>{ <expr_stmt><expr><call><name><name>uf</name><operator>.</operator><name>unite</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block>
  <decl_stmt><decl><type><name>ll</name></type> <name>sz</name> <init>= <expr><call><name>SZ</name><argument_list>(<argument><expr><name>edges</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>to</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>n</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>sz</argument>)</argument_list></macro> <block>{
    <if>if <condition>(<expr><call><name><name>uf</name><operator>.</operator><name>size</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>u</name> <init>= <expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>v</name> <init>= <expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><call><name><name>uf</name><operator>.</operator><name>same</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
    <expr_stmt><expr><call><name><name>uf</name><operator>.</operator><name>unite</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>cost</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>to</name><index>[<expr><name>u</name></expr>]</index><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>to</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
  }</block>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>stat</name></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <if>if <condition>(<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name> <operator>+</operator> <name>n</name></expr>]</index></name></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>stat</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>SZ</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>SZ(stat)</argument>)</argument_list></macro> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>stat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" \n"</literal><index>[<expr><name>i</name> <operator>==</operator> <call><name>SZ</name><argument_list>(<argument><expr><name>stat</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr>;</expr_stmt> }</block>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>P</name></expr></argument>&gt;</argument_list></name></type> <name>con</name></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument>i + <literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <if>if <condition>(<expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block>{ <expr_stmt><expr><call><name><name>con</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></then></if>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>SZ</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>SZ(con)</argument>)</argument_list></macro> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>con</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>con</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> }</block>
}</block></function></unit>
