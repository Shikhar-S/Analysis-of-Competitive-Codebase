<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29583049_64031231.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<class><template>template<parameter_list>&lt;<parameter><type><name>int</name></type> <name>mod</name></parameter>&gt;</parameter_list></template>
class <name>Combination</name> <block>{<private type="default">
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></name></type> <name>fact</name></decl>, <decl><type ref="prev"/><name>finv</name></decl>, <decl><type ref="prev"/><name>inv</name></decl>;</decl_stmt>
</private><public>public:
    <constructor><name>Combination</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>fact</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>finv</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>inv</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>sz</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fact</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>i</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>inv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>sz</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>mod</name> <operator>-</operator> <name><name>inv</name><index>[<expr><name>mod</name><operator>%</operator><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>mod</name><operator>/</operator><name>i</name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name><name>finv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>sz</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>finv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>finv</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
        }</block></for>
    }</block></constructor>
    <function><type><name>long</name> <name>long</name></type> <name>C</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <return>return <expr><operator>(</operator><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>finv</name><index>[<expr><name>k</name></expr>]</index></name> <operator>%</operator> <name>mod</name><operator>)</operator> <operator>*</operator> <name><name>finv</name><index>[<expr><name>n</name><operator>-</operator><name>k</name></expr>]</index></name> <operator>%</operator> <name>mod</name></expr>;</return>
    }</block></function>
    <function><type><name>long</name> <name>long</name></type> <name>P</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
        <if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <if>if<condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>k</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <return>return <expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name><name>finv</name><index>[<expr><name>n</name><operator>-</operator><name>k</name></expr>]</index></name> <operator>%</operator> <name>mod</name></expr>;</return>
    }</block></function>
    <function><type><name>long</name> <name>long</name></type> <name>H</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>k</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name><name>this</name><operator>-&gt;</operator><name>C</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>long</name> <name>long</name></type> <name>getfact</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    }</block></function>
    <function><type><name>long</name> <name>long</name></type> <name>getinv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    }</block></function>
    <function><type><name>long</name> <name>long</name></type> <name>getfinv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name><name>finv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    }</block></function>
</public>}</block>;</class>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using>using <name>P</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvi</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vvll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>LINF</name> <init>= <expr><literal type="number">1ll</literal><operator>&lt;&lt;</operator><literal type="number">50</literal></expr></init></decl>;</decl_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>printv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>i</name> <operator>==</operator> <call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></else></if>
  }</block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>Combination</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name></type> <name>comb</name><argument_list>(<argument><expr><literal type="number">100010</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cntn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cntu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>ansn</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ansu</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then> <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cntu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cntn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  }</block></then></if></elseif></if>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then> <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block>{
      <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cntu</name><operator>++</operator></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if<condition>(<expr><name>cntn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>cntn</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
          <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name><name>comb</name><operator>.</operator><name>C</name></name><argument_list>(<argument><expr><name>cntn</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>tmp</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ansn</name> <operator>*=</operator> <name>tmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ansn</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cntn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cntu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then></if></elseif> <else>else <block>{
        <expr_stmt><expr><name>cntu</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
      <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cntn</name><operator>++</operator></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if<condition>(<expr><name>cntu</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>cntu</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
          <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name><name>comb</name><operator>.</operator><name>C</name></name><argument_list>(<argument><expr><name>cntu</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>tmp</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ansu</name> <operator>*=</operator> <name>tmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ansu</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cntu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cntn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then></if></elseif> <else>else <block>{
        <expr_stmt><expr><name>cntn</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if></elseif> <else>else <block>{
      <if>if<condition>(<expr><name>cntu</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>cntu</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
          <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name><name>comb</name><operator>.</operator><name>C</name></name><argument_list>(<argument><expr><name>cntu</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>tmp</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ansu</name> <operator>*=</operator> <name>tmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ansu</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cntu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></then> <elseif>else <if>if<condition>(<expr><name>cntn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>cntn</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
          <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name><name>comb</name><operator>.</operator><name>C</name></name><argument_list>(<argument><expr><name>cntn</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>tmp</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ansn</name> <operator>*=</operator> <name>tmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ansn</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cntn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></then></if></elseif></if>
    }</block></else></if>
  }</block></for>
  <if>if<condition>(<expr><name>cntu</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>cntu</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
      <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name><name>comb</name><operator>.</operator><name>C</name></name><argument_list>(<argument><expr><name>cntu</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ansu</name> <operator>*=</operator> <name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ansu</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
  }</block></then> <elseif>else <if>if<condition>(<expr><name>cntn</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>tmp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>cntn</name><operator>/</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
      <expr_stmt><expr><name>tmp</name> <operator>+=</operator> <call><name><name>comb</name><operator>.</operator><name>C</name></name><argument_list>(<argument><expr><name>cntn</name> <operator>-</operator> <name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ansn</name> <operator>*=</operator> <name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ansn</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
  }</block></then></if></elseif></if>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ansu</name> <operator>*</operator> <name>ansn</name> <operator>%</operator> <name>MOD</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
