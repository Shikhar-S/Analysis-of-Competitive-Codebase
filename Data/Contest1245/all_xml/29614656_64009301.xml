<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29614656_64009301.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLASH</name></cpp:macro> <cpp:value>cin.tie(0); cout.tie(0); ios_base::sync_with_stdio(false);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILEIO</name></cpp:macro> <cpp:value>freopen("/home/aman/Desktop/Kachda/input.txt", "r", stdin); freopen("/home/aman/Desktop/Kachda/output.txt", "w", stdout);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>200000</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<decl_stmt><decl><type><name>FILEIO</name>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 	<name>FLASH</name>

 	<name>string</name></type> <name>s</name></decl>;</decl_stmt>
 	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>

 	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

 	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
 	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

 	<macro><name>fr</name><argument_list>(<argument>i</argument>, <argument><literal type="number">2</literal></argument>, <argument>maxn</argument>)</argument_list></macro><block>{
 		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>f</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>f</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
 	}</block>

 	<decl_stmt><decl><type><name>int</name></type> <name>cntu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cntn</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 	<macro><name>fr</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>s.size()</argument>)</argument_list></macro><block>{
 		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'u'</literal></expr>)</condition><then><block>{
 			<expr_stmt><expr><name>ans</name> <operator>*=</operator> <name><name>f</name><index>[<expr><name>cntu</name></expr>]</index></name></expr>;</expr_stmt>
 			<expr_stmt><expr><name>cntu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
 		}</block></then>
 		<else>else <block type="pseudo"><expr_stmt><expr><name>cntu</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
 		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'n'</literal></expr>)</condition><then><block>{
 			<expr_stmt><expr><name>ans</name> <operator>*=</operator> <name><name>f</name><index>[<expr><name>cntn</name></expr>]</index></name></expr>;</expr_stmt>
 			<expr_stmt><expr><name>cntn</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
 		}</block></then>
 		<else>else <block type="pseudo"><expr_stmt><expr><name>cntn</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
 		<expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
 		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
  	}</block>
 	<expr_stmt><expr><name>ans</name> <operator>*=</operator> <name><name>f</name><index>[<expr><name>cntn</name></expr>]</index></name></expr>;</expr_stmt>
 	<expr_stmt><expr><name>ans</name> <operator>*=</operator> <name><name>f</name><index>[<expr><name>cntu</name></expr>]</index></name></expr>;</expr_stmt>
 	<expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>

 	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function></unit>
