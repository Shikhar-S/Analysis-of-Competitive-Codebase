<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29600758_64030732.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">65</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><name>maxn</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>cal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ind</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>bot</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>lead</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>ind</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>ind</name></expr>]</index><index>[<expr><name>bot</name></expr>]</index><index>[<expr><name>top</name></expr>]</index><index>[<expr><name>lead</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>ind</name></expr>]</index><index>[<expr><name>bot</name></expr>]</index><index>[<expr><name>top</name></expr>]</index><index>[<expr><name>lead</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><name>ind</name></expr>]</index><index>[<expr><name>bot</name></expr>]</index><index>[<expr><name>top</name></expr>]</index><index>[<expr><name>lead</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>up</name><init>=<expr><operator>!</operator><operator>(</operator><operator>!</operator><operator>(</operator><name>r</name><operator>&amp;</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>ind</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>down</name><init>=<expr><operator>!</operator><operator>(</operator><operator>!</operator><operator>(</operator><name>l</name><operator>&amp;</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>ind</name><operator>)</operator><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
	<comment type="line">//cout&lt;&lt;ind&lt;&lt;" "&lt;&lt;bot&lt;&lt;" "&lt;&lt;top&lt;&lt;" "&lt;&lt;lead&lt;&lt;" "&lt;&lt;up&lt;&lt;" "&lt;&lt;down&lt;&lt;endl;</comment>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><comment type="line">//y</comment>
	<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><comment type="line">//x</comment>
		<block>{
			<comment type="line">//cout&lt;&lt;i&lt;&lt;" "&lt;&lt;j&lt;&lt;" "&lt;&lt;up&lt;&lt;" "&lt;&lt;down&lt;&lt;endl;</comment>
			<if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>j</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><operator>(</operator><operator>!</operator><name>lead</name><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><operator>!</operator><operator>(</operator><operator>(</operator><name>i</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>j</name><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>||</operator><operator>(</operator><name>i</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>j</name><operator>==</operator><literal type="number">0</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><name>bot</name><operator>&amp;&amp;</operator><operator>(</operator><name>j</name><operator>&lt;</operator><name>down</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><name>top</name><operator>&amp;&amp;</operator><operator>(</operator><name>i</name><operator>&gt;</operator><name>up</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>cal</name><argument_list>(<argument><expr><name>ind</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>bot</name><operator>&amp;&amp;</operator><operator>(</operator><name>j</name><operator>==</operator><name>down</name><operator>)</operator></expr></argument>,<argument><expr><name>top</name><operator>&amp;&amp;</operator><operator>(</operator><name>i</name><operator>==</operator><name>up</name><operator>)</operator></expr></argument>,<argument><expr><name>lead</name><operator>||</operator><operator>(</operator><name>i</name><operator>&gt;</operator><literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//cout&lt;&lt;ans&lt;&lt;endl;</comment>
			<comment type="line">//ans%=mod;</comment>
			<comment type="line">//cout&lt;&lt;ans&lt;&lt;endl;</comment>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><name>ind</name></expr>]</index><index>[<expr><name>bot</name></expr>]</index><index>[<expr><name>top</name></expr>]</index><index>[<expr><name>lead</name></expr>]</index></name><operator>=</operator><name>ans</name></expr>;</expr_stmt>
	<comment type="line">//cout&lt;&lt;ind&lt;&lt;" "&lt;&lt;bot&lt;&lt;" "&lt;&lt;top&lt;&lt;" "&lt;&lt;lead&lt;&lt;" "&lt;&lt;dp[ind][bot][top][lead]&lt;&lt;endl;</comment>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><call><name>cal</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>l</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>*</operator><literal type="number">2ll</literal><operator>-</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>*</operator><literal type="number">2ll</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></else></if>
	}</block></while>
 }</block></function> 
</unit>
