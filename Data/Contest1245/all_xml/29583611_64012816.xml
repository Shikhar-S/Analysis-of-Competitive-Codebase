<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29583611_64012816.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>res</name><index>[<expr><literal type="number">300</literal></expr>]</index><index>[<expr><literal type="number">300</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>ch</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'S'</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="char">'R'</literal></expr>]</index><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="char">'S'</literal></expr>]</index><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="char">'P'</literal></expr>]</index><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="char">'R'</literal></expr>]</index><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="char">'S'</literal></expr>]</index><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>res</name><index>[<expr><literal type="char">'P'</literal></expr>]</index><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</init> <condition><expr><name>t</name><operator>--</operator></expr>;</condition> <incr/>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name><name>A</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>A</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>v</name><index>[<expr><literal type="number">300</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>( <argument><expr><name>v</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>v</name></sizeof></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>sc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for<control>( <init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr> )</control><block>{
            <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
                <block type="pseudo"><if>if<condition>( <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>res</name><index>[<expr><name><name>ch</name><index>[<expr><name>a</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>a</name></expr>]</index></name></expr> )</condition><then><block>{
                    <expr_stmt><expr><name>sc</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>A</name><index>[<expr><name>a</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
                }</block></then></if></block></for>
        }</block></for>
        
        <for>for<control>( <init><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>a</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>a</name><operator>++</operator></expr></incr> )</control><block>{
            <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
                <block type="pseudo"><if>if<condition>( <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>A</name><index>[<expr><name>a</name></expr>]</index></name></expr> )</condition><then><block>{
                    <expr_stmt><expr><name><name>A</name><index>[<expr><name>a</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
                }</block></then></if></block></for>
        }</block></for>
        
        <if>if<condition>(<expr><name>sc</name> <operator>&lt;</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"no"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
            <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>
                <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ch</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>




    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
