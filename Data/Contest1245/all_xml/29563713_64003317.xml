<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29563713_64003317.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>char</name></type> <name><name>ch</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>out</name><index>[<expr><literal type="number">1000</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>queue</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>test</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>aa</name></decl>,<decl><type ref="prev"/><name>bb</name></decl>,<decl><type ref="prev"/><name>cc</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>test</name></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>t</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>t</name><operator>&lt;=</operator><name>test</name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>aa</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bb</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cc</name><operator>=</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>bb</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>bb</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>cc</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>cc</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if></elseif>
            <else>else
            <block>{
                <if>if<condition>(<expr><name>aa</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>aa</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else
                <block>{
                    <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>
            }</block></else></if>
        }</block></for>
        <comment type="line">//cout&lt;&lt;z&lt;&lt;endl;</comment>
        <while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>a</name><operator>=</operator><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>aa</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>aa</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name>bb</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>bb</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
            }</block></then></if></elseif>
            <else>else<block>{
                <expr_stmt><expr><name>cc</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>out</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></while>
        <expr_stmt><expr><name><name>out</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><literal type="char">'\0'</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>z</name><operator>*</operator><literal type="number">2</literal><operator>&gt;=</operator><name>n</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n%s\n"</literal></expr></argument>,<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>


    }</block></for>
}</block></function>
</unit>
