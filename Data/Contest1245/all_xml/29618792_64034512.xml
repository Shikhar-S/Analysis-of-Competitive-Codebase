<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618792_64034512.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<struct>struct <name>node</name><block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
</public>}</block>;</struct>



<function><type><name>node</name></type> <name>next</name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>node</name></type> <name>res</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    <comment type="line">// cout &lt;&lt; "   " &lt;&lt; x.i &lt;&lt; ' ' &lt;&lt; x.j &lt;&lt; endl;</comment>
    <if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>i</name></name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>j</name></name><operator>-</operator><literal type="number">1</literal><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><operator>.</operator><name>j</name></name><operator>--</operator></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><operator>.</operator><name>i</name></name><operator>--</operator></expr>;</expr_stmt></block></else></if>
    }</block></then>
    <else>else<block>{
        <if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>j</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;=</operator><literal type="number">9</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><operator>.</operator><name>j</name></name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><operator>.</operator><name>i</name></name><operator>--</operator></expr>;</expr_stmt></block></else></if>
    }</block></else></if>
    <comment type="line">// cout &lt;&lt; "   " &lt;&lt; res.i &lt;&lt; ' ' &lt;&lt; res.j &lt;&lt; endl;</comment>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>node</name></type> <name>prev</name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>node</name></type> <name>res</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>i</name></name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>j</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;</operator><literal type="number">10</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><operator>.</operator><name>j</name></name><operator>++</operator></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><operator>.</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></then>
    <else>else<block>{
        <if>if<condition>(<expr><name><name>x</name><operator>.</operator><name>j</name></name><operator>-</operator><literal type="number">1</literal><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><operator>.</operator><name>j</name></name><operator>--</operator></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>res</name><operator>.</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></else></if>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<comment type="line">// node prev(node x, int xx){</comment>
<comment type="line">//     node res = x;</comment>
<comment type="line">//     for(int i=0;i&lt;xx;i++){</comment>
<comment type="line">//         res = prev(res);</comment>
<comment type="line">//     }</comment>
<comment type="line">//     return res;</comment>
<comment type="line">// }</comment>

<function><type><name>node</name></type> <name>next</name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xx</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>node</name></type> <name>res</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>xx</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>next</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>T</name></decl>;</decl_stmt>
    <comment type="line">// cin &gt;&gt; T;</comment>
    <expr_stmt><expr><name>T</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>


    <for>for<control>(<init><expr><name>t</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>t</name><operator>&lt;=</operator><name>T</name></expr>;</condition><incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name><name>B</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name><name>E</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>B</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>

        <decl_stmt><decl><type><name>node</name></type> <name>x</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>x</name><operator>.</operator><name>i</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>x</name><operator>.</operator><name>j</name></name><operator>=</operator><literal type="number">6</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
        <while>while<condition>(<expr><name><name>x</name><operator>.</operator><name>i</name></name><operator>&lt;</operator><literal type="number">10</literal></expr>)</condition><block>{
            <decl_stmt><decl><type><name>double</name></type> <name>summ</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <decl_stmt><decl><type><name>node</name></type> <name>t</name> <init>= <expr><call><name>next</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <comment type="line">// cout &lt;&lt; t.i &lt;&lt; ' ' &lt;&lt; t.j &lt;&lt; endl; </comment>
                <decl_stmt><decl><type><name>double</name></type> <name>tt</name> <init>= <expr><name><name>E</name><index>[<expr><name><name>t</name><operator>.</operator><name>i</name></name></expr>]</index><index>[<expr><name><name>t</name><operator>.</operator><name>j</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name><name>B</name><index>[<expr><name><name>t</name><operator>.</operator><name>i</name></name></expr>]</index><index>[<expr><name><name>t</name><operator>.</operator><name>j</name></name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>tt</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>E</name><index>[<expr><name><name>t</name><operator>.</operator><name>i</name></name></expr>]</index>               <index>[<expr><name><name>t</name><operator>.</operator><name>j</name></name></expr>]</index></name></expr></argument>,
                             <argument><expr><name><name>E</name><index>[<expr><name><name>t</name><operator>.</operator><name>i</name></name> <operator>-</operator> <name><name>B</name><index>[<expr><name><name>t</name><operator>.</operator><name>i</name></name></expr>]</index><index>[<expr><name><name>t</name><operator>.</operator><name>j</name></name></expr>]</index></name></expr>]</index> <index>[<expr><name><name>t</name><operator>.</operator><name>j</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>summ</name> <operator>+=</operator> <name>tt</name></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name><name>E</name><index>[<expr><name><name>x</name><operator>.</operator><name>i</name></name></expr>]</index><index>[<expr><name><name>x</name><operator>.</operator><name>j</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>summ</name><operator>/</operator><literal type="number">6.0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>prev</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>E</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
