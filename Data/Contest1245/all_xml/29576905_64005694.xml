<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29576905_64005694.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (l); i &lt;= (r); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (l); i &gt;= (r); --i)</cpp:value></cpp:define>
<using>using <name><name>std</name><operator>::</operator><name>cerr</name></name>;</using> <using>using <name><name>std</name><operator>::</operator><name>cin</name></name>;</using> <using>using <name><name>std</name><operator>::</operator><name>cout</name></name>;</using> <using>using <name><name>std</name><operator>::</operator><name>endl</name></name>;</using>
<using>using <name><name>std</name><operator>::</operator><name>make_pair</name></name>;</using> <using>using <name><name>std</name><operator>::</operator><name>pair</name></name>;</using> <typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef> <typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>ui</name>;</typedef> <typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>

<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">200</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>rk</name></decl>, <decl><type ref="prev"/><name>pa</name></decl>, <decl><type ref="prev"/><name>sc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>rk</name> <operator>&gt;&gt;</operator> <name>pa</name> <operator>&gt;&gt;</operator> <name>sc</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>brk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bpa</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bsc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>s</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro><block>{
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>brk</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>bpa</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name>bsc</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name>win</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>win</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>brk</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>bpa</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>bsc</name></expr></argument>, <argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>win</name><operator>*</operator><literal type="number">2</literal> <operator>&gt;=</operator> <name>n</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>freepa</name> <init>= <expr><name>pa</name> <operator>-</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>brk</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>freesc</name> <init>= <expr><name>sc</name> <operator>-</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>bpa</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr></init></decl>,  <decl><type ref="prev"/><name>freerk</name> <init>= <expr><name>rk</name> <operator>-</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>bsc</name></expr></argument>, <argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>pa</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>brk</name></expr></argument>, <argument><expr><name>pa</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>sc</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>bpa</name></expr></argument>, <argument><expr><name>sc</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>rk</name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>bsc</name></expr></argument>, <argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro><block>{
            <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>pa</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>pa</name><operator>--</operator></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>
            <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>sc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>sc</name><operator>--</operator></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>
            <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>rk</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>rk</name><operator>--</operator></expr>;</expr_stmt> <continue>continue;</continue> }</block></then></if>
            <if>if <condition>(<expr><name>freepa</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>freepa</name><operator>--</operator></expr>;</expr_stmt>}</block></then>
            <elseif>else <if>if <condition>(<expr><name>freesc</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>freesc</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if></elseif>
            <else>else <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>freerk</name><operator>--</operator></expr>;</expr_stmt>}</block></else></if>
        }</block>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
