<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29607310_64027354.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>loop</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mn</name></cpp:macro> <cpp:value>100100</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><name>mn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>mn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>mn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>k</name><index>[<expr><name>mn</name></expr>]</index></name></decl>;</decl_stmt>
<struct>struct <name>con</name><block>{<public type="default"><decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>cost</name></decl>;</decl_stmt></public>}</block>;</struct>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>con</name></type> <name>r</name></decl></parameter> , <parameter><decl><type><name>con</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>r</name><operator>.</operator><name>cost</name></name><operator>&lt;</operator><name><name>t</name><operator>.</operator><name>cost</name></name></expr>;</return>}</block></function>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>con</name></expr></argument>&gt;</argument_list></name></type> <name>neki</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>p</name><index>[<expr><name>mn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>siz</name><index>[<expr><name>mn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>fnd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>u</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>u</name><operator>==</operator><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>u</name></expr>;</return></block></then></if>
    <return>return <expr><call><name>fnd</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>t</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>pr</name><init>=<expr><call><name>fnd</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>pt</name><init>=<expr><call><name>fnd</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>pr</name><operator>==</operator><name>pt</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name><name>siz</name><index>[<expr><name>pr</name></expr>]</index></name><operator>&lt;</operator><name><name>siz</name><index>[<expr><name>pt</name></expr>]</index></name></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>pr</name></expr>]</index></name><operator>=</operator><name>pt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>siz</name><index>[<expr><name>pt</name></expr>]</index></name><operator>+=</operator><name><name>siz</name><index>[<expr><name>pr</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>pt</name></expr>]</index></name><operator>=</operator><name>pr</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>siz</name><index>[<expr><name>pr</name></expr>]</index></name><operator>+=</operator><name><name>siz</name><index>[<expr><name>pt</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></else></if>
    
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n+<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator> <expr><name><name>siz</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n+<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n+<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n+<literal type="number">1</literal></argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>con</name></type> <name>temp</name></decl>;</decl_stmt><expr_stmt><expr><name><name>temp</name><operator>.</operator><name>a</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>temp</name><operator>.</operator><name>b</name></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>temp</name><operator>.</operator><name>cost</name></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>neki</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
        <macro><name>loop</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument>i</argument>)</argument_list></macro><block>{
            <decl_stmt><decl><type><name>con</name></type> <name>temp</name></decl>;</decl_stmt><expr_stmt><expr><name><name>temp</name><operator>.</operator><name>a</name></name><operator>=</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>temp</name><operator>.</operator><name>b</name></name><operator>=</operator><name>j</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>temp</name><operator>.</operator><name>cost</name></name><operator>=</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>neki</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
    }</block>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>neki</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>neki</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt><decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type><name>e</name></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>auto</name> <operator>&amp;&amp;</operator> <name>era</name><operator>:</operator><name>neki</name></expr></init>)</control><block>{
        <if>if<condition>(<expr><call><name>join</name><argument_list>(<argument><expr><name><name>era</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>era</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>era</name><operator>.</operator><name>cost</name></name></expr>;</expr_stmt>
            <if>if<condition>(<expr><name><name>era</name><operator>.</operator><name>a</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>era</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>era</name><operator>.</operator><name>a</name></name></expr>, <expr><name><name>era</name><operator>.</operator><name>b</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>v.size()</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then></if>
    
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>e</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <macro><name>loop</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>e.size()</argument>)</argument_list></macro> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
