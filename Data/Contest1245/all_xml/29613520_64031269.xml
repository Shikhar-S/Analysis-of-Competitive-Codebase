<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613520_64031269.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pp</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>DIM</name> <init>= <expr><literal type="number">2007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">10E17</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><call><name>ll</name><argument_list>(<argument><expr><literal type="number">1000000007</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = 1;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x1</name></cpp:macro> <cpp:value>Artem</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>Pidor</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>LOG</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>my_super_set</name>;</typedef>
<struct>struct <name>node</name><block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>fi</name></decl>,<decl><type ref="prev"/><name>sc</name></decl>,<decl><type ref="prev"/><name>th</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<function type="operator"><type><name>bool</name> <specifier>const</specifier></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>node</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name><name>a</name><operator>.</operator><name>fi</name></name><operator>==</operator><name><name>b</name><operator>.</operator><name>fi</name></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>a</name><operator>.</operator><name>sc</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>sc</name></name></expr>;</return></block></then></if>
    <return>return <expr><name><name>a</name><operator>.</operator><name>fi</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>fi</name></name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>C</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>K</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>P</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vis</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pp</name></type> <name><name>cost</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>node</name></type> <name><name>A</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>F</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <if>if <condition>(<expr><name>x</name><operator>==</operator><name><name>P</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
    <return>return <expr><name><name>P</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name><name>P</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>Check</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>a</name><operator>=</operator>  <call><name>F</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>a</name><operator>==</operator><name>b</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>F</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>P</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>cost</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>&lt;</operator><name><name>cost</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>fi</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>cost</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator><name><name>cost</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name><name>cost</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator> <name><name>cost</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></then>
    <else>else<block>{
        <expr_stmt><expr><name><name>P</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><name><name>cost</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>&lt;</operator><name><name>cost</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>fi</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>cost</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator><name><name>cost</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name><name>cost</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator> <name><name>cost</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("input.txt","r",stdin);</comment>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name><name>P</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>&gt;&gt;</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sc</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>th</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    }</block>
    <comment type="line">//sort(A+1,A+1+n);</comment>

    <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>mi</name> <init>= <expr><name>INF</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>mi</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>mi</name> <operator>=</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <block>{<expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><name>i</name></expr>}</block></expr>;</expr_stmt>
    }</block>
    <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

    }</block>
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pp</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name></decl>;</decl_stmt>
    <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
        <macro><name>forn</name><argument_list>(<argument>j</argument>,<argument>n</argument>)</argument_list></macro><block>{
            <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>-</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>sc</name><operator>-</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sc</name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>K</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>,<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
        <comment type="line">//</comment>

    }</block>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>node</name></type> <name>to</name><range>:<expr><name>vec</name></expr></range></decl></init>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><call><name>F</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>sc</name></name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>y</name> <init>= <expr><call><name>F</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>th</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>x</name><operator>!=</operator><name>y</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>cost</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>&gt;</operator><name><name>to</name><operator>.</operator><name>fi</name></name> <operator>||</operator> <name><name>cost</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>&gt;</operator><name><name>to</name><operator>.</operator><name>fi</name></name><operator>)</operator></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>unite</name><argument_list>(<argument><expr><name><name>to</name><operator>.</operator><name>sc</name></name></expr></argument>,<argument><expr><name><name>to</name><operator>.</operator><name>th</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>to</name><operator>.</operator><name>sc</name></name></expr>,<expr><name><name>to</name><operator>.</operator><name>th</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name><operator>+=</operator><name><name>to</name><operator>.</operator><name>fi</name></name></expr>;</expr_stmt>

        }</block></then></if>
    }</block></for>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ans1</name></decl>;</decl_stmt>
    <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
        <if>if <condition>(<expr><name><name>vis</name><index>[<expr><call><name>F</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>ans1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>cost</name><index>[<expr><call><name>F</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>sc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name><operator>+=</operator><name><name>cost</name><index>[<expr><call><name>F</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>fi</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>vis</name><index>[<expr><call><name>F</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>res</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ans1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>to</name><range>:<expr><name>ans1</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>to</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>pp</name></type> <name>to</name><range>:<expr><name>ans</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>to</name><operator>.</operator><name>fi</name></name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>to</name><operator>.</operator><name>sc</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
