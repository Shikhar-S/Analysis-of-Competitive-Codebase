<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617778_64011937.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>io</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>io</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>ans</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cnt1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt3</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cnt1</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cnt2</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>cnt3</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>t1</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>cnt1</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>t2</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>cnt2</name></expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>,<decl><type ref="prev"/><name>t3</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>cnt3</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>b</name><operator>-=</operator><name>t1</name></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>-=</operator><name>t2</name></expr>;</expr_stmt><expr_stmt><expr><name>a</name><operator>-=</operator><name>t3</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><operator>(</operator><name>t1</name><operator>+</operator><name>t2</name><operator>+</operator><name>t3</name><operator>)</operator><operator>*</operator><literal type="number">2</literal><operator>&gt;=</operator><name>n</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>string</name></type> <name>z</name></decl>;</decl_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name>t1</name></expr>)</condition><then><block>{
						<expr_stmt><expr><name>t1</name><operator>--</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>z</name><operator>+=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
					}</block></then>
					<else>else<block>{
						<if>if<condition>(<expr><name>c</name></expr>)</condition><then><block>{
							<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>z</name><operator>+=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
						}</block></then>
						<elseif>else <if>if<condition>(<expr><name>a</name></expr>)</condition><then><block>{
							<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>z</name><operator>+=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
						}</block></then></if></elseif></if>
					}</block></else></if>
				}</block></then></if>
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name>t2</name></expr>)</condition><then><block>{
						<expr_stmt><expr><name>t2</name><operator>--</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>z</name><operator>+=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
					}</block></then>
					<else>else<block>{
						<if>if<condition>(<expr><name>a</name></expr>)</condition><then><block>{
							<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>z</name><operator>+=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
						}</block></then>
						<elseif>else <if>if<condition>(<expr><name>b</name></expr>)</condition><then><block>{
							<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>z</name><operator>+=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
						}</block></then></if></elseif></if>
					}</block></else></if>
				}</block></then></if>
				<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name>t3</name></expr>)</condition><then><block>{
						<expr_stmt><expr><name>t3</name><operator>--</operator></expr>;</expr_stmt>
						<expr_stmt><expr><name>z</name><operator>+=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
					}</block></then>
					<else>else<block>{
						<if>if<condition>(<expr><name>c</name></expr>)</condition><then><block>{
							<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>z</name><operator>+=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
						}</block></then>
						<elseif>else <if>if<condition>(<expr><name>b</name></expr>)</condition><then><block>{
							<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>z</name><operator>+=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
						}</block></then></if></elseif></if>
					}</block></else></if>
				}</block></then></if>
			}</block></for>
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>z</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
		
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>



















</unit>
