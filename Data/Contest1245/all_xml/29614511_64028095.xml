<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29614511_64028095.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(),(v).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).rbegin(),(v).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ve</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;(int)n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(a.size())</cpp:value></cpp:define>
<comment type="line">//using namespace __gnu_pbds;</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">// // // functions: find_by_order  &amp; order_of_key</comment>
<comment type="line">// typedef tree&lt;</comment>
<comment type="line">// int,</comment>
<comment type="line">// null_type,</comment>
<comment type="line">// less&lt;int&gt;,</comment>
<comment type="line">// rb_tree_tag,</comment>
<comment type="line">// tree_order_statistics_node_update&gt;</comment>
<comment type="line">// ordered_set;</comment>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><operator>(</operator><name>int</name><operator>)</operator><literal type="number">2e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt> <comment type="line">//1E9+7</comment>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>,<decl><type ref="prev"/><name><name>dy</name><index>[]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>powmod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>p</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name>p</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>*=</operator><name>a</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>p</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt><expr_stmt><expr><name>a</name><operator>*=</operator><name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt><expr_stmt><expr><name>a</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>mdinv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>powmod</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name><name>DP</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>h</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>double</name></type> <name>sol</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">9</literal> <operator>&amp;&amp;</operator> <name>j</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>

	<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">9</literal> <operator>&amp;&amp;</operator> <name>j</name><operator>&lt;=</operator><literal type="number">6</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>gr</name><init>=<expr><literal type="number">6</literal><operator>-</operator><name>j</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>le</name><init>=<expr><literal type="number">6</literal><operator>-</operator><name>gr</name></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;=</operator><name>j</name></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name>ans</name><operator>+=</operator><call><name>sol</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name>ans</name><operator>/=</operator><name>le</name></expr>;</expr_stmt><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">6</literal><operator>/</operator><operator>(</operator><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><name>le</name><operator>)</operator></expr>;</expr_stmt>
		<return>return <expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>ans</name></expr>;</return>
	}</block></then></if>

	<if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>d</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>d</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>d</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>ni</name><init>=<expr><name>i</name></expr></init></decl>,<decl><type ref="prev"/><name>nj</name><init>=<expr><name>j</name><operator>+</operator><name>d</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>nj</name><operator>&gt;=</operator><literal type="number">10</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>nj</name><operator>-=</operator><literal type="number">10</literal></expr><operator>,</operator><expr><name>ni</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>nj</name><operator>=</operator><literal type="number">9</literal><operator>-</operator><name>nj</name></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><name>ni</name><operator>&gt;</operator><literal type="number">9</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>f1</name><init>=<expr><literal type="number">1</literal><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><call><name>sol</name><argument_list>(<argument><expr><name>ni</name></expr></argument>,<argument><expr><name>nj</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>sol</name><argument_list>(<argument><expr><name>ni</name><operator>+</operator><name><name>h</name><index>[<expr><name>ni</name></expr>]</index><index>[<expr><name>nj</name></expr>]</index></name></expr></argument>,<argument><expr><name>nj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><name>f1</name><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt>
		}</block></for>
	}</block></then>
	<else>else<block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>d</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>d</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>d</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>ni</name><init>=<expr><name>i</name></expr></init></decl>,<decl><type ref="prev"/><name>nj</name><init>=<expr><name>j</name><operator>-</operator><name>d</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>nj</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>nj</name><operator>+=</operator><literal type="number">10</literal></expr><operator>,</operator><expr><name>ni</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>nj</name><operator>=</operator><literal type="number">9</literal><operator>-</operator><name>nj</name></expr>;</expr_stmt>
			}</block></then></if>
			<if>if<condition>(<expr><name>ni</name><operator>&gt;</operator><literal type="number">9</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>f1</name><init>=<expr><literal type="number">1</literal><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><call><name>sol</name><argument_list>(<argument><expr><name>ni</name></expr></argument>,<argument><expr><name>nj</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>sol</name><argument_list>(<argument><expr><name>ni</name><operator>+</operator><name><name>h</name><index>[<expr><name>ni</name></expr>]</index><index>[<expr><name>nj</name></expr>]</index></name></expr></argument>,<argument><expr><name>nj</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><name>f1</name><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt>
		}</block></for>
	}</block></else></if>
	<return>return <expr><name><name>DP</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>IOS</name></type>
	<name>forn</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list> <name>forn</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list> <name>cin</name>&gt;&gt;<name><name>h</name><index>[<expr><literal type="number">9</literal><operator>-</operator><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><call><name>sol</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
