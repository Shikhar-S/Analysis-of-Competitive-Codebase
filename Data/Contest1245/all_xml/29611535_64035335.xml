<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29611535_64035335.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIM</name></cpp:macro> <cpp:value>100007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;long long, long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mood</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>ghjhklkhkyj</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<typedef>typedef  <type><name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument>, <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>ppll</name>;</typedef>

<decl_stmt><decl><type><name>long</name> <name>long</name></type>  <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>h</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>res1</name></decl>,<decl><type ref="prev"/><name>a1</name></decl>,<decl><type ref="prev"/><name>a2</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>a3</name></decl>,<decl><type ref="prev"/><name>z</name></decl>,<decl><type ref="prev"/><name>alln</name></decl>,<decl><type ref="prev"/><name>a4</name></decl>,<decl><type ref="prev"/><name>a5</name></decl>,<decl><type ref="prev"/><name>a6</name></decl>,<decl><type ref="prev"/><name>a7</name></decl>,<decl><type ref="prev"/><name>a8</name></decl>,<decl><type ref="prev"/><name>a9</name></decl>,<decl><type ref="prev"/><name>a10</name></decl>,<decl><type ref="prev"/><name>last</name></decl>,<decl><type ref="prev"/><name>LL</name></decl>,<decl><type ref="prev"/><name>timer</name></decl>,<decl><type ref="prev"/><name>start</name></decl>,<decl><type ref="prev"/><name>finish</name></decl>,<decl><type ref="prev"/><name>flag</name></decl>,<decl><type ref="prev"/><name>step</name></decl>,<decl><type ref="prev"/><name>tests</name></decl>,<decl><type ref="prev"/><name>kilk</name></decl>,<decl><type ref="prev"/><name>curr</name></decl>,<decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><literal type="number">2007</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">2007</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>zin</name><index>[<expr><literal type="number">2007</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>kt</name><index>[<expr><literal type="number">2007</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>par</name><index>[<expr><literal type="number">2007</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>b</name></decl>;</decl_stmt>
<struct>struct <name>ev</name><block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>dist</name></decl>,<decl><type ref="prev"/><name>v1</name></decl>,<decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ev</name></expr></argument>&gt;</argument_list></name></type> <name>ss</name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>ev</name></type> <name>v1</name></decl></parameter>,<parameter><decl><type><name>ev</name></type> <name>v2</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><name><name>v1</name><operator>.</operator><name>dist</name></name><operator>&lt;</operator><name><name>v2</name><operator>.</operator><name>dist</name></name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>v2</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>v1</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>v2</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>v1</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>v2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>findpar</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v1</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name><name>par</name><index>[<expr><name>v1</name></expr>]</index></name><operator>==</operator><name>v1</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>v1</name></expr>;</return></block></then></if>
    <return>return <expr><name><name>par</name><index>[<expr><name>v1</name></expr>]</index></name><operator>=</operator><call><name>findpar</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>v1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>bool</name></type> <name>uni</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v1</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>v2</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>w</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>u1</name></decl>,<decl><type ref="prev"/><name>u2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>u1</name><operator>=</operator><call><name>findpar</name><argument_list>(<argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>u2</name><operator>=</operator><call><name>findpar</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>u1</name><operator>==</operator><name>u2</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>u3</name><init>=<expr><call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>u3</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>par</name><index>[<expr><name>u2</name></expr>]</index></name><operator>=</operator><name>u1</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
        <expr_stmt><expr><name><name>par</name><index>[<expr><name>u1</name></expr>]</index></name><operator>=</operator><name>u2</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>zin</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>kt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><call><name>dist</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name><name>kt</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>kt</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>,<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        }</block></for>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name><name>ss</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>zin</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><name>i</name></expr>,<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>ss</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>ss</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>m</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>m</name><operator>--</operator></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name><range>:<expr><name>ss</name></expr></range></decl></init>)</control><block>{
        <expr_stmt><expr><name>a1</name><operator>=</operator><name><name>p</name><operator>.</operator><name>dist</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a2</name><operator>=</operator><name><name>p</name><operator>.</operator><name>v1</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>a3</name><operator>=</operator><name><name>p</name><operator>.</operator><name>v2</name></name></expr>;</expr_stmt>
        <comment type="line">//cout&lt;&lt;a2&lt;&lt;' '&lt;&lt;a3&lt;&lt;' '&lt;&lt;a1&lt;&lt;endl;</comment>
        <if>if<condition>(<expr><call><name>uni</name><argument_list>(<argument><expr><name>a2</name></expr></argument>,<argument><expr><name>a3</name></expr></argument>,<argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name>a3</name><operator>==</operator><name>n</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>a5</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>a2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name>a6</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><call><name><name>a</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>a2</name></expr>,<expr><name>a3</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><name>a4</name><operator>+=</operator><name>a1</name></expr>;</expr_stmt>

            <expr_stmt><expr><name>m</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>(<expr><name>m</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>a4</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>a5</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name><range>:<expr><name>b</name></expr></range></decl></init>)</control><block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>p</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt>
            }</block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>a6</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>p</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            }</block></for>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>a3</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
