<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29564507_64035141.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>lli</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>lli</name></expr></argument>,<argument><expr><name>lli</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<function><type><name>void</name></type> <name>sc</name><parameter_list>()</parameter_list><block>{}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>sc</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name></expr><operator>,</operator><expr><call><name>sc</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>pr</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>a</name></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>pr</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>a</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr><operator>,</operator><expr><call><name>pr</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>prl</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>a</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>,<parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>prl</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>a</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr><operator>,</operator><expr><call><name>prl</name><argument_list>(<argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>int</name></type> <name>sz</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>begin</name></type></parameter>, <parameter><type><name>end</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (__typeof(end) i = (begin) - ((begin) &gt; (end)); i != (end) - ((begin) &gt; (end)); i += 1 - 2 * ((begin) &gt; (end)))</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>arr</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name><name>dp</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>thingy</name><init>=<expr><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><literal type="number">1</literal><operator>/</operator><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
<function><type><name>long</name> <name>double</name></type> <name>go</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>moves</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>y</name><operator>&lt;=</operator><literal type="number">5</literal></expr>)</condition><then><block>{
		<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>y+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>ne</name><init>=<expr><name>i</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ne</name><operator>*=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>ynew</name><init>=<expr><name>y</name><operator>+</operator><name>ne</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>xnew</name><init>=<expr><name>x</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>ynew</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ynew</name><operator>=</operator><call><name>abs</name><argument_list>(<argument><expr><name>ynew</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>xnew</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then>
			<elseif>else <if>if<condition>(<expr><name>ynew</name><operator>&gt;=</operator><literal type="number">10</literal></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ynew</name><operator>=</operator><literal type="number">9</literal><operator>-</operator><operator>(</operator><name>ynew</name><operator>-</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>xnew</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if></elseif></if>
			<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>todo</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><call><name>go</name><argument_list>(<argument><expr><name>xnew</name></expr></argument>,<argument><expr><name>ynew</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>go</name><argument_list>(<argument><expr><name>xnew</name><operator>-</operator><name><name>arr</name><index>[<expr><name>xnew</name></expr>]</index><index>[<expr><name>ynew</name></expr>]</index></name></expr></argument>,<argument><expr><name>ynew</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>moves</name><operator>+=</operator><name>thingy</name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><name>todo</name><operator>)</operator></expr>;</expr_stmt>
		}</block>
		<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>b</name><init>=<expr><call>(<name>long</name> <name>double</name>)<argument_list>(<argument><expr><literal type="number">6</literal><operator>-</operator><name>y</name></expr></argument>)</argument_list></call><operator>/</operator><operator>(</operator><name>long</name> <name>double</name><operator>)</operator><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>moves</name><operator>=</operator><operator>(</operator><name>moves</name><operator>+</operator><name>b</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><name>b</name><operator>)</operator></expr>;</expr_stmt>
	}</block></then>
	<else>else <block>{
		<macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">7</literal></argument>)</argument_list></macro> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>ne</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>x</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ne</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<decl_stmt><decl><type><name>int</name></type> <name>ynew</name> <init>= <expr><name>y</name> <operator>+</operator> <name>ne</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>xnew</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>ynew</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ynew</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>ynew</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>xnew</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then> <elseif>else <if>if <condition>(<expr><name>ynew</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ynew</name> <operator>=</operator> <literal type="number">9</literal> <operator>-</operator> <operator>(</operator><name>ynew</name> <operator>-</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>xnew</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if></elseif></if>
			<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>todo</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><call><name>go</name><argument_list>(<argument><expr><name>xnew</name></expr></argument>, <argument><expr><name>ynew</name></expr></argument>)</argument_list></call></expr></argument>,  <argument><expr><call><name>go</name><argument_list>(<argument><expr><name>xnew</name> <operator>-</operator> <name><name>arr</name><index>[<expr><name>xnew</name></expr>]</index><index>[<expr><name>ynew</name></expr>]</index></name></expr></argument>, <argument><expr><name>ynew</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>moves</name> <operator>+=</operator> <name>thingy</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>+</operator><name>todo</name><operator>)</operator></expr>;</expr_stmt>
		}</block>
	}</block></else></if>
	<return>return <expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>moves</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro><block>{
    	<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro><block>{
    		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    		<expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	}</block>
    }</block>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>fixed</name><operator>&lt;&lt;</operator><call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><call><name>go</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
