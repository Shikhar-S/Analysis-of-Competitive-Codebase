<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29612888_64005414.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>sac</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>foru</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(LL i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ford</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(LL i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>LL</name></type> <name>ans</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>strlen</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
	<macro><name>foru</name><argument_list>(<argument>i</argument>,<argument><literal type="number">4</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>%=</operator><name>sac</name></expr>;</expr_stmt>
	}</block>
	<decl_stmt><decl><type><name>LL</name></type> <name>p</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>p</name><operator>&lt;</operator><name>n</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal><operator>||</operator><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name><operator>!=</operator><literal type="char">'u'</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name><operator>!=</operator><literal type="char">'n'</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt><continue>continue;</continue>}</block></then></if>
		<expr_stmt><expr><name>q</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<while>while<condition>(<expr><name><name>s</name><index>[<expr><name>p</name><operator>+</operator><name>q</name></expr>]</index></name><operator>==</operator><name><name>s</name><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name>ans</name><operator>*=</operator><name><name>f</name><index>[<expr><name>q</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name><operator>%=</operator><name>sac</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name><operator>+=</operator><name>q</name></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
