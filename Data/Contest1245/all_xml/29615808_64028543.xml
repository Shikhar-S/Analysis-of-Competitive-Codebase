<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615808_64028543.cpp"><comment type="line" format="doxygen">///====================== TEMPLATE STARTS HERE =====================///</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">//#include &lt;ext/pb_ds/assoc_container.hpp&gt; // Include for built in treap</comment>
<comment type="line">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
<comment type="line">//using namespace __gnu_pbds;</comment>

<comment type="line">//#include &lt;sys/resource.h&gt;     // for linux stack memory increase</comment>
<comment type="line">//#define gc getchar_unlocked   // for linux fast io</comment>
<comment type="line">//#define gc getchar            // for windows fast io</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl</name></cpp:macro> <cpp:value>puts("")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sp</name></cpp:macro> <cpp:value>printf(" ")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>phl</name></cpp:macro> <cpp:value>debug("Hello")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(vlong i = (x) ; i &lt;= (y) ; ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROF</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(vlong i = (y) ; i &gt;= (x) ; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x,y,sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((vlong)(x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNIQUE</name><parameter_list>(<parameter><type><name>V</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(V).erase(unique((V).begin(),(V).end()),(V).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;(b)?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&gt;(b)?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ABS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)&lt;0?-(x):(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FABS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)+eps&lt;0?-(x):(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQ</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)*(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LCM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)/gcd((x),(y)))*(y))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POPCOUNT</name></cpp:macro> <cpp:value>__builtin_popcountll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHTMOST</name></cpp:macro> <cpp:value>__builtin_ctzll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFTMOST</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(63-__builtin_clzll((x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMDIGIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((vlong)(log10((x))/log10((y))))+1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NORM</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(x&gt;=mod) x-=mod;if(x&lt;0) x+=mod;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ODD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x)&amp;1)==0?(0):(1))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Set</name><parameter_list>(<parameter><type><name>N</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N=((N)|((1LL)&lt;&lt;(p)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Reset</name><parameter_list>(<parameter><type><name>N</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>N=((N)&amp;(~((1LL)&lt;&lt;(p))))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Check</name><parameter_list>(<parameter><type><name>N</name></type></parameter>,<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(!(((N)&amp;((1LL)&lt;&lt;(p)))==(0)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_cin</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>arrayIndexPrint</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;"~ At pos: "&lt;&lt;i&lt;&lt;" = "&lt;&lt;A[i]</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;"~ "&lt;&lt;#x&lt;&lt;" = "&lt;&lt;x&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>arrayPrint</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>st</name></type></parameter>,<parameter><type><name>ed</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr&lt;&lt;"~ Array:";FOR(i,st,ed) cerr&lt;&lt;" "&lt;&lt;A[i];cerr&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LINE</name></cpp:macro> <cpp:value>cerr&lt;&lt;"\n"; FOR(i,0,50) cerr&lt;&lt;"=";cerr&lt;&lt;"\n\n"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LLU</name></cpp:macro> <cpp:value>long long unsigned int</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>vlong</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>uvlong</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt; <argument><expr><name>vlong</name></expr></argument>, <argument><expr><name>vlong</name></expr></argument> &gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vlong</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<comment type="line">//typedef tree &lt;int, null_type, less&lt;int&gt;, rb_tree_tag, tree_order_statistics_node_update&gt; pb_ds;</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>forthright48</name></cpp:ifdef>
     <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
     <decl_stmt><decl><type><name>clock_t</name></type> <name>tStart</name> <init>= <expr><call><name>clock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
     <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{dbg,args; cerr&lt;&lt;endl;}</cpp:value></cpp:define>
     <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timeStamp</name></cpp:macro> <cpp:value>debug ("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)</cpp:value></cpp:define>
     <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bug</name></cpp:macro> <cpp:value>printf("%d\n",__LINE__);</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>  <comment type="line">// Just strip off all debug tokens</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>timeStamp</name></cpp:macro></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>debugger</name><block>{<public type="default">
    <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>debugger</name><modifier>&amp;</modifier></type> <name>operator <name>,</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>cerr</name><operator>&lt;&lt;</operator><name>v</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
        <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
    }</block></function>
</public>}</block><decl><name>dbg</name></decl>;</struct>

<function><specifier>inline</specifier> <type><name>vlong</name></type> <name>gcd</name> <parameter_list>( <parameter><decl><type><name>vlong</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>vlong</name></type> <name>b</name></decl></parameter> )</parameter_list> <block>{
    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>ABS</name> <argument_list>( <argument><expr><name>a</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>ABS</name> <argument_list>( <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>( <expr><name>b</name></expr> )</condition> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>%</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name> <argument_list>( <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> }</block></while> <return>return <expr><name>a</name></expr>;</return>
}</block></function>

<function><type><name>vlong</name></type> <name>ext_gcd</name> <parameter_list>( <parameter><decl><type><name>vlong</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>vlong</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>vlong</name> <modifier>*</modifier></type><name>X</name></decl></parameter>, <parameter><decl><type><name>vlong</name> <modifier>*</modifier></type><name>Y</name></decl></parameter> )</parameter_list><block>{
    <decl_stmt><decl><type><name>vlong</name></type> <name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>, <decl><type ref="prev"/><name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>r2</name></decl>, <decl><type ref="prev"/><name>r1</name></decl>, <decl><type ref="prev"/><name>q</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>x2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name>y2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>y1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>r2</name> <operator>=</operator> <name>A</name></expr><operator>,</operator> <expr><name>r1</name> <operator>=</operator> <name>B</name></expr>;</init> <condition><expr><name>r1</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>r2</name> <operator>=</operator> <name>r1</name></expr><operator>,</operator> <expr><name>r1</name> <operator>=</operator> <name>r</name></expr><operator>,</operator> <expr><name>x2</name> <operator>=</operator> <name>x1</name></expr><operator>,</operator> <expr><name>y2</name> <operator>=</operator> <name>y1</name></expr><operator>,</operator> <expr><name>x1</name> <operator>=</operator> <name>x</name></expr><operator>,</operator> <expr><name>y1</name> <operator>=</operator> <name>y</name></expr></incr> )</control> <block>{
        <expr_stmt><expr><name>q</name> <operator>=</operator> <name>r2</name> <operator>/</operator> <name>r1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <name>r2</name> <operator>%</operator> <name>r1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x2</name> <operator>-</operator> <operator>(</operator><name>q</name> <operator>*</operator> <name>x1</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y2</name> <operator>-</operator> <operator>(</operator><name>q</name> <operator>*</operator> <name>y1</name><operator>)</operator></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><operator>*</operator><name>X</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>Y</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
    <return>return <expr><name>r2</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>vlong</name></type> <name>modInv</name> <parameter_list>( <parameter><decl><type><name>vlong</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>vlong</name></type> <name>m</name></decl></parameter> )</parameter_list> <block>{
    <decl_stmt><decl><type><name>vlong</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ext_gcd</name><argument_list>( <argument><expr><name>a</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name> <operator>%=</operator> <name>m</name></expr>;</expr_stmt>
    <if>if <condition>( <expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>+=</operator> <name>m</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>x</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>vlong</name></type> <name>bigmod</name> <parameter_list>( <parameter><decl><type><name>vlong</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>vlong</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>vlong</name></type> <name>m</name></decl></parameter> )</parameter_list> <block>{
    <decl_stmt><decl><type><name>vlong</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal> <operator>%</operator> <name>m</name></expr></init></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><name>a</name> <operator>%</operator> <name>m</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>( <expr><name>p</name></expr> )</condition> <block>{
        <if>if <condition>( <expr><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator> <name>res</name> <operator>*</operator> <name>x</name> <operator>)</operator> <operator>%</operator> <name>m</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>)</operator> <operator>%</operator> <name>m</name></expr>;</expr_stmt> <expr_stmt><expr><name>p</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <comment type="line" format="doxygen">/// For bigmod2 multiply here using mulmod</comment>
    }</block></while>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>


<comment type="line">//int knightDir[8][2] = { {-2,1},{-1,2},{1,2},{2,1},{2,-1},{-1,-2},{1,-2},{-2,-1} };</comment>
<comment type="line">//int dir4[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};</comment>
<comment type="line">//int dir8[8][2] = {{-1,0},{0,1},{1,0},{0,-1},{-1,-1},{1,1},{1,-1},{-1,1}};</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlong</name></type> <name>inf</name> <init>= <expr><literal type="number">2147383647</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>vlong</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <call><name>acos</name> <argument_list>( <argument><expr><literal type="number">0.0</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-11</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//mt19937 rng(chrono::steady_clock::now().time_since_epoch().count()); /// For generating random numbers</comment>

<comment type="line" format="doxygen">///======================  TEMPLATE ENDS HERE  =====================///</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name></cpp:macro> <cpp:value>2005</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name><name>mark</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>X</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>Y</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>C</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>K</name><index>[<expr><name>SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>myStruct</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>LL</name></type> <name>id</name></decl>, <decl><type ref="prev"/><name>cost</name></decl>, <decl><type ref="prev"/><name>type</name></decl>, <decl><type ref="prev"/><name>from</name></decl>;</decl_stmt>
    <constructor><name>myStruct</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
    <constructor><name>myStruct</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>cost</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>from</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>cost</name></name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>from</name></name> <operator>=</operator> <name>from</name></expr>;</expr_stmt>
    }</block></constructor>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>myStruct</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>cost</name><operator>&gt;</operator><name><name>A</name><operator>.</operator><name>cost</name></name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>myStruct</name></expr></argument>&gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vVec</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>eVec</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list> <block>{
    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>forthright48</name></cpp:ifdef>
    <expr_stmt><expr><call><name>freopen</name> <argument_list>( <argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen ( "output.txt", "w", stdout );</comment>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// forthright48</comment>

    <expr_stmt><expr><name>fast_cin</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>myStruct</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>K</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>LL</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>V</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>E</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>LL</name></type> <name>id</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>id</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>cost</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>cost</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>type</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>type</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>from</name> <init>= <expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call><operator>.</operator><name>from</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <if>if<condition>(<expr><name><name>mark</name><index>[<expr><name>id</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

        <if>if<condition>(<expr><name>type</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>cost</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>V</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>vVec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>type</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>cost</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>E</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>eVec</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>pii</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>

        <expr_stmt><expr><name><name>mark</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><operator>!</operator><name><name>mark</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>LL</name></type> <name>ki</name> <init>= <expr><name><name>K</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>LL</name></type> <name>kj</name> <init>= <expr><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>LL</name></type> <name>xi</name> <init>= <expr><name><name>X</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>LL</name></type> <name>xj</name> <init>= <expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>LL</name></type> <name>yi</name> <init>= <expr><name><name>Y</name><index>[<expr><name>id</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>LL</name></type> <name>yj</name> <init>= <expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>LL</name></type> <name>newId</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>LL</name></type> <name>newCost</name> <init>= <expr><operator>(</operator><name>ki</name><operator>+</operator><name>kj</name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name>xi</name><operator>-</operator><name>xj</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name>yi</name><operator>-</operator><name>yj</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>LL</name></type> <name>newType</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>LL</name></type> <name>newFrom</name> <init>= <expr><name>id</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>myStruct</name><argument_list>(<argument><expr><name>newId</name></expr></argument>, <argument><expr><name>newCost</name></expr></argument>, <argument><expr><name>newType</name></expr></argument>, <argument><expr><name>newFrom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></while>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>sum</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>V</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>vVec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if<condition>(<expr><name>i</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>vVec</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>E</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name><name>eVec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>eVec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>eVec</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
