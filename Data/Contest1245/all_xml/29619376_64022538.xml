<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619376_64022538.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><name>2</name><name>)</name></cpp:pragma>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">2005</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>edge</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>w</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>c</name><index>[<expr><name>maxn</name><operator>*</operator><name>maxn</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>tot</name></decl>;</decl_stmt>

<function type="operator"><specifier>inline</specifier> <type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><name>edge</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>edge</name></type> <name>q</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>p</name><operator>.</operator><name>w</name></name> <operator>&lt;</operator> <name><name>q</name><operator>.</operator><name>w</name></name></expr>;</return>
}</block></function>

<struct>struct <name>point</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cost</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>a</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<struct>struct <name>node</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>queue</name> <argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type> <name>Q</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>find</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
	<return>return <expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>ans1</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name> <parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>edge</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>,<expr><name>i</name></expr>,<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name></expr>}</block></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
		<block>{
			<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>s</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name> <operator>+</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>k</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>s</name> <operator>*=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>c</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>edge</name><operator>)</operator><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>,<expr><name>s</name></expr>}</block></expr>;</expr_stmt>
		}</block></for></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>c</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name><operator>+</operator><name>tot</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><specifier>register</specifier> <name>int</name></type> <name>tp</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>cnt</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>edge</name></type> <name>cur</name> <init>= <expr><name><name>c</name><index>[<expr><name>tp</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><call><name>find</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>f</name><index>[<expr><call><name>find</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>u</name></name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>cur</name><operator>.</operator><name>v</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>cur</name><operator>.</operator><name>w</name></name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>cur</name><operator>.</operator><name>u</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>cur</name><operator>.</operator><name>v</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><operator>(</operator><name>node</name><operator>)</operator><block>{<expr><name><name>cur</name><operator>.</operator><name>u</name></name></expr>,<expr><name><name>cur</name><operator>.</operator><name>v</name></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
			<expr_stmt><expr><operator>--</operator> <name>cnt</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator> <name>cnt</name></expr>;</expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
		<block type="pseudo"><if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>n</name><operator>-</operator><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>Q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>node</name></type> <name>cur</name> <init>= <expr><call><name><name>Q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name><name>Q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>.</operator><name>a</name></name></expr></argument>, <argument><expr><name><name>cur</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
