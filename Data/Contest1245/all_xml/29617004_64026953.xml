<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617004_64026953.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>err</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{}</cpp:value></cpp:define>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"_debug.cpp"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>lim</name> <init>= <type><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list> <block>{ <for>for<control>(<init><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>x</name> <range>: <expr><name>a</name></expr></range></decl></init>)</control> <block>{ <expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt> }</block></for> <return>return <expr><name>is</name></expr>;</return> }</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>mem</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>C</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lba</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>uba</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lbb</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ubb</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>ans</name> <init>= <expr><name><name>mem</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>lba</name></expr>]</index><index>[<expr><name>uba</name></expr>]</index><index>[<expr><name>lbb</name></expr>]</index><index>[<expr><name>ubb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>ans</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <if>if<condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>li</name> <init>= <expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>ri</name> <init>= <expr><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>ai</name> <range>: <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></range></decl></init>)</control> <block>{
                <for>for<control>(<init><decl><type><name>int</name></type> <name>bi</name> <range>: <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></range></decl></init>)</control> <block>{
                    <if>if<condition>(<expr><operator>(</operator><name>ai</name> <operator>+</operator> <name>bi</name><operator>)</operator> <operator>==</operator> <operator>(</operator><name>ai</name> <operator>^</operator> <name>bi</name><operator>)</operator> 
                    <operator>and</operator> <operator>(</operator><operator>not</operator> <name>lba</name> <operator>or</operator> <name>li</name> <operator>&lt;=</operator> <name>ai</name><operator>)</operator> <operator>and</operator> <operator>(</operator><operator>not</operator> <name>uba</name> <operator>or</operator> <name>ai</name> <operator>&lt;=</operator> <name>ri</name><operator>)</operator>
                    <operator>and</operator> <operator>(</operator><operator>not</operator> <name>lbb</name> <operator>or</operator> <name>li</name> <operator>&lt;=</operator> <name>bi</name><operator>)</operator> <operator>and</operator> <operator>(</operator><operator>not</operator> <name>ubb</name> <operator>or</operator> <name>bi</name> <operator>&lt;=</operator> <name>ri</name><operator>)</operator></expr>)</condition><then> <block>{
                        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>C</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>lba</name> <operator>and</operator> <name>li</name> <operator>==</operator> <name>ai</name></expr></argument>, <argument><expr><name>uba</name> <operator>and</operator> <name>ri</name> <operator>==</operator> <name>ai</name></expr></argument>, 
                                        <argument><expr><name>lbb</name> <operator>and</operator> <name>li</name> <operator>==</operator> <name>bi</name></expr></argument>, <argument><expr><name>ubb</name> <operator>and</operator> <name>ri</name> <operator>==</operator> <name>bi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then></if>
                }</block></for>
            }</block></for>
        }</block></else></if>
    }</block></then></if>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// for(int i = 0; i &lt; 4; i++) {</comment>
    <comment type="line">//     for(int j = 0; j &lt; 4; j++) {</comment>
    <comment type="line">//         cout &lt;&lt; bitset&lt;2&gt;(i) &lt;&lt; " + " &lt;&lt; bitset&lt;2&gt;(j) &lt;&lt; ((i + j) == (i ^ j) ? " == " : " != ") &lt;&lt; bitset&lt;2&gt;(i) &lt;&lt; " ^ " &lt;&lt; bitset&lt;2&gt;(j) &lt;&lt; endl;</comment>
    <comment type="line">//     }</comment>
    <comment type="line">// }</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>mem</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>mem</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>C</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
