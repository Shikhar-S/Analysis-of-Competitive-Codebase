<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618437_64030990.cpp"><comment type="line">//  D</comment>
<comment type="line">//	main.cpp</comment>
<comment type="line">//  Created by David del Val on 01/11/2019</comment>
<comment type="line">//</comment>
<comment type="line">//</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(x).size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LSB</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &amp; (-(x)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>echobin</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;":"&lt;&lt;x&lt;&lt;" ="&lt;&lt;bitset&lt;8&gt;(x)&lt;&lt;"  ";</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>echo</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{cout&lt;&lt;"-&gt;";ECHO(#__VA_ARGS__, __VA_ARGS__ );}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPO</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;b;i++)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>ECHO</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>_s</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>_s</name></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name> <modifier>...</modifier></type><name>Args</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>ECHO</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>_s</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>unsigned</name></type> <name>_i</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>string</name></type> <name>_s2</name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>_i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>_i</name><operator>&lt;</operator><call><name><name>_s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>_i</name></expr></incr>)</control><block>{<if>if<condition>(<expr><name><name>_s</name><index>[<expr><name>_i</name></expr>]</index></name><operator>==</operator><literal type="char">','</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if><if>if<condition>(<expr><name><name>_s</name><index>[<expr><name>_i</name></expr>]</index></name><operator>!=</operator><literal type="char">' '</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>_s2</name><operator>+=</operator><name><name>_s</name><index>[<expr><name>_i</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>}</block></for>
    <if>if<condition>(<expr><name>_i</name><operator>==</operator><call><name><name>_s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block>{<expr_stmt><expr><operator>--</operator><name>_i</name></expr>;</expr_stmt>}</block></then></if><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"  ("</literal><operator>&lt;&lt;</operator><name>_s2</name><operator>&lt;&lt;</operator><literal type="string">"):"</literal><operator>&lt;&lt;</operator><name>x</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ECHO</name><argument_list>(<argument><expr><call><name><name>_s</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>_i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name><name>_s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call><operator>-</operator><name>_i</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T0</name></parameter>, <parameter><type><name>typename</name></type> <name>T1</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T0</name></expr></argument>, <argument><expr><name>T1</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list><block>{
    <return>return <expr><name>os</name> <operator>&lt;&lt;</operator> <literal type="string">"("</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator><literal type="string">")"</literal></expr>;</return>
}</block></function>

<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator <name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type> <name>os</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>)</parameter_list><block>{
    <for>for<control>(<init><decl><type><name>unsigned</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">"_"</literal></expr>;</expr_stmt>}</block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <return>return <expr><name>os</name></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>_min</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>x3</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>min</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>_min</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>x3</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>x4</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>min</name><argument_list>(<argument><expr><call><name>min</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><name>x3</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>}</block></function>

<comment type="line">//gcd(0, n) = n</comment>
<function><specifier>inline</specifier> <type><name>long</name> <name>long</name></type> <name>_gcd</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{ <while>while<condition>(<expr><name>b</name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>b</name> <operator>%=</operator> <name>a</name> <operator>^=</operator> <name>b</name> <operator>^=</operator> <name>a</name> <operator>^=</operator> <name>b</name></expr>;</expr_stmt></block></while> <return>return <expr><name>a</name></expr>;</return>}</block></function>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type>  <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<decl_stmt><decl><type><name>int</name></type> <name><name>parent</name><index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rankk</name> <index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>hpow</name>  <index>[<expr><literal type="number">2000</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list><block>{
    <while>while<condition>(<expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>parent</name><index>[<expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>parent</name><index>[<expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>Union</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>x</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name><operator>==</operator><name>y</name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>
    <if>if<condition>(<expr><name><name>rankk</name><index>[<expr><name>x</name></expr>]</index></name><operator>&gt;</operator><name><name>rankk</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then>
    <elseif>else <if>if<condition>(<expr><name><name>rankk</name><index>[<expr><name>x</name></expr>]</index></name><operator>&lt;</operator><name><name>rankk</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then><block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name><name>parent</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></then></if></elseif>
    <else>else<block>{
        <expr_stmt><expr><name><name>rankk</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name><name>hpow</name><index>[<expr><name>x</name></expr>]</index></name><operator>|=</operator><name><name>hpow</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>hpow</name><index>[<expr><name>y</name></expr>]</index></name><operator>|=</operator><name><name>hpow</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>start</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rankk</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>hpow</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    }</block>
}</block></function>
<decl_stmt><decl><type><name>vi</name></type> <name>psbuilt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ncon</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vii</name></type> <name>con</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>krus</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>pq</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>cos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>pq</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>p1</name></decl>,<decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>p1</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name><name>pq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>fi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>pq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>se</name></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <if>if<condition>(<expr><name><name>hpow</name><index>[<expr><name>p1</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>hpow</name><index>[<expr><name>p1</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>psbuilt</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>pq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>fi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cos</name><operator>+=</operator><name><name>pq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name></expr>;</expr_stmt>
            }</block></then></if>
            <continue>continue;</continue>
        }</block></then></if>
        
        <expr_stmt><expr><name>p2</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name><name>pq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>p1</name><operator>==</operator><name>p2</name><operator>||</operator><operator>(</operator><name><name>hpow</name><index>[<expr><name>p1</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>hpow</name><index>[<expr><name>p2</name></expr>]</index></name><operator>)</operator></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>ncon</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>con</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>pq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>fi</name></name></expr></argument>,<argument><expr><name><name>pq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cos</name><operator>+=</operator><name><name>pq</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Union</name><argument_list>(<argument><expr><name>p1</name></expr></argument>,<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    
    <return>return <expr><name>cos</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>start</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vii</name></type> <name>coords</name><init>=<expr><call><name>vii</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>coords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>&gt;&gt;</operator><name><name>coords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vi</name></type> <name>pow</name><init>=<expr><call><name>vi</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>pow</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vl</name></type> <name>karr</name><init>=<expr><call><name>vl</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>karr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvs</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <expr_stmt><expr><call><name><name>vvs</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><operator>(</operator><name><name>karr</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>karr</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>coords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>-</operator><name><name>coords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fi</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>coords</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name><operator>-</operator><name><name>coords</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>se</name></expr></argument>)</argument_list></call><operator>)</operator></expr>,<macro><name>mp</name><argument_list>(<argument>i</argument>,<argument>j</argument>)</argument_list></macro>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name><name>vvs</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>pow</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>vvs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cs</name><init>=<expr><call><name>krus</name><argument_list>(<argument><expr><name>vvs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>cs</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>psbuilt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>psbuilt</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>i</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>psbuilt</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ncon</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>con</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>con</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>con</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></for>
    

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
