<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617983_64007254.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>map</name></cpp:macro> <cpp:value>unordered_map</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>have</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>have</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>have</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>have</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>bob</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>attack</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>attack</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>attack</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>attack</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>bob</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>need</name></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>need</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>have</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bob</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>need</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>have</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bob</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>need</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>have</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>bob</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>need</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>+</operator> <name><name>need</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>+</operator> <name><name>need</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>&lt;</operator> <operator>(</operator><name>n</name><operator>/</operator><literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>n</name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>bob</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>=</operator> <name><name>have</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>-</operator> <name><name>need</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>bob</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>=</operator> <name><name>have</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>-</operator> <name><name>need</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>bob</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>=</operator> <name><name>have</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>-</operator> <name><name>need</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>need</name><index>[<expr><name><name>attack</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>attack</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>need</name><index>[<expr><name><name>attack</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                }</block></then>
                <else>else<block>{
                    <if>if<condition>(<expr><name><name>bob</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>bob</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then>
                    <elseif>else <if>if<condition>(<expr><name><name>bob</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>bob</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                    }</block></then></if></elseif>
                    <else>else<block>{
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>bob</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></for>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
}</block></function>
</unit>
