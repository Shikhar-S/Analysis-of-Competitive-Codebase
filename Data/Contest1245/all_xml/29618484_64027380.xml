<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618484_64027380.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;array&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cfloat&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<struct>struct <name>Coordinate</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<function><type><name>Coordinate</name></type> <name>succ</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
		<if>if <condition>(<expr><name>y</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>nx</name> <init>= <expr><name>x</name> <operator>-</operator> <name>count</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>ny</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>nx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>nx</name> <operator>=</operator> <operator>-</operator><name>nx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>ny</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<return>return <expr><name>Coordinate</name><block>{ <expr><name>nx</name></expr>, <expr><name>ny</name></expr> }</block></expr>;</return>
		}</block></then>
		<else>else <block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>nx</name> <init>= <expr><name>x</name> <operator>+</operator> <name>count</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>auto</name></type> <name>ny</name> <init>= <expr><name>y</name></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>nx</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>nx</name> <operator>=</operator> <literal type="number">19</literal> <operator>-</operator> <name>nx</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ny</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			}</block></then></if>
			<return>return <expr><name>Coordinate</name><block>{ <expr><name>nx</name></expr>, <expr><name>ny</name></expr> }</block></expr>;</return>
		}</block></else></if>
	}</block></function>
</public>}</block>;</struct>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name></name></type> <name>state</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>line</name> <operator>:</operator> <name>state</name></expr></init>)</control> <block type="pseudo"><for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>square</name> <operator>:</operator> <name>line</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>square</name></expr>;</expr_stmt></block></for></block></for>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>double</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name></name></type> <name>pure</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>double</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>double</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name></name></type> <name>memo</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><call><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>double</name></expr></argument>&gt;</argument_list></name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>cy</name> <init>= <expr><name>i</name> <operator>/</operator> <literal type="number">10</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>cy</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><literal type="number">9</literal> <operator>-</operator> <name>i</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Coordinate</name></type> <name>current</name><argument_list>{ <argument><expr><name>cx</name></expr></argument>, <argument><expr><name>cy</name></expr></argument> }</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>memo</name><index>[<expr><name>cy</name></expr>]</index><index>[<expr><name>cx</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>auto</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<decl_stmt><decl><type><name>auto</name></type> <name>next</name> <init>= <expr><call><name><name>current</name><operator>.</operator><name>succ</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if>if <condition>(<expr><name><name>next</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
			<expr_stmt><expr><name><name>memo</name><index>[<expr><name>cy</name></expr>]</index><index>[<expr><name>cx</name></expr>]</index></name> <operator>+=</operator> <name><name>memo</name><index>[<expr><name><name>next</name><operator>.</operator><name>y</name></name></expr>]</index><index>[<expr><name><name>next</name><operator>.</operator><name>x</name></name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><operator>++</operator><name>count</name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name>memo</name><index>[<expr><name>cy</name></expr>]</index><index>[<expr><name>cx</name></expr>]</index></name> <operator>=</operator> <name><name>memo</name><index>[<expr><name>cy</name></expr>]</index><index>[<expr><name>cx</name></expr>]</index></name> <operator>/</operator> <name>count</name> <operator>+</operator> <literal type="number">6.0</literal> <operator>/</operator> <name>count</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>pure</name><index>[<expr><name>cy</name></expr>]</index><index>[<expr><name>cx</name></expr>]</index></name> <operator>=</operator> <name><name>memo</name><index>[<expr><name>cy</name></expr>]</index><index>[<expr><name>cx</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>memo</name><index>[<expr><name>cy</name></expr>]</index><index>[<expr><name>cx</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>memo</name><index>[<expr><name>cy</name></expr>]</index><index>[<expr><name>cx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pure</name><index>[<expr><name>cy</name> <operator>-</operator> <name><name>state</name><index>[<expr><name>cy</name></expr>]</index><index>[<expr><name>cx</name></expr>]</index></name></expr>]</index><index>[<expr><name>cx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <call><name><name>std</name><operator>::</operator><name>setprecision</name></name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>fixed</name></name> <operator>&lt;&lt;</operator> <name><name>memo</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>
</unit>
