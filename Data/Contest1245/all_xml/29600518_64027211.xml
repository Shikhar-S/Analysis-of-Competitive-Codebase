<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29600518_64027211.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvi</name></expr></argument>&gt;</argument_list></name></type> <name>vvvi</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vll</name></expr></argument>&gt;</argument_list></name></type> <name>vvll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvll</name></expr></argument>&gt;</argument_list></name></type> <name>vvvll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vc</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vc</name></expr></argument>&gt;</argument_list></name></type> <name>vvc</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvc</name></expr></argument>&gt;</argument_list></name></type> <name>vvvc</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>vd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vd</name></expr></argument>&gt;</argument_list></name></type> <name>vvd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vvd</name></expr></argument>&gt;</argument_list></name></type> <name>vvvd</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pi</name></expr></argument>&gt;</argument_list></name></type> <name>vpi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vpll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>vb</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vb</name></expr></argument>&gt;</argument_list></name></type> <name>vvb</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>uint</name>;</typedef>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>mini</name><parameter_list>(<parameter><decl><type><name>C</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>maxi</name><parameter_list>(<parameter><decl><type><name>C</name><modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>C</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forall</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = s.begin(); it != s.end(); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F0</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i) = 1; i &lt;= n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F0R</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i) = n-1; i &gt;= 0; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F1R</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int (i) = n; i &gt;= 1; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &lt;= b; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &gt;= b; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1e17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>todo</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>v.begin(),v.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>0.000000001</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>pos</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>i</name><operator>%</operator><literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">10</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">10</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">9</literal><operator>-</operator><name>j</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>vd</name></type> <name>dp</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></decl>;</decl_stmt><comment type="line">//destino es 0</comment>
    <decl_stmt><decl><type><name>vd</name></type> <name>dpposta</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>vi</name></type> <name>escaleraA</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>vvi</name></type> <name>input</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>,<argument><expr><call><name>vi</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>F0</name><argument_list>(<argument>i</argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro> <macro><name>F0</name><argument_list>(<argument>j</argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>input</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

    <macro><name>F0</name><argument_list>(<argument>i</argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro> <macro><name>F0</name><argument_list>(<argument>j</argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>escaleraA</name><index>[<expr><call><name>pos</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>destino</name> <init>= <expr><call><name>pos</name><argument_list>(<argument><expr><name>i</name><operator>-</operator><name><name>input</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>escaleraA</name><index>[<expr><call><name>pos</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>destino</name></expr>;</expr_stmt>
    }</block>

    <macro><name>F1</name><argument_list>(<argument>i</argument>,<argument><literal type="number">99</literal></argument>)</argument_list></macro><block>{
        <macro><name>F1</name><argument_list>(<argument>d</argument>,<argument><literal type="number">6</literal></argument>)</argument_list></macro> <block>{
            <if>if<condition>(<expr><name>i</name><operator>-</operator><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><name>d</name></expr>]</index></name><operator>/</operator><literal type="number">6.0</literal></expr>;</expr_stmt>
        }</block>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>double</name></type> <name>factor</name> <init>= <expr><literal type="number">1.0</literal> <operator>-</operator> <call><name>double</name><argument_list>(<argument><expr><literal type="number">6</literal> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>double</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/=</operator> <name>factor</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>dpposta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

        <if>if<condition>(<expr><name><name>escaleraA</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>and</operator> <name><name>dpposta</name><index>[<expr><name><name>escaleraA</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dpposta</name><index>[<expr><name><name>escaleraA</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then></if>
    }</block>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>fixed</name><operator>&lt;&lt;</operator><name><name>dp</name><index>[<expr><literal type="number">99</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
