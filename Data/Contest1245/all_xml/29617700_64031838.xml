<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617700_64031838.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>li</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="block">/*
    ld s = 0;
    ld p = ld(5) / 6;
    ld r = 1;
    for(int i = 1; i &lt; 100; i++) {
        s += i * r;
        r *= p;
    }

    s /= 6;
    cout &lt;&lt; setprecision(20) &lt;&lt; fixed &lt;&lt; s;*/</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>dp</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ld</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <comment type="line">//dp[0][1] = 6;</comment>
    <comment type="line">//dp[0][2] =</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <comment type="line">//ld x = ld(6) / i / i;</comment>
        <comment type="line">//dp[0][i] = i * x;</comment>
        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ld</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">// / i;</comment>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>

        <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt>

        <comment type="line">//cout &lt;&lt; 0 &lt;&lt; ' ' &lt;&lt; i &lt;&lt; ' ' &lt;&lt; dp[0][i] &lt;&lt; endl;</comment>
    }</block></for>

    <comment type="line">//cout &lt;&lt; "db" &lt;&lt; endl;</comment>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name> <operator>-=</operator> <name>d</name></expr></incr>)</control> <block>{
            <comment type="line">//cout &lt;&lt; endl &lt;&lt; i &lt;&lt; ' ' &lt;&lt; j &lt;&lt; endl;</comment>

            <if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>


            <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>j1</name> <init>= <expr><name>j</name> <operator>+</operator> <name>l</name> <operator>*</operator> <name>d</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>j1</name> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition><then> <block>{
                    <comment type="line">//j1 -= 10;</comment>
                    <expr_stmt><expr><name>j1</name> <operator>=</operator> <literal type="number">19</literal> <operator>-</operator> <name>j1</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i1</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if<condition>(<expr><name>j1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                    <comment type="line">//j1 += 10;</comment>
                    <expr_stmt><expr><name>j1</name> <operator>=</operator> <operator>-</operator><name>j1</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>i1</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if></elseif></if>

                <comment type="line">//cout &lt;&lt; i1 &lt;&lt; ' ' &lt;&lt; j1 &lt;&lt; endl;</comment>
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><name>i1</name></expr>]</index><index>[<expr><name>j1</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dp</name><index>[<expr><name>i1</name> <operator>-</operator> <name><name>a</name><index>[<expr><name>i1</name></expr>]</index><index>[<expr><name>j1</name></expr>]</index></name></expr>]</index><index>[<expr><name>j1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>/</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <comment type="line">//cout &lt;&lt; i &lt;&lt; ' ' &lt;&lt; j &lt;&lt; ' ' &lt;&lt; dp[i][j] &lt;&lt; endl;</comment>
        }</block></for>
    }</block></for>


    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
 }</block></function>
</unit>
