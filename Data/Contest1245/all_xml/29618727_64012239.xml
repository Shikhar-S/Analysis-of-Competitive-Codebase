<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618727_64012239.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>powmod</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>a</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt><for>for<control>(<init>;</init><condition><expr><name>b</name></expr>;</condition><incr><expr><name>b</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr></incr>)</control><block>{<if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name>a</name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name><operator>%</operator><name>mod</name></expr>;</expr_stmt>}</block></for><return>return <expr><name>res</name></expr>;</return>}</block></function>

<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">100005</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>func</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>uu</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>nn</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name>index</name><operator>==</operator><name>n</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nn</name></expr>]</index><index>[<expr><name>uu</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nn</name></expr>]</index><index>[<expr><name>uu</name></expr>]</index></name></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>index</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>index</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>index</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then>
	<block>{
		<if>if<condition>(<expr><name>uu</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nn</name></expr>]</index><index>[<expr><name>uu</name></expr>]</index></name><operator>=</operator><operator>(</operator><call><name>func</name><argument_list>(<argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>func</name><argument_list>(<argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return></block></then></if>

		<return>return <expr><name><name>dp</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nn</name></expr>]</index><index>[<expr><name>uu</name></expr>]</index></name><operator>=</operator><call><name>func</name><argument_list>(<argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	}</block></then>
	<elseif>else
	<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>index</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then>
	<block>{
		<if>if<condition>(<expr><name>nn</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nn</name></expr>]</index><index>[<expr><name>uu</name></expr>]</index></name><operator>=</operator><operator>(</operator><call><name>func</name><argument_list>(<argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>func</name><argument_list>(<argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return></block></then></if>

		<return>return <expr><name><name>dp</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nn</name></expr>]</index><index>[<expr><name>uu</name></expr>]</index></name><operator>=</operator><call><name>func</name><argument_list>(<argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

	}</block></then></if></elseif>
	<else>else
		<block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>nn</name></expr>]</index><index>[<expr><name>uu</name></expr>]</index></name><operator>=</operator><call><name>func</name><argument_list>(<argument><expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>fl</name></decl>,<decl><type ref="prev"/><name>test</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><call><name>func</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
