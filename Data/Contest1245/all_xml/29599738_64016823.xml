<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29599738_64016823.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"algorithm"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"iostream"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<function><type><name>int64_t</name></type> <name>Pow</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int64_t</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int64_t</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>y</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{
    <if>if<condition>(<expr><name>y</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
      <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><name>t</name> <operator>*</operator> <name>x</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>t</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>fuck</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name><name>shit</name><index>[<expr><literal type="number">111111</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<function><type><name>int64_t</name></type> <name>Init</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>fuck</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>shit</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>fuck</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fuck</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>i</name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>shit</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>Pow</name><argument_list>(<argument><expr><name><name>fuck</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>


<function><type><name>int64_t</name></type> <name>Calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name>len</name> <operator>-</operator> <name>i</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>d</name> <operator>&lt;</operator> <name>i</name></expr>)</condition><then>
          <block type="pseudo"><break>break;</break></block></then></if>
        <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
          <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <else>else
          <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>+</operator> <operator>(</operator><name><name>fuck</name><index>[<expr><name>d</name></expr>]</index></name><operator>*</operator><name><name>shit</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><name>mod</name><operator>)</operator><operator>*</operator><name><name>shit</name><index>[<expr><name>d</name><operator>-</operator><name>i</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>string</name></name></type> <name>input</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name> <operator>&gt;&gt;</operator> <name>input</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name><name>input</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>zero</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ulen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nlen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
      <if>if <condition>(<expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then>
      <block>{
          <expr_stmt><expr><name>zero</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
          <break>break;</break>
      }</block></then></if>
      <if>if <condition>(<expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then>
      <block>{
          <expr_stmt><expr><name>ulen</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>ans</name> <operator>*=</operator> <call><name>Calc</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>nlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></then>
      <elseif>else <if>if <condition>(<expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then>
      <block>{
          <expr_stmt><expr><name>nlen</name><operator>++</operator></expr>;</expr_stmt>
          <expr_stmt><expr><name>ans</name> <operator>*=</operator> <call><name>Calc</name><argument_list>(<argument><expr><name>ulen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>ulen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></then></if></elseif>
      <else>else
      <block>{
          <expr_stmt><expr><name>ans</name> <operator>*=</operator> <call><name>Calc</name><argument_list>(<argument><expr><name>ulen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>ulen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>ans</name> <operator>*=</operator> <call><name>Calc</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>nlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      }</block></else></if>
    }</block></for>
    <expr_stmt><expr><name>ans</name> <operator>*=</operator> <call><name>Calc</name><argument_list>(<argument><expr><name>ulen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ulen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>*=</operator> <call><name>Calc</name><argument_list>(<argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>zero</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name><name>std</name><operator>::</operator><name>endl</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
