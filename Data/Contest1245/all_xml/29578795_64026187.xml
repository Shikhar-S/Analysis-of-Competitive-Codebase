<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29578795_64026187.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<class>class <name>UnionFind</name><block>{<private type="default">
    </private><public>public:
    <comment type="line">//ï¿½eï¿½ÌÔï¿½ï¿½ï¿½ï¿½iï¿½[ï¿½ï¿½ï¿½ï¿½Bï¿½eï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½êï¿½ï¿½-(ï¿½ï¿½ï¿½ÌWï¿½ï¿½ï¿½ÌTï¿½Cï¿½Y)</comment>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>parent</name></decl>;</decl_stmt>

    <comment type="line">//-1ï¿½Åï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Bï¿½Åï¿½ï¿½Íï¿½ï¿½×Äoï¿½ï¿½ï¿½oï¿½ï¿½</comment>
    <constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>N</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>parent</name> <operator>=</operator> <call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>N</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <comment type="line">//Aï¿½ï¿½ï¿½ÇÌOï¿½ï¿½ï¿½[ï¿½vï¿½Éï¿½ï¿½ï¿½ï¿½Äï¿½ï¿½é©(Aï¿½Ìï¿½)ï¿½ð²×ï¿½</comment>
    <function><type><name>int</name></type> <name>root</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name><name>parent</name><index>[<expr><name>A</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>A</name></expr>;</return></block></then></if>
        <return>return <expr><name><name>parent</name><index>[<expr><name>A</name></expr>]</index></name><operator>=</operator><call><name>root</name><argument_list>(<argument><expr><name><name>parent</name><index>[<expr><name>A</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <comment type="line">//ï¿½ï¿½ï¿½ï¿½ï¿½Ìï¿½ï¿½ï¿½Oï¿½ï¿½ï¿½[ï¿½vï¿½Ìï¿½ï¿½_ï¿½ï¿½ï¿½ð²×ï¿½</comment>
    <function><type><name>int</name></type> <name>size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><operator>-</operator><name><name>parent</name><index>[<expr><call><name>root</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
    }</block></function>

    <comment type="line">//Aï¿½ï¿½Bï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Âï¿½ï¿½ï¿½</comment>
    <function><type><name>bool</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>B</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">//Aï¿½ï¿½Bï¿½ð¼ÚÂÈï¿½ï¿½ÌÅÍÈï¿½ï¿½Aroot(A)ï¿½ï¿½root(B)ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Âï¿½ï¿½ï¿½</comment>
        <expr_stmt><expr><name>A</name> <operator>=</operator> <call><name>root</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>B</name> <operator>=</operator> <call><name>root</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//ï¿½ï¿½ï¿½Éï¿½ï¿½ï¿½ï¿½Âï¿½ï¿½Äï¿½ï¿½é©ï¿½ç­ï¿½ï¿½ï¿½Âï¿½ï¿½Èï¿½</comment>
        <if>if<condition>(<expr><name>A</name> <operator>==</operator> <name>B</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if> 

        <comment type="line">//ï¿½å«ï¿½ï¿½ï¿½Ùï¿½(A)ï¿½Éï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ùï¿½(B)ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Âï¿½ï¿½ï¿½</comment>
        <comment type="line">//ï¿½å¬ï¿½ï¿½ï¿½tï¿½Èï¿½Ðï¿½ï¿½ï¿½ï¿½ï¿½Ôï¿½</comment>
        <if>if<condition>(<expr><call><name>size</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>size</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>A</name></expr></argument>,<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

        <comment type="line">//Aï¿½ÌTï¿½Cï¿½Yï¿½ï¿½ï¿½Xï¿½Vï¿½ï¿½ï¿½ï¿½</comment>
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>A</name></expr>]</index></name> <operator>+=</operator> <name><name>parent</name><index>[<expr><name>B</name></expr>]</index></name></expr>;</expr_stmt>
        <comment type="line">//Bï¿½Ìeï¿½ï¿½Aï¿½ÉÏXï¿½ï¿½ï¿½ï¿½</comment>
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>B</name></expr>]</index></name> <operator>=</operator> <name>A</name></expr>;</expr_stmt>

        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>

    <comment type="line">//Aï¿½ï¿½Bï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Oï¿½ï¿½ï¿½[ï¿½vï¿½Èï¿½trueï¿½ï¿½Ôï¿½</comment>
    <function><type><name>bool</name></type> <name>same</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>B</name></decl></parameter>)</parameter_list><block>{
        <return>return <expr><call><name>root</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call><operator>==</operator><call><name>root</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function> 
</public>}</block>;</class>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>UnionFind</name></type> <name>uni</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><name>n</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>bool</name></type> <name><name>used</name><index>[<expr><name>n</name></expr>]</index></name><init>=<expr><block>{}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>dist</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>dist</name> <operator>*=</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name></type> <name>a</name> <init>= <expr><block>{<expr><name>dist</name></expr>,<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <decl_stmt><decl><type><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name></type> <name>a</name> <init>= <expr><block>{<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><name>i</name></expr>,<expr><name>i</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>st</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>pa</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>v</name></expr></range></decl></init>)</control><block>{
        <if>if<condition>(<expr><name><name>used</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>used</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if<condition>(<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>st</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>used</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><call><name><name>uni</name><operator>.</operator><name>same</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>used</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
            }</block></for>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if<condition>(<expr><call><name><name>uni</name><operator>.</operator><name>same</name></name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then>
        <else>else<block>{
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>i</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>pos</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>uni</name><operator>.</operator><name>unite</name></name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><call><name><name>uni</name><operator>.</operator><name>same</name></name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                    <if>if<condition>(<expr><name><name>used</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
                }</block></then></if>
            }</block></for>
            <if>if<condition>(<expr><name>pos</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>used</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>used</name><index>[<expr><name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
                    <if>if<condition>(<expr><call><name><name>uni</name><operator>.</operator><name>same</name></name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>used</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
                }</block></for>
            }</block></then></if>
            <expr_stmt><expr><call><name><name>pa</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>i</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>i</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <comment type="line">// for(auto i:v){</comment>
    <comment type="line">//     if(used[i[1]] &amp;&amp; used[i[2]]) continue;</comment>
    <comment type="line">//     if(!used[i[2]] &amp;&amp; !used[i[1]]){</comment>
    <comment type="line">//         if(i[0] + min(c[i[1]],c[i[2]]) &gt; c[i[1]] + c[i[2]]){</comment>
    <comment type="line">//             ans += c[i[1]] + c[i[2]];</comment>
    <comment type="line">//             st.push_back(i[1]);</comment>
    <comment type="line">//             st.push_back(i[2]);</comment>
    <comment type="line">//         }</comment>
    <comment type="line">//         else{</comment>
    <comment type="line">//             ans += i[0] + min(c[i[1]],c[i[2]]);</comment>
    <comment type="line">//             pa.push_back(make_pair(i[1],i[2]));</comment>
    <comment type="line">//             if(c[i[1]] &gt; c[i[2]]) st.push_back(i[2]);</comment>
    <comment type="line">//             else st.push_back(i[1]);</comment>
    <comment type="line">//         }</comment>
    <comment type="line">//     }</comment>
    <comment type="line">//     else if(used[i[1]]){</comment>
    <comment type="line">//         if(i[0] &lt; c[i[2]]){</comment>
    <comment type="line">//             ans += i[0];</comment>
    <comment type="line">//             pa.push_back(make_pair(i[1],i[2]));</comment>
    <comment type="line">//         }</comment>
    <comment type="line">//         else{</comment>
    <comment type="line">//             ans += c[i[2]];</comment>
    <comment type="line">//             st.push_back(i[2]);</comment>
    <comment type="line">//         }</comment>
    <comment type="line">//     }</comment>
    <comment type="line">//     else{</comment>
    <comment type="line">//         if(i[0] &lt; c[i[1]]){</comment>
    <comment type="line">//             ans += i[0];</comment>
    <comment type="line">//             pa.push_back(make_pair(i[1],i[2]));</comment>
    <comment type="line">//         }</comment>
    <comment type="line">//         else{</comment>
    <comment type="line">//             ans += c[i[1]];</comment>
    <comment type="line">//             st.push_back(i[1]);</comment>
    <comment type="line">//         }</comment>
    <comment type="line">//     }</comment>
    <comment type="line">//     used[i[1]] = true;</comment>
    <comment type="line">//     used[i[2]] = true;</comment>
    <comment type="line">// }</comment>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>st</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>st</name></expr></range></decl></init>)</control><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>pa</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>pa</name></expr></range></decl></init>)</control><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></for>
}</block></function></unit>
