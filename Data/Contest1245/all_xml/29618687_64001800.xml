<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618687_64001800.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>beats</name> <init>= <expr><block>{<expr><block>{<expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>,
			 <expr><block>{<expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'S'</literal></expr>}</block></expr>,
			 <expr><block>{<expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'R'</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>index</name> <init>= <expr><block>{<expr><block>{<expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,
			<expr><block>{<expr><literal type="char">'P'</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
			<expr><block>{<expr><literal type="char">'S'</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>moves</name> <init>= <expr><block>{<expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'S'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>counts</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>counts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      }</block></for>
      <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>string</name></type> <name>sol</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>won</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>require</name> <init>= <expr><operator>(</operator><name>n</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
	<decl_stmt><decl><type><name>auto</name></type> <name>need</name> <init>= <expr><name><name>beats</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>auto</name></type> <name>ind</name> <init>= <expr><name><name>index</name><index>[<expr><name>need</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>counts</name><index>[<expr><name>ind</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
	  <expr_stmt><expr><name><name>sol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>need</name></expr>;</expr_stmt>
	  <expr_stmt><expr><name><name>counts</name><index>[<expr><name>ind</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
	  <expr_stmt><expr><name>won</name><operator>++</operator></expr>;</expr_stmt>
	}</block></then></if>
      }</block></for>

      <if>if <condition>(<expr><name>won</name> <operator>&lt;</operator> <name>require</name></expr>)</condition><then> <block>{
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
      }</block></then> <else>else <block>{

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
	  <if>if <condition>(<expr><name><name>sol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block>{
	    <for>for <control>(<init><decl><type><name>int</name></type> <name>type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control> <block>{
	      <if>if <condition>(<expr><name><name>counts</name><index>[<expr><name>type</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>sol</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>moves</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>counts</name><index>[<expr><name>type</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
		<break>break;</break>
	      }</block></then></if>
	    }</block></for>
	  }</block></then></if>
	}</block></for>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>sol</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

      }</block></else></if>
    }</block></while>
    
}</block></function>
</unit>
