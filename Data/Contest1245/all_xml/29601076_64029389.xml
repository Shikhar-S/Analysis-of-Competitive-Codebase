<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29601076_64029389.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1e9+7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf2</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb2</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name></cpp:macro> <cpp:value>size</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fod</name></cpp:macro> <cpp:value>find_by_order</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fastio</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0);cin.tie(NULL);cout.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ofk</name></cpp:macro> <cpp:value>order_of_key</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>val</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; "Value dari "&lt;&lt; #x &lt;&lt; " adalah " &lt;&lt; x  &lt;&lt; "\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tr</name></cpp:macro> <cpp:value>tree&lt;int,null_type,less&lt;int&gt;,rb_tree_tag,tree_order_statistics_node_update&gt;</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dy</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>readf</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>+</operator><literal type="string">".in"</literal><operator>)</operator><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>+</operator><literal type="string">".out"</literal><operator>)</operator><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>pr</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><operator>(</operator><name>x</name><operator>+</operator><literal type="string">".in"</literal><operator>)</operator><operator>.</operator><call><name>c_str</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>bool</name></type> <name>min</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>  <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{
		<if>if<condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<if>if<condition>(<expr><name>ch</name> <operator>&gt;=</operator><literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>ch</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<if>if<condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>min</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then><else>else <block type="pseudo"><expr_stmt><expr><name>result</name> <operator>=</operator> <name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></else></if>
	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>ch</name> <operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>ch</name><argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>ch</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
	}</block></while>
	<if>if<condition>(<expr><name>min</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><name>result</name></expr>;</return></block></then></if>
	<return>return <expr><name>result</name></expr>;</return>
}</block></function>
<comment type="line">//Reynaldo's Template</comment>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ck1</name></decl>, <decl><type ref="prev"/><name>ck2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>tmp1</name></decl>, <decl><type ref="prev"/><name>tmp2</name></decl>;</decl_stmt>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>konversi_digit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt> 
	<while>while<condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{
		<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>a</name> <operator>%</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	}</block></while>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	
	<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>v</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>rec</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<comment type="line">//cout &lt;&lt; pos &lt;&lt; " " &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; "sad\n";</comment>
	<if>if <condition>(<expr><name>pos</name> <operator>==</operator> <call><name><name>ck1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	
	<if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr> )</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name><name>ck1</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>ck2</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name><name>ck1</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then> <block>{
			<comment type="line">//ans = ans + rec(pos+1, 1, 0);</comment>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<elseif>else <if>if<condition>(<expr><name><name>ck2</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<else>else <block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><operator>!</operator><name>a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>b</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">3</literal> <operator>*</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></elseif>
	<elseif>else <if>if<condition>(<expr><name>a</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name><name>ck1</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name><name>ck2</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>rec</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		
	}</block></then></if></elseif></if>
	<comment type="line">//9cout &lt;&lt;pos &lt;&lt; " " &lt;&lt; a &lt;&lt; " " &lt;&lt; b &lt;&lt; " "&lt;&lt;  ans &lt;&lt; "sad\n";</comment>
	
	<return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>ans</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp1</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tmp2</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
	
	<return>return <expr><call><name>rec</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ck1</name> <operator>=</operator> <call><name>konversi_digit</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ck2</name> <operator>=</operator> <call><name>konversi_digit</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>	
		
		<if>if <condition>(<expr><name>a</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			
			<expr_stmt><expr><name>ck1</name> <operator>=</operator> <call><name>konversi_digit</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ck2</name> <operator>=</operator> <call><name>konversi_digit</name><argument_list>(<argument><expr><name>a</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//	cout &lt;&lt; ans &lt;&lt; "sad\n";</comment>
			<expr_stmt><expr><name>ck1</name> <operator>=</operator> <call><name>konversi_digit</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ck2</name> <operator>=</operator> <call><name>konversi_digit</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <call><name>solve</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
		
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>	
	}</block></while>
}</block></function>
</unit>
