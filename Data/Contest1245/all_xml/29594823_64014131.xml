<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29594823_64014131.cpp"> 
<comment type="line">//#pragma GCC optimize("Ofast")</comment>
<comment type="line">//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")</comment>
<comment type="line">//#pragma GCC optimize("unroll-loops")</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>void</name></type> <name>file</name><parameter_list>()</parameter_list><block>{
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"tst.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">3e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>,<decl><type ref="prev"/><name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>memo</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indx</name></decl></parameter>)</parameter_list><block>{
	<if>if <condition>(<expr><name>indx</name><operator>==</operator><call><name>sz</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><then>
        	<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    	<decl_stmt><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>ret</name><init>=<expr><name><name>memo</name><index>[<expr><name>indx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    	<if>if <condition>(<expr><operator>~</operator><name>ret</name></expr>)</condition><then>
       	 <block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if>
    	<expr_stmt><expr><name>ret</name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
    	<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>indx</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal> <operator>||</operator> <name><name>a</name><index>[<expr><name>indx</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal></expr>)</condition><then>
        	<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    	<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>indx</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then>
       		<block type="pseudo"><expr_stmt><expr><name>ret</name><operator>+=</operator><operator>(</operator><call><name>solve</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr><operator>,</operator><expr><name>ret</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>
    	<if>if <condition>(<expr><name><name>a</name><index>[<expr><name>indx</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then>
        	<block type="pseudo"><expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>solve</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>ret</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>
   	
   	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{	
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	<expr_stmt><expr><call><name>file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

 	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>

 	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>memo</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

 	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>solve</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>



}</block></function></unit>
