<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29599371_64023633.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name><name>maps</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>num</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>val</name><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>jump</name><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>dp</name><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="line">// last = 1 -&gt; ladder last move</comment>
<function><type><name>double</name></type> <name>rec</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>idx</name> <operator>==</operator> <literal type="number">100</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>last</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>last</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>double</name></type> <name>ladder</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>last</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>val</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then><block>{ <comment type="line">// can choose ladder</comment>
        <expr_stmt><expr><name>ladder</name> <operator>=</operator> <call><name>rec</name><argument_list>(<argument><expr><name><name>jump</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>double</name></type> <name>roll</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{ <comment type="line">// roll dice</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>nx</name> <init>= <expr><name>idx</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>nx</name> <operator>&lt;=</operator> <literal type="number">100</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>roll</name> <operator>+=</operator> <call><name>rec</name><argument_list>(<argument><expr><name>nx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <if>if<condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>roll</name> <operator>/=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block></then>
    <else>else<block>{
        <expr_stmt><expr><name>roll</name> <operator>=</operator> <name>roll</name> <operator>/</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>cnt</name><operator>)</operator></expr>;</expr_stmt>
    }</block></else></if>
    <decl_stmt><decl><type><name>double</name></type> <name>res</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>roll</name></expr></argument>, <argument><expr><name>ladder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>vis</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <comment type="line">// cout &lt;&lt; idx &lt;&lt; " " &lt;&lt; last &lt;&lt; " -&gt; " &lt;&lt; res &lt;&lt; " " &lt;&lt; cnt &lt;&lt; endl;</comment>
    <return>return <expr><name><name>dp</name><index>[<expr><name>idx</name></expr>]</index><index>[<expr><name>last</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>vis</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
                <expr_stmt><expr><name><name>val</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>cnt</name><operator>++</operator></expr>;</expr_stmt>
            }</block></for>
        }</block></then><else>else<block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>j</name></expr></incr>)</control><block>{
                <expr_stmt><expr><name><name>val</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>cnt</name><operator>++</operator></expr>;</expr_stmt>
            }</block></for>
        }</block></else></if>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>maps</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>jump</name><index>[<expr><name><name>num</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name><name>num</name><index>[<expr><name>i</name> <operator>-</operator> <name><name>maps</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></for>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>rec</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

}</block></function></unit>
