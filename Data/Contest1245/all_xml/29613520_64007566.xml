<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613520_64007566.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pp</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>DIM</name> <init>= <expr><literal type="number">507</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">10000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><call><name>ll</name><argument_list>(<argument><expr><literal type="number">1000000007</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = 1;i&lt;=n;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x1</name></cpp:macro> <cpp:value>Artem</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>Pidor</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>LOG</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>null_type</name></expr></argument>, <argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name>rb_tree_tag</name></expr></argument>, <argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>my_super_set</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">//freopen("input.txt","r",stdin);</comment>
    <comment type="line">//ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);</comment>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <macro><name>forn</name><argument_list>(<argument>query</argument>,<argument>t</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>r1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r2</name><init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r3</name><init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v1</name></decl>,<decl><type ref="prev"/><name>v2</name></decl>,<decl><type ref="prev"/><name>v3</name></decl>;</decl_stmt>
        <macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
            <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>ch</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>r1</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if <condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>r2</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then></if></elseif>
            <else>else <block>{<expr_stmt><expr><name>r3</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><call><name><name>v3</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></else></if>
        }</block>
        <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>r3</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>r1</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//cout&lt;&lt;res&lt;&lt;endl;</comment>

        <if>if <condition>(<expr><name>res</name><operator>*</operator><literal type="number">2</literal><operator>&gt;=</operator><name>n</name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>V</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vis</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>vis</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name><name>V</name><index>[<expr><name><name>v3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>v3</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></for>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name><name>V</name><index>[<expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></for>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name><name>V</name><index>[<expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name>a</name><operator>-=</operator><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>r3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>-=</operator><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name><operator>-=</operator><call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                       <comment type="line">// cout&lt;&lt;1;</comment>
                    <if>if <condition>(<expr><name>a</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                    }</block></then>
                    <elseif>else <if>if <condition>(<expr><name>b</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                    }</block></then></if></elseif>
                    <else>else<block>{
                        <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></then>
                <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
            }</block></for>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
