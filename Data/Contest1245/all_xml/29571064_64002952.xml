<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29571064_64002952.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<namespace>namespace <name>csx_std</name> <block>{
	<using>using <namespace>namespace <name>std</name>;</namespace></using>
	<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (register int i=(a);i&lt;=(b);i++)</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (register int i=(a);i&gt;=(b);i--)</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(i,j,sizeof(i))</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GO</name><parameter_list>(<parameter><type><name>u</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (register int j=f[u];j!=-1;j=nxt[j])</cpp:value></cpp:define>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
	<function><specifier>inline</specifier> <type><name>int</name></type> <name>qpow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<decl_stmt><decl><type><name>int</name></type> <name>ret</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><for>for <control>(<init>;</init><condition><expr><name>y</name></expr>;</condition><incr><expr><name>y</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>x</name><operator>=</operator><literal type="number">1LL</literal><operator>*</operator><name>x</name><operator>*</operator><name>x</name><operator>%</operator><name>mod</name></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name><operator>=</operator><literal type="number">1LL</literal><operator>*</operator><name>ret</name><operator>*</operator><name>x</name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if></block></for><return>return <expr><name>ret</name></expr>;</return>}</block></function>
	<function><specifier>inline</specifier> <type><name>int</name></type> <name>Inv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><call><name>qpow</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>upd</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><literal type="number">1LL</literal><operator>*</operator><name>x</name><operator>+</operator><name>y</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt><return>return;</return>}</block></function>
	<function><specifier>inline</specifier> <type><name>int</name></type> <name>chkmax</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name><operator>&lt;</operator><name>y</name><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><name>x</name><operator>=</operator><name>y</name><operator>,</operator><literal type="number">1</literal><operator>)</operator></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>}</block></function>
	<function><specifier>inline</specifier> <type><name>int</name></type> <name>chkmin</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><ternary><condition><expr><operator>(</operator><name>x</name><operator>&gt;</operator><name>y</name><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><name>x</name><operator>=</operator><name>y</name><operator>,</operator><literal type="number">1</literal><operator>)</operator></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>}</block></function>
	<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition> <block>{<if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
		<while>while <condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition> <block>{<expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
		<return>return <expr><name>f</name><operator>*</operator><name>x</name></expr>;</return>
	}</block></function>
	<function><specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>x</name><operator>&gt;</operator><literal type="number">9</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>x</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	}</block></function>
}</block></namespace>
<using>using <namespace>namespace <name>csx_std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt</name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name><operator>=</operator><call><name>strlen</name><argument_list>(<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
	<macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1ll</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
	}</block>
	<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>n</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><literal type="number">1ll</literal><operator>*</operator><name>ans</name><operator>*</operator><name><name>f</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
