pragma directive name name name literal name include directive file include directive file include directive file define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name parameter_list parameter type name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value using namespace name using namespace name using template parameter_list parameter type name name name init type name name argument_list type generic argument expr name argument expr name argument expr name name argument_list type generic argument expr name argument expr name argument expr name using template parameter_list parameter type name name name init type name name argument_list type generic argument expr name argument expr name argument expr name name argument_list type generic argument expr name argument expr name argument expr name decl_stmt decl type name name argument_list argument expr call name name operator name operator name argument_list operator call name argument_list operator call name argument_list decl_stmt decl type name name argument_list argument expr call name name operator name operator name argument_list operator call name argument_list operator call name argument_list comment type line comment type line decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type name name name index expr name decl_stmt decl type name name name index expr name decl_stmt decl type name name decl_stmt decl type name name name index expr literal type number decl_stmt decl type name name name index expr literal type number decl_stmt decl type name name name index expr literal type number decl_stmt decl type name name name index expr literal type number function type name name argument_list type generic argument expr name argument expr name name parameter_list parameter decl type name name block if condition expr name operator literal type number then block type pseudo return expr block expr literal type number expr literal type number if condition expr name operator literal type number then block type pseudo return expr block expr literal type number expr literal type number if condition expr name operator literal type number then block type pseudo return expr block expr literal type number expr literal type number if condition expr name operator literal type number then block type pseudo return expr block expr literal type number expr literal type number if condition expr name operator literal type number then block type pseudo return expr block expr literal type number expr literal type number if condition expr name operator literal type number then block type pseudo return expr block expr literal type number expr literal type number if condition expr name operator literal type number then block type pseudo return expr block expr literal type number expr literal type number if condition expr name operator literal type number then block type pseudo return expr block expr literal type number expr literal type number if condition expr name operator literal type number then block type pseudo return expr block expr literal type number expr literal type number decl_stmt decl type name name name index expr name function type name name parameter_list parameter decl type name name block if condition expr name operator literal type number then block return expr literal type char if condition expr name operator literal type number then block return expr literal type char if condition expr name operator literal type number then block return expr literal type char function name parameter_list block expr_stmt expr name decl_stmt decl type name name expr_stmt expr name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name operator name expr_stmt expr name operator name name index expr literal type number operator name name index expr literal type number operator name name index expr literal type number expr_stmt expr call name argument_list argument expr name name index expr literal type number argument expr name name index expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name operator name name index expr name if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr name name index expr name operator literal type number elseif if condition expr name name index expr name operator literal type char then block type pseudo expr_stmt expr name name index expr name operator literal type number else block type pseudo expr_stmt expr name name index expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr name name index expr name operator literal type number decl_stmt decl type name name init expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator literal type number then block if condition expr name name index expr literal type number then block expr_stmt expr operator name name index expr literal type number expr_stmt expr operator name expr_stmt expr name name index expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator literal type number then block if condition expr name name index expr literal type number then block expr_stmt expr operator name name index expr literal type number expr_stmt expr operator name expr_stmt expr name name index expr name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr name name index expr name operator literal type number then block if condition expr name name index expr literal type number then block expr_stmt expr operator name name index expr literal type number expr_stmt expr operator name expr_stmt expr name name index expr name operator literal type number if condition expr name operator operator name operator literal type number operator operator literal type number then block expr_stmt expr name operator literal type string operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block if condition expr operator name name index expr name then block for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr operator name block if condition expr name name index expr name then block expr_stmt expr operator name name index expr name expr_stmt expr name name index expr name operator name break expr_stmt expr name operator call name argument_list argument expr name name index expr name else block expr_stmt expr name operator literal type string expr_stmt expr name operator name 
