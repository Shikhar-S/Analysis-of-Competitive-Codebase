<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616000_64013802.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cnt</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>cnt</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>cnt</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>cnt</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>, <argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>mp</name> <init>= <expr><block>{<expr><block>{<expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'P'</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'P'</literal></expr>, <expr><literal type="char">'S'</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="char">'S'</literal></expr>, <expr><literal type="char">'R'</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>ans</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name><name>mp</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>mp</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>mp</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>score</name><operator>++</operator></expr>;</expr_stmt>
			}</block></then></if>
		}</block></for>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
			<if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'?'</literal></expr>)</condition><then> <block>{
				<continue>continue;</continue>
			}</block></then></if>
			<for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>it</name><operator>:</operator> <name>cnt</name></expr></init>)</control> <block>{
				<if>if <condition>(<expr><name><name>it</name><operator>.</operator><name>second</name></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>it</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt>
					<expr_stmt><expr><name><name>it</name><operator>.</operator><name>second</name></name><operator>--</operator></expr>;</expr_stmt>
					<break>break;</break>
				}</block></then></if>
			}</block></for>
		}</block></for>
		<if>if <condition>(<expr><name>score</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></while>
}</block></function></unit>
