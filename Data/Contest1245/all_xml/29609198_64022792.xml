<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29609198_64022792.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cfloat&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;memory&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name></cpp:macro> <cpp:value>size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).begin(), (c).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=(a);i&lt;(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=b-1LL;i&gt;=(a);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a), (b) ,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ctos</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>string(1,c)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;#x&lt;&lt;" = "&lt;&lt;x&lt;&lt;endl;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>uf</name></decl>, <decl><type ref="prev"/><name>usz</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>nc</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>uf_</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>usz_</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>uf</name> <operator>=</operator> <name>uf_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>usz</name> <operator>=</operator> <name>usz_</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nc</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>uf</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <expr_stmt><expr><name><name>uf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  }</block></for>
}</block></function>

<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>uf</name><index>[<expr><name>a</name></expr>]</index></name> <operator>==</operator> <name>a</name><operator>)</operator></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><name><name>uf</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>uf</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>union_</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
  <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if<condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition><then><block>{
    <if>if<condition>(<expr><name><name>usz</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>usz</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then><block>{
      <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>uf</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>usz</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+=</operator> <name><name>usz</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>nc</name><operator>--</operator></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
  <return>return <expr><ternary><condition><expr><operator>(</operator><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>get_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
  <return>return <expr><name><name>usz</name><index>[<expr><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>v2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vp</name></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vp</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>va</name></decl>,<decl><type ref="prev"/><name>vb</name></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>va</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>vb</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>va</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
    <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
      <if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
      <decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>vp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>-</operator><name><name>vp</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>fi</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>vp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name><operator>-</operator><name><name>vp</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>se</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><operator>(</operator><name><name>vb</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>vb</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>a</name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
  }</block>
  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>v.sz</argument>)</argument_list></macro><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name> <init>= <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>fi</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>b</name> <init>= <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>se</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>union_</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>(<expr><name>b</name><operator>==</operator><name>n</name></expr>)</condition><then><block>{
        <expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else>else<block>{
        <expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if>
    <if>if<condition>(<expr><name>nc</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
  }</block>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v1</name><operator>.</operator><name>sz</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>v1.sz</argument>)</argument_list></macro><block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>i</name><operator>!=</operator><name><name>v1</name><operator>.</operator><name>sz</name></name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></then></if>
  }</block>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v2</name><operator>.</operator><name>sz</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>v2.sz</argument>)</argument_list></macro><block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>v2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
