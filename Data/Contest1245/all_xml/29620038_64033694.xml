<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29620038_64033694.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2005</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>pa</name><index>[<expr><name>N</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>sz</name><index>[<expr><name>N</name></expr>]</index></name></decl> ;</decl_stmt>

<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name><name>pa</name><index>[<expr><name>node</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>node</name></expr> ;</return></block></then>
	<else>else<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>par</name><init>=<expr><call><name>find</name><argument_list>(<argument><expr><name><name>pa</name><index>[<expr><name>node</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
		<expr_stmt><expr><name><name>pa</name><index>[<expr><name>node</name></expr>]</index></name><operator>=</operator><name>par</name></expr>;</expr_stmt>
		<return>return <expr><name>par</name></expr> ;</return>
	}</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name><name>sz</name><index>[<expr><name>a</name></expr>]</index></name><operator>&gt;</operator><name><name>sz</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then></if>
	<expr_stmt><expr><name><name>pa</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>b</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>sz</name><index>[<expr><name>b</name></expr>]</index></name><operator>+=</operator><name><name>sz</name><index>[<expr><name>a</name></expr>]</index></name></expr> ;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>connections</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>powerStations</name></decl> ;</decl_stmt>

<function><name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> ;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>sz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr> ;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>y</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name><name>k</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl> ;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
		<expr_stmt><expr><name><name>sz</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr> ;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pa</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pa</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>  <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt></block></for>	
	
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> , <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>, <expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>,<expr><name>i</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>edges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>edges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>totalcost</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>left</name><init>=<expr><name>n</name></expr></init></decl> ;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>left</name><operator>&gt;</operator><literal type="number">0</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>cost</name><init>=<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl> ;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>=<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr></init></decl> ;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>b</name><init>=<expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr></init></decl> ;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ca</name><init>=<expr><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cb</name><init>=<expr><call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
		<if>if<condition>(<expr><name>ca</name><operator>==</operator><name>cb</name></expr>)</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
		<expr_stmt><expr><name>totalcost</name><operator>+=</operator><name>cost</name></expr> ;</expr_stmt>
		<expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>ca</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		<if>if<condition>(<expr><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><call><name><name>powerStations</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><call><name><name>connections</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>a</name></expr>,<expr><name>b</name></expr>}</block></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>left</name><operator>--</operator></expr> ;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>totalcost</name> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>powerStations</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><range>:<expr><name>powerStations</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr> ;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>connections</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>p</name><range>: <expr><name>connections</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt></block></for>

	<return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function></unit>
