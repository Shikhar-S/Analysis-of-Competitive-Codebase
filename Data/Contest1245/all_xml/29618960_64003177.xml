<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618960_64003177.cpp"><comment type="block">/* Author: chenxiaoyan's girlfriend
 * Time: 2019-11-01 22:48:04
 */</comment> <comment type="line">// I love chenxiaoyan!</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">1000005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>fib</name><index>[<expr><literal type="number">1000005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>long</name> <name>long</name></type> <name>get_val</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>num</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <return>return <expr><name><name>fib</name><index>[<expr><name>num</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>fib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name><name>fib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>fib</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></for>
  <if>if <condition>(<expr><call><name>count</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>count</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
    <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>char</name></type> <name>last</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name>last</name> <operator>!=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>last</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name>last</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then>
          <block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <call><name>get_val</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      }</block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></then>
    <else>else <block>{
      <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <call><name>get_val</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>cnt</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>last</name> <operator>=</operator> <name><name>str</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>
  <if>if <condition>(<expr><name>last</name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name>last</name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <call><name>get_val</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>mod</name></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
