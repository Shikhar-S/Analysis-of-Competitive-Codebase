<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618498_64006185.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><name>ll</name></type> <name>BASE_NUM</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>rps_count</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>S</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>S</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>rps_count</name><index>[<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>ll</name></type> <name>wins</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>r_wins</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name><name>rps_count</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>p_wins</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name><name>rps_count</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>s_wins</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>rps_count</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>r_not_wins</name> <init>= <expr><name>r</name> <operator>-</operator> <name>r_wins</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>p_not_wins</name> <init>= <expr><name>p</name> <operator>-</operator> <name>p_wins</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>s_not_wins</name> <init>= <expr><name>s</name> <operator>-</operator> <name>s_wins</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>wins</name><operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name><name>rps_count</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wins</name><operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name><name>rps_count</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wins</name><operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name><name>rps_count</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>wins</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator>  <literal type="char">'S'</literal></expr>)</condition><then><block>{
                <if>if <condition>(<expr><name>r_wins</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>r_wins</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                }</block></then><else>else<block>{
                    <if>if <condition>(<expr><name>p_not_wins</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>p_not_wins</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                    }</block></then><else>else<block>{
                        <expr_stmt><expr><name>s_not_wins</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></then><elseif>else <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator>  <literal type="char">'R'</literal></expr>)</condition><then><block>{
                <if>if <condition>(<expr><name>p_wins</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>p_wins</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                }</block></then><else>else<block>{
                    <if>if <condition>(<expr><name>s_not_wins</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>s_not_wins</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                    }</block></then><else>else<block>{
                        <expr_stmt><expr><name>r_not_wins</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></then></if></elseif><else>else<block>{
                <if>if <condition>(<expr><name>s_wins</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>s_wins</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                }</block></then><else>else<block>{
                    <if>if <condition>(<expr><name>r_not_wins</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>r_not_wins</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                    }</block></then><else>else<block>{
                        <expr_stmt><expr><name>p_not_wins</name><operator>--</operator></expr>;</expr_stmt>
                        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                    }</block></else></if>
                }</block></else></if>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>t</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
   <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
