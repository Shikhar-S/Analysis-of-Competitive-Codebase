<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29596672_64034427.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input</name></cpp:macro>   <cpp:value>std::cin</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output</name></cpp:macro>  <cpp:value>std::cout</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>num</name></cpp:macro>     <cpp:value>int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llg</name></cpp:macro>     <cpp:value>long long</cpp:value></cpp:define>

<function><type><name>llg</name></type> <name>absolute</name><parameter_list>(<parameter><decl><type><name>llg</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>-</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro>    <cpp:value>2005</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name></name></type> <name>V</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>std</name><operator>::</operator><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></expr></argument>&gt;</argument_list></name></name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name><name>edges2</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>llg</name></expr></argument>&gt;</argument_list></name></name></type> <name>C</name></decl>, <decl><type ref="prev"/><name>K</name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>addEdge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name><name>edges2</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>edges2</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>, <expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>llg</name></type> <name><name>cost</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>llg</name></type> <name><name>min</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>parent</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>rang</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>_find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
    <return>return <expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>_find</name><argument_list>(<argument><expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>_union</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>llg</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orig_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>orig_y</name></decl></parameter>)</parameter_list> <block>{
    <comment type="line">//std::cout &lt;&lt; "hi\n";</comment>
    <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <comment type="line">//std::cout &lt;&lt; "bye\n";</comment>
    <expr_stmt><expr><call><name>addEdge</name><argument_list>(<argument><expr><name>orig_x</name></expr></argument>, <argument><expr><name>orig_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name><name>rang</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name><name>rang</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><operator>++</operator> <name><name>rang</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cost</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <name>w</name> <operator>-</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>min</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>min</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>min</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cost</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name><name>min</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then>   <elseif>else
    <if>if <condition>(<expr><name><name>rang</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name><name>rang</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cost</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <name>w</name> <operator>-</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>min</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>min</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>min</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cost</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>min</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if></elseif>
    <else>else <block>{
        <expr_stmt><expr><name><name>parent</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cost</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <name>w</name> <operator>-</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>min</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>min</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>min</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cost</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name><name>min</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    }</block></else></if>
}</block></function>

<struct>struct <name>edge</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>llg</name></type> <name>w</name></decl>;</decl_stmt>
    <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>edge</name><modifier>&amp;</modifier></type> <name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
        <return>return <expr><name>w</name> <operator>&lt;</operator> <name><name>other</name><operator>.</operator><name>w</name></name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>  <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></name></type> <name>edges</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>bool</name></type> <name><name>seen</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>vv</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>DFS</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vertex</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>vv</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>vv</name> <operator>=</operator> <name>vertex</name></expr>;</expr_stmt></block></then>
    <elseif>else <if>if <condition>(<expr><name><name>C</name><index>[<expr><name>vertex</name></expr>]</index></name> <operator>&lt;</operator> <name><name>C</name><index>[<expr><name>vv</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>vv</name> <operator>=</operator> <name>vertex</name></expr>;</expr_stmt></block></then></if></elseif></if>
    <expr_stmt><expr><name><name>seen</name><index>[<expr><name>vertex</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>it</name><operator>:</operator><name><name>edges2</name><index>[<expr><name>vertex</name></expr>]</index></name></expr></init>)</control>
        <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>seen</name><index>[<expr><name>it</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>DFS</name><argument_list>(<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>input</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>C</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>K</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>it</name><operator>:</operator><name>V</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>input</name> <operator>&gt;&gt;</operator> <name><name>it</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>it</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>it</name><operator>:</operator><name>C</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>input</name> <operator>&gt;&gt;</operator> <name>it</name></expr><operator>,</operator> <expr><name><name>min</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>cnt</name></expr>]</index></name> <operator>=</operator> <name>it</name></expr><operator>,</operator> <expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>it</name><operator>:</operator><name>K</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>input</name> <operator>&gt;&gt;</operator> <name>it</name></expr>;</expr_stmt></block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>llg</name></type> <name>val</name> <init>= <expr><operator>(</operator><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>K</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>absolute</name><argument_list>(<argument><expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><name><name>V</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>absolute</name><argument_list>(<argument><expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name><operator>-</operator><name><name>V</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
            <comment type="line">//if (val &gt;= C[i] &amp;&amp; val &gt;= C[j]);</comment>
            <comment type="line">//else edges.push_back({i, j, val});</comment>
            <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>, <expr><name>val</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for></block></for>

    <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>sort</name></name><argument_list>(<argument><expr><call><name><name>edges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>edges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>idx</name> <operator>&lt;</operator> <call><name><name>edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>edges</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><name><name>edges</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>llg</name></type> <name>w</name> <init>= <expr><name><name>edges</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>w</name></expr></init></decl>;</decl_stmt>
        <comment type="line">//std::cout &lt;&lt; "edge " &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; ' ' &lt;&lt; w &lt;&lt; '\n';</comment>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>_find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>_find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//std::cout &lt;&lt; "edge " &lt;&lt; x &lt;&lt; ' ' &lt;&lt; y &lt;&lt; '\n';</comment>
        <comment type="line">//std::cout &lt;&lt; "edge " &lt;&lt; cost[x] &lt;&lt; ' ' &lt;&lt; cost[y] &lt;&lt; '\n';</comment>
        <comment type="line">//std::cout &lt;&lt; "edge " &lt;&lt; min[x] &lt;&lt; ' ' &lt;&lt; min[y] &lt;&lt; '\n';</comment>
        <decl_stmt><decl><type><name>llg</name></type> <name>v</name> <init>= <expr><name><name>cost</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <name>w</name> <operator>-</operator> <call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name><name>min</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>min</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <comment type="line">//std::cout &lt;&lt;  v &lt;&lt; '\n';</comment>
        <if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name><name>cost</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name><name>cost</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>_union</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>edges</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>, <argument><expr><name><name>edges</name><index>[<expr><name>idx</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><operator>++</operator> <name>idx</name></expr>;</expr_stmt>
    }</block></while>

    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>ans2</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><if>if <condition>(<expr><operator>!</operator><name><name>seen</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>vv</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><call><name>DFS</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>ans2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>vv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>

    <decl_stmt><decl><type><name>llg</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>N</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <name>sum</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <call><name><name>ans2</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>it</name><operator>:</operator><name>ans2</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <name>it</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>it</name><operator>:</operator><name>ans</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>output</name> <operator>&lt;&lt;</operator> <name><name>it</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal> <operator>&lt;&lt;</operator> <name><name>it</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="block">/*
5
1 1
1 2
1 3
1 4
1 5
10 10 10 10 10
1 1 1 1 1
*/</comment>
</unit>
