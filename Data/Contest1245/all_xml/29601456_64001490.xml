<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29601456_64001490.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mx</name></cpp:macro> <cpp:value>100009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><name>mx</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>mx</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>func</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ind</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>ind</name><operator>&gt;=</operator><name>n</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>ret</name> <init>= <expr><name><name>dp</name><index>[<expr><name>ind</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><operator>~</operator><name>ret</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>ind</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>ind</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>func</name><argument_list>(<argument><expr><name>ind</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>ind</name></expr>]</index></name><operator>==</operator><name><name>str</name><index>[<expr><name>ind</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>str</name><index>[<expr><name>ind</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal> <operator>||</operator> <name><name>str</name><index>[<expr><name>ind</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal><operator>)</operator></expr>)</condition><then><block>{
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>func</name><argument_list>(<argument><expr><name>ind</name><operator>+</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>ret</name><operator>&gt;=</operator><name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>-=</operator> <name>mod</name></expr>;</expr_stmt></block></then></if>
    }</block></then></if>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name>func</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
