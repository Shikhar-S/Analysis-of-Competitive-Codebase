<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616233_64012016.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name> <name>(</name><cpp:literal>"avx2"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name> <name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name> <name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/stack:200000000"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>string</name></type> <name>str</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>vpii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>vpll</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>str</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mapsi</name>;</typedef>
<typedef>typedef <type><name><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>str</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <operator>::</operator> <name>iterator</name></name></type> <name>mapsitr</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>mint</name>;</typedef>
<typedef>typedef <type><name><name>map</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument> , <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>mll</name>;</typedef>
<typedef>typedef <type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>si</name>;</typedef>
<typedef>typedef <type><name><name>set</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>sll</name>;</typedef>
<typedef>typedef <type><name><name>si</name> <operator>::</operator> <name>iterator</name></name></type> <name>sitr</name>;</typedef>
<typedef>typedef <type><name><name>si</name> <operator>::</operator> <name>reverse_iterator</name></name></type> <name>rsitr</name>;</typedef>
<typedef>typedef <type><name><name>sll</name> <operator>::</operator> <name>iterator</name></name></type> <name>sltr</name>;</typedef>
<typedef>typedef <type><name><name>sll</name> <operator>::</operator> <name>reverse_iterator</name></name></type> <name>rsltr</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mset</name></cpp:macro> <cpp:value>multiset</cpp:value></cpp:define>

<typedef>typedef <type><name><name>mset</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>msi</name>;</typedef>
<typedef>typedef <type><name><name>mset</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>msll</name>;</typedef>
<typedef>typedef <type><name><name>msi</name> <operator>::</operator> <name>iterator</name></name></type> <name>msitr</name>;</typedef>
<typedef>typedef <type><name><name>msi</name> <operator>::</operator> <name>reverse_iterator</name></name></type> <name>msritr</name>;</typedef>
<typedef>typedef <type><name><name>msll</name> <operator>::</operator> <name>iterator</name></name></type> <name>msltr</name>;</typedef>
<typedef>typedef <type><name><name>msll</name> <operator>::</operator> <name>reverse_iterator</name></name></type> <name>mslritr</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ordered_set</name></cpp:macro> <cpp:value>tree&lt;int, null_type,less&lt;int&gt;, rb_tree_tag,tree_order_statistics_node_update&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pob</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pof</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first.second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second.second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first.first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sf</name></cpp:macro> <cpp:value>second.first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>newl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fbo</name></cpp:macro> <cpp:value>find_by_order</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ook</name></cpp:macro> <cpp:value>order_of_key</cpp:value></cpp:define>

<function><type><name>char</name></type> <name>to_upper</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>( <expr><literal type="number">97</literal> <operator>&lt;=</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">122</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>char</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
    <elseif>else <if>if<condition>( <expr><literal type="number">65</literal> <operator>&lt;=</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">90</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if></elseif></if>
}</block></function>
<function><type><name>char</name></type> <name>to_lower</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>( <expr><literal type="number">97</literal> <operator>&lt;=</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">122</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then>
    <elseif>else <if>if<condition>( <expr><literal type="number">65</literal> <operator>&lt;=</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">90</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>char</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif></if>
}</block></function>
<function><type><name>int</name></type> <name>numerize</name> <parameter_list>(<parameter><decl><type><name>char</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><literal type="number">48</literal> <operator>&lt;=</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">57</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>int</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</return></block></then>
    <elseif>else <if>if<condition>( <expr><literal type="number">97</literal> <operator>&lt;=</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">122</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>int</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">96</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif>
    <elseif>else <if>if<condition>( <expr><literal type="number">65</literal> <operator>&lt;=</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>int</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">90</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>int</name><argument_list>(<argument><expr><name>x</name><operator>-</operator><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if></elseif></if>
}</block></function>
<function><type><name>bool</name></type> <name>isect</name> <parameter_list>(<parameter><decl><type><name>int</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r2</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>pii</name></type> <name>p1</name></decl>,<decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>r1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>mp</name><argument_list>(<argument><expr><name>l2</name></expr></argument>,<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>p1</name><operator>&gt;</operator><name>p2</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>p1</name></expr></argument>,<argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name><name>p2</name><operator>.</operator><name>fi</name></name> <operator>&lt;=</operator> <name><name>p1</name><operator>.</operator><name>se</name></name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
    <else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
}</block></function>
<function><type><name>ll</name></type> <name>quickpow</name> <parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>num2</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>MOD</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>num2</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
    <elseif>else <if>if<condition>(<expr><name>num2</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>num1</name></expr>;</return></block></then></if></elseif>
    <else>else<block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><call><name>quickpow</name> <argument_list>(<argument><expr><name>num1</name></expr></argument>,<argument><expr><name>num2</name><operator>/</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><operator>(</operator><operator>(</operator><name>temp</name><operator>%</operator><name>MOD</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>temp</name><operator>%</operator><name>MOD</name><operator>)</operator><operator>)</operator><operator>%</operator><name>MOD</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>num2</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>res</name><operator>%</operator><name>MOD</name><operator>)</operator><operator>*</operator><operator>(</operator><name>num1</name><operator>%</operator><name>MOD</name><operator>)</operator><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>res</name></expr>;</return>
    }</block></else></if>
}</block></function>
<function><type><name>ll</name></type> <name>invmod</name> <parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>MOD</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>quickpow</name> <argument_list>(<argument><expr><name>num</name></expr></argument>,<argument><expr><name>MOD</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>gcd</name> <parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>num2</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>num1</name> <operator>&lt;</operator> <name>num2</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>num1</name></expr></argument>,<argument><expr><name>num2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if> <decl_stmt><decl><type><name>ll</name></type> <name>num3</name> <init>= <expr><name>num1</name> <operator>%</operator> <name>num2</name></expr></init></decl> ;</decl_stmt>
    <while>while<condition>(<expr><name>num3</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{ <expr_stmt><expr><name>num1</name> <operator>=</operator> <name>num2</name></expr>;</expr_stmt> <expr_stmt><expr><name>num2</name> <operator>=</operator> <name>num3</name></expr>;</expr_stmt> <expr_stmt><expr><name>num3</name> <operator>=</operator> <name>num1</name> <operator>%</operator> <name>num2</name></expr>;</expr_stmt>}</block></while>
    <return>return <expr><name>num2</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>lcm</name> <parameter_list>(<parameter><decl><type><name>ll</name></type> <name>num1</name></decl></parameter> , <parameter><decl><type><name>ll</name></type> <name>num2</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call>(<name>ll</name>) <argument_list>(<argument><expr><name>num1</name><operator>/</operator><call><name>__gcd</name><argument_list>(<argument><expr><name>num1</name></expr></argument>,<argument><expr><name>num2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>*</operator><name>num2</name></expr>;</return>}</block></function>
<comment type="line">// end of Template</comment>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{

<comment type="line">//    freopen("input.txt", "r", stdin);</comment>
<comment type="line">//    freopen("output.txt", "w", stdout);</comment>

    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>cases</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>cases</name><operator>&lt;=</operator><name>t</name></expr>;</condition><incr><expr><name>cases</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name>__gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Finite\n"</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Infinite\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></for>
}</block></function>
</unit>
