<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616045_64031435.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>  <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro>   <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro>   <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>  <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>for(int i = a ; i &lt;= b ; ++i)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type>   <name>N</name>   <init>= <expr><literal type="number">2e3</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type>    <name>inf</name> <init>= <expr><literal type="number">1e15</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type>   <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type>     <name>ed</name>;</typedef>

<namespace>namespace   <name>DSU</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name><name>p</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

    <function><type><name>int</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>iota</name><argument_list>(<argument><expr><name>p</name></expr></argument>,<argument><expr><name>p</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr><name>s</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return  <expr><literal type="number">1</literal></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>lead</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><ternary><condition><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name>x</name></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>lead</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>
    <function><type><name>int</name></type> <name>join</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>   <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>lead</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>lead</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return  <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>s</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
        <return>return  <expr><literal type="number">1</literal></expr>;</return>
    }</block></function>
}</block></namespace><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>B</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>K</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>       <comment type="line">//buildCost</comment>
<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>  <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ed</name></expr></argument>&gt;</argument_list></name></type>  <name>E</name></decl>;</decl_stmt>

    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>K</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>  <macro><name>FOR</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro>   <block>{
        <decl_stmt><decl><type><name>ll</name></type>  <name>C</name> <init>= <expr><literal type="number">1ll</literal> <operator>*</operator> <operator>(</operator><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>K</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>ed</name><argument_list>(<argument><expr><name>C</name></expr></argument>,<block>{<expr_stmt><expr><name>i</name></expr><operator>,</operator><expr><name>j</name></expr></expr_stmt>}</block></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt></block></then></if>)</block>)</block>;</function>
    }
    FOR<expr_stmt><expr><operator>(</operator><name>i</name><operator>,</operator><literal type="number">1</literal><operator>,</operator><name>n</name><operator>)</operator>  <call><name><name>E</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>ed</name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<block>{<expr_stmt><expr><literal type="number">0</literal></expr><operator>,</operator><expr><name>i</name></expr></expr_stmt>}</block></argument_list></call></expr></argument></argument_list></call></expr></expr_stmt>))<empty_stmt>;</empty_stmt>

    <expr_stmt><expr><call><name><name>DSU</name><operator>::</operator><name>init</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>E</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>E</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type>  <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>Vert</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type>  <name>Edge</name></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>ed</name></type>  <name>e</name> <range>: <expr><name>E</name></expr></range></decl></init>)</control>  <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>e</name><operator>.</operator><name>Y</name><operator>.</operator><name>X</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>e</name><operator>.</operator><name>Y</name><operator>.</operator><name>Y</name></name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>DSU</name><operator>::</operator><name>join</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>e</name><operator>.</operator><name>X</name></name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><call><name><name>Vert</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><call><name><name>Edge</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <call><name><name>Vert</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name> <range>: <expr><name>Vert</name></expr></range></decl></init>)</control>   <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <call><name><name>Edge</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>    <for>for<control>(<init><decl><type><name>ii</name></type>  <name>e</name> <range>: <expr><name>Edge</name></expr></range></decl></init>)</control>   <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>X</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>Y</name></name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block></for>
}</unit>
