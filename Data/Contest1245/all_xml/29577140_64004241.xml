<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29577140_64004241.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int a; cin &gt;&gt; a;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READARR</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int a[(n) + 1] = {}; FOR(i, 1, (n)) {cin &gt;&gt; a[i];}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READMAT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int a[n + 1][m + 1] = {}; FOR(i, 1, n) {FOR(j, 1, m) cin &gt;&gt; a[i][j];}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR (i, 1, n) cout &lt;&lt; a[i] &lt;&lt; " "; cout &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>printmat</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR (i, 1, n) {FOR (j, 1, m) cout &lt;&lt; a[i][j] &lt;&lt; " "; cout &lt;&lt; endl;} cout &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector &lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>pair &lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vpi</name></cpp:macro> <cpp:value>vector &lt;pi&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a); i &lt;= (b); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (a); i &gt;= (b); i--)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>READ</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
	    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>string</name></type> <name>str</name></decl>;</decl_stmt>
	    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>s</name> <operator>&gt;&gt;</operator> <name>str</name></expr>;</expr_stmt>
	    
	    <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>rr</name> <init>= <expr><name>r</name></expr></init></decl>, <decl><type ref="prev"/><name>pp</name> <init>= <expr><name>p</name></expr></init></decl>, <decl><type ref="prev"/><name>ss</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
	    <decl_stmt><decl><type><name>string</name></type> <name>ans</name></decl>;</decl_stmt>
	    <for>for <control>(<init><decl><type><name>char</name></type> <name>i</name><range>: <expr><name>str</name></expr></range></decl></init>)</control>
	    <block>{
	        <if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>rr</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr><operator>,</operator> <expr><name>rr</name><operator>--</operator></expr><operator>,</operator> <expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	        <elseif>else <if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>ss</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr><operator>,</operator> <expr><name>ss</name><operator>--</operator></expr><operator>,</operator> <expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	        <elseif>else <if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>pp</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr><operator>,</operator> <expr><name>pp</name><operator>--</operator></expr><operator>,</operator> <expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
	        <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'X'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	    }</block></for>
	    
	    <decl_stmt><decl><type><name>int</name></type> <name>half</name> <init>= <expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
	    <if>if <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>half</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
	    <if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <name>half</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> <continue>continue;</continue>}</block></then></if>
	    
	    <macro><name>FOR</name> <argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n - <literal type="number">1</literal></argument>)</argument_list></macro>
    	    <if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'X'</literal></expr>)</condition><then>
    	    <block>{
    	        <if>if <condition>(<expr><name>rr</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name>rr</name><operator>--</operator></expr>;</expr_stmt></block></then>
    	        <elseif>else <if>if <condition>(<expr><name>pp</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name>pp</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
    	        <else>else <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name>ss</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
    	    }</block></then></if>
    	
    	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></while>
}</block></function></unit>
