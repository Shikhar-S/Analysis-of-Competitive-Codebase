<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29620038_64002150.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> 
<block>{ 
    <comment type="line">// Everything divides 0  </comment>
    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> 
       <block type="pseudo"><return>return <expr><name>b</name></expr>;</return></block></then></if> 
    <if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> 
       <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if> 
   
    <comment type="line">// base case </comment>
    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><then> 
        <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if> 
   
    <comment type="line">// a is greater </comment>
    <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> 
        <block type="pseudo"><return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>a</name><operator>-</operator><name>b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if> 
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</return> 
}</block></function> 

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>t</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Finite"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Infinite"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>
}</block></function></unit>
