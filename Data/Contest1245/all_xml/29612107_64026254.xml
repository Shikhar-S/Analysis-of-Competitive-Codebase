<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29612107_64026254.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(x);i&lt;=(y);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dwn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(x);i&gt;=(y);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>view</name><parameter_list>(<parameter><type><name>u</name></type></parameter>,<parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int k=fir[u];~k;k=nxt[k])</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><name>ch</name><operator>!=</operator><literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
	<while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>x</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><name>x</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>char</name></type> <name><name>ch</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><then><block>{<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return;</return>}</block></then></if>
	<if>if<condition>(<expr><name>x</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
	<while>while<condition>(<expr><name>x</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><name><name>ch</name><index>[<expr><operator>++</operator><name>f</name></expr>]</index></name><operator>=</operator><name>x</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>x</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt></block></while>
	<while>while<condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>f</name><operator>--</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></while>
	<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><name>D</name></type> <name><name>f</name><index>[<expr><literal type="number">107</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>h</name><index>[<expr><literal type="number">17</literal></expr>]</index><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>to</name><index>[<expr><literal type="number">107</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>px</name><index>[<expr><literal type="number">107</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>py</name><index>[<expr><literal type="number">107</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>bac</name><index>[<expr><literal type="number">17</literal></expr>]</index><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cntp</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<macro><name>dwn</name><argument_list>(<argument>i</argument>,<argument><literal type="number">10</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<if>if<condition>(<expr><operator>!</operator><operator>(</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><then><block>{<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro><expr_stmt><expr><name>cntp</name><operator>++</operator></expr><operator>,</operator><expr><name><name>bac</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>cntp</name></expr><operator>,</operator><expr><name><name>px</name><index>[<expr><name>cntp</name></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>py</name><index>[<expr><name>cntp</name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>}</block></then>
		<else>else <block>{<macro><name>dwn</name><argument_list>(<argument>j</argument>,<argument><literal type="number">10</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><name>cntp</name><operator>++</operator></expr><operator>,</operator><expr><name><name>bac</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name>cntp</name></expr><operator>,</operator><expr><name><name>px</name><index>[<expr><name>cntp</name></expr>]</index></name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>py</name><index>[<expr><name>cntp</name></expr>]</index></name><operator>=</operator><name>j</name></expr>;</expr_stmt>}</block></else></if>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro>
	<block>{
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument><literal type="number">10</literal></argument>)</argument_list></macro> 
		<block>{
			<expr_stmt><expr><name><name>h</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt><decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name>i</name><operator>-</operator><name><name>h</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><name>j</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>to</name><index>[<expr><name><name>bac</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>bac</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
		}</block> 
	}</block><comment type="block">/*
	rep(i,1,10)
	{
		rep(j,1,10)cout&lt;&lt;bac[i][j]&lt;&lt;" ";cout&lt;&lt;endl;
	}*/</comment>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">100</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<macro><name>dwn</name><argument_list>(<argument>i</argument>,<argument><literal type="number">99</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<decl_stmt><decl><type><name>D</name></type> <name>tmp</name><init>=<expr><literal type="number">1.0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>int</name></type> <name>li</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">100</literal><operator>-</operator><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>(</operator><literal type="number">100</literal><operator>-</operator><name>i</name><operator>)</operator><operator>&lt;</operator><literal type="number">6</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>=</operator><literal type="number">6.0</literal><operator>/</operator><operator>(</operator><literal type="number">100.0</literal><operator>-</operator><operator>(</operator><name>D</name><operator>)</operator><name>i</name><operator>)</operator></expr><operator>,</operator><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><operator>(</operator><literal type="number">6.0</literal><operator>-</operator><operator>(</operator><name>D</name><operator>)</operator><name>li</name><operator>)</operator><operator>/</operator><literal type="number">6.0</literal></expr>;</expr_stmt></block></then></if>
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>li</argument>)</argument_list></macro>
		<block>{
			<decl_stmt><decl><type><name>D</name></type> <name>x</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><name><name>to</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>+=</operator><operator>(</operator><name>x</name><operator>+</operator><literal type="number">1.0</literal><operator>)</operator><operator>/</operator><literal type="number">6.0</literal></expr>;</expr_stmt>
		}</block>
		<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>*=</operator><name>tmp</name></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.10lf"</literal></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>(</operator><literal type="number">0</literal><operator>-</operator><literal type="number">0</literal><operator>)</operator></expr>;</return>
}</block></function></unit>
