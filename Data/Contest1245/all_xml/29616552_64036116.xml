<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616552_64036116.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LL</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>tttttttttttt657ttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>INF</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ttttttttttt75tttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>LL</name></type> <name>ABS</name> <parameter_list>(<parameter><decl><type><name>LL</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><ternary><condition><expr><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><operator>-</operator><name>x</name></expr></else></ternary></expr> ;</return>
}</block></function><decl_stmt><decl><type><name>int</name></type> <name>ttttttttt657tttttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">2e3</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>lowc</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ttttttttttt67tttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttttt76ttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttt435tttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>fa</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>x</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>k</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>c</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>cost</name><index>[<expr><name>MAXN</name></expr>]</index><index>[<expr><name>MAXN</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttthtttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tttttttttgrgttttthtttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttrhtttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>V</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>E1</name></decl> , <decl><type ref="prev"/><name>E2</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>ttttttttttgtttttrhtttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tttttttttthtrhrttttttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<function><type><name>LL</name></type> <name>Prim</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttttrhttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttthtttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LL</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name> <argument_list>(<argument><expr><name>vis</name></expr></argument> , <argument><expr><literal type="boolean">false</literal></expr></argument> , <argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><name><name>vis</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>lowc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr> ;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttttttttrhtrtttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttttttrhtttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>LL</name></type> <name>minc</name> <init>= <expr><name>INF</name></expr></init></decl> ;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl> ;</decl_stmt>
        <for>for <control>(<init><decl><type><name>LL</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>minc</name> <operator>&gt;</operator> <name><name>lowc</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>minc</name> <operator>=</operator> <name><name>lowc</name><index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name>p</name> <operator>=</operator> <name>j</name></expr> ;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttttttttthtttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttthntttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tttttttttnhtttttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>minc</name> <operator>==</operator> <name>INF</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr> ;</return></block></then></if>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>minc</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>vis</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr> ;</expr_stmt>
        <if>if <condition>(<expr><name><name>fa</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name><name>V</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><call><name><name>E1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
            <expr_stmt><expr><call><name><name>E2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>fa</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        }</block></else></if>
        <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttttttttttthnhtttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttttttnhnhtttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttrnhttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>LL</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{
            <if>if <condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>lowc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <name><name>cost</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>lowc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr> ;</expr_stmt>
                <expr_stmt><expr><name><name>fa</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr> ;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <comment type="line">//printf ("p = %lld   ans = %lld\n" , p , ans) ;</comment>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttttttttergttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttttregetttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttregttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>ans</name></expr> ;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>ttttttregttttttttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttttregtttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tttttttttrgegtttttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttttregttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttttttregtttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttrgrtttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttregttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttvvttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <expr_stmt><expr><name><name>cost</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttttttttttrhrttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttthtttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttttttnytttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>scanf</name> <argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>i</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>cost</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>ABS</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>ABS</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ;</expr_stmt>
        }</block></for>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttttttewfwttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttefttttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttefwfttttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument> , <argument><expr><call><name>Prim</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument> , <argument><expr><call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tttttttttewftttttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttfwetttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttttttfewttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>V</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument> , <argument><expr><name><name>V</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"\n%d\n"</literal></expr></argument> , <argument><expr><call><name><name>E1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>E1</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>printf</name> <argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument> , <argument><expr><name><name>E1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>E2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> ;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>tttttttttttttttt234ttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ttttttttttt324tttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tttttttt234ttttttttttttttttttttttttt</name><init>=<expr><literal type="number">13</literal></expr></init></decl>;</decl_stmt>
    <return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function>
<comment type="block">/*
#include &lt;bits/stdc++.h&gt;
using namespace std;
typedef long long ll;
const ll mod = 1e9+7;
const ll maxn = 1e5 + 10;
char s[maxn] = {0};
ll a[maxn];
ll f[maxn];
int main() {
    f[1] = 1;
    f[2] = 2;
    for (int i = 3; i &lt; maxn; i++) {
        f[i] = f[i-1]+f[i-2];
        f[i]%=mod;
    }
    scanf("%s", s);
    ll len = strlen(s);
    for (int i = 0; i &lt; len; i++) {
        if (s[i] == 'm' || s[i] =='w') {
            cout &lt;&lt; "0" &lt;&lt; endl;
            return 0;
        }
    }
    ll cnt = 0;
    ll num = 0;
    for (int i = 0;i&lt;len;i++) {
        if (s[i]=='n') {
            num++;
        }
        else {
            if (num &gt;= 2)a[cnt++]=num;
            num=0;
        }
    }
    if (num &gt;= 2)a[cnt++]=num;
    num = 0;
    for (int i = 0;i&lt;len;i++) {
        if (s[i]=='u') {
            num++;
        }
        else {
            if (num &gt;= 2)a[cnt++]=num;
            num=0;
        }
    }
    if (num &gt;= 2)a[cnt++]=num;
    ll ans = 1;
    for (ll i = 0; i &lt; cnt; i++) {
        ans *= f[a[i]];
        ans %= mod;
    }
    cout &lt;&lt; ans &lt;&lt; endl;
    return 0;
}
*/</comment>
</unit>
