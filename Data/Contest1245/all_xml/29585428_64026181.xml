<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29585428_64026181.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>double</name></type> <name><name>dp</name><index>[<expr><literal type="number">15</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ar</name><index>[<expr><literal type="number">15</literal></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>trav</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
  <if>if <condition>(<expr><name>x</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name>trav</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><call><name>trav</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></then> <else>else <block>{
    <if>if <condition>(<expr><name>y</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <return>return <expr><call><name>trav</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then> <else>else <block>{
      <return>return <expr><call><name>trav</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>m</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
    }</block></else></if>
  }</block></else></if>
}</block></function>

<function><type><name>double</name></type> <name>serc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1e-9</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>double</name> <modifier>&amp;</modifier></type><name>ret</name> <init>= <expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bolong</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>nxt</name> <init>= <expr><call><name>trav</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>nxt</name><operator>.</operator><name>first</name></name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>bolong</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <decl_stmt><decl><type><name>double</name></type> <name>tmp</name> <init>= <expr><operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <call><name>serc</name><argument_list>(<argument><expr><name><name>nxt</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>nxt</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>ar</name><index>[<expr><name><name>nxt</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>nxt</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <call><name>serc</name><argument_list>(<argument><expr><name><name>nxt</name><operator>.</operator><name>first</name></name><operator>+</operator><name><name>ar</name><index>[<expr><name><name>nxt</name><operator>.</operator><name>first</name></name></expr>]</index><index>[<expr><name><name>nxt</name><operator>.</operator><name>second</name></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>nxt</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>/</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ret</name> <operator>*</operator> <literal type="number">6</literal> <operator>/</operator> <operator>(</operator><literal type="number">6</literal> <operator>-</operator> <name>bolong</name><operator>)</operator></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ar</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
  }</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.9f\n"</literal></expr></argument>, <argument><expr><call><name>serc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
