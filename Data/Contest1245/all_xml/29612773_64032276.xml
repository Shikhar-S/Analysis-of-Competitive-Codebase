<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29612773_64032276.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INF</name></cpp:macro> <cpp:value>0x7f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_INF_VAL</name></cpp:macro> <cpp:value>0x7f7f7f7f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>3.141592653589</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-10</cpp:value></cpp:define>
<comment type="line">//#define p 2173412051LL</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>p</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>dis</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<decl_stmt><decl><type><name>p</name></type> <name><name>a</name><index>[ <expr><literal type="number">4000010</literal></expr> ]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>p</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>p</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter> )</parameter_list> <block>{
	<return>return <expr><name><name>a</name><operator>.</operator><name>dis</name></name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>dis</name></name></expr>;</return>
}</block></function><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>f</name><index>[ <expr><literal type="number">2010</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[ <expr><literal type="number">2010</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[ <expr><literal type="number">2010</literal></expr> ]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[ <expr><literal type="number">2010</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cost</name><index>[ <expr><literal type="number">2010</literal></expr> ]</index></name></decl>, <decl><type ref="prev"/><name><name>k</name><index>[ <expr><literal type="number">2010</literal></expr> ]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>p</name></expr></argument> &gt;</argument_list></name></type> <name>eg</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>p</name></expr></argument> &gt;</argument_list></name></type> <name>ans_eg</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>find</name><parameter_list>( <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>merge</name><parameter_list>( <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter> )</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>kruskal</name><parameter_list>()</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>xx</name></decl>, <decl><type ref="prev"/><name>yy</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>deal</name></decl>, <decl><type ref="prev"/><name>fk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>( <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>( <argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>x</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>y</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>f</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>( <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cost</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>cost</name><index>[ <expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vis</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
		<expr_stmt><expr><operator>++</operator><name>fk</name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>( <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>k</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
		<block type="pseudo"><for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr> )</control> <block>{
			<expr_stmt><expr><name><name>a</name><index>[ <expr><name>m</name></expr> ]</index></name><operator>.</operator><name>u</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>a</name><index>[ <expr><name>m</name></expr> ]</index></name><operator>.</operator><name>v</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>a</name><index>[ <expr><name>m</name><operator>++</operator></expr> ]</index></name><operator>.</operator><name>dis</name> <operator>=</operator> <operator>(</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>x</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>-</operator> <name><name>x</name><index>[ <expr><name>j</name></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>y</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>-</operator> <name><name>y</name><index>[ <expr><name>j</name></expr> ]</index></name></expr></argument> )</argument_list></call> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name><name>k</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>+</operator> <name><name>k</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>)</operator></expr>;</expr_stmt>
		}</block></for></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>( <argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name> <operator>+</operator> <name>m</name></expr></argument>, <argument><expr><name>cmp</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>kruskal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
		<block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[ <expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>eg</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
		<expr_stmt><expr><name>xx</name> <operator>=</operator> <call><name>find</name><argument_list>( <argument><expr><name><name>eg</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>u</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>yy</name> <operator>=</operator> <call><name>find</name><argument_list>( <argument><expr><name><name>eg</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>( <expr><name><name>cost</name><index>[ <expr><name>xx</name></expr> ]</index></name> <operator>&gt;</operator> <name><name>cost</name><index>[ <expr><name>yy</name></expr> ]</index></name></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>deal</name> <operator>=</operator> <name>xx</name></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><name>deal</name> <operator>=</operator> <name>yy</name></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>eg</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>dis</name> <operator>-</operator> <name><name>cost</name><index>[ <expr><name>deal</name></expr> ]</index></name></expr>;</expr_stmt>
		<if>if<condition>( <expr><name>tmp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> )</condition><then>
			<block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>vis</name><index>[ <expr><name>deal</name></expr> ]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>ans_eg</name><operator>.</operator><name>push_back</name></name><argument_list>( <argument><expr><name><name>eg</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>--</operator><name>fk</name></expr>;</expr_stmt>
		<if>if<condition>( <expr><name>xx</name> <operator>==</operator> <name>deal</name></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>merge</name><argument_list>( <argument><expr><name>xx</name></expr></argument>, <argument><expr><name>yy</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then>
		<else>else
			<block type="pseudo"><expr_stmt><expr><call><name>merge</name><argument_list>( <argument><expr><name>yy</name></expr></argument>, <argument><expr><name>xx</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></for>			
	<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><name>fk</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
		<block type="pseudo"><if>if<condition>( <expr><name><name>vis</name><index>[ <expr><name>i</name></expr> ]</index></name></expr> )</condition><then>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
	<if>if<condition>( <expr><name>fk</name></expr> )</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"\n"</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><call><name><name>ans_eg</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ans_eg</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>ans_eg</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>u</name></expr></argument>, <argument><expr><name><name>ans_eg</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>find</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter> )</parameter_list> <block>{
	<if>if<condition>( <expr><name><name>f</name><index>[ <expr><name>x</name></expr> ]</index></name> <operator>==</operator> <name>x</name></expr> )</condition><then>
		<block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
	<return>return <expr><name><name>f</name><index>[ <expr><name>x</name></expr> ]</index></name> <operator>=</operator> <call><name>find</name><argument_list>( <argument><expr><name><name>f</name><index>[ <expr><name>x</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>merge</name><parameter_list>( <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter> )</parameter_list> <block>{
	<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>find</name><argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>find</name><argument_list>( <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[ <expr><name>x</name></expr> ]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>kruskal</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
		<if>if<condition>( <expr><call><name>find</name><argument_list>( <argument><expr><name><name>a</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>u</name></expr></argument> )</argument_list></call> <operator>!=</operator> <call><name>find</name><argument_list>( <argument><expr><name><name>a</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>v</name></expr></argument> )</argument_list></call></expr> )</condition><then> <block>{
			<expr_stmt><expr><call><name>merge</name><argument_list>( <argument><expr><name><name>a</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>u</name></expr></argument>, <argument><expr><name><name>a</name><index>[ <expr><name>i</name></expr> ]</index></name><operator>.</operator><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>eg</name><operator>.</operator><name>push_back</name></name><argument_list>( <argument><expr><name><name>a</name><index>[ <expr><name>i</name></expr> ]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
}</block></function></unit>
