<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29569718_64032773.cpp"><comment type="block" format="doxygen">/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Ankur Dua
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fstream&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>


<using>using <namespace>namespace <name>std</name>;</namespace></using>


<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name> <modifier>*</modifier></type><name>fact</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>ifact</name></decl>;</decl_stmt>

<using>using <name>cd</name> <init>= <type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>double</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>fft</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>cd</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>invert</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>bit</name> <init>= <expr><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&amp;</operator> <name>bit</name></expr>;</condition> <incr><expr><name>bit</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>j</name> <operator>^=</operator> <name>bit</name></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name>j</name> <operator>^=</operator> <name>bit</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>j</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>len</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>len</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>double</name></type> <name>ang</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name>PI</name> <operator>/</operator> <name>len</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><name>invert</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cd</name></type> <name>wlen</name><argument_list>(<argument><expr><call><name>cos</name><argument_list>(<argument><expr><name>ang</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sin</name><argument_list>(<argument><expr><name>ang</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>len</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>cd</name></type> <name>w</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>cd</name></type> <name>u</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><name>j</name><operator>+</operator><name>len</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>w</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name>u</name> <operator>+</operator> <name>v</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name><operator>+</operator><name>j</name><operator>+</operator><name>len</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>u</name> <operator>-</operator> <name>v</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>w</name> <operator>*=</operator> <name>wlen</name></expr>;</expr_stmt>
            }</block></for>
        }</block></for>
    }</block></for>

    <if>if <condition>(<expr><name>invert</name></expr>)</condition><then> <block>{
        <for>for <control>(<init><decl><type><name>cd</name> <modifier>&amp;</modifier></type> <name>x</name> <range>: <expr><name>a</name></expr></range></decl></init>)</control>
            <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>/=</operator> <name>n</name></expr>;</expr_stmt></block></for>
    }</block></then></if>
}</block></function>
<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>multiply</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name> <specifier>const</specifier><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>cd</name></expr></argument>&gt;</argument_list></name></type> <name>fa</name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>a</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>fb</name><argument_list>(<argument><expr><call><name><name>b</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>b</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <call><name><name>a</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <call><name><name>b</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><name>n</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><call><name><name>fa</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>fb</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fft</name><argument_list>(<argument><expr><name>fa</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fft</name><argument_list>(<argument><expr><name>fb</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <name><name>fb</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>fft</name><argument_list>(<argument><expr><name>fa</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>result</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>round</name><argument_list>(<argument><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>real</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>
<struct>struct <name>FlowEdge</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>u</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cap</name></decl>, <decl><type ref="prev"/><name>flow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <constructor><name>FlowEdge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>cap</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>v</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call>, <call><name>u</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call>, <call><name>cap</name><argument_list>(<argument><expr><name>cap</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
</public>}</block>;</struct>

<struct>struct <name>Dinic</name> <block>{<public type="default">
    <decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>flow_inf</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>FlowEdge</name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>adj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>

    <constructor><name>Dinic</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>n</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call>, <call><name>s</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call>, <call><name>t</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call> </member_init_list><block>{
        <expr_stmt><expr><call><name><name>adj</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>level</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>ptr</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>void</name></type> <name>add_edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>cap</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>, <argument><expr><name>cap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>emplace_back</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>bool</name></type> <name>bfs</name><parameter_list>()</parameter_list> <block>{
        <while>while <condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>id</name> <range>: <expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><name><name>edges</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>cap</name> <operator>-</operator> <name><name>edges</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>flow</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if <condition>(<expr><name><name>level</name><index>[<expr><name><name>edges</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
                    <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name><name>level</name><index>[<expr><name><name>edges</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>u</name></expr>]</index></name> <operator>=</operator> <name><name>level</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name><name>edges</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
        }</block></while>
        <return>return <expr><name><name>level</name><index>[<expr><name>t</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</return>
    }</block></function>

    <function><type><name>long</name> <name>long</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>pushed</name></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>pushed</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name>v</name> <operator>==</operator> <name>t</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>pushed</name></expr>;</return></block></then></if>
        <for>for <control>(<init><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>cid</name> <init>= <expr><name><name>ptr</name><index>[<expr><name>v</name></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>cid</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator> <name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>cid</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index><index>[<expr><name>cid</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>edges</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>u</name></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>level</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>!=</operator> <name><name>level</name><index>[<expr><name>u</name></expr>]</index></name> <operator>||</operator> <name><name>edges</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>cap</name> <operator>-</operator> <name><name>edges</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>flow</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tr</name> <init>= <expr><call><name>dfs</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>pushed</name></expr></argument>, <argument><expr><name><name>edges</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>cap</name> <operator>-</operator> <name><name>edges</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>flow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name>tr</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>edges</name><index>[<expr><name>id</name></expr>]</index></name><operator>.</operator><name>flow</name> <operator>+=</operator> <name>tr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>edges</name><index>[<expr><name>id</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>flow</name> <operator>-=</operator> <name>tr</name></expr>;</expr_stmt>
            <return>return <expr><name>tr</name></expr>;</return>
        }</block></for>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></function>

    <function><type><name>long</name> <name>long</name></type> <name>flow</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
            <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name><name>level</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>level</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>level</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><operator>!</operator><call><name>bfs</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><call><name><name>ptr</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>ptr</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<decl><type><name>long</name> <name>long</name></type> <name>pushed</name> <init>= <expr><call><name>dfs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>flow_inf</name></expr></argument>)</argument_list></call></expr></init></decl>)</condition> <block>{
                <expr_stmt><expr><name>f</name> <operator>+=</operator> <name>pushed</name></expr>;</expr_stmt>
            }</block></while>
        }</block></while>
        <return>return <expr><name>f</name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<comment type="line">//Min cost max flow using dijkstra from https://codeforces.com/contest/1107/submission/49033783</comment>
<struct><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>flow_t</name></parameter>, <parameter><type><name>typename</name></type> <name>cost_t</name></parameter>&gt;</parameter_list></template>
struct <name>MinCostMaxFlow</name> <block>{<public type="default">
    <decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>flow_t</name></type> <name>FLOW_INF</name> <init>= <expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>flow_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>cost_t</name></type> <name>COST_INF</name> <init>= <expr><call><name><name><name>numeric_limits</name><argument_list type="generic">&lt;<argument><expr><name>cost_t</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>max</name></name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <struct>struct <name>edge</name> <block>{<public type="default">
        <decl_stmt><decl><type><name>int</name></type> <name>node</name></decl>, <decl><type ref="prev"/><name>rev</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>flow_t</name></type> <name>capacity</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cost_t</name></type> <name>cost</name></decl>;</decl_stmt>

        <constructor><name>edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_node</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>_rev</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>, <parameter><decl><type><name>flow_t</name></type> <name>_capacity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>, <parameter><decl><type><name>cost_t</name></type> <name>_cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list>
                <member_init_list>: <call><name>node</name><argument_list>(<argument><expr><name>_node</name></expr></argument>)</argument_list></call>, <call><name>rev</name><argument_list>(<argument><expr><name>_rev</name></expr></argument>)</argument_list></call>, <call><name>capacity</name><argument_list>(<argument><expr><name>_capacity</name></expr></argument>)</argument_list></call>, <call><name>cost</name><argument_list>(<argument><expr><name>_cost</name></expr></argument>)</argument_list></call> </member_init_list><block>{}</block></constructor>
    </public>}</block>;</struct>

    <decl_stmt><decl><type><name>int</name></type> <name>V</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>adj</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>cost_t</name></expr></argument>&gt;</argument_list></name></type> <name>dist</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>prev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>edge</name><modifier>*</modifier></expr></argument>&gt;</argument_list></name></type> <name>prev_edge</name></decl>;</decl_stmt>

    <constructor><name>MinCostMaxFlow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vertices</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl></parameter>)</parameter_list> <block>{
        <if>if <condition>(<expr><name>vertices</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>init</name><argument_list>(<argument><expr><name>vertices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></constructor>

    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>vertices</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>V</name> <operator>=</operator> <name>vertices</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>adj</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>V</name></expr></argument>, <block>{}</block></argument_list></call></expr></expr_stmt>)</block>;</function>
        <constructor_decl><name><name>dist</name><operator>.</operator><name>resize</name></name><parameter_list>(<parameter><decl><type><name>V</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
        <constructor_decl><name><name>prev</name><operator>.</operator><name>resize</name></name><parameter_list>(<parameter><decl><type><name>V</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
        <constructor_decl><name><name>prev_edge</name><operator>.</operator><name>resize</name></name><parameter_list>(<parameter><decl><type><name>V</name></type></decl></parameter>)</parameter_list>;</constructor_decl>
    </public>}</block>

    <decl><name>void</name> <name>addEdge</name><argument_list>(<argument><expr><name>int</name> <name>u</name></expr></argument>, <argument><expr><name>int</name> <name>v</name></expr></argument>, <argument><expr><name>flow_t</name> <name>capacity</name></expr></argument>, <argument><expr><name>cost_t</name> <name>cost</name></expr></argument>)</argument_list> <argument_list>{
        <argument><expr><name>edge</name> <call><name>uv_edge</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>u</name> <operator>==</operator> <name>v</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><name>edge</name> <call><name>vu_edge</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>cost</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><name><name>adj</name><index>[<expr><name>u</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>uv_edge</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><name><name>adj</name><index>[<expr><name>v</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>vu_edge</name></expr></argument>)</argument_list></call></expr></argument>;
    }</argument_list>

    <name>edge</name> <modifier>&amp;</modifier><name>reverse_edge</name><argument_list>(<argument><expr><specifier>const</specifier> <name>edge</name> <operator>&amp;</operator><name>e</name></expr></argument>)</argument_list> <argument_list>{
        return <argument><expr><name><name>adj</name><index>[<expr><name><name>e</name><operator>.</operator><name>node</name></name></expr>]</index><index>[<expr><name><name>e</name><operator>.</operator><name>rev</name></name></expr>]</index></name></expr></argument>;
    }</argument_list>

    <name>bool</name> <name>bellman_ford</name><argument_list>(<argument><expr><name>int</name> <name>source</name></expr></argument>, <argument><expr><name>int</name> <name>sink</name></expr></argument>)</argument_list> <argument_list>{
        for <argument><expr><operator>(</operator><name>int</name> <name>i</name> <operator>=</operator> <literal type="number">0</literal>; <name>i</name> <operator>&lt;</operator> <name>V</name>; <name>i</name><operator>++</operator><operator>)</operator> <block>{
            <expr><name><name>dist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>COST_INF</name></expr>;
            <expr><name><name>prev</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;
            <expr><name><name>prev_edge</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="null">nullptr</literal></expr>;
        }</block>

        <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <call><name>last_seen</name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <call><name>nodes</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><name><name>dist</name><index>[<expr><name>source</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr></argument>;

        for <argument><expr><operator>(</operator><name>int</name> <name>iteration</name> <operator>=</operator> <literal type="number">0</literal>; <name>iteration</name> <operator>&lt;</operator> <name>V</name>; <name>iteration</name><operator>++</operator><operator>)</operator> <block>{
            <expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <name>next_nodes</name></expr>;

            <for>for <control>(<init><decl><type><name>int</name> <name>node</name> : <name>nodes</name></type></decl></init>)</control>
                <block type="pseudo"><for>for <control>(<init><decl><type><name>edge</name> <modifier>&amp;</modifier><name>e</name> : <name><name>adj</name><index>[<expr><name>node</name></expr>]</index></name></type></decl></init>)</control>
                    <block type="pseudo"><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>capacity</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>dist</name><index>[<expr><name>node</name></expr>]</index></name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>cost</name></name> <operator>&lt;</operator> <name><name>dist</name><index>[<expr><name><name>e</name><operator>.</operator><name>node</name></name></expr>]</index></name></expr>)</condition><then> <expr_stmt><expr><block>{
                        <expr><name><name>dist</name><index>[<expr><name><name>e</name><operator>.</operator><name>node</name></name></expr>]</index></name> <operator>=</operator> <name><name>dist</name><index>[<expr><name>node</name></expr>]</index></name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>cost</name></name></expr>;
                        <name><name>prev</name><index>[<expr><name><name>e</name><operator>.</operator><name>node</name></name></expr>]</index></name> <operator>=</operator> <name>node</name></block></expr>;</expr_stmt></then></if></block></for></block></for>
                        <name><name>prev_edge</name><index>[<expr><name><name>e</name><operator>.</operator><name>node</name></name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>e</name></block></expr></argument>;

                        if <argument><expr><operator>(</operator><name><name>last_seen</name><index>[<expr><name><name>e</name><operator>.</operator><name>node</name></name></expr>]</index></name> <operator>!=</operator> <name>iteration</name><operator>)</operator> <block>{
                            <expr><name><name>last_seen</name><index>[<expr><name><name>e</name><operator>.</operator><name>node</name></name></expr>]</index></name> <operator>=</operator> <name>iteration</name></expr>;
                            <expr><call><name><name>next_nodes</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;
                        }</block></expr></argument>
                    }</argument_list>

            <name>swap</name><argument_list>(<argument><expr><name>nodes</name></expr></argument>, <argument><expr><name>next_nodes</name></expr></argument>)</argument_list></decl>;</struct>
        }

        return <expr_stmt><expr><name><name>prev</name><index>[<expr><name>sink</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }

    struct <macro><name>dijkstra_state</name></macro> <block>{
        <decl_stmt><decl><type><name>cost_t</name></type> <name>dist</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>node</name></decl>;</decl_stmt>

        <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>dijkstra_state</name> <modifier>&amp;</modifier></type><name>other</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
            <return>return <expr><name>dist</name> <operator>&gt;</operator> <name><name>other</name><operator>.</operator><name>dist</name></name></expr>;</return>
        }</block></function>
    }</block><empty_stmt>;</empty_stmt>

    <decl_stmt><decl><type><name>void</name></type> <name>dijkstra_check</name><argument_list>(<argument><expr><name>int</name> <name>node</name></expr></argument>, <argument><expr><name>cost_t</name> <name>potential_dist</name></expr></argument>, <argument><expr><name>int</name> <name>previous</name></expr></argument>, <argument><expr><name>edge</name> <operator>*</operator><name>previous_edge</name></expr></argument>, <argument><expr><name>auto</name> <operator>&amp;</operator><name>pq</name></expr></argument>)</argument_list> <argument_list>{
        if <argument><expr><operator>(</operator><name>potential_dist</name> <operator>&lt;</operator> <name><name>dist</name><index>[<expr><name>node</name></expr>]</index></name><operator>)</operator> <block>{
            <expr><name><name>dist</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name>potential_dist</name></expr>;
            <expr><name><name>prev</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name>previous</name></expr>;
            <expr><name><name>prev_edge</name><index>[<expr><name>node</name></expr>]</index></name> <operator>=</operator> <name>previous_edge</name></expr>;
            <expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><name><name>dist</name><index>[<expr><name>node</name></expr>]</index></name></expr>, <expr><name>node</name></expr>}</block></expr></argument>)</argument_list></call></expr>;
        }</block></expr></argument>
    }</argument_list>

    <name>bool</name> <name>dijkstra</name><argument_list>(<argument><expr><name>int</name> <name>source</name></expr></argument>, <argument><expr><name>int</name> <name>sink</name></expr></argument>)</argument_list> <argument_list>{
        <argument><expr><call><name><name>dist</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><name>COST_INF</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>prev</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>prev_edge</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>V</name></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr></argument>;

        <argument><expr><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>dijkstra_state</name></expr></argument>&gt;</argument_list></name> <name>pq</name></expr></argument>;
        <argument><expr><call><name>dijkstra_check</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="null">nullptr</literal></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr></argument>;

        while <argument><expr><operator>(</operator><operator>!</operator><call><name><name>pq</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call><operator>)</operator> <block>{
            <expr><name>dijkstra_state</name> <name>top</name> <operator>=</operator> <call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr>;
            <expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;

            <if>if <condition>(<expr><name><name>top</name><operator>.</operator><name>dist</name></name> <operator>&gt;</operator> <name><name>dist</name><index>[<expr><name><name>top</name><operator>.</operator><name>node</name></name></expr>]</index></name></expr>)</condition><then>
                <block type="pseudo"><continue>continue;</continue></block></then></if></block></expr></argument>

            <for>for <control>(<init><decl><type><name>edge</name> <modifier>&amp;</modifier><name>e</name> : <name><name>adj</name><index>[<expr><name><name>top</name><operator>.</operator><name>node</name></name></expr>]</index></name></type></decl></init>)</control>
                <block type="pseudo"><if>if <condition>(<expr><name><name>e</name><operator>.</operator><name>capacity</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><call><name>dijkstra_check</name><argument_list>(<argument><expr><name><name>e</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><name><name>top</name><operator>.</operator><name>dist</name></name> <operator>+</operator> <name><name>e</name><operator>.</operator><name>cost</name></name></expr></argument>, <argument><expr><name><name>top</name><operator>.</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>e</name></expr></argument>, <argument><expr><name>pq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for></argument_list></decl></decl_stmt>
        }

        return <expr_stmt><expr><name><name>prev</name><index>[<expr><name>sink</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }

    void <macro><name>reduce_cost</name><argument_list>()</argument_list></macro> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>V</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><for>for <control>(<init><decl><type><name>edge</name> <modifier>&amp;</modifier></type><name>e</name> <range>: <expr><name><name>adj</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control>
                <block type="pseudo"><expr_stmt><expr><name><name>e</name><operator>.</operator><name>cost</name></name> <operator>+=</operator> <name><name>dist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>dist</name><index>[<expr><name><name>e</name><operator>.</operator><name>node</name></name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>
    }</block>

    <function><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>flow_t</name></expr></argument>, <argument><expr><name>cost_t</name></expr></argument>&gt;</argument_list></name></type> <name>minCostFlow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sink</name></decl></parameter>, <parameter><decl><type><name>flow_t</name></type> <name>flow_goal</name> <init>= <expr><name>FLOW_INF</name></expr></init></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>V</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if>if <condition>(<expr><operator>!</operator><call><name>bellman_ford</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>

        <decl_stmt><decl><type><name>flow_t</name></type> <name>total_flow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cost_t</name></type> <name>total_cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>cost_t</name></type> <name>reduce_sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <do>do <block>{
            <expr_stmt><expr><call><name>reduce_cost</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>reduce_sum</name> <operator>+=</operator> <name><name>dist</name><index>[<expr><name>sink</name></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>flow_t</name></type> <name>path_cap</name> <init>= <expr><name>flow_goal</name> <operator>-</operator> <name>total_flow</name></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>node</name> <init>= <expr><name>sink</name></expr></init></decl>;</init> <condition><expr><name><name>prev</name><index>[<expr><name>node</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>node</name> <operator>=</operator> <name><name>prev</name><index>[<expr><name>node</name></expr>]</index></name></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name>path_cap</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>path_cap</name></expr></argument>, <argument><expr><name><name>prev_edge</name><index>[<expr><name>node</name></expr>]</index></name><operator>-&gt;</operator><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>node</name> <init>= <expr><name>sink</name></expr></init></decl>;</init> <condition><expr><name><name>prev</name><index>[<expr><name>node</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>node</name> <operator>=</operator> <name><name>prev</name><index>[<expr><name>node</name></expr>]</index></name></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>edge</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>prev_edge</name><index>[<expr><name>node</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>cost</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>capacity</name></name> <operator>-=</operator> <name>path_cap</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>reverse_edge</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call><operator>.</operator><name>capacity</name> <operator>+=</operator> <name>path_cap</name></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><name>total_flow</name> <operator>+=</operator> <name>path_cap</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>total_cost</name> <operator>+=</operator> <name>reduce_sum</name> <operator>*</operator> <name>path_cap</name></expr>;</expr_stmt>
        }</block> while <condition>(<expr><name>total_flow</name> <operator>&lt;</operator> <name>flow_goal</name> <operator>&amp;&amp;</operator> <call><name>dijkstra</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>sink</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

        <return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>total_flow</name></expr></argument>, <argument><expr><name>total_cost</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
};

<function><type><name>ll</name></type> <name>modExp</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>exp</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><name><operator>::</operator><name>mod</name></name></expr></init></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>exp</name></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>exp</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><operator>(</operator><name>ans</name> <operator>*=</operator> <name>base</name><operator>)</operator> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><operator>(</operator><name>base</name> <operator>*=</operator> <name>base</name><operator>)</operator> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>exp</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>modInv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><name><operator>::</operator><name>mod</name></name></expr></init></decl></parameter>)</parameter_list><block>{
    <return>return <expr><call><name>modExp</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>mod</name><operator>-</operator><literal type="number">2</literal></expr></argument>,<argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>modFact</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><name><operator>::</operator><name>mod</name></name></expr></init></decl></parameter>)</parameter_list><block>{
    <expr_stmt><expr><name>ifact</name><operator>=</operator><operator>new</operator> <name><name>ll</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fact</name><operator>=</operator><operator>new</operator> <name><name>ll</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fact</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>fact</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>fact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>i</name><operator>*</operator><name><name>fact</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name><name>ifact</name><index>[<expr><name>n</name></expr>]</index></name><operator>=</operator><call><name>modInv</name><argument_list>(<argument><expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>ifact</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name><name>ifact</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
}</block></function>
<function><type><name>ll</name></type> <name>ncr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><name><operator>::</operator><name>mod</name></name></expr></init></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>n</name><operator>&lt;</operator><name>r</name> <operator>||</operator> <name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name><operator>*=</operator><name><name>ifact</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name><operator>*=</operator><name><name>ifact</name><index>[<expr><name>n</name><operator>-</operator><name>r</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>npr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><name><operator>::</operator><name>mod</name></name></expr></init></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>n</name><operator>&lt;</operator><name>r</name> <operator>||</operator> <name>r</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><name><name>fact</name><index>[<expr><name>n</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name><operator>*=</operator><name><name>ifact</name><index>[<expr><name>n</name><operator>-</operator><name>r</name></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><name>ans</name><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<class>class <name>DSU</name><block>{<private type="default">
</private><public>public:
    <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type><name>p</name></decl>, <modifier>*</modifier><decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <constructor><name>DSU</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>p</name><operator>=</operator><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">50</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name><operator>=</operator><operator>new</operator> <name><name>int</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">50</literal></expr>]</index></name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>+</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></for>
    }</block></constructor>
    <destructor><name>~<name>DSU</name></name><parameter_list>()</parameter_list><block>{
        <expr_stmt><expr><operator>delete</operator><index>[]</index> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>delete</operator><index>[]</index> <name>r</name></expr>;</expr_stmt>
    }</block></destructor>
    <function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
        <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name>x</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
        <return>return <expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
    <function><type><name>bool</name></type> <name>Unite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>a</name><operator>==</operator><name>b</name></expr>)</condition><then>
            <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if<condition>(<expr><name><name>r</name><index>[<expr><name>a</name></expr>]</index></name><operator>&lt;</operator><name><name>r</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>a</name></expr>]</index></name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><name><name>p</name><index>[<expr><name>b</name></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name><name>r</name><index>[<expr><name>a</name></expr>]</index></name><operator>==</operator><name><name>r</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><name>a</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></then></if>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
</public>}</block>;</class>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<class>class <name>BRestrictedRPS</name> <block>{<private type="default">
</private><public>public:
	<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>cin</name></decl></parameter>, <parameter><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>cout</name></decl></parameter>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>ct</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name>n</name> <operator>&amp;&amp;</operator> <name>a</name></expr></argument>&gt;</argument_list></name><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name>n</name> <operator>&amp;&amp;</operator> <name>b</name></expr></argument>&gt;</argument_list></name><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name>n</name> <operator>&amp;&amp;</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>ct</name><operator>++</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name>n</name> <operator>&amp;&amp;</operator> <name>a</name></expr></argument>&gt;</argument_list></name><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name>n</name> <operator>&amp;&amp;</operator> <name>b</name></expr></argument>&gt;</argument_list></name><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name><name>i</name><argument_list type="generic">&lt;<argument><expr><name>n</name> <operator>&amp;&amp;</operator> <name>c</name></expr></argument>&gt;</argument_list></name><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
                <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></for>
            <if>if<condition>(<expr><name>ct</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                    <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            }</block></else></if>

        }</block></while>
	}</block></function>
</public>}</block>;</class>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>BRestrictedRPS</name></type> <name>solver</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>istream</name></name><modifier>&amp;</modifier></type> <name>in</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cin</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name>ostream</name></name><modifier>&amp;</modifier></type> <name>out</name><argument_list>(<argument><expr><name><name>std</name><operator>::</operator><name>cout</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>solver</name><operator>.</operator><name>solve</name></name><argument_list>(<argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
