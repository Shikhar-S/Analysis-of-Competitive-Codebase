<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29589172_64029641.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a,b,sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name><init>=<expr><literal type="number">0x3f3f3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name><init>=<expr><operator>~</operator><operator>(</operator><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">63</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2050</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>ansedges</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
</public>}</block><decl><name><name>e</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>ll</name></type> <name><name>yes</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>d</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>fangwen</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name><name>PT</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>ll</name></type> <name>getprim</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>mem</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>ll</name></type> <name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><name><name>fangwen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>KASE</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>KASE</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>KASE</name></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>minn</name><init>=<expr><name>INF</name></expr></init></decl>,<decl><type ref="prev"/><name>nowpos</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>fangwen</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="boolean">false</literal><operator>&amp;&amp;</operator><name>minn</name><operator>&gt;</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
            	<expr_stmt><expr><name>minn</name><operator>=</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            	<expr_stmt><expr><name>nowpos</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        	}</block></then></if>
		}</block></for>
        <expr_stmt><expr><name><name>fangwen</name><index>[<expr><name>nowpos</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name><operator>+=</operator><name>minn</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>nowpos</name><operator>&amp;&amp;</operator><name><name>PT</name><index>[<expr><name>nowpos</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>cnt</name></expr>]</index></name><operator>=</operator><block>{<expr><name>nowpos</name></expr>,<expr><name><name>PT</name><index>[<expr><name>nowpos</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name><name>yes</name><index>[<expr><name>nowpos</name></expr>]</index></name><operator>=</operator><name><name>yes</name><index>[<expr><call><name>max</name><argument_list>(<argument><expr><name>nowpos</name></expr></argument>,<argument><expr><name><name>PT</name><index>[<expr><name>nowpos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name>nowpos</name><operator>!=</operator><name>i</name><operator>&amp;&amp;</operator><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;</operator><name><name>a</name><index>[<expr><name>nowpos</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>&amp;&amp;</operator><name><name>fangwen</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="boolean">false</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>nowpos</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>PT</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>nowpos</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt><expr_stmt><expr><name>T</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
            	<block type="pseudo"><if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt></block></then></if></block></for></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <decl_stmt><decl><type><name>ll</name></type> <name>ans1</name><init>=<expr><call><name>getprim</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>ans2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name><name>yes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>++</operator><name>ans2</name></expr>;</expr_stmt></block></then></if></block></for>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans1</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans2</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><if>if<condition>(<expr><name><name>yes</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
        <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>cnt</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>cnt</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument>,<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
