<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29582931_64024846.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRACE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_</name></cpp:macro> <cpp:value>&lt;&lt; " _ " &lt;&lt;</cpp:value></cpp:define>
 
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
  
<decl_stmt><decl><type><name>int</name></type> <name><name>h</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ld</name></type> <name><name>e</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>advance</name><parameter_list>(<parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>&amp;</modifier></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block></then> <else>else <block>{
        <if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>h</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for></block></for>

    <expr_stmt><expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>

        <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>possible</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ld</name></type> <name>sum_e</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><name>i</name></expr></init></decl>, <decl><type ref="prev"/><name>j1</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
                <if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>possible</name><operator>++</operator></expr>;</expr_stmt>
            
                <expr_stmt><expr><call><name>advance</name><argument_list>(<argument><expr><name>i1</name></expr></argument>, <argument><expr><name>j1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><name>i1</name> <operator>-</operator> <name><name>h</name><index>[<expr><name>i1</name></expr>]</index><index>[<expr><name>j1</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>j2</name> <init>= <expr><name>j1</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>sum_e</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i1</name></expr>]</index><index>[<expr><name>j1</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>e</name><index>[<expr><name>i2</name></expr>]</index><index>[<expr><name>j2</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>

            <expr_stmt><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>sum_e</name> <operator>+</operator> <operator>(</operator><name>ld</name><operator>)</operator><literal type="number">6</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>ld</name><operator>)</operator><name>possible</name></expr>;</expr_stmt>

            <if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block></else></if>

            <if>if <condition>(<expr><name>j</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>j</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
        }</block></while>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>e</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
