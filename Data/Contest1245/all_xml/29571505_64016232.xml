<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29571505_64016232.cpp"><comment type="block">/* Bismillahirrahmanirrahim */</comment>
<comment type="block">/* Author : Jehian Norman Saviero (@Reiva5) */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<comment type="line">// MACROS SAMPAH</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Jehian</name></cpp:macro> <cpp:value>using</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Norman</name></cpp:macro> <cpp:value>namespace</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Saviero</name></cpp:macro> <cpp:value>std</cpp:value></cpp:define>
 
<decl_stmt><decl><type><name>Jehian</name> <name>Norman</name></type> <name>Saviero</name></decl>;</decl_stmt>
 
<comment type="line">// MACROS TYPE</comment>
<typedef>typedef <type><name>long</name></type> <name>l</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name></type> <name>ul</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pi</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>l</name></expr></argument>,<argument><expr><name>l</name></expr></argument>&gt;</argument_list></name></type> <name>pl</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>l</name></expr></argument>&gt;</argument_list></name></type> <name>vl</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vll</name>;</typedef>
 
<comment type="line">// MACROS FOR PRINT</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nl</name></cpp:macro> <cpp:value>printf("\n")</cpp:value></cpp:define>
 
<comment type="line">// MACROS FOR ATTRIBUTE</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
 
<comment type="line">// MACROS FOR FUNCTION AND METHOD</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppf</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLN</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x), (x)+(n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUBE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(SQR(x)*(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int _qwe = sizeof(x)/sizeof(x[0]); _qwe; ) x[--_qwe] = (y)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x)*(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SSORT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>sz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(ALLN(x,sz))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((x), 0, sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VSORT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(ALL(x))</cpp:value></cpp:define>
 
<comment type="line">// MACROS READ INPUT</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sci</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scl</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%ld", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scll</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lld", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scd</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%lf", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scld</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%Lf", &amp;x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scul</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scl(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scull</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scll(x)</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>cEdges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>vll</name></type> <name>pset</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>initSet</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>pset</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>pset</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>pset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	}</block></for>
}</block></function>

<function><type><name>ll</name></type> <name>findSet</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><ternary><condition><expr><name><name>pset</name><index>[<expr><name>p</name></expr>]</index></name> <operator>==</operator> <name>p</name></expr> ?</condition><then> <expr><name>p</name></expr> </then><else>: <expr><name><name>pset</name><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <call><name>findSet</name><argument_list>(<argument><expr><name><name>pset</name><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>isSameSet</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><call><name>findSet</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>findSet</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>joinSet</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name><name>pset</name><index>[<expr><call><name>findSet</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <call><name>findSet</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>ll</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>pll</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter>, <parameter><decl><type><name>pll</name> <modifier>&amp;</modifier></type><name>B</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>fi</name></name><operator>-</operator><name><name>B</name><operator>.</operator><name>fi</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>se</name></name><operator>-</operator><name><name>B</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scll</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>source</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>initSet</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>dat</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scll</name><argument_list>(<argument><expr><name><name>dat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>scll</name><argument_list>(<argument><expr><name><name>dat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>vll</name></type> <name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>k</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>cEdges</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scll</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scll</name><argument_list>(<argument><expr><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<for>for <control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>cEdges</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <block>{<expr><call><name>dist</name><argument_list>(<argument><expr><name><name>dat</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dat</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>, <expr><block>{<expr><name>i</name></expr>, <expr><name>j</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>cEdges</name><index>[<expr><name>cnt</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <block>{<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><block>{<expr><name>source</name></expr>, <expr><name>i</name></expr>}</block></expr>}</block></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cnt</name> <operator>==</operator> <call><name><name>cEdges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>VSORT</name><argument_list>(<argument><expr><name>cEdges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>vll</name></type> <name>power</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cnt</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><operator>!</operator><call><name>isSameSet</name><argument_list>(<argument><expr><name><name>cEdges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>fi</name></name></expr></argument>, <argument><expr><name><name>cEdges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>joinSet</name><argument_list>(<argument><expr><name><name>cEdges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>fi</name></name></expr></argument>, <argument><expr><name><name>cEdges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name><name>cEdges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>fi</name></name> <operator>==</operator> <name>source</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>power</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>cEdges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>se</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>cEdges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>cEdges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><call><name><name>power</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>string</name></type> <name>sp</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>power</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%lld"</literal></expr></argument>, <argument><expr><call><name><name>sp</name><operator>.</operator><name>c_str</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>power</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>sp</name> <operator>=</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%ld\n"</literal></expr></argument>, <argument><expr><call><name><name>edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument>, <argument><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
