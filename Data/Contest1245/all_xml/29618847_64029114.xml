<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618847_64029114.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEB</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>if(1)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>if(0)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>NMAX</name> <init>= <expr><literal type="number">2123</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Vr</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Vr</name> <modifier>*</modifier></type> <name>up</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>hl</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<function><type><name>Vr</name> <modifier>*</modifier></type> <name>upup</name><parameter_list>()</parameter_list>
	<block>{
		<if>if<condition>(<expr><name>up</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>up</name><operator>==</operator><name>this</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>this</name></expr>;</return></block></then></if>
		<expr_stmt><expr><name>up</name><operator>=</operator><call><name><name>up</name><operator>-&gt;</operator><name>upup</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>up</name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>
<struct>struct <name>Hr</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>cost</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>out</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><name>Hr</name></type> <name>d</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><name>cost</name> <operator>&lt;</operator> <name><name>d</name><operator>.</operator><name>cost</name></name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Vr</name></type> <name><name>vr</name> <index>[<expr><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Hr</name></type> <name><name>hr</name> <index>[<expr><name>NMAX</name><operator>*</operator><name>NMAX</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>hrlen</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{

	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>)</operator></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name><name>hr</name><index>[<expr><name>hrlen</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>Hr</name><block>{<expr><literal type="number">0</literal></expr>,<expr><name>i</name></expr>,<expr><name><name>vr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>}</block></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name><name>hr</name><index>[<expr><name>hrlen</name><operator>++</operator></expr>]</index></name><operator>=</operator><name>Hr</name><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>,<expr><operator>(</operator><name><name>vr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name><operator>+</operator><name><name>vr</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>k</name><operator>)</operator> <operator>*</operator> <macro><name>ll</name><argument_list>(<argument>abs(vr[i].x-vr[j].x)+abs(vr[i].y-vr[j].y)</argument>)</argument_list></macro></expr>}</block></expr>;</expr_stmt>
		}</block></for></block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>hr</name></expr></argument>,<argument><expr><name>hr</name><operator>+</operator><name>hrlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>hrlen</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>Vr</name> <modifier>*</modifier></type> <name>a</name> <init>= <expr><name><name>vr</name><index>[<expr><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr>]</index></name><operator>.</operator><call><name>upup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Vr</name> <modifier>*</modifier></type> <name>b</name> <init>= <expr><name><name>vr</name><index>[<expr><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr>]</index></name><operator>.</operator><call><name>upup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>a</name><operator>!=</operator><name>b</name></expr>)</condition><then>	
		<block>{
			<expr_stmt><expr><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>hl</name></name> <operator>==</operator> <name><name>b</name><operator>-&gt;</operator><name>hl</name></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>up</name></name><operator>=</operator><name>b</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>hl</name></name><operator>++</operator></expr>;</expr_stmt>
			}</block></then>
			<elseif>else <if>if<condition>(<expr><name><name>a</name><operator>-&gt;</operator><name>hl</name></name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>hl</name></name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>up</name></name><operator>=</operator><name>a</name></expr>;</expr_stmt>
			}</block></then></if></elseif>
			<else>else <block type="pseudo"><expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>up</name></name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></else></if>
		}</block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>out</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>traf</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>dratu</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>hrlen</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>out</name><operator>+=</operator><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cost</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>traf</name><operator>++</operator></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>dratu</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%llu\n%d\n"</literal></expr></argument>,<argument><expr><name>out</name></expr></argument>,<argument><expr><name>traf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>hrlen</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		}</block></then></if>
	}</block></for>
	<if>if<condition>(<expr><name>traf</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>dratu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>hrlen</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>out</name></expr>)</condition><then>
		<block>{
			<if>if<condition>(<expr><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><empty_stmt>;</empty_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>a</name></expr></argument>,<argument><expr><name><name>hr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></then></if>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
