<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29598467_64003648.cpp">    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

    <using>using <namespace>namespace <name>std</name>;</namespace></using>

    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int a = 0; a &lt; (int)(e); a++)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forr</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>s</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int a = s; a &lt; (int)(e); a++)</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fore</name><parameter_list>(<parameter><type><name>e</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (auto&amp; e : a)</cpp:value></cpp:define>

    <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL</name></cpp:ifdef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logv</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{cerr &lt;&lt; #a &lt;&lt; " = "; fore(e, a) {cerr &lt;&lt; e &lt;&lt; " ";} cerr &lt;&lt; "\n";}</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logvp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{cerr &lt;&lt; #a &lt;&lt; " = "; fore(e, a) {cerr &lt;&lt; "(" &lt;&lt; e.first &lt;&lt; ", " &lt;&lt; e.second &lt;&lt; ") ";} cerr &lt;&lt; "\n";}</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logvv</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{cerr &lt;&lt; #a &lt;&lt; " = \n"; fore(r, a) { fore(e, r) {cerr &lt;&lt; e &lt;&lt; " ";} cerr &lt;&lt; "\n";} }</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logvf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{cerr &lt;&lt; #a"."#field &lt;&lt; " = \n"; fore(e, a) { cerr &lt;&lt; e.field &lt;&lt; " ";} cerr &lt;&lt; "\n"; }</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logs</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #a &lt;&lt; " = " &lt;&lt; (a) &lt;&lt; "\n";</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logss</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #a &lt;&lt; " = " &lt;&lt; (a) &lt;&lt; ", " &lt;&lt; #b &lt;&lt; " = " &lt;&lt; (b) &lt;&lt; "\n";</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #a &lt;&lt; " = " &lt;&lt; "(" &lt;&lt; a.first &lt;&lt; ", " &lt;&lt; a.second &lt;&lt; ")" &lt;&lt; "\n";</cpp:value></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cond</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>stmt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (pred) { stmt }</cpp:value></cpp:define>
    <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logv</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logvp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logvv</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logvf</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>field</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logs</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logss</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>logp</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cond</name><parameter_list>(<parameter><type><name>pred</name></type></parameter>, <parameter><type><name>stmt</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <using>using <name>i64</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
    <using>using <name>iip</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>i64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
    <using>using <name>ivec</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
    <using>using <name>llvec</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>i64</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
    <using>using <name>svec</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>Dim</name></parameter>&gt;</parameter_list></template>
    <type><name>auto</name></type> <name>make_vec</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Dim</name></type> <name>dim</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dim</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>Dim1</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Dim</name></parameter>&gt;</parameter_list></template>
    <type><name>auto</name></type> <name>make_vec</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>Dim1</name></type> <name>dim1</name></decl></parameter>, <parameter><decl><type><name>Dim</name><modifier>...</modifier></type> <name>dims</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>make_vec</name><argument_list>(<argument><expr><call><name>make_vec</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>dims</name><operator>...</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dim1</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name>bool</name></type> <name>uax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>newv</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <name>newv</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>v</name> <operator>=</operator> <name>newv</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then> <else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if> }</block></function>
    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name>bool</name></type> <name>uin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>v</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>newv</name></decl></parameter>)</parameter_list> <block>{ <if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>newv</name></expr>)</condition><then> <block>{ <expr_stmt><expr><name>v</name> <operator>=</operator> <name>newv</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then> <else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if> }</block></function>

    <function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>is</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type> <name>c</name></decl></parameter>)</parameter_list> <block>{ <for>for <control>(<init><expr><name>auto</name><operator>&amp;</operator> <name>e</name> <operator>:</operator> <name>c</name></expr></init>)</control> <block type="pseudo"><expr_stmt><expr><name>is</name> <operator>&gt;&gt;</operator> <name>e</name></expr>;</expr_stmt></block></for> <return>return <expr><name>is</name></expr>;</return> }</block></function>

    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name> <modifier>...</modifier></type><name>T</name></parameter>&gt;</parameter_list></template>
    <type><name>istream</name><modifier>&amp;</modifier></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><name>cin</name> <operator>&gt;&gt;</operator> <operator>...</operator> <operator>&gt;&gt;</operator> <name>args</name><operator>)</operator></expr>;</return> }</block></function>

    <decl_stmt><decl><specifier>static</specifier> <type><name>mt19937</name></type> <name>rande</name><argument_list>(<argument><expr><literal type="number">123123</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
    <type><name>T</name></type> <name>rand_int</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>from</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>to</name></decl></parameter>)</parameter_list> <block>{ <decl_stmt><decl><type><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>distr</name><argument_list>(<argument><expr><name>from</name></expr></argument>, <argument><expr><name>to</name></expr></argument>)</argument_list></decl>;</decl_stmt> <return>return <expr><call><name>distr</name><argument_list>(<argument><expr><name>rande</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>

    <function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>)</condition> <block>{
            <decl_stmt><decl><type><specifier>const</specifier> <name>i64</name></type> <name>M</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>auto</name></type> <name>dp</name> <init>= <expr><call><name>make_vec</name><argument_list>(<argument><expr><literal type="number">0ll</literal></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
            <macro><name>forn</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
                    <break>break;</break>
                }</block></then></if>
            }</block>
            <if>if <condition>(<expr><operator>!</operator><name>ok</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <macro><name>forr</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{            
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal><operator>)</operator></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
                }</block></then></if> 
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
            }</block>

            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>dp</name><index>[<expr><name>n</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></while>
    }</block></function>
    </unit>
