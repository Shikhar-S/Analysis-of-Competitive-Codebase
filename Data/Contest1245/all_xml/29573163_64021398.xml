<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29573163_64021398.cpp"><comment type="line">// Bismillahir Rahmanir Rahim</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>double</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Long</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>1e-12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>acos(-1.0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX</name></cpp:macro> <cpp:value>3000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS_INF</name></cpp:macro> <cpp:value>(1LL &lt;&lt; 55)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEG_INF</name></cpp:macro> <cpp:value>(-(1LL &lt;&lt; 55))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHT_MOST_INDEX</name></cpp:macro> <cpp:value>(1 &lt;&lt; 30)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFT_MOST_INDEX</name></cpp:macro> <cpp:value>(-(1 &lt;&lt; 30))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x, y, sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(A.begin(), A.end());</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REVERSE</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>reverse(A.begin(), A.end());</cpp:value></cpp:define>

<decl_stmt><decl><type><name>Long</name></type> <name><name>ANS</name><index>[<expr><name>MAX</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>aa</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>Long</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>tot</name></decl>,<decl><type ref="prev"/><name>temp</name></decl>,<decl><type ref="prev"/><name>curr</name></decl>,<decl><type ref="prev"/><name>val</name></decl>,<decl><type ref="prev"/><name>prev</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>t</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>,<decl><type ref="prev"/><name>flag</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>siz</name></decl>,<decl><type ref="prev"/><name>ii</name></decl>,<decl><type ref="prev"/><name>jj</name></decl>,<decl><type ref="prev"/><name>xx</name></decl>,<decl><type ref="prev"/><name>yy</name></decl>,<decl><type ref="prev"/><name>root</name></decl>,<decl><type ref="prev"/><name>ind</name></decl>,<decl><type ref="prev"/><name>len</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>xxx</name></decl>,<decl><type ref="prev"/><name>yyy</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>q</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>q</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>aa</name></expr>;</expr_stmt>

        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ANS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>aa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>a</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ANS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name><name>aa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>b</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ANS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></elseif>
            <elseif>else <if>if<condition>(<expr><name><name>aa</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>c</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ANS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if></elseif></if>
        }</block></for>

        <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>ANS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>a</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>ANS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then>
                <elseif>else <if>if<condition>(<expr><name>b</name></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>ANS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if></elseif>
                <else>else
                <block>{
                    <expr_stmt><expr><name><name>ANS</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then></if>
        }</block></for>

        <if>if<condition>(<expr><name>ans</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><name>char</name><operator>)</operator><name><name>ANS</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        }</block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
}</block></function>
</unit>
