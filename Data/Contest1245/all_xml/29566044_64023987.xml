<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29566044_64023987.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using  <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef  <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef  <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><name>pii</name></type> <name><name>nodePos</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>prim</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cost</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>ch</name><index>[<expr><literal type="number">2005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>co</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>mi</name></decl>,<decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>nodePos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>st</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>nodePos</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>prim</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>st</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>prim</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nd</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>mi</name> <operator>=</operator> <literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr><operator>,</operator><expr><name>pos</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><operator>!</operator><name><name>ch</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>prim</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>st</name> <operator>&lt;</operator> <name>mi</name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>mi</name><operator>=</operator><name><name>prim</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>st</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>pos</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
        <comment type="line">//printf("mi=%lld\n",mi);</comment>
        <expr_stmt><expr><name>sum</name><operator>+=</operator><name>mi</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>prim</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>nd</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><call><name><name>co</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>pos</name></expr>,<expr><name><name>prim</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>nd</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name><name>ch</name><index>[<expr><name>pos</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
            <if>if<condition>(<expr><operator>!</operator><name><name>ch</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then><block>{
                <expr_stmt><expr><name>val</name> <operator>=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>nodePos</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>st</name><operator>-</operator><name><name>nodePos</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>st</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>nodePos</name><index>[<expr><name>pos</name></expr>]</index></name><operator>.</operator><name>nd</name><operator>-</operator><name><name>nodePos</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name><name>cost</name><index>[<expr><name>pos</name></expr>]</index></name><operator>+</operator><name><name>cost</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
                <if>if<condition>(<expr><name><name>prim</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>st</name><operator>&gt;</operator><name>val</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name><name>prim</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>st</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>prim</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>nd</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>v</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%d\n"</literal></expr></argument>,<argument><expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name><name>co</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>co</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>it</name><operator>.</operator><name>st</name></name></expr></argument>,<argument><expr><name><name>it</name><operator>.</operator><name>nd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

}</block></function>
</unit>
