<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615689_64009726.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mo</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>,<decl><type ref="prev"/><name>c0</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tp</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>f0</name></decl>,<decl><type ref="prev"/><name>f1</name></decl>,<decl><type ref="prev"/><name>f2</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>f0</name><operator>=</operator><name>f1</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>tp</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'w'</literal><operator>||</operator><name>c</name><operator>==</operator><literal type="char">'m'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tp</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name>c0</name><operator>=</operator><name>c</name></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'a'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'z'</literal></expr>)</condition><block>{
		<if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'w'</literal><operator>||</operator><name>c</name><operator>==</operator><literal type="char">'m'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>tp</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>f2</name><operator>=</operator><operator>(</operator><name>f1</name><operator>+</operator><operator>(</operator><name>c</name><operator>==</operator><name>c0</name><operator>&amp;&amp;</operator><operator>(</operator><name>c0</name><operator>==</operator><literal type="char">'u'</literal><operator>||</operator><name>c0</name><operator>==</operator><literal type="char">'n'</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>f0</name><operator>)</operator><operator>%</operator><name>mo</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>f0</name><operator>=</operator><name>f1</name></expr><operator>,</operator><expr><name>f1</name><operator>=</operator><name>f2</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>c0</name><operator>=</operator><name>c</name></expr><operator>,</operator><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<if>if <condition>(<expr><name>tp</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
