<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616115_64033065.cpp"><comment type="block">/* ****TCIITB**** */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>io</name></cpp:macro>          <cpp:value>ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro>          <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro>          <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<cpp:macro><name>endl</name></cpp:macro>		<cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro>         <cpp:value>pair&lt;ll int,ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro>          <cpp:value>vector&lt;ll int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro>           <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro>           <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>(ll int)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hell</name></cpp:macro>        <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>for(ll int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lbnd</name></cpp:macro>        <cpp:value>lower_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ubnd</name></cpp:macro>        <cpp:value>upper_bound</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bs</name></cpp:macro>          <cpp:value>binary_search</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro>          <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>time</name></cpp:macro>        <cpp:value>cerr &lt;&lt; "\nTime elapsed: " &lt;&lt; 1000 * clock() / CLOCKS_PER_SEC &lt;&lt; "ms\n";</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro>  <cpp:value>2001</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>parent</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>findparent</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>node</name></decl></parameter>)</parameter_list>
<block>{
   <if>if<condition>(<expr><name><name>parent</name><index>[<expr><name>node</name></expr>]</index></name><operator>==</operator><name>node</name></expr>)</condition><then>
   <block type="pseudo"><return>return <expr><name>node</name></expr>;</return></block></then></if>

   <return>return <expr><operator>(</operator><name><name>parent</name><index>[<expr><name>node</name></expr>]</index></name><operator>=</operator><call><name>findparent</name><argument_list>(<argument><expr><name><name>parent</name><index>[<expr><name>node</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return> 
}</block></function>
<decl_stmt><decl><type><name>ll</name></type> <name><name>cord</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c1</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c2</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	
	<decl_stmt><decl><type><name>io</name></type>
	<name>cin</name>&gt;&gt;<name>n</name></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cord</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><name><name>cord</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>c1</name><index>[<expr><name>i</name></expr>]</index></name></expr>,<expr><block>{<expr><literal type="number">0</literal></expr>,<expr><name>i</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
	<block>{
		<macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
		<block>{
			<decl_stmt><decl><type><name>ll</name></type> <name>tc</name><init>=<expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>cord</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-</operator><name><name>cord</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>cord</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-</operator><name><name>cord</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>c2</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>c2</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>tc</name></expr>,<expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
	}</block>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
  	<expr_stmt><expr><name><name>parent</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>  
  	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="line">// sort in non-decreasing order according to weight </comment>
  	<decl_stmt><decl><type><name>ll</name></type> <name>weightmst</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></name></type> <name>direct</name></decl>;</decl_stmt>
  	<decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></name></type> <name>both</name></decl>;</decl_stmt>
  	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>v.size()</argument>)</argument_list></macro>
  <block>{
     <decl_stmt><decl><type><name>ll</name></type> <name>x</name><init>=<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>S</name><operator>.</operator><name>F</name></name></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>ll</name></type> <name>y</name><init>=<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>S</name><operator>.</operator><name>S</name></name></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>ll</name></type> <name>w</name><init>=<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>F</name></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>ll</name></type> <name>parentx</name><init>=<expr><call><name>findparent</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>ll</name></type> <name>parenty</name><init>=<expr><call><name>findparent</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <if>if<condition>(<expr><name>parentx</name><operator>==</operator><name>parenty</name></expr>)</condition><then>         <comment type="line">// if the edge have same parents means that will form a </comment>
     <block>{
                                 <comment type="line">// a cycle or loop</comment>
      
       <continue>continue;</continue>                  <comment type="line">// so we dont add it to mst    </comment>
     }</block></then>
     <else>else
     <block>{
       <expr_stmt><expr><name><name>parent</name><index>[<expr><name>parentx</name></expr>]</index></name><operator>=</operator><name>parenty</name></expr>;</expr_stmt>
       <expr_stmt><expr><name>weightmst</name><operator>+=</operator><name>w</name></expr>;</expr_stmt>
       <if>if<condition>(<expr><name>x</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
       	<block type="pseudo"><expr_stmt><expr><call><name><name>both</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
       <else>else
       <block>{
       	<if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then>
       	<block>{
       		<expr_stmt><expr><call><name><name>direct</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       	}</block></then>
       	<else>else
       	<block>{
       		<if>if<condition>(<expr><name>x</name><operator>!=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
       		<block>{
       			<expr_stmt><expr><call><name><name>direct</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       		}</block></then></if>
       	}</block></else></if>
       }</block></else></if>
     }</block></else></if>
  }</block>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>weightmst</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>direct</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>direct</name></expr></range></decl></init>)</control>
  <block>{
  	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>both</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>both</name></expr></range></decl></init>)</control>
  <block>{
  	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>F</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>S</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  }</block></for>
}</block></function></unit>
