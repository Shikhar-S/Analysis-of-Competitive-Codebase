<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29587748_64018602.cpp">                <comment type="line">// in the name of allah</comment>
                <comment type="line">// never give up :))))</comment>
                <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f1</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f2</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int ,int&gt;</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
                <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro>  <cpp:value>ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
                <using>using <namespace>namespace <name>std</name>;</namespace></using>
                <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mox</name><init>=<expr><literal type="number">1e2</literal><operator>+</operator><literal type="number">9</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>char</name></type> <name><name>ca</name><index>[<expr><name>mox</name></expr>]</index></name></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name><name>visit</name><index>[<expr><name>mox</name></expr>]</index></name></decl>;</decl_stmt>
                <function><name>main</name><parameter_list>()</parameter_list>
                <block>{
                     <decl_stmt><decl><type><name>ios</name>
                     <name>int</name></type> <name>t</name></decl>;</decl_stmt>
                     <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
                     <for>for<control>(<init><decl><type><name>int</name></type> <name>ii</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>ii</name><operator>&lt;</operator><name>t</name></expr> ;</condition> <incr><expr><name>ii</name><operator>++</operator></expr></incr>)</control>
                     <block>{
                         <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
                         <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
                         <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
                         <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
                         <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
                         <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
                         <decl_stmt><decl><type><name>int</name></type> <name>a2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>b2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>c2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                         <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr> ;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                         <block>{
                             <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then>
                               <block type="pseudo"><expr_stmt><expr><name>a2</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
                               <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then>
                                <block type="pseudo"><expr_stmt><expr><name>c2</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
                               <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then>
                                <block type="pseudo"><expr_stmt><expr><name>b2</name><operator>+=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
                         }</block></for>
                         <decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><operator>(</operator><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>b2</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a2</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

                         <if>if<condition>(<expr><name>x</name><operator>&lt;</operator><operator>(</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition><then>
                         <block>{
                             <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
                         }</block></then>
                         <else>else
                         <block>{
                             <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
                             <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                             <block>{
                                 <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then>
                                 <block>{
                                     <expr_stmt><expr><name>a</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                                     <expr_stmt><expr><name><name>ca</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                                     <expr_stmt><expr><name><name>visit</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                                 }</block></then></if>
                                   <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal><operator>&amp;&amp;</operator><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                                    <block>{
                                        <expr_stmt><expr><name>b</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                                        <expr_stmt><expr><name><name>ca</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                                               <expr_stmt><expr><name><name>visit</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                                    }</block></then></if>
                               <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                                <block>{
                                    <expr_stmt><expr><name>c</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>ca</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                                           <expr_stmt><expr><name><name>visit</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                                }</block></then></if>

                             }</block></for>
                             <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                             <block>{
                                 <if>if<condition>(<expr><name><name>visit</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                                 <block>{
                                       <if>if<condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                                 <block>{
                                     <expr_stmt><expr><name>a</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                                     <expr_stmt><expr><name><name>ca</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>

                                 }</block></then>
                                   <elseif>else <if>if<condition>(<expr><name>b</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                                    <block>{
                                        <expr_stmt><expr><name>b</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                                        <expr_stmt><expr><name><name>ca</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>

                                    }</block></then></if></elseif>
                                <else>else
                                <block>{
                                    <expr_stmt><expr><name>c</name><operator>-=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                                    <expr_stmt><expr><name><name>ca</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>

                                }</block></else></if>

                                 }</block></then></if>
                             }</block></for>
                             <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr> ;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                             <block>{
                                 <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ca</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
                                 <expr_stmt><expr><name><name>visit</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                             }</block></for>
                             <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>

                         }</block></else></if>

                     }</block></for>

                }</block></function>
</unit>
