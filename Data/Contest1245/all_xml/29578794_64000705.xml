<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29578794_64000705.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
  
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fst</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0); cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>open</name></cpp:macro> <cpp:value>freopen("input.txt", "r", stdin); freopen("output.txt", "w", stdout);</cpp:value></cpp:define>
   
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
    
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name>ios</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>bob</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
    	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator>  <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name>int</name></type> <name>old_a</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>int</name></type> <name>old_b</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>int</name></type> <name>old_c</name> <init>= <expr><name>c</name></expr></init></decl>;</decl_stmt>
     	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>bob</name></expr>;</expr_stmt>
    	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>bob</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    		<if>if <condition>(<expr><name><name>bob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then><block>{
    			<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
    			<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		}</block></then></if>
    		<if>if <condition>(<expr><name><name>bob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then><block>{
    			<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
    			<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		}</block></then></if>
    		<if>if <condition>(<expr><name><name>bob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then><block>{
    			<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
    			<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		}</block></then></if>
    	}</block></for>
    	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	<decl_stmt><decl><type><name>string</name></type> <name>ans</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>bob</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    		<if>if <condition>(<expr><name><name>bob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>old_b</name></expr>)</condition><then><block>{
    			<expr_stmt><expr><name>old_b</name><operator>--</operator></expr>;</expr_stmt>
    			<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
    			<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		}</block></then><elseif>else <if>if <condition>(<expr><name><name>bob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>old_c</name></expr>)</condition><then><block>{
    			<expr_stmt><expr><name>old_c</name><operator>--</operator></expr>;</expr_stmt>
    			<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
    			<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		}</block></then></if></elseif><elseif>else <if>if <condition>(<expr><name><name>bob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>old_a</name></expr>)</condition><then><block>{
    			<expr_stmt><expr><name>old_a</name><operator>--</operator></expr>;</expr_stmt>
    			<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
    			<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		}</block></then></if></elseif><else>else<block>{
    			<if>if <condition>(<expr><name>b</name></expr>)</condition><then><block>{
    				<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'P'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    				<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
    			}</block></then><elseif>else <if>if <condition>(<expr><name>a</name></expr>)</condition><then><block>{
    				<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'R'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    				<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
    			}</block></then></if></elseif><elseif>else <if>if <condition>(<expr><name>c</name></expr>)</condition><then><block>{
    				<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><literal type="char">'S'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    				<expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>
    			}</block></then></if></elseif></if>
    		}</block></else></if>
    	}</block></for>
    	<if>if <condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <operator>(</operator><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><then><block>{
    		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    	}</block></then><else>else<block>{
    		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    	}</block></else></if>
    }</block></while>
}</block></function></unit>
