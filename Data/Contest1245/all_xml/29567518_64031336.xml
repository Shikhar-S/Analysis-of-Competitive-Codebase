<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29567518_64031336.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<struct>struct <name>node</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dis</name></decl>;</decl_stmt>
</public>}</block> <decl><name><name>A</name><index>[<expr><literal type="number">4100000</literal></expr>]</index></name></decl>;</struct>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>belong</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ans1</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tot1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>a</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>b</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>tot2</name></decl>,<decl><type ref="prev"/><name><name>ans21</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>ans22</name><index>[<expr><literal type="number">2020</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>mycmp</name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>m</name></decl></parameter>,<parameter><decl><type><name>node</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<if>if<condition>(<expr><name><name>m</name><operator>.</operator><name>dis</name></name><operator>&gt;</operator><name><name>n</name><operator>.</operator><name>dis</name></name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>fa</name><init>=<expr><name>x</name></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>belong</name><index>[<expr><name>x</name></expr>]</index></name><operator>!=</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>fa</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name><name>belong</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name><name>belong</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><name>fa</name></expr>;</expr_stmt>
    <return>return <expr><name>fa</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for <control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>A</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>A</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>dis</name><operator>=</operator><operator>(</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>b</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
		}</block></for></block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>A</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>A</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>A</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>dis</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>A</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>A</name><operator>+</operator><name>k</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>mycmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>belong</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>rx</name><init>=<expr><call><name>find</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <decl_stmt><decl><type><name>int</name></type> <name>ry</name><init>=<expr><call><name>find</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>rx</name><operator>!=</operator><name>ry</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>cnt</name><operator>--</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dis</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>belong</name><index>[<expr><name>rx</name></expr>]</index></name><operator>=</operator><name>ry</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>tot1</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans1</name><index>[<expr><name>tot1</name></expr>]</index></name><operator>=</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>tot2</name><operator>++</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans21</name><index>[<expr><name>tot2</name></expr>]</index></name><operator>=</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ans22</name><index>[<expr><name>tot2</name></expr>]</index></name><operator>=</operator><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></then></if>
		<if>if <condition>(<expr><operator>!</operator><name>cnt</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>tot1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>tot1</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name><name>ans1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>tot2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>tot2</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>ans21</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>ans22</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<comment type="line">//for (int i=1;i&lt;=k;i++) printf("%d ",A[i].dis);</comment>
}</block></function></unit>
