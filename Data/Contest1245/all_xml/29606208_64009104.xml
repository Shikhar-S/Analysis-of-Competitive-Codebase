<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29606208_64009104.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast,fast-math,unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
  
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
  
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
<comment type="line">//#define double long double</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(C).begin(), (C).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>C</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(C).rbegin(), (C).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " : " &lt;&lt; x &lt;&lt; endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265358979</cpp:value></cpp:define>
  
<using>using <namespace>namespace <name>std</name>;</namespace></using>
        
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ull</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using>using <name>pii</name> <init>= <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
        
<comment type="block">/* 
const ll MAX_MEM = 7e8;
char MEM[MAX_MEM];
ll MEM_POS = 0;
void* operator new(size_t x)
{
    auto ret = MEM + MEM_POS;
    MEM_POS += x;
    assert(MEM_POS &lt; MAX_MEM);
    return ret;
}
void operator delete(void*)
{}
*/</comment>
        
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name> <operator>:</operator> <name>a</name></expr></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>i</name></expr>;</expr_stmt></block></for>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>
        
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> 
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name> <operator>:</operator> <name>a</name></expr></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>
        
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name> <parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>U</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>
        
<function type="operator"><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>, <parameter><type><name>class</name></type> <name>U</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name> <parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>
        
<function><specifier>inline</specifier> <type><name>void</name></type> <name>Start</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen(".in", "r", stdin);</comment>
    <comment type="line">//freopen(".out", "w", stdout);</comment>
}</block></function>

<struct>struct <name>DSU</name>
<block>{<public type="default">
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <constructor><name>DSU</name><parameter_list>()</parameter_list> <block>{}</block></constructor>
    <constructor><name>DSU</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_n</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>_n</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></constructor>
    <function><type><name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
    <block>{
        <return>return <expr><ternary><condition><expr><name><name>p</name><index>[<expr><name>v</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>v</name></expr> </then><else>: <expr><name><name>p</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <call><name>get</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>
    <function><type><name>void</name></type> <name>unit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>
    <block>{
        <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>get</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>u</name> <operator>==</operator> <name>v</name></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then></if>
        <if>if <condition>(<expr><operator>-</operator><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&lt;</operator> <operator>-</operator><name><name>p</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+=</operator> <name><name>p</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name>u</name></expr>;</expr_stmt>
    }</block></function>
</public>}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<function><type><name>ll</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>pii</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>pii</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><call><name>llabs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>llabs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>Start</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>a</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>k</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>e</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
        <block>{
            <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <call><name>dist</name><argument_list>(<argument><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>DSU</name></type> <name>pel</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>ver</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>edg</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><index>[<expr><name>w</name></expr><operator>,</operator> <name>uv</name>]</index> <operator>:</operator> <name>e</name></expr></init>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>uv</name><operator>.</operator><name>x</name></name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>uv</name><operator>.</operator><name>y</name></name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name><name>pel</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>pel</name><operator>.</operator><name>get</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>pel</name><operator>.</operator><name>unit</name></name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>u</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><call><name><name>ver</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else
            <block type="pseudo"><expr_stmt><expr><call><name><name>edg</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>uv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <call><name><name>ver</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <name>ver</name> <operator>&lt;&lt;</operator> <name>endl</name> <operator>&lt;&lt;</operator> <call><name><name>edg</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name> <operator>:</operator> <name>edg</name></expr></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
