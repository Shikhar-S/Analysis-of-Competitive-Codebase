<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618411_64020758.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><name>B</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>lesser</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>greater</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>differ</name></decl></parameter>)</parameter_list> <block>{ <comment type="line">// Building (a, b) l &lt;= a &lt;= b &lt;= r</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>bl</name></decl>, <decl><type ref="prev"/><name>br</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>b</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<return>return <expr><ternary><condition><expr><name>differ</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
	}</block></then></if>

	<if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
		<return>return <expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name></expr>;</return>
	}</block></then></if>

	<expr_stmt><expr><name>bl</name> <operator>=</operator> <operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <name>b</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>br</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <name>b</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<if>if <condition>(<expr><name>lesser</name> <operator>and</operator> <name>greater</name> <operator>and</operator> <name>differ</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 00</comment>
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 01</comment>
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 10</comment>
	}</block></then>
	<elseif>else <if>if <condition>(<expr><name>lesser</name> <operator>and</operator> <name>greater</name> <operator>and</operator> <operator>!</operator><name>differ</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 00</comment>
		<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 01</comment>
	}</block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>lesser</name> <operator>and</operator> <operator>!</operator><name>greater</name> <operator>and</operator> <name>differ</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>bl</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 10</comment>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 00</comment>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 01</comment>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 10</comment>
		}</block></else></if>
	}</block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><name>lesser</name> <operator>and</operator> <operator>!</operator><name>greater</name> <operator>and</operator> <operator>!</operator><name>differ</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>bl</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 00</comment>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 01</comment>
		}</block></else></if>
	}</block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><operator>!</operator><name>lesser</name> <operator>and</operator> <name>greater</name> <operator>and</operator> <name>differ</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>br</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 00</comment>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 01</comment>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 10</comment>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 00</comment>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 10</comment>
		}</block></else></if>
	}</block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><operator>!</operator><name>lesser</name> <operator>and</operator> <name>greater</name> <operator>and</operator> <operator>!</operator><name>differ</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>br</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 00</comment>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 01</comment>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 00</comment>
		}</block></else></if>
	}</block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><operator>!</operator><name>lesser</name> <operator>and</operator> <operator>!</operator><name>greater</name> <operator>and</operator> <name>differ</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>bl</name> <operator>==</operator> <literal type="number">1</literal> <operator>and</operator> <name>br</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 10</comment>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name>bl</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 10</comment>
		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name>br</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 00</comment>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 01</comment>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 10</comment>
		}</block></then></if></elseif>
		<else>else <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 00</comment>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 10</comment>
		}</block></else></if>
	}</block></then></if></elseif>
	<elseif>else <if>if <condition>(<expr><operator>!</operator><name>lesser</name> <operator>and</operator> <operator>!</operator><name>greater</name> <operator>and</operator> <operator>!</operator><name>differ</name></expr>)</condition><then> <block>{
		<if>if <condition>(<expr><name>bl</name> <operator>==</operator> <literal type="number">1</literal> <operator>and</operator> <name>br</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name>bl</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{

		}</block></then></if></elseif>
		<elseif>else <if>if <condition>(<expr><name>br</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 00</comment>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 01</comment>
		}</block></then></if></elseif>
		<else>else <block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name> <operator>+=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// 00</comment>
		}</block></else></if>
	}</block></then></if></elseif></if>

	<return>return <expr><name><name>dp</name><index>[<expr><name>b</name></expr>]</index><index>[<expr><name>lesser</name></expr>]</index><index>[<expr><name>greater</name></expr>]</index><index>[<expr><name>differ</name></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><call><name>solve</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
