include directive file using namespace name function type name name parameter_list parameter decl type name name parameter decl type name name block if condition expr name operator literal type number then block type pseudo return expr name return expr operator call name argument_list argument expr name argument expr name operator name operator function type name name parameter_list block decl_stmt decl type name name expr_stmt expr name operator name decl_stmt decl type name name decl type ref prev name decl type ref prev name decl type ref prev name decl_stmt decl type name name while condition expr name operator block expr_stmt expr name operator name operator name operator name operator name decl_stmt decl type name name argument_list type generic argument expr name name decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name init expr literal type number expr_stmt expr name operator name for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr name operator block switch condition expr name name index expr name block case expr literal type char expr_stmt expr name operator break case expr literal type char expr_stmt expr name operator break case expr literal type char expr_stmt expr name operator break if condition expr name operator name then block expr_stmt expr name operator name for control init decl type name name init expr literal type number condition expr name operator name operator name incr expr name operator block expr_stmt expr call name name operator name argument_list argument expr literal type char else block type pseudo expr_stmt expr name operator name if condition expr name operator name then block expr_stmt expr name operator name for control init decl type name name init expr literal type number condition expr name operator name operator name incr expr name operator block expr_stmt expr call name name operator name argument_list argument expr literal type char else block type pseudo expr_stmt expr name operator name if condition expr name operator name then block expr_stmt expr name operator name for control init decl type name name init expr literal type number condition expr name operator name operator name incr expr name operator block expr_stmt expr call name name operator name argument_list argument expr literal type char else block type pseudo expr_stmt expr name operator name decl_stmt decl type name name init expr literal type number if condition expr name operator operator name operator literal type number operator operator literal type number then block expr_stmt expr name operator literal type string operator name for control init decl type name name init expr literal type number condition expr name operator call name name operator name argument_list incr expr name operator block switch condition expr name name index expr name block case expr literal type char if condition expr name operator literal type number then block expr_stmt expr name operator expr_stmt expr name operator literal type string else block expr_stmt expr name operator name name index expr name operator break case expr literal type char if condition expr name operator literal type number then block expr_stmt expr name operator expr_stmt expr name operator literal type string else block expr_stmt expr name operator name name index expr name operator break case expr literal type char if condition expr name operator literal type number then block expr_stmt expr name operator expr_stmt expr name operator literal type string else block expr_stmt expr name operator name name index expr name operator break expr_stmt expr name operator name else block type pseudo expr_stmt expr name operator literal type string return expr literal type number 
