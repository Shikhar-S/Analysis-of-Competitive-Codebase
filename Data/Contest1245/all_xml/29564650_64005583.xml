<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29564650_64005583.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<namespace>namespace <name>RNG</name><block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl>;</decl_stmt>
    <function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>seed</name><operator>=</operator><name>p</name></expr>;</expr_stmt>}</block></function>
    <function><type><name>unsigned</name> <name>int</name></type> <name>rnd</name><parameter_list>()</parameter_list>
    <block>{
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>res</name><init>=<expr><operator>(</operator><name>seed</name><operator>&lt;&lt;</operator><literal type="number">4</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>seed</name><operator>^</operator><literal type="number">0x23414326</literal><operator>)</operator><operator>-</operator><operator>(</operator><name>seed</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator><operator>-</operator><operator>(</operator><name>seed</name><operator>^</operator><literal type="number">0x54378320</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name>seed</name><operator>=</operator><operator>(</operator><operator>(</operator><name>seed</name><operator>+</operator><name>res</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>^</operator><name>res</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr>;</return>
    }</block></function>
}</block></namespace>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>,<decl><type ref="prev"/><name><name>fib</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>fib</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
	<if>if<condition>(<expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call><operator>!=</operator><name><name>s</name><operator>.</operator><name>npos</name></name><operator>||</operator><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call><operator>!=</operator><name><name>s</name><operator>.</operator><name>npos</name></name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>fib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">100000</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>fib</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>fib</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>fib</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>cnt</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><call><name>count</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if></elseif></if>
	}</block></for>
	<if>if<condition>(<expr><name>cnt</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><call><name>count</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name>cnt</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><call><name>count</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if></elseif></if>
	}</block></for>
	<if>if<condition>(<expr><name>cnt</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><call><name>count</name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr><operator>,</operator><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
