<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615678_64035588.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name><name>l</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>l</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        }</block></then>
        <else>else<block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>l</name><index>[<expr><operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <name>i</name> <operator>%</operator> <literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <decl_stmt><decl><type><name>double</name></type> <name><name>ans</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <argument_list>{<argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name><name>nok</name><index>[<expr><literal type="number">100</literal></expr>]</index></name> <argument_list>{<argument><expr><literal type="number">0</literal></expr></argument>}</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>ans</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">6.0</literal></expr>;</expr_stmt></block></for>
        <if>if<condition>(<expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>nok</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>up</name></decl>;</decl_stmt>
            <if>if<condition>(<expr><name><name>l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>up</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>l</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>up</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>-</operator> <name><name>l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <literal type="number">9</literal> <operator>-</operator> <operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block></else></if>
            <if>if<condition>(<expr><name><name>l</name><index>[<expr><name>up</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>nok</name><index>[<expr><name>up</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ans</name><index>[<expr><name>up</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>ans</name><index>[<expr><literal type="number">99</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function></unit>
