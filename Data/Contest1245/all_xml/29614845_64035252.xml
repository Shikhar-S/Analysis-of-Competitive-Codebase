<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29614845_64035252.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>byebye</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>_rpl</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>_rpl</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><type><name>int</name></type> <name>nextint</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>x</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>nextll</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return <expr><name>x</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>emax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>t1</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>t2</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>t1</name><operator>&lt;</operator><name>t2</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>t1</name><operator>=</operator><name>t2</name></expr>;</expr_stmt></block></then></if><return>return <expr><name>t1</name></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>T</name></type> <name>emin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>t1</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>t2</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><name>t1</name><operator>&gt;</operator><name>t2</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>t1</name><operator>=</operator><name>t2</name></expr>;</expr_stmt></block></then></if><return>return <expr><name>t1</name></expr>;</return>}</block></function>

<function><type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ret</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>c</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>c</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>f</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<while>while<condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>c</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>)</condition><block>{<expr_stmt><expr><name>ret</name><operator>=</operator><name>ret</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt><expr_stmt><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<return>return <expr><name>ret</name><operator>*</operator><name>f</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>getbit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><operator>(</operator><name>x</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>p</name><operator>)</operator><operator>)</operator></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>c1</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>c2</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>leasta</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>mosta</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>leastb</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>mostb</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>ln</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>rn</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>c1</name><operator>&amp;&amp;</operator><name>c2</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><operator>(</operator><name>c1</name><operator>&lt;</operator><name>ln</name><operator>)</operator><operator>&amp;&amp;</operator><name>leasta</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><operator>(</operator><name>c1</name><operator>&gt;</operator><name>rn</name><operator>)</operator><operator>&amp;&amp;</operator><name>mosta</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><operator>(</operator><name>c2</name><operator>&lt;</operator><name>ln</name><operator>)</operator><operator>&amp;&amp;</operator><name>leastb</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><operator>(</operator><name>c2</name><operator>&gt;</operator><name>rn</name><operator>)</operator><operator>&amp;&amp;</operator><name>mostb</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>dfs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>leasta</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>mosta</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>leastb</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>mostb</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>pos</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1ll</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>leasta</name></expr>]</index><index>[<expr><name>mosta</name></expr>]</index><index>[<expr><name>leastb</name></expr>]</index><index>[<expr><name>mostb</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>leasta</name></expr>]</index><index>[<expr><name>mosta</name></expr>]</index><index>[<expr><name>leastb</name></expr>]</index><index>[<expr><name>mostb</name></expr>]</index></name></expr>;</return></block></then></if>
	<decl_stmt><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>ret</name><init>=<expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>leasta</name></expr>]</index><index>[<expr><name>mosta</name></expr>]</index><index>[<expr><name>leastb</name></expr>]</index><index>[<expr><name>mostb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ret</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>bit1</name><init>=<expr><call><name>getbit</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>bit2</name><init>=<expr><call><name>getbit</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<comment type="line">//cerr&lt;&lt;getbit(l,0);</comment>
	<comment type="line">//printf("PREV %d %d %d %d %d %d\n",pos,leasta,mosta,leastb,mostb,ret);</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>c1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c1</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>c1</name></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>c2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>c2</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>c2</name></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>c1</name><operator>==</operator><literal type="number">1</literal><operator>&amp;&amp;</operator><name>c2</name><operator>==</operator><literal type="number">1</literal><operator>||</operator><operator>!</operator><call><name>check</name><argument_list>(<argument><expr><name>c1</name></expr></argument>,<argument><expr><name>c2</name></expr></argument>,<argument><expr><name>leasta</name></expr></argument>,<argument><expr><name>mosta</name></expr></argument>,<argument><expr><name>leastb</name></expr></argument>,<argument><expr><name>mostb</name></expr></argument>,<argument><expr><name>bit1</name></expr></argument>,<argument><expr><name>bit2</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
			<decl_stmt><decl><type><name>bool</name></type> <name>nxtla</name><init>=<expr><name>leasta</name><operator>&amp;&amp;</operator><operator>(</operator><name>bit1</name><operator>==</operator><name>c1</name><operator>)</operator></expr></init></decl>,<decl><type ref="prev"/><name>nxtra</name><init>=<expr><name>mosta</name><operator>&amp;&amp;</operator><operator>(</operator><name>bit2</name><operator>==</operator><name>c1</name><operator>)</operator></expr></init></decl>,<decl><type ref="prev"/><name>nxtlb</name><init>=<expr><name>leastb</name><operator>&amp;&amp;</operator><operator>(</operator><name>bit1</name><operator>==</operator><name>c2</name><operator>)</operator></expr></init></decl>,<decl><type ref="prev"/><name>nxtrb</name><init>=<expr><name>mostb</name><operator>&amp;&amp;</operator><operator>(</operator><name>bit2</name><operator>==</operator><name>c2</name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<comment type="line">//if(pos==1&amp;&amp;nxtla==0&amp;&amp;nxtra==0&amp;&amp;nxtlb==0&amp;&amp;nxtrb==0)printf("HEY!%d %d %d %d %d %d\n",pos,leasta,mosta,leastb,mostb,ret);</comment>
		<comment type="line">//	if(pos==2&amp;&amp;nxtla==0&amp;&amp;nxtra==)</comment>
			<expr_stmt><expr><name>ret</name><operator>+=</operator><call><name>dfs</name><argument_list>(<argument><expr><name>pos</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>nxtla</name></expr></argument>,<argument><expr><name>nxtra</name></expr></argument>,<argument><expr><name>nxtlb</name></expr></argument>,<argument><expr><name>nxtrb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<comment type="line">//printf("%d %d %d %d %d %d\n",pos,leasta,mosta,leastb,mostb,ret);</comment>
	<comment type="line">//cerr&lt;&lt;ret&lt;&lt;endl;</comment>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>MAIN</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>l</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr><operator>,</operator><expr><name>r</name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><call><name>dfs</name><argument_list>(<argument><expr><literal type="number">31</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>T</name><init>=<expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>MAIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
