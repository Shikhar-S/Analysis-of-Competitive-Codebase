<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29576605_64019391.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gc</name></cpp:macro> <cpp:value>getchar</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>re</name></cpp:macro> <cpp:value>register</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(re int i=s;i&lt;=t;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>reb</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(re int i=s;i&gt;=t;--i)</cpp:value></cpp:define>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>Readin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>X</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>X</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>bool</name></type> <name>F</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>C</name><init>=<expr><call><name>gc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name><name>C</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal> <operator>or</operator> <name>C</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition><block>{<if>if<condition>(<expr><name>C</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>F</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>C</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while>
	<while>while<condition>(<expr><name>C</name><operator>&lt;=</operator><literal type="char">'9'</literal> <operator>and</operator> <name>C</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>X</name><operator>=</operator><operator>(</operator><name>X</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>X</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>C</name><operator>&amp;</operator><literal type="number">15</literal><operator>)</operator></expr><operator>,</operator><expr><name>C</name><operator>=</operator><call><name>gc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<if>if<condition>(<expr><name>F</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>X</name><operator>=</operator><operator>-</operator><name>X</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><specifier>inline</specifier> <type><name>void</name></type> <name>Prt</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>X</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>X</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>X</name><operator>=</operator><operator>-</operator><name>X</name></expr>;</expr_stmt></block></then></if>
	<if>if<condition>(<expr><name>X</name><operator>&gt;</operator><literal type="number">9</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>Prt</name><argument_list>(<argument><expr><name>X</name><operator>/</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>X</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MaxN</name><init>=<expr><literal type="number">2005</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>Cnt</name></decl>,<decl><type ref="prev"/><name><name>fa</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Ansx</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>Ansy</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>cnt_edge</name></decl>,<decl><type ref="prev"/><name>cnt_p</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>blt</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>Ans</name></decl>;</decl_stmt>
<struct>struct <name>Edge</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>Cost</name></decl>;</decl_stmt>
	<function type="operator"><specifier>inline</specifier> <type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Edge</name></type> <name>ano</name></decl></parameter>)</parameter_list> <specifier>const</specifier><block>{
		<return>return <expr><name>Cost</name><operator>&lt;</operator><name><name>ano</name><operator>.</operator><name>Cost</name></name></expr>;</return>
	}</block></function>
</public>}</block><decl><name><name>e</name><index>[<expr><name>MaxN</name><operator>*</operator><name>MaxN</name><operator>+</operator><name>MaxN</name></expr>]</index></name></decl>;</struct>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>gf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><ternary><condition><expr><name>x</name><operator>==</operator><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr>?</condition><then><expr><name>x</name></expr></then><else>:<expr><call><name>gf</name><argument_list>(<argument><expr><name><name>fa</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>Readin</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>Readin</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>Readin</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>fa</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>Readin</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>e</name><index>[<expr><operator>++</operator><name>Cnt</name></expr>]</index></name><operator>.</operator><name>Cost</name><operator>=</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator><expr><name><name>e</name><index>[<expr><name>Cnt</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name><name>e</name><index>[<expr><name>Cnt</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><expr_stmt><expr><call><name>Readin</name><argument_list>(<argument><expr><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n-<literal type="number">1</literal></argument>)</argument_list></macro><macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name><name>e</name><index>[<expr><operator>++</operator><name>Cnt</name></expr>]</index></name><operator>.</operator><name>Cost</name><operator>=</operator><literal type="number">1ll</literal><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><call>(<name>ll</name>)<argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>e</name><index>[<expr><name>Cnt</name></expr>]</index></name><operator>.</operator><name>x</name><operator>=</operator><name>i</name></expr><operator>,</operator><expr><name><name>e</name><index>[<expr><name>Cnt</name></expr>]</index></name><operator>.</operator><name>y</name><operator>=</operator><name>j</name></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>e</name><operator>+</operator><literal type="number">1</literal><operator>+</operator><name>Cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>re</name> <name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>Cnt</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><call><name>gf</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name>y</name><operator>=</operator><call><name>gf</name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>x</name><operator>==</operator><name>y</name></expr>)</condition><then><block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name>Ans</name><operator>+=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>Cost</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name><name>Ansx</name><index>[<expr><operator>++</operator><name>cnt_edge</name></expr>]</index></name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr><operator>,</operator><expr><name><name>Ansy</name><index>[<expr><name>cnt_edge</name></expr>]</index></name><operator>=</operator><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt></block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>cnt_p</name></expr><operator>,</operator><expr><name><name>blt</name><index>[<expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><name><name>fa</name><index>[<expr><name>y</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
	}</block>
	<expr_stmt><expr><call><name>Prt</name><argument_list>(<argument><expr><name>Ans</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Prt</name><argument_list>(<argument><expr><name>cnt_p</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>blt</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>Prt</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
	<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>Prt</name><argument_list>(<argument><expr><name>cnt_edge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>cnt_edge</argument>)</argument_list></macro><expr_stmt><expr><call><name>Prt</name><argument_list>(<argument><expr><name><name>Ansx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>Prt</name><argument_list>(<argument><expr><name><name>Ansy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
