<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29573217_64021351.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (a=b; a&lt;=c; a++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fd</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (a=b; a&gt;=c; a--)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>b</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>L</name></decl>,<decl><type ref="prev"/><name>R</name></decl>,<decl><type ref="prev"/><name>s1</name></decl>,<decl><type ref="prev"/><name>s2</name></decl>,<decl><type ref="prev"/><name>J</name></decl>,<decl><type ref="prev"/><name>K</name></decl>,<decl><type ref="prev"/><name>S1</name></decl>,<decl><type ref="prev"/><name>S2</name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>work</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>A</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<if>if <condition>(<expr><name>A</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>B</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
	
	<macro><name>fo</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">29</literal></argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>A</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>A</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>B</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>B</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block>
	
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">29</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	
	<macro><name>fd</name><argument_list>(<argument>i</argument>,<argument><literal type="number">29</literal></argument>,<argument><literal type="number">0</literal></argument>)</argument_list></macro>
	<block>{
		<macro><name>fo</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
		<block>{
			<macro><name>fo</name><argument_list>(<argument>k</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">1</literal></argument>)</argument_list></macro>
			<if>if <condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><then>
			<block>{
				<if>if <condition>(<expr><operator>!</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>S1</name><operator>=</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>S1</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><operator>!</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>S2</name><operator>=</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>S2</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
				
				<macro><name>fo</name><argument_list>(<argument>s1</argument>,<argument><literal type="number">0</literal></argument>,<argument>S1</argument>)</argument_list></macro>
				<block>{
					<macro><name>fo</name><argument_list>(<argument>s2</argument>,<argument><literal type="number">0</literal></argument>,<argument>S2</argument>)</argument_list></macro>
					<if>if <condition>(<expr><operator>!</operator><name>s1</name> <operator>||</operator> <operator>!</operator><name>s2</name></expr>)</condition><then>
					<block>{
						<if>if <condition>(<expr><name>s1</name><operator>&lt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>J</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>J</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></else></if>
						<if>if <condition>(<expr><name>s2</name><operator>&lt;</operator><name><name>b</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>K</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>K</name><operator>=</operator><name>k</name></expr>;</expr_stmt></block></else></if>
						
						<if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><then>
						<block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></then>
						<else>else
						<block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>J</name></expr>]</index><index>[<expr><name>K</name></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
					}</block></then></if>
				}</block>
			}</block></then></if>
		}</block>
	}</block>
	
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
<comment type="line">//	freopen("f.in","r",stdin);</comment>
	
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init>;</init><condition><expr><name>T</name></expr>;</condition><incr><expr><operator>--</operator><name>T</name></expr></incr>)</control>
	<block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>L</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>R</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><call><name>work</name><argument_list>(<argument><expr><name>R</name></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>work</name><argument_list>(<argument><expr><name>L</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>R</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal><operator>+</operator><call><name>work</name><argument_list>(<argument><expr><name>L</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>L</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
}</block></function></unit>
