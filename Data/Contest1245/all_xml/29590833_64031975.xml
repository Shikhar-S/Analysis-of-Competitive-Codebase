<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29590833_64031975.cpp"><comment type="block">/*coderanant*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>gp</name></cpp:macro> <cpp:value>" "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>temp</name></decl>;</decl_stmt>

<comment type="line">// void showpq(priority_queue &lt;pair&lt;int,pair&lt;int,int&gt;&gt;&gt; gq) </comment>
<comment type="line">// { </comment>
<comment type="line">//     priority_queue &lt;pair&lt;int,pair&lt;int,int&gt;&gt;&gt; g = gq; </comment>
<comment type="line">//     while (!g.empty()) </comment>
<comment type="line">//     { </comment>
<comment type="line">//         cout &lt;&lt; '\t' &lt;&lt; g.top().ff; </comment>
<comment type="line">//         g.pop(); </comment>
<comment type="line">//     } </comment>
<comment type="line">//     cout &lt;&lt; '\n'; </comment>
<comment type="line">// } </comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppp</name></cpp:macro> <cpp:value>pair&lt;int,pair&lt;int,int&gt;&gt;</cpp:value></cpp:define>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"/home/akmittal/Desktop/Competitive Programming/in.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"/home/akmittal/Desktop/Competitive Programming/out.txt"</literal></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>f1</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
    	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>int</name></type> <name><name>cost</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>f1</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name><name>k</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>f1</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>vis</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pow</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>conn</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>priority_queue</name> <argument_list type="generic">&lt;<argument><expr><name>ppp</name></expr></argument>, <argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ppp</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>ppp</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>pq</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ansmin</name><init>=<expr><name>mod</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>temp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <macro><name>f1</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{
    	<if>if<condition>(<expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>ansmin</name></expr>)</condition><then>
    	<block>{
    		<expr_stmt><expr><name>ansmin</name><operator>=</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    		<expr_stmt><expr><name>temp</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
    	}</block></then></if>
    }</block>
    <comment type="line">//cout&lt;&lt;ansmin&lt;&lt;endl;</comment>
    <expr_stmt><expr><call><name><name>pow</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><name><name>cost</name><index>[<expr><name>temp</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <comment type="line">//cout&lt;&lt;temp&lt;&lt;endl;</comment>
    <expr_stmt><expr><name><name>vis</name><index>[<expr><name>temp</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>temp</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>zz</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>zz</name><operator>--</operator></expr>)</condition>
    <block>{
    	<expr_stmt><expr><name>ansmin</name><operator>=</operator><name>mod</name></expr>;</expr_stmt>
    	<decl_stmt><decl><type><name>int</name></type> <name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>q</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    	<macro><name>f1</name><argument_list>(<argument>j</argument>,<argument><literal type="number">1</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro>
    	<block>{
    		<if>if<condition>(<expr><name>i</name><operator>!=</operator><name>j</name><operator>&amp;&amp;</operator><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name><operator>!=</operator><literal type="number">1</literal></expr>)</condition><then>
    		<block>{
    			<comment type="line">// if(cost[j]&lt;ansmin)</comment>
    			<comment type="line">// {</comment>
    			<comment type="line">// 	ansmin=cost[j];</comment>
    			<comment type="line">// 	p=j;</comment>
    			<comment type="line">// 	q=-1;</comment>
    			<comment type="line">// }</comment>
    			<comment type="line">// if((abs(x[i]-x[j])+abs(y[i]-y[j]))*(k[i]+k[j])&lt;ansmin)</comment>
    			<comment type="line">// {</comment>
    			<comment type="line">// 	ansmin=(abs(x[i]-x[j])+abs(y[i]-y[j]))*(k[i]+k[j]);</comment>
    			<comment type="line">// 	p=i;</comment>
    			<comment type="line">// 	q=j;</comment>
    			<comment type="line">// }</comment>
    			<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>cost</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>j</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    			<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>*</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></argument>,<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    		}</block></then></if>
    	}</block>
    	<while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
    	<block>{
    		<comment type="line">//showpq(pq);</comment>
    		<decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>temp</name><init>=<expr><call><name><name>pq</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    		<expr_stmt><expr><call><name><name>pq</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    		<if>if<condition>(<expr><name><name>temp</name><operator>.</operator><name>ss</name><operator>.</operator><name>ss</name></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then>
	    	<block>{
	    		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name><name>temp</name><operator>.</operator><name>ss</name><operator>.</operator><name>ff</name></name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	    		<block>{
	    			<expr_stmt><expr><call><name><name>pow</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>ss</name><operator>.</operator><name>ff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    			<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>cost</name><index>[<expr><name><name>temp</name><operator>.</operator><name>ss</name><operator>.</operator><name>ff</name></name></expr>]</index></name></expr>;</expr_stmt>
	    			<expr_stmt><expr><name>i</name><operator>=</operator><name><name>temp</name><operator>.</operator><name>ss</name><operator>.</operator><name>ff</name></name></expr>;</expr_stmt>
	    			<expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>temp</name><operator>.</operator><name>ss</name><operator>.</operator><name>ff</name></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	    			<break>break;</break>
	    		}</block></then></if>
	    	}</block></then>
	    	<else>else
	    	<block>{
	    		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name><name>temp</name><operator>.</operator><name>ss</name><operator>.</operator><name>ss</name></name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
	    		<block>{
	    			<expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>mp</name><argument_list>(<argument><expr><name><name>temp</name><operator>.</operator><name>ss</name><operator>.</operator><name>ff</name></name></expr></argument>,<argument><expr><name><name>temp</name><operator>.</operator><name>ss</name><operator>.</operator><name>ss</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	    			<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>temp</name><operator>.</operator><name>ff</name></name></expr>;</expr_stmt>
	    			<expr_stmt><expr><name>i</name><operator>=</operator><name><name>temp</name><operator>.</operator><name>ss</name><operator>.</operator><name>ss</name></name></expr>;</expr_stmt>
	    			<expr_stmt><expr><name><name>vis</name><index>[<expr><name><name>temp</name><operator>.</operator><name>ss</name><operator>.</operator><name>ss</name></name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	    			<break>break;</break>
	    		}</block></then></if>
	    	}</block></else></if>
    	}</block></while>
    }</block></while>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>pow</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <macro><name>f1</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>pow.size()</argument>)</argument_list></macro>
    <block>{
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>pow</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;&lt;</operator><name>gp</name></expr>;</expr_stmt>
    }</block>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>conn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <macro><name>f1</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>conn.size()</argument>)</argument_list></macro>
    <block>{
    	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>conn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>&lt;&lt;</operator><name>gp</name><operator>&lt;&lt;</operator><name><name>conn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ss</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
