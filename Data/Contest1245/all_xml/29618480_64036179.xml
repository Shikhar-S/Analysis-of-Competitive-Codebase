<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618480_64036179.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><literal type="number">39</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>b</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">30</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>la</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>la</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>la</name></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>za</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>za</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>za</name></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>lb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lb</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>lb</name></expr></incr>)</control> <block>{
          <for>for <control>(<init><decl><type><name>int</name></type> <name>zb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zb</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>zb</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>la</name></expr>]</index><index>[<expr><name>za</name></expr>]</index><index>[<expr><name>lb</name></expr>]</index><index>[<expr><name>zb</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          }</block></for>
        }</block></for>
      }</block></for>
    }</block></for>
  }</block></for>
  <expr_stmt><expr><name><name>f</name><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">29</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>la</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>la</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>la</name></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>nza</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nza</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>nza</name></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>ba</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ba</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>ba</name></expr></incr>)</control> <block>{
          <decl_stmt><decl><type><name>int</name></type> <name>va</name> <init>= <expr><name>a</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
          <if>if <condition>(<expr><name>ba</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>la</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>va</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <continue>continue;</continue>
          }</block></then></if>
          <for>for <control>(<init><decl><type><name>int</name></type> <name>lb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lb</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>lb</name></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>nzb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nzb</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>nzb</name></expr></incr>)</control> <block>{
              <for>for <control>(<init><decl><type><name>int</name></type> <name>bb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bb</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>bb</name></expr></incr>)</control> <block>{
                <decl_stmt><decl><type><name>int</name></type> <name>vb</name> <init>= <expr><name>b</name> <operator>&gt;&gt;</operator> <name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <if>if <condition>(<expr><name>bb</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>lb</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vb</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                  <continue>continue;</continue>
                }</block></then></if>
                <if>if <condition>(<expr><name>ba</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>bb</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
                  <continue>continue;</continue>
                }</block></then></if>
                <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>la</name> <operator>|</operator> <operator>(</operator><name>ba</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>va</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>nza</name> <operator>|</operator> <operator>(</operator><name>ba</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>lb</name> <operator>|</operator> <operator>(</operator><name>bb</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>vb</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>nzb</name> <operator>|</operator> <operator>(</operator><name>bb</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>+=</operator> <name><name>f</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>la</name></expr>]</index><index>[<expr><name>nza</name></expr>]</index><index>[<expr><name>lb</name></expr>]</index><index>[<expr><name>nzb</name></expr>]</index></name></expr>;</expr_stmt>
              }</block></for>
            }</block></for>
          }</block></for>
        }</block></for>
      }</block></for>
    }</block></for>
  }</block></for>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>la</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>la</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>la</name></expr></incr>)</control> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>lb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lb</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>lb</name></expr></incr>)</control> <block>{
      <expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>la</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>lb</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
  }</block></for>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>tt</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>tt</name><operator>--</operator></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><call><name>solve</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <call><name>solve</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>solve</name><argument_list>(<argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>r</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
}</block></function>
</unit>
