<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618419_64024541.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"avx,avx2,fma"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimization</name> <name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = (a); i &lt; (b); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iter</name><parameter_list>(<parameter><type><name>it</name></type></parameter>,<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto it = (c).begin(); it != (c).end();++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>ii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ii</name></expr></argument>&gt;</argument_list></name></type> <name>vii</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vii</name></expr></argument>&gt;</argument_list></name></type> <name>vvii</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><operator>~</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">31</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>

<function><template>template <parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <type><name>T</name></type> <name>smod</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <return>return <expr><operator>(</operator><name>a</name> <operator>%</operator> <name>b</name> <operator>+</operator> <name>b</name><operator>)</operator> <operator>%</operator> <name>b</name></expr>;</return> }</block></function>

<decl_stmt><decl><type><name>string</name></type> <name>s</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>O</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>memo</name><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>dp</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>at</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>lower1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>lower2</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>larger1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>larger2</name></decl></parameter>)</parameter_list> <block>{
    <if>if<condition>(<expr><name>at</name> <operator>&gt;=</operator> <call><name>size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name><name>memo</name><index>[<expr><name>at</name></expr>]</index><index>[<expr><name>lower1</name></expr>]</index><index>[<expr><name>lower2</name></expr>]</index><index>[<expr><name>larger1</name></expr>]</index><index>[<expr><name>larger2</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <return>return <expr><name><name>memo</name><index>[<expr><name>at</name></expr>]</index><index>[<expr><name>lower1</name></expr>]</index><index>[<expr><name>lower2</name></expr>]</index><index>[<expr><name>larger1</name></expr>]</index><index>[<expr><name>larger2</name></expr>]</index></name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>sm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{
        <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{
            <if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><name>lower1</name> <operator>&amp;&amp;</operator> <name>lower2</name> <operator>&amp;&amp;</operator> <name>larger1</name> <operator>&amp;&amp;</operator> <name>larger2</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lower1</name></expr></argument>,<argument><expr><name>lower2</name></expr></argument>,<argument><expr><name>larger1</name></expr></argument>,<argument><expr><name>larger2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if<condition>(<expr><name>lower1</name> <operator>&amp;&amp;</operator> <name>lower2</name> <operator>&amp;&amp;</operator> <name>larger1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lower1</name></expr></argument>,<argument><expr><name>lower2</name></expr></argument>,<argument><expr><name>larger1</name></expr></argument>,<argument><expr><name>j</name> <operator>&gt;</operator> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name>lower1</name> <operator>&amp;&amp;</operator> <name>lower2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger1</name> <operator>&amp;&amp;</operator> <name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lower1</name></expr></argument>,<argument><expr><name>lower2</name></expr></argument>,<argument><expr><name>i</name> <operator>&gt;</operator> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>larger2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name>lower1</name> <operator>&amp;&amp;</operator> <name>lower2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lower1</name></expr></argument>,<argument><expr><name>lower2</name></expr></argument>, <argument><expr><name>i</name> <operator>&gt;</operator> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>j</name> <operator>&gt;</operator> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>

            <if>if<condition>(<expr><operator>!</operator><name>lower1</name> <operator>&amp;&amp;</operator> <name>lower2</name> <operator>&amp;&amp;</operator> <name>larger1</name> <operator>&amp;&amp;</operator> <name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>lower2</name></expr></argument>,<argument><expr><name>larger1</name></expr></argument>,<argument><expr><name>larger2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if<condition>(<expr><operator>!</operator><name>lower1</name> <operator>&amp;&amp;</operator> <name>lower2</name> <operator>&amp;&amp;</operator> <name>larger1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>lower2</name></expr></argument>,<argument><expr><name>larger1</name></expr></argument>,<argument><expr><name>j</name></expr></argument> &gt;</argument_list></name> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><operator>!</operator><name>lower1</name> <operator>&amp;&amp;</operator> <name>lower2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger1</name> <operator>&amp;&amp;</operator> <name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>lower2</name></expr></argument>,<argument><expr><name>i</name></expr></argument> &gt;</argument_list></name> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>larger2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><operator>!</operator><name>lower1</name> <operator>&amp;&amp;</operator> <name>lower2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>lower2</name></expr></argument>, <argument><expr><name>i</name></expr></argument> &gt;</argument_list></name> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>j</name> <operator>&gt;</operator> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
            <if>if<condition>(<expr><name>lower1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lower2</name> <operator>&amp;&amp;</operator> <name>larger1</name> <operator>&amp;&amp;</operator> <name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lower1</name></expr></argument>, <argument><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>larger1</name></expr></argument>,<argument><expr><name>larger2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if<condition>(<expr><name>lower1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lower2</name> <operator>&amp;&amp;</operator> <name>larger1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lower1</name></expr></argument>,<argument><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>larger1</name></expr></argument>,<argument><expr><name>j</name></expr></argument> &gt;</argument_list></name> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name>lower1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lower2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger1</name> <operator>&amp;&amp;</operator> <name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lower1</name></expr></argument>,<argument><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>i</name></expr></argument> &gt;</argument_list></name> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>larger2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><name>lower1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lower2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lower1</name></expr></argument>,<argument><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> &gt;</argument_list></name> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>j</name> <operator>&gt;</operator> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>

            <if>if<condition>(<expr><operator>!</operator><name>lower1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lower2</name> <operator>&amp;&amp;</operator> <name>larger1</name> <operator>&amp;&amp;</operator> <name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>, <argument><expr><name>j</name> <operator>&lt;</operator> <name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>larger1</name></expr></argument>,<argument><expr><name>larger2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if<condition>(<expr><operator>!</operator><name>lower1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lower2</name> <operator>&amp;&amp;</operator> <name>larger1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>larger1</name></expr></argument>,<argument><expr><name>j</name></expr></argument> &gt;</argument_list></name> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><operator>!</operator><name>lower1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lower2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger1</name> <operator>&amp;&amp;</operator> <name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>i</name></expr></argument> &gt;</argument_list></name> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>larger2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <elseif>else <if>if<condition>(<expr><operator>!</operator><name>lower1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>lower2</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>larger2</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <if>if<condition>(<expr><name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal> <operator>&gt;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <expr_stmt><expr><name>sm</name> <operator>+=</operator> <call><name>dp</name><argument_list>(<argument><expr><name>at</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><name><name>s</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>, <argument><expr><name>i</name></expr></argument> &gt;</argument_list></name> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>,<argument><expr><name>j</name></expr></argument> &gt;</argument_list></name> <name><name>O</name><index>[<expr><name>at</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif></if>

        }</block>
    }</block>
        <return>return <expr><name><name>memo</name><index>[<expr><name>at</name></expr>]</index><index>[<expr><name>lower1</name></expr>]</index><index>[<expr><name>lower2</name></expr>]</index><index>[<expr><name>larger1</name></expr>]</index><index>[<expr><name>larger2</name></expr>]</index></name> <operator>=</operator> <name>sm</name></expr>;</return>
    <comment type="block">/*
    if(larger1 &amp;&amp; larger2) {
        if(lower1 &amp;&amp; lower2) {
            return dp(at+1,lower1,lower2,1,1)*3;
        } else if(lower1 &amp;&amp; !lower2) {
            if(s[at] == '0') {
                return dp(at+1,1,0,1,1);
            } else if(s[at] == '1') {
                return dp(at+1,1,1,1,1)+dp(at+1,1,0,1,1);
            }
        } else if(!lower1 &amp;&amp; lower2) {
            if(s[at] == '0') {
                return dp(at+1,0,1,1,1);
            } else if(s[at] == '1') {
                return dp(at+1,1,1,1,1)+dp(at+1,0,1,1,1);
            }
        } else if(!lower1 &amp;&amp; !lower2) {
            if(s[at] == '0') {
                return dp(at+1,0,0,1,1);
            } else if(s[at] == '1') {
                return dp(at+1,1,0,1,1)+dp(at+1,0,1,1,1)+dp(at+1,1,1,1,1);
            }
        }
    } else if(!larger1 &amp;&amp; !larger2) {
            return dp(at+1,lower1,lower2,1,1)*3;
        } else if(lower1 &amp;&amp; !lower2) {
            if(s[at] == '0') {
                return dp(at+1,1,0,1,1);
            } else if(s[at] == '1') {
                return dp(at+1,1,1,1,1)+dp(at+1,1,0,1,1);
            }
        } else if(!lower1 &amp;&amp; lower2) {
            if(s[at] == '0') {
                return dp(at+1,0,1,1,1);
            } else if(s[at] == '1') {
                return dp(at+1,1,1,1,1)+dp(at+1,0,1,1,1);
            }
        } else if(!lower1 &amp;&amp; !lower2) {
            if(s[at] == '0') {
                return dp(at+1,0,0,1,1);
            } else if(s[at] == '1') {
                return dp(at+1,1,0,1,1)+dp(at+1,0,1,1,1)+dp(at+1,1,1,1,1);
            }
        }
    
    }*/</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>sol</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>memo</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>O</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">40</literal></argument>)</argument_list></macro> <block>{
        <if>if<condition>(<expr><operator>(</operator><literal type="number">1ll</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>r</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"1"</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>s</name> <operator>+=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt></block></else></if>
    }</block>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument><literal type="number">40</literal></argument>)</argument_list></macro> <block>{
        <if>if<condition>(<expr><operator>(</operator><literal type="number">1ll</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>l</name><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>O</name> <operator>+=</operator> <literal type="string">"1"</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>O</name> <operator>+=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt></block></else></if>
    }</block>
    <while>while<condition>(<expr><call><name><name>s</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name><name>O</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name><name>O</name><operator>.</operator><name>pop_back</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>O</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>O</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name>size</name><argument_list>(<argument><expr><name>O</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>O</name> <operator>=</operator> <literal type="string">"0"</literal><operator>+</operator><name>O</name></expr>;</expr_stmt></block></while>
    <return>return <expr><call><name>dp</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>sv</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>val</name> <init>= <expr><call><name>sol</name><argument_list>(<argument><expr><name>l</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>val</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>t</argument>)</argument_list></macro> <expr_stmt><expr><call><name>sv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
