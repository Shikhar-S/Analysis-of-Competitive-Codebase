<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618498_64030065.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<decl_stmt><decl><type><name>ll</name></type> <name>BASE_NUM</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// ll pat(ll n){</comment>
<comment type="line">//     vector&lt;ll&gt; A;</comment>
<comment type="line">//     A.push_back[1];</comment>
<comment type="line">//     A.push_back[1];</comment>
<comment type="line">//     for(int i = 2;i&lt;n;i++){</comment>
<comment type="line">//         A.push_back( (A[i-1]+A[i-2]) % BASE_NUM);</comment>
<comment type="line">//     }</comment>
<comment type="line">//     return A[n];</comment>
<comment type="line">// }</comment>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <comment type="line">// æ´æ°ã®å¥å</comment>
    <decl_stmt><decl><type><name>string</name></type> <name>S</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>S</name></expr>;</expr_stmt>

    <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'m'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>

    <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><literal type="char">'w'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>A</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><call><name><name>S</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name><name>A</name><operator>.</operator><name>push_back</name></name><argument_list>( <argument><expr><operator>(</operator><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>A</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>%</operator> <name>BASE_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>char</name></type> <name>last_char</name> <init>= <expr><literal type="char">'-'</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>last_char_length</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>patterns</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>S</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>last_char</name></expr>)</condition><then><block>{
            <if>if <condition>(<expr><name>last_char</name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name>last_char</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>patterns</name> <operator>=</operator> <name>patterns</name> <operator>*</operator> <name><name>A</name><index>[<expr><name>last_char_length</name></expr>]</index></name> <operator>%</operator> <name>BASE_NUM</name></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name>last_char</name> <operator>=</operator> <name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>last_char_length</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then><else>else<block>{
            <expr_stmt><expr><name>last_char_length</name><operator>++</operator></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <if>if <condition>(<expr><name>last_char</name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name>last_char</name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>patterns</name> <operator>=</operator> <name>patterns</name> <operator>*</operator> <name><name>A</name><index>[<expr><name>last_char_length</name></expr>]</index></name> <operator>%</operator> <name>BASE_NUM</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>patterns</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
