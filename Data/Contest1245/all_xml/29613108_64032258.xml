<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613108_64032258.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>memo</name><index>[<expr><literal type="number">50</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>calcState</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isSmallerA</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isSmallerB</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBiggerA</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBiggerB</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>index</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <if>if<condition>(<expr><name><name>memo</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>isSmallerA</name></expr>]</index><index>[<expr><name>isSmallerB</name></expr>]</index><index>[<expr><name>isBiggerA</name></expr>]</index><index>[<expr><name>isBiggerB</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>memo</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>isSmallerA</name></expr>]</index><index>[<expr><name>isSmallerB</name></expr>]</index><index>[<expr><name>isBiggerA</name></expr>]</index><index>[<expr><name>isBiggerB</name></expr>]</index></name></expr>;</return></block></then></if>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>answer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>d1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>d1</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>d1</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>d2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>d2</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><name>d2</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><operator>(</operator><name>d1</name><operator>+</operator><name>d2</name><operator>)</operator><operator>==</operator><operator>(</operator><name>d1</name><operator>^</operator><name>d2</name><operator>)</operator></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name>d1</name><operator>&lt;=</operator><operator>(</operator><operator>(</operator><name>r</name><operator>&gt;&gt;</operator><name>index</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>isSmallerA</name><operator>==</operator><literal type="boolean">true</literal></expr>)</condition><then>
                <block>{
                    <if>if<condition>(<expr><name>d2</name><operator>&lt;=</operator><operator>(</operator><operator>(</operator><name>r</name><operator>&gt;&gt;</operator><name>index</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>isSmallerB</name><operator>==</operator><literal type="boolean">true</literal></expr>)</condition><then>
                    <block>{
                        <if>if<condition>(<expr><name>d1</name><operator>&gt;=</operator><operator>(</operator><operator>(</operator><name>l</name><operator>&gt;&gt;</operator><name>index</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>isBiggerA</name><operator>==</operator><literal type="boolean">true</literal></expr>)</condition><then>
                        <block>{
                            <if>if<condition>(<expr><name>d2</name><operator>&gt;=</operator><operator>(</operator><operator>(</operator><name>l</name><operator>&gt;&gt;</operator><name>index</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>||</operator> <name>isBiggerB</name><operator>==</operator><literal type="boolean">true</literal></expr>)</condition><then>
                            <block>{
                                <decl_stmt><decl><type><name>bool</name></type> <name>smallerA</name> <init>= <expr><operator>(</operator><name>d1</name><operator>&lt;</operator><operator>(</operator><operator>(</operator><name>r</name><operator>&gt;&gt;</operator><name>index</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>smallerB</name> <init>= <expr><operator>(</operator><name>d2</name><operator>&lt;</operator><operator>(</operator><operator>(</operator><name>r</name><operator>&gt;&gt;</operator><name>index</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

                                <decl_stmt><decl><type><name>bool</name></type> <name>biggerA</name> <init>= <expr><operator>(</operator><name>d1</name><operator>&gt;</operator><operator>(</operator><operator>(</operator><name>l</name><operator>&gt;&gt;</operator><name>index</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>bool</name></type> <name>biggerB</name> <init>= <expr><operator>(</operator><name>d2</name><operator>&gt;</operator><operator>(</operator><operator>(</operator><name>l</name><operator>&gt;&gt;</operator><name>index</name><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

                                <expr_stmt><expr><name>answer</name> <operator>+=</operator> <call><name>calcState</name><argument_list>(<argument><expr><name>index</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>isSmallerA</name></expr></argument>, <argument><expr><name>smallerA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>isSmallerB</name></expr></argument>, <argument><expr><name>smallerB</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>isBiggerA</name></expr></argument>, <argument><expr><name>biggerA</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>isBiggerB</name></expr></argument>, <argument><expr><name>biggerB</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            }</block></then></if>
                        }</block></then></if>

                        <comment type="line">//cout &lt;&lt; index &lt;&lt; "-&gt; " &lt;&lt; d1 &lt;&lt; " " &lt;&lt; d2 &lt;&lt; '\n';</comment>
                    }</block></then></if>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></for>

    <expr_stmt><expr><name><name>memo</name><index>[<expr><name>index</name></expr>]</index><index>[<expr><name>isSmallerA</name></expr>]</index><index>[<expr><name>isSmallerB</name></expr>]</index><index>[<expr><name>isBiggerA</name></expr>]</index><index>[<expr><name>isBiggerB</name></expr>]</index></name> <operator>=</operator> <name>answer</name></expr>;</expr_stmt>
    <return>return <expr><name>answer</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition>
    <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>memo</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>memo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>calcState</name><argument_list>(<argument><expr><literal type="number">45</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>, <argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></while>
}</block></function>
</unit>
