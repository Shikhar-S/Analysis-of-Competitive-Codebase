<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613416_64032423.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e3</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>ch</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>num</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>top</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>tl</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>pl</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>col</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>mian</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>s</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>s</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>pl</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>top</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>top</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name><name>tl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>tl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>ch</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>t</name><index>[<expr><name>x</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name><name>num</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><operator>++</operator><name><name>top</name><index>[<expr><name>x</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>x</name></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>j</name><init>=<expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>&gt;=</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>-=</operator><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>top</name><index>[<expr><name>j</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>t</name><index>[<expr><name>j</name></expr>]</index></name><operator>-=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt><expr_stmt><expr><name><name>top</name><index>[<expr><name>j</name></expr>]</index></name><operator>-=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>
    <if>if<condition>(<expr><name>ans</name><operator>&gt;=</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
    <else>else <block>{<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><return>return ;</return>}</block></else></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name><name>top</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><operator>++</operator><name><name>tl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>num</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><operator>++</operator><name><name>tl</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name><name>tl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>pl</name><index>[<expr><name><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>=</operator><name><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>cc</name></decl>;</decl_stmt>
        <if>if<condition>(<expr><name><name>pl</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>(</operator><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><literal type="number">3</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name><name>pl</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
        <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cc</name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cc</name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if>
        <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>cc</name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>,<argument><expr><name>cc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>mian</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function>
</unit>
