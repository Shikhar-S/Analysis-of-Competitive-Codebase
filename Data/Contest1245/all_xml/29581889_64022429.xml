<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29581889_64022429.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">100100</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>memo</name><index>[<expr><literal type="number">50</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>pd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>a1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>a2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b2</name></decl></parameter>)</parameter_list><block>{
	
	<if>if<condition>(<expr><name>pos</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name><name>memo</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>a1</name></expr>]</index><index>[<expr><name>a2</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index><index>[<expr><name>b2</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>memo</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>a1</name></expr>]</index><index>[<expr><name>a2</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index><index>[<expr><name>b2</name></expr>]</index></name></expr>;</return></block></then></if>
	
	<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pos</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>g</name> <operator>=</operator> <operator>(</operator><name>g</name> <operator>&amp;</operator> <name>a</name><operator>)</operator></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>g</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>g</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	
	<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><operator>(</operator><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pos</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>h</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>&amp;</operator> <name>b</name><operator>)</operator></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>h</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>h</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
	
	<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>w</name></decl>,<decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
			<expr_stmt><expr><name>x</name> <operator>=</operator> <name>a1</name></expr> <operator>,</operator> <expr><name>y</name> <operator>=</operator> <name>a2</name></expr> <operator>,</operator> <expr><name>w</name> <operator>=</operator> <name>b1</name></expr> <operator>,</operator> <expr><name>z</name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt> 
			
			<if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>a2</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b2</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>a1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>b1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			
			<if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>z</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
			<if>if<condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>g</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
			
			<expr_stmt><expr><name>r</name> <operator>+=</operator> <call><name>pd</name><argument_list>(<argument><expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>w</name></expr></argument>,<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
		}</block></for>
	}</block></for>  
	
	<return>return <expr><name><name>memo</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>a1</name></expr>]</index><index>[<expr><name>a2</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index><index>[<expr><name>b2</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	
	<while>while<condition>(<expr><name>t</name> <operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>memo</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>memo</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>pd</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></while>
}</block></function></unit>
