<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29571764_64016899.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>  
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//^[ \t]*//[^\n]*\n</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inc</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (register int i = (a); i &lt;= (b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dec</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (register int i = (a); i &gt;= (b); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ri</name></cpp:macro> <cpp:value>register int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name><parameter_list>(<parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(A, B)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) + mod) % mod)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int, int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mii</name></cpp:macro> <cpp:value>map&lt;int, int&gt;</cpp:value></cpp:define>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>gint</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>x</name> <operator>*</operator> <name>f</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>gll</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name><name>c</name> <argument_list type="generic">&lt; <argument><expr><literal type="char">'0'</literal> <operator>||</operator> <name>c</name></expr></argument> &gt;</argument_list></name> <literal type="char">'9'</literal></expr>)</condition>
	<block>{
		<if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>f</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>x</name> <operator>*</operator> <name>f</name></expr>;</return>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>pint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>y</name> <operator>&lt;=</operator> <name>x</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>y</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <name>y</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>%=</operator> <name>y</name></expr>;</expr_stmt>
	}</block></while>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>pll</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'-'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt>
	}</block></then></if>
	<decl_stmt><decl><type><name>ll</name></type> <name>y</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>len</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>y</name> <operator>&lt;=</operator> <name>x</name></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>len</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>len</name><operator>--</operator></expr>)</condition>
	<block>{
		<expr_stmt><expr><name>y</name> <operator>/=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <name>y</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>x</name> <operator>%=</operator> <name>y</name></expr>;</expr_stmt>
	}</block></while>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>pintln</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>pint</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>pllln</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>pll</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">//é«ç²¾åº¦åå¨ç</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>       <comment type="line">//åå·®å¼</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxp</name> <init>= <expr><literal type="number">1010</literal></expr></init></decl>;</decl_stmt>         <comment type="line">//ç¹çæ°é</comment>
<function><type><name>int</name></type> <name>sgn</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{            <comment type="line">//å¤æ­xæ¯å¦ç­äº0</comment>
	<if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>eps</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then>
	<else>else
		<block type="pseudo"><return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>Dcmp</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">//æ¯è¾ä¸¤ä¸ªæµ®ç¹æ°ï¼0 ç¸ç­ï¼-1 å°äºï¼1 å¤§äº</comment>
	<if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>eps</name></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then>
	<else>else
		<block type="pseudo"><return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <name>y</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return></block></else></if>
}</block></function>
<comment type="line">//---------------å¹³é¢å ä½ï¼ç¹åçº¿--------</comment>
<struct>struct <name>Point</name>
<block>{<public type="default">  <comment type="line">//å®ä¹ç¹ååºæ¬è¿ç®</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<constructor><name>Point</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><name>Point</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>x</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>, <call><name>y</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{
	}</block></constructor>
	<function type="operator"><type><name>Point</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>Point</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>Point</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>k</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>k</name></expr></argument>, <argument><expr><name>y</name> <operator>*</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>  <comment type="line">//é¿åº¦å¢å¤§kå</comment>
	<function type="operator"><type><name>Point</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>k</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <name>k</name></expr></argument>, <argument><expr><name>y</name> <operator>/</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>  <comment type="line">//é¿åº¦ç¼©å°kå</comment>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><call><name>sgn</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
	}</block></function>  <comment type="line">//ç¨äºå¸å</comment>
</public>}</block>;</struct>
<typedef>typedef <type><name>Point</name></type> <name>Vector</name>;</typedef>                                             <comment type="line">//å®ä¹åé</comment>
<function><type><name>double</name></type> <name>Dot</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr>;</return>
}</block></function>  <comment type="line">//ç¹ç§¯</comment>
<function><type><name>double</name></type> <name>Len</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">//åéçé¿åº¦</comment>
<function><type><name>double</name></type> <name>Len2</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Dot</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>       <comment type="line">//åéé¿åº¦çå¹³æ¹</comment>
<function><type><name>double</name></type> <name>Angle</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>acos</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">// Aä¸Bçå¤¹è§</comment>
<function><type><name>double</name></type> <name>Cross</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr>;</return>
}</block></function>  <comment type="line">//åç§¯</comment>
<function><type><name>double</name></type> <name>Area2</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Cross</name><argument_list>(<argument><expr><name>B</name> <operator>-</operator> <name>A</name></expr></argument>, <argument><expr><name>C</name> <operator>-</operator> <name>A</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">//ä¸è§å½¢ABCé¢ç§¯ç2å</comment>
<function><type><name>double</name></type> <name>Distance</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>hypot</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">//ä¸¤ç¹çè·ç¦»</comment>
<function><type><name>double</name></type> <name>Dist</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name><name>A</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>Vector</name></type> <name>Normal</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><operator>-</operator><name><name>A</name><operator>.</operator><name>y</name></name> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">//åéAçåä½æ³åé</comment>

<function><type><name>bool</name></type> <name>Parallel</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>  <comment type="line">//åéå¹³è¡æéå)</comment>

<function><type><name>Vector</name></type> <name>Rotate</name><parameter_list>(<parameter><decl><type><name>Vector</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>rad</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">//åéAéæ¶éæè½¬radåº¦</comment>
	<return>return <expr><call><name>Vector</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>rad</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>rad</name></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <call><name>sin</name><argument_list>(<argument><expr><name>rad</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><name>rad</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<struct>struct <name>Line</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>Point</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>  <comment type="line">//çº¿ä¸çä¸¤ä¸ªç¹</comment>
	<constructor><name>Line</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><name>Line</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>p2</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>p1</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call>, <call><name>p2</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{
	}</block></constructor>
	<comment type="line">// Line(Point x,Point y){p1 = x;p2 = y;}</comment>
	<comment type="line">//  Point(double x,double y):x(x),y(y){}</comment>
	<comment type="line">//æ ¹æ®ä¸ä¸ªç¹åå¾æè§ angle ç¡®å®ç´çº¿,0&lt;=angle&lt;pi</comment>
	<constructor><name>Line</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>angle</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>angle</name> <operator>-</operator> <name>pi</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>(</operator><name>p1</name> <operator>+</operator> <call><name>Point</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>(</operator><name>p1</name> <operator>+</operator> <call><name>Point</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>tan</name><argument_list>(<argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>
		}</block></else></if>
	}</block></constructor>
	<comment type="line">// ax+by+c=0</comment>
	<constructor><name>Line</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>c</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>c</name> <operator>/</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><name>c</name> <operator>/</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><operator>-</operator><name>c</name> <operator>/</operator> <name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><operator>-</operator><name>c</name> <operator>/</operator> <name>a</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if></elseif>
		<else>else
		<block>{
			<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>c</name> <operator>/</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><operator>-</operator><name>c</name> <operator>-</operator> <name>a</name><operator>)</operator> <operator>/</operator> <name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></constructor>
</public>}</block>;</struct>

<typedef>typedef <type><name>Line</name></type> <name>Segment</name>;</typedef>  <comment type="line">//å®ä¹çº¿æ®µï¼ä¸¤ç«¯ç¹æ¯Point p1,p2</comment>

<comment type="line">//è¿åç´çº¿å¾æè§ 0&lt;=angle&lt;pi</comment>
<function><type><name>double</name></type> <name>Line_angle</name><parameter_list>(<parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><call><name>atan2</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>+=</operator> <name>pi</name></expr>;</expr_stmt></block></then></if>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>k</name> <operator>-</operator> <name>pi</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>k</name> <operator>-=</operator> <name>pi</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>k</name></expr>;</return>
}</block></function>
<comment type="line">//ç¹åç´çº¿å³ç³»:1 å¨å·¦ä¾§;2 å¨å³ä¾§;0 å¨ç´çº¿ä¸</comment>
<function><type><name>int</name></type> <name>Point_line_relation</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>  <comment type="line">// 1ï¼på¨vçå·¦è¾¹</comment>
	<if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if>  <comment type="line">// 2ï¼på¨vçå³è¾¹</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>             <comment type="line">// 0ï¼på¨vä¸</comment>
}</block></function>
<comment type="line">// ç¹åçº¿æ®µçå³ç³»ï¼0 ç¹pä¸å¨çº¿æ®µvä¸ï¼1 ç¹på¨çº¿æ®µvä¸ã</comment>
<function><type><name>bool</name></type> <name>Point_on_seg</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="line">//ä¸¤ç´çº¿å³ç³»:0 å¹³è¡,1 éå,2 ç¸äº¤</comment>
<function><type><name>int</name></type> <name>Line_relation</name><parameter_list>(<parameter><decl><type><name>Line</name></type> <name>v1</name></decl></parameter>, <parameter><decl><type><name>Line</name></type> <name>v2</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v1</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v2</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v2</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{
		<if>if <condition>(<expr><call><name>Point_line_relation</name><argument_list>(<argument><expr><name><name>v1</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name>v2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
			<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>  <comment type="line">// 1 éå</comment>
		<else>else
			<block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></else></if>  <comment type="line">// 0 å¹³è¡</comment>
	}</block></then></if>
	<return>return <expr><literal type="number">2</literal></expr>;</return>  <comment type="line">// 2 ç¸äº¤</comment>
}</block></function>

<comment type="line">//ç¹å°ç´çº¿çè·ç¦»</comment>
<function><type><name>double</name></type> <name>Dis_point_line</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>fabs</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Distance</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//ç¹å¨ç´çº¿ä¸çæå½±</comment>
<function><type><name>Point</name></type> <name>Point_line_proj</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><call><name>Dot</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Len2</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name><name>v</name><operator>.</operator><name>p1</name></name> <operator>+</operator> <operator>(</operator><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name><operator>)</operator> <operator>*</operator> <name>k</name></expr>;</return>
}</block></function>

<comment type="line">//ç¹på¯¹ç´çº¿vçå¯¹ç§°ç¹</comment>
<function><type><name>Point</name></type> <name>Point_line_symmetry</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Point</name></type> <name>q</name> <init>= <expr><call><name>Point_line_proj</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>Point</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>q</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>p</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>q</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>p</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//ç¹å°çº¿æ®µçè·ç¦»</comment>
<function><type><name>double</name></type> <name>Dis_point_seg</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Segment</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>  <comment type="line">//ç¹çæå½±ä¸å¨çº¿æ®µä¸</comment>
		<block type="pseudo"><return>return <expr><call><name>min</name><argument_list>(<argument><expr><call><name>Distance</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Distance</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<return>return <expr><call><name>Dis_point_line</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="line">//ç¹çæå½±å¨çº¿æ®µä¸</comment>
}</block></function>

<comment type="line">//æ±ä¸¤ç´çº¿abåcdçäº¤ç¹</comment>
<comment type="line">//è°ç¨åè¦ä¿è¯ä¸¤ç´çº¿ä¸å¹³è¡æéå</comment>
<function><type><name>Point</name></type> <name>Cross_point</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">// Line1:ab,  Line2:cd</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>s1</name> <init>= <expr><call><name>Cross</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>a</name></expr></argument>, <argument><expr><name>c</name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>s2</name> <init>= <expr><call><name>Cross</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>a</name></expr></argument>, <argument><expr><name>d</name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">//åç§¯ææ­£è´</comment>
	<return>return <expr><call><name>Point</name><argument_list>(<argument><expr><name><name>c</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name>s2</name> <operator>-</operator> <name><name>d</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name>s1</name></expr></argument>, <argument><expr><name><name>c</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name>s2</name> <operator>-</operator> <name><name>d</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name>s1</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>s2</name> <operator>-</operator> <name>s1</name><operator>)</operator></expr>;</return>
}</block></function>
<comment type="line">//ä¸¤çº¿æ®µæ¯å¦ç¸äº¤ï¼1 ç¸äº¤ï¼0ä¸ç¸äº¤</comment>
<function><type><name>bool</name></type> <name>Cross_segment</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>Point</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">// Line1:ab,  Line2:cd</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>c1</name> <init>= <expr><call><name>Cross</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>a</name></expr></argument>, <argument><expr><name>c</name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><call><name>Cross</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>a</name></expr></argument>, <argument><expr><name>d</name> <operator>-</operator> <name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>d1</name> <init>= <expr><call><name>Cross</name><argument_list>(<argument><expr><name>d</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><name>a</name> <operator>-</operator> <name>c</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>d2</name> <init>= <expr><call><name>Cross</name><argument_list>(<argument><expr><name>d</name> <operator>-</operator> <name>c</name></expr></argument>, <argument><expr><name>b</name> <operator>-</operator> <name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><name>c1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>c2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>sgn</name><argument_list>(<argument><expr><name>d1</name></expr></argument>)</argument_list></call> <operator>*</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>d2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>;</return>  <comment type="line">//æ³¨æäº¤ç¹æ¯ç«¯ç¹çæåµä¸ç®å¨å</comment>
}</block></function>
<comment type="line">//---------------å¹³é¢å ä½ï¼å¤è¾¹å½¢----------------</comment>
<struct>struct <name>Polygon</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>          <comment type="line">//å¤è¾¹å½¢çé¡¶ç¹æ°</comment>
	<decl_stmt><decl><type><name>Point</name></type> <name><name>p</name><index>[<expr><name>maxp</name></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">//å¤è¾¹å½¢çç¹</comment>
	<decl_stmt><decl><type><name>Line</name></type> <name><name>v</name><index>[<expr><name>maxp</name></expr>]</index></name></decl>;</decl_stmt>   <comment type="line">//å¤è¾¹å½¢çè¾¹</comment>
</public>}</block>;</struct>
<comment type="line">//å¤æ­ç¹åä»»æå¤è¾¹å½¢çå³ç³»: 3 ç¹ä¸; 2 è¾¹ä¸; 1 åé¨; 0 å¤é¨</comment>
<function><type><name>int</name></type> <name>Point_in_polygon</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>pt</name></decl></parameter>, <parameter><decl><type><name>Point</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">//ç¹ptï¼å¤è¾¹å½¢Point *p</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{                    <comment type="line">//ç¹å¨å¤è¾¹å½¢çé¡¶ç¹ä¸</comment>
		<if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>pt</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">3</literal></expr>;</return></block></then></if>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{  <comment type="line">//ç¹å¨å¤è¾¹å½¢çè¾¹ä¸</comment>
		<decl_stmt><decl><type><name>Line</name></type> <name>v</name> <init>= <expr><call><name>Line</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><call><name>Point_on_seg</name><argument_list>(<argument><expr><name>pt</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>pt</name> <operator>-</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>p</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><call><name>sgn</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>pt</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>sgn</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>-</operator> <name><name>pt</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>u</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt></block></then></if>
		<if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>u</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>num</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
	}</block></for>
	<return>return <expr><name>num</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>  <comment type="line">// 1 åé¨; 0 å¤é¨</comment>
}</block></function>

<function><type><name>double</name></type> <name>Polygon_area</name><parameter_list>(<parameter><decl><type><name>Point</name><modifier>*</modifier></type> <name>p</name></decl></parameter>,
	<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">// Point *pè¡¨ç¤ºå¤è¾¹å½¢ãä»åç¹å¼å§ååä¸è§å½¢</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>area</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>area</name> <operator>+=</operator> <call><name>Cross</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<return>return <expr><name>area</name> <operator>/</operator> <literal type="number">2</literal></expr>;</return>  <comment type="line">//é¢ç§¯ææ­£è´ï¼ä¸è½ç®åå°åç»å¯¹å¼</comment>
}</block></function>

<function><type><name>Point</name></type> <name>Polygon_center</name><parameter_list>(<parameter><decl><type><name>Point</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">//æ±å¤è¾¹å½¢éå¿ãPoint *pè¡¨ç¤ºå¤è¾¹å½¢ã</comment>
	<decl_stmt><decl><type><name>Point</name></type> <name>ans</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>Polygon_area</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>ans</name></expr>;</return></block></then></if>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator>
		<operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>p</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <call><name>Cross</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>  <comment type="line">//é¢ç§¯ææ­£è´</comment>
	<return>return <expr><name>ans</name> <operator>/</operator> <call><name>Polygon_area</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">6.</literal></expr>;</return>
}</block></function>

<comment type="line">// Convex_hull()æ±å¸åãå¸åé¡¶ç¹æ¾å¨chä¸­ï¼è¿åå¼æ¯å¸åçé¡¶ç¹æ°</comment>
<function><type><name>int</name></type> <name>Convex_hull</name><parameter_list>(<parameter><decl><type><name>Point</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>Point</name><modifier>*</modifier></type> <name>ch</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">//å¯¹ç¹æåºï¼æxä»å°å°å¤§æåºï¼å¦æxç¸åï¼æyæåº</comment>
	<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>unique</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>p</name></expr>;</expr_stmt>  <comment type="line">//å»é¤éå¤ç¹</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//æ±ä¸å¸åãå¦æp[i]æ¯å³æå¼¯çï¼è¿ä¸ªç¹ä¸å¨å¸åä¸ï¼å¾åé</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<while>while <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ch</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>ch</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name><name>ch</name><index>[<expr><name>v</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>
	<comment type="line">//æ±ä¸å¸å</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control>
	<block>{
		<while>while <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>j</name><operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name><name>ch</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>ch</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>ch</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block type="pseudo"><expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt></block></while>
		<expr_stmt><expr><name><name>ch</name><index>[<expr><name>v</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	}</block></for>
	<if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>v</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>v</name></expr>;</return>  <comment type="line">//è¿åå¼væ¯å¸åçé¡¶ç¹æ°</comment>
}</block></function>

<comment type="line">//---------------å¹³é¢å ä½ï¼å----------------</comment>
<struct>struct <name>Circle</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>Point</name></type> <name>c</name></decl>;</decl_stmt>   <comment type="line">//åå¿</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>  <comment type="line">//åå¾</comment>
	<constructor><name>Circle</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><name>Circle</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>r</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>c</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call>, <call><name>r</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{
	}</block></constructor>
	<constructor><name>Circle</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>_r</name></decl></parameter>)</parameter_list>
	<block>{
		<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>Point</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>r</name> <operator>=</operator> <name>_r</name></expr>;</expr_stmt>
	}</block></constructor>
</public>}</block>;</struct>

<comment type="line">//ç¹ååçå³ç³»: 0 ç¹å¨åå, 1 åä¸, 2 åå¤.</comment>
<function><type><name>int</name></type> <name>Point_circle_relation</name><parameter_list>(<parameter><decl><type><name>Point</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Circle</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>dst</name> <init>= <expr><call><name>Distance</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>C</name><operator>.</operator><name>c</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <name><name>C</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>   <comment type="line">//ç¹å¨åå</comment>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <name><name>C</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>  <comment type="line">//åä¸</comment>
	<return>return <expr><literal type="number">2</literal></expr>;</return>                           <comment type="line">//åå¤</comment>
}</block></function>

<comment type="line">//ç´çº¿ååçå³ç³»ï¼0 ç´çº¿å¨åå, 1 ç´çº¿ååç¸å, 2 ç´çº¿å¨åå¤</comment>
<function><type><name>int</name></type> <name>Line_circle_relation</name><parameter_list>(<parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Circle</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>dst</name> <init>= <expr><call><name>Dis_point_line</name><argument_list>(<argument><expr><name><name>C</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <name><name>C</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>   <comment type="line">//ç´çº¿å¨åå</comment>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <name><name>C</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>  <comment type="line">//ç´çº¿ååç¸å</comment>
	<return>return <expr><literal type="number">2</literal></expr>;</return>                           <comment type="line">//ç´çº¿å¨åå¤</comment>
}</block></function>

<comment type="line">//çº¿æ®µååçå³ç³»ï¼0 çº¿æ®µå¨åå, 1 çº¿æ®µååç¸å, 2 çº¿æ®µå¨åå¤</comment>
<function><type><name>int</name></type> <name>Seg_circle_relation</name><parameter_list>(<parameter><decl><type><name>Segment</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Circle</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>dst</name> <init>= <expr><call><name>Dis_point_seg</name><argument_list>(<argument><expr><name><name>C</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <name><name>C</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>   <comment type="line">//çº¿æ®µå¨åå</comment>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>dst</name> <operator>-</operator> <name><name>C</name><operator>.</operator><name>r</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>  <comment type="line">//çº¿æ®µååç¸å</comment>
	<return>return <expr><literal type="number">2</literal></expr>;</return>                           <comment type="line">//çº¿æ®µå¨åå¤</comment>
}</block></function>

<comment type="line">//ç´çº¿ååçäº¤ç¹   hdu 5572</comment>
<function><type><name>int</name></type> <name>Line_cross_circle</name><parameter_list>(<parameter><decl><type><name>Line</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>Circle</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><name>Point</name><modifier>&amp;</modifier></type> <name>pa</name></decl></parameter>,
	<parameter><decl><type><name>Point</name><modifier>&amp;</modifier></type> <name>pb</name></decl></parameter>)</parameter_list>
<block>{  <comment type="line">// pa, pbæ¯äº¤ç¹ãè¿åå¼æ¯äº¤ç¹ä¸ªæ°</comment>
	<if>if <condition>(<expr><call><name>Line_circle_relation</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>  <comment type="line">//æ äº¤ç¹</comment>
	<decl_stmt><decl><type><name>Point</name></type> <name>q</name> <init>= <expr><call><name>Point_line_proj</name><argument_list>(<argument><expr><name><name>C</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>   <comment type="line">//åå¿å¨ç´çº¿ä¸çæå½±ç¹</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><call><name>Dis_point_line</name><argument_list>(<argument><expr><name><name>C</name><operator>.</operator><name>c</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>   <comment type="line">//åå¿å°ç´çº¿çè·ç¦»</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><call><name>sqrt</name><argument_list>(<argument><expr><name><name>C</name><operator>.</operator><name>r</name></name> <operator>*</operator> <name><name>C</name><operator>.</operator><name>r</name></name> <operator>-</operator> <name>d</name> <operator>*</operator> <name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">//</comment>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then>
	<block>{                   <comment type="line">// 1ä¸ªäº¤ç¹ï¼ç´çº¿ååç¸å</comment>
		<expr_stmt><expr><name>pa</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pb</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	}</block></then></if>
	<decl_stmt><decl><type><name>Point</name></type> <name>n</name> <init>= <expr><operator>(</operator><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name><operator>)</operator> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">//åä½åé</comment>
	<expr_stmt><expr><name>pa</name> <operator>=</operator> <name>q</name> <operator>+</operator> <name>n</name> <operator>*</operator> <name>k</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>pb</name> <operator>=</operator> <name>q</name> <operator>-</operator> <name>n</name> <operator>*</operator> <name>k</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">2</literal></expr>;</return>  <comment type="line">// 2ä¸ªäº¤ç¹</comment>
}</block></function>

<comment type="line">//-------------------ä¸ç»´å ä½----------------</comment>
<comment type="line">//ä¸ç»´ï¼ç¹</comment>
<struct>struct <name>Point3</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
	<constructor><name>Point3</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><name>Point3</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>z</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>x</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>, <call><name>y</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call>, <call><name>z</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{
	}</block></constructor>
	<function type="operator"><type><name>Point3</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point3</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>z</name> <operator>+</operator> <name><name>B</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>Point3</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point3</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>, <argument><expr><name>y</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name>z</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>Point3</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>k</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point3</name><argument_list>(<argument><expr><name>x</name> <operator>*</operator> <name>k</name></expr></argument>, <argument><expr><name>y</name> <operator>*</operator> <name>k</name></expr></argument>, <argument><expr><name>z</name> <operator>*</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>Point3</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>k</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>Point3</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <name>k</name></expr></argument>, <argument><expr><name>y</name> <operator>/</operator> <name>k</name></expr></argument>, <argument><expr><name>z</name> <operator>/</operator> <name>k</name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>)</parameter_list>
	<block>{
		<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>y</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>z</name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>z</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
	}</block></function>
</public>}</block>;</struct>
<typedef>typedef <type><name>Point3</name></type> <name>Vector3</name>;</typedef>
<comment type="line">//ç¹ç§¯ãåäºç»´ç¹ç§¯å½æ°ååãC++åè®¸å½æ°ååã</comment>
<function><type><name>double</name></type> <name>Dot</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>x</name></name> <operator>+</operator> <name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>y</name></name> <operator>+</operator> <name><name>A</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>z</name></name></expr>;</return>
}</block></function>
<comment type="line">//åç§¯</comment>
<function><type><name>Vector3</name></type> <name>Cross</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Point3</name><argument_list>(<argument><expr><name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>A</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>y</name></name></expr></argument>, <argument><expr><name><name>A</name><operator>.</operator><name>z</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>z</name></name></expr></argument>,
		<argument><expr><name><name>A</name><operator>.</operator><name>x</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>A</name><operator>.</operator><name>y</name></name> <operator>*</operator> <name><name>B</name><operator>.</operator><name>x</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>double</name></type> <name>Len</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">//åéçé¿åº¦</comment>
<function><type><name>double</name></type> <name>Len2</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>A</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Dot</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>       <comment type="line">//åéé¿åº¦çå¹³æ¹</comment>
<function><type><name>double</name></type> <name>Distance</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><operator>(</operator><name><name>A</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>x</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>x</name></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>y</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>y</name></name><operator>)</operator> <operator>+</operator>
		<operator>(</operator><name><name>A</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>z</name></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>A</name><operator>.</operator><name>z</name></name> <operator>-</operator> <name><name>B</name><operator>.</operator><name>z</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>double</name></type> <name>Angle</name><parameter_list>(<parameter><decl><type><name>Vector3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Vector3</name></type> <name>B</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>acos</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Len</name><argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>  <comment type="line">// Aä¸Bçå¤¹è§</comment>
<comment type="line">//ä¸ç»´ï¼çº¿</comment>
<struct>struct <name>Line3</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>Point3</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>
	<constructor><name>Line3</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><name>Line3</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>p2</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>p1</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call>, <call><name>p2</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{
	}</block></constructor>
</public>}</block>;</struct>
<typedef>typedef <type><name>Line3</name></type> <name>Segment3</name>;</typedef>  <comment type="line">//å®ä¹çº¿æ®µï¼ä¸¤ç«¯ç¹æ¯Point p1,p2</comment>

<comment type="line">//ä¸è§å½¢é¢ç§¯ç2å</comment>
<function><type><name>double</name></type> <name>Area2</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Len</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>B</name> <operator>-</operator> <name>A</name></expr></argument>, <argument><expr><name>C</name> <operator>-</operator> <name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//ä¸ç»´ï¼ç¹å°ç´çº¿è·ç¦»</comment>
<function><type><name>double</name></type> <name>Dis_point_line</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Len</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Distance</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//ä¸ç»´ï¼ç¹å¨ç´çº¿ä¸</comment>
<function><type><name>bool</name></type> <name>Point_line_relation</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Len</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
		<call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line">//ä¸ç»´ï¼ç¹å°çº¿æ®µè·ç¦»ã</comment>
<function><type><name>double</name></type> <name>Dis_point_seg</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Segment3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>
		<call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then>
		<block type="pseudo"><return>return <expr><call><name>min</name><argument_list>(<argument><expr><call><name>Distance</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Distance</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
	<return>return <expr><call><name>Dis_point_line</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<comment type="line">//ä¸ç»´ï¼ç¹ p å¨ç´çº¿ä¸çæå½±</comment>
<function><type><name>Point3</name></type> <name>Point_line_proj</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>Line3</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>double</name></type> <name>k</name> <init>= <expr><call><name>Dot</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <call><name>Len2</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name><name>v</name><operator>.</operator><name>p1</name></name> <operator>+</operator> <operator>(</operator><name><name>v</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>v</name><operator>.</operator><name>p1</name></name><operator>)</operator> <operator>*</operator> <name>k</name></expr>;</return>
}</block></function>
<comment type="line">//ä¸ç»´ï¼å¹³é¢</comment>
<struct>struct <name>Plane</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>Point3</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p3</name></decl>;</decl_stmt>  <comment type="line">//å¹³é¢ä¸çä¸ä¸ªç¹</comment>
	<constructor><name>Plane</name><parameter_list>()</parameter_list>
	<block>{
	}</block></constructor>
	<constructor><name>Plane</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>p1</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>p2</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>p3</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>p1</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call>, <call><name>p2</name><argument_list>(<argument><expr><name>p2</name></expr></argument>)</argument_list></call>, <call><name>p3</name><argument_list>(<argument><expr><name>p3</name></expr></argument>)</argument_list></call>
	</member_init_list><block>{
	}</block></constructor>
</public>}</block>;</struct>
<comment type="line">//å¹³é¢æ³åé</comment>
<function><type><name>Point3</name></type> <name>Pvec</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>C</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Cross</name><argument_list>(<argument><expr><name>B</name> <operator>-</operator> <name>A</name></expr></argument>, <argument><expr><name>C</name> <operator>-</operator> <name>A</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>Point3</name></type> <name>Pvec</name><parameter_list>(<parameter><decl><type><name>Plane</name></type> <name>f</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Cross</name><argument_list>(<argument><expr><name><name>f</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>f</name><operator>.</operator><name>p1</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>.</operator><name>p3</name></name> <operator>-</operator> <name><name>f</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<comment type="line">//åç¹å±å¹³é¢</comment>
<function><type><name>bool</name></type> <name>Point_on_plane</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><call><name>Pvec</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>, <argument><expr><name>C</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>D</name> <operator>-</operator> <name>A</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line">//ä¸¤å¹³é¢å¹³è¡</comment>
<function><type><name>int</name></type> <name>Parallel</name><parameter_list>(<parameter><decl><type><name>Plane</name></type> <name>f1</name></decl></parameter>, <parameter><decl><type><name>Plane</name></type> <name>f2</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Len</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><call><name>Pvec</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Pvec</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>eps</name></expr>;</return>
}</block></function>
<comment type="line">//ä¸¤å¹³é¢åç´</comment>
<function><type><name>int</name></type> <name>Vertical</name><parameter_list>(<parameter><decl><type><name>Plane</name></type> <name>f1</name></decl></parameter>, <parameter><decl><type><name>Plane</name></type> <name>f2</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>sgn</name><argument_list>(<argument><expr><call><name>Dot</name><argument_list>(<argument><expr><call><name>Pvec</name><argument_list>(<argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>Pvec</name><argument_list>(<argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line">//ç´çº¿ä¸å¹³é¢çäº¤ç¹pï¼è¿åå¼æ¯äº¤ç¹ä¸ªæ°  ???</comment>
<function><type><name>int</name></type> <name>Line_cross_plane</name><parameter_list>(<parameter><decl><type><name>Line3</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>Plane</name></type> <name>f</name></decl></parameter>, <parameter><decl><type><name>Point3</name><modifier>&amp;</modifier></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>Point3</name></type> <name>v</name> <init>= <expr><call><name>Pvec</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><call><name>Dot</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>p2</name></name> <operator>-</operator> <name><name>f</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><call><name>Dot</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>u</name><operator>.</operator><name>p1</name></name> <operator>-</operator> <name><name>f</name><operator>.</operator><name>p1</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name>x</name> <operator>-</operator> <name>y</name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>sgn</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>  <comment type="line">//-1ï¼vå¨fä¸</comment>
	<if>if <condition>(<expr><call><name>sgn</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>                  <comment type="line">// 0ï¼vä¸få¹³è¡</comment>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>u</name><operator>.</operator><name>p1</name></name> <operator>*</operator> <name>x</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>u</name><operator>.</operator><name>p2</name></name> <operator>*</operator> <name>y</name><operator>)</operator><operator>)</operator> <operator>/</operator> <name>d</name></expr>;</expr_stmt>          <comment type="line">// vä¸fç¸äº¤</comment>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>

<comment type="line">//åé¢ä½æåä½ç§¯*6</comment>
<function><type><name>double</name></type> <name>volume4</name><parameter_list>(<parameter><decl><type><name>Point3</name></type> <name>A</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>B</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>C</name></decl></parameter>, <parameter><decl><type><name>Point3</name></type> <name>D</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>Dot</name><argument_list>(<argument><expr><call><name>Cross</name><argument_list>(<argument><expr><name>B</name> <operator>-</operator> <name>A</name></expr></argument>, <argument><expr><name>C</name> <operator>-</operator> <name>A</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>D</name> <operator>-</operator> <name>A</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">500050</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pp</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>ll</cpp:value></cpp:define>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ot</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>abd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<expr_stmt><expr><name><name>ot</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>ot</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		<macro><name>inc</name><argument_list>(<argument>i</argument>,<argument><literal type="number">3</literal></argument>,<argument>n</argument>)</argument_list></macro>
	<block>{
		<expr_stmt><expr><name><name>ot</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ot</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>ot</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ot</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <name>pp</name></expr>;</expr_stmt>
	}</block>
}</block></function>


<function><type><name>void</name></type> <name>NewFunction</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>&amp;</modifier></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name><modifier>&amp;</modifier></type> <name>pppplen</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name><modifier>&amp;</modifier></type> <name>ans</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name><modifier>&amp;</modifier></type> <name>plllu</name></decl></parameter>)</parameter_list>
<block>{
	<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>flag</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
	<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>pppplen</name><operator>++</operator></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<expr_stmt><expr><name>ans</name> <operator>*=</operator> <name><name>ot</name><index>[<expr><name>pppplen</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>pp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pppplen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></else></if>
	<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><name>plllu</name><operator>++</operator></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<expr_stmt><expr><name>ans</name> <operator>*=</operator> <name><name>ot</name><index>[<expr><name>plllu</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>pp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>plllu</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name>void</name></type> <name>NewFunction</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>flag</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pppplen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>plllu</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>abd</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ot</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<macro><name>inc</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>len</argument>)</argument_list></macro>
	<block>{
			<expr_stmt><expr><call><name>NewFunction</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><name>pppplen</name></expr></argument>, <argument><expr><name>ans</name></expr></argument>, <argument><expr><name>plllu</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block>
	<if>if <condition>(<expr><name>flag</name></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<else>else
	<block>{
		<expr_stmt><expr><call><name>pllln</name><argument_list>(<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>NewFunction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
