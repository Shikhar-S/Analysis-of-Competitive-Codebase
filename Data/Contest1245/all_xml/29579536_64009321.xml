<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29579536_64009321.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>lol</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2e3</literal> <operator>+</operator> <literal type="number">11</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>Edge</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>u</name></decl> , <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>lol</name></type> <name>val</name></decl>;</decl_stmt>
  <function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>&amp;</modifier></type> <name>rhs</name></decl></parameter> )</parameter_list> <specifier>const</specifier> <block>{ 
    <return>return <expr><name>val</name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>val</name></name></expr>;</return>
  }</block></function>
</public>}</block><decl><name><name>edge</name><index>[<expr><name>N</name> <operator>*</operator> <name>N</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name><name>f</name><index>[<expr><name>N</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name>tot</name></decl> , <decl><type ref="prev"/><name><name>mark</name><index>[<expr><name>N</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>lol</name></type> <name><name>val</name><index>[<expr><name>N</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name>res</name></decl> , <decl><type ref="prev"/><name><name>C</name><index>[<expr><name>N</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>K</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pii</name></type> <name><name>dat</name><index>[<expr><name>N</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>ans</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>find</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>&amp;</modifier></type> <name>x</name></decl></parameter> )</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>x</name> <operator>==</operator> <name><name>f</name><index>[<expr><name>x</name></expr>]</index></name></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>( <argument><expr><name><name>f</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></else></ternary></expr>;</return> }</block></function>

<function><type><name>lol</name></type> <name>cost</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>&amp;</modifier></type> <name>a</name></decl></parameter> , <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>&amp;</modifier></type> <name>b</name></decl></parameter> )</parameter_list> <block>{ <return>return <expr><operator>(</operator> <name><name>K</name><index>[<expr><name>a</name></expr>]</index></name> <operator>+</operator> <name><name>K</name><index>[<expr><name>b</name></expr>]</index></name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>dat</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>-</operator> <name><name>dat</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument> )</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>( <argument><expr><name><name>dat</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>-</operator> <name><name>dat</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument> )</argument_list></call> <operator>)</operator></expr>;</return> }</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list> <block>{
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>dat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>dat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  }</block></for>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> 
    <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>,<argument><expr><name>C</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr> <operator>,</operator> <expr><name>res</name> <operator>+=</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
    <block type="pseudo"><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%I64d"</literal></expr></argument>, <argument><expr><name>K</name> <operator>+</operator> <name>i</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></for>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
    <block type="pseudo"><for>for<control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr> )</control>
      <block type="pseudo"><expr_stmt><expr><name><name>edge</name><index>[<expr><operator>++</operator><name>m</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>Edge</name><operator>)</operator> <block>{ <expr><name>i</name></expr> , <expr><name>j</name></expr> , <macro><name>cost</name><argument_list>( <argument>i</argument> , <argument>j</argument> )</argument_list></macro> }</block></expr>;</expr_stmt></block></for></block></for>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
  <expr_stmt><expr><call><name>sort</name><argument_list>( <argument><expr><name>edge</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> , <argument><expr><name>edge</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>m</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>fu</name> <init>= <expr><call><name>find</name><argument_list>( <argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument> )</argument_list></call></expr></init></decl> , <decl><type ref="prev"/><name>fv</name> <init>= <expr><call><name>find</name><argument_list>( <argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>( <expr><name>fu</name> <operator>==</operator> <name>fv</name></expr> )</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
    <if>if<condition>( <expr><call><name>max</name><argument_list>( <argument><expr><name><name>val</name><index>[<expr><name>fu</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>val</name><index>[<expr><name>fv</name></expr>]</index></name></expr></argument> )</argument_list></call> <operator>&lt;=</operator> <name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr> )</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
    <expr_stmt><expr><name>res</name> <operator>-=</operator> <call><name>max</name><argument_list>( <argument><expr><name><name>val</name><index>[<expr><name>fu</name></expr>]</index></name></expr></argument> , <argument><expr><name><name>val</name><index>[<expr><name>fv</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name><name>val</name><index>[<expr><name>fu</name></expr>]</index></name> <operator>&gt;</operator> <name><name>val</name><index>[<expr><name>fv</name></expr>]</index></name></expr> )</condition><then> <block>{
      <expr_stmt><expr><name><name>f</name><index>[<expr><name>fu</name></expr>]</index></name> <operator>=</operator> <name>fv</name></expr>;</expr_stmt>
    }</block></then> <else>else <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>fv</name></expr>]</index></name> <operator>=</operator> <name>fu</name></expr>;</expr_stmt></block></else></if>
    <expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ans</name><index>[<expr><operator>++</operator><name>tot</name></expr>]</index></name> <operator>=</operator> <call><name>pii</name><argument_list>( <argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument> , <argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>n</name> <operator>-</operator> <name>tot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
    <block type="pseudo"><if>if<condition>( <expr><operator>!</operator><name><name>mark</name><index>[<expr><call><name>find</name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>]</index></name></expr> )</condition><then>
      <block type="pseudo"><expr_stmt><expr><name><name>mark</name><index>[<expr><call><name>find</name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> <operator>,</operator> <expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><call><name>find</name><argument_list>( <argument><expr><name>i</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>tot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>tot</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>,<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
