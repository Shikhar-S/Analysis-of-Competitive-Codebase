<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615668_64033512.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>regi</name></cpp:macro> <cpp:value>register int</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><literal type="number">10001</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>double</name></type> <name><name>f</name><index>[<expr><literal type="number">10001</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>read</name><parameter_list>()</parameter_list><block>{<decl_stmt><decl><type><name>int</name></type> <name>r</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>w</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt><for>for<control>(<init>;</init><condition><expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>r</name><operator>=</operator><name>c</name></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for><for>for<control>(<init><expr><name>w</name><operator>=</operator><name>c</name><operator>^</operator><literal type="number">48</literal></expr>;</init><condition><expr><call><name>isdigit</name><argument_list>(<argument><expr><name>c</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>w</name><operator>=</operator><name>w</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><operator>(</operator><name>c</name><operator>^</operator><literal type="number">48</literal><operator>)</operator></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for><return>return <expr><ternary><condition><expr><name>r</name><operator>^</operator><literal type="number">45</literal></expr>?</condition><then><expr><name>w</name></expr></then><else>:<expr><operator>-</operator><name>w</name></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>int</name></type> <name>toone</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
	  <block type="pseudo"><return>return <expr><literal type="number">10</literal><operator>*</operator><name>x</name><operator>+</operator><name>y</name><operator>-</operator><literal type="number">11</literal></expr>;</return></block></then>
  <else>else
	  <block type="pseudo"><return>return <expr><literal type="number">10</literal><operator>*</operator><name>x</name><operator>-</operator><name>y</name></expr>;</return></block></else></if>
}</block></function>
<function><name>main</name><parameter_list>()</parameter_list><block>{
  <for>for<control>(<init><decl><type><name>regi</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
    <block type="pseudo"><for>for<control>(<init><decl><type><name>regi</name></type> <name>j</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
      <block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><call><name>toone</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><call><name>read</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for></block></for>
  <for>for<control>(<init><decl><type><name>regi</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
    <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">6</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>regi</name></type> <name>j</name><init>=<expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><name>i</name><operator>-</operator><literal type="number">6</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition><incr><expr><operator>++</operator><name>j</name></expr></incr>)</control>
      <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>/=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name><name>std</name><operator>::</operator><name>min</name></name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><call><name>toone</name><argument_list>(<argument><expr><operator>(</operator><name>i</name><operator>/</operator><literal type="number">10</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>-</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name>i</name><operator>/</operator><literal type="number">10</literal><operator>)</operator><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal><operator>)</operator></expr>?</condition><then><expr><operator>(</operator><literal type="number">10</literal><operator>-</operator><name>i</name><operator>%</operator><literal type="number">10</literal><operator>)</operator></expr></then><else>:<expr><operator>(</operator><name>i</name><operator>%</operator><literal type="number">10</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.10lf"</literal></expr></argument>,<argument><expr><name><name>f</name><index>[<expr><literal type="number">99</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
