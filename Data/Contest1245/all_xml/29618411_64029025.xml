<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618411_64029025.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><specifier>constexpr</specifier> <type><name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2001</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><specifier>constexpr</specifier> <type><name>int</name></type> <name>M</name> <init>= <expr><operator>(</operator><name>N</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>N</name></expr></init></decl>;</decl_stmt>

<class>class <name>UnionFind</name> <block>{<private type="default">
</private><private>private:
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
</private><public>public:
	<constructor><name>UnionFind</name><parameter_list>()</parameter_list> <block>{}</block></constructor>

	<constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Initializing.</comment>
		<expr_stmt><expr><call><name><name>size</name><operator>.</operator><name>assign</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>n</name></name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

		<comment type="line">// Setting the representative of each set to be itself.</comment>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
		}</block></for>
	}</block></constructor>

	<comment type="block">/* Amortized O(1). */</comment>
	<function><type><name>int</name></type> <name>find_set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
		<if>if <condition>(<expr><name>u</name> <operator>==</operator> <name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr>)</condition><then> <block>{ <comment type="line">// Found representative.</comment>
			<return>return <expr><name>u</name></expr>;</return>
		}</block></then></if>

		<comment type="line">// Compressing the path as we search for the set's representative.</comment>
		<return>return <expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <call><name>find_set</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>u</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	}</block></function>

	<comment type="block">/* Amortized O(1). */</comment>
	<function><type><name>void</name></type> <name>union_set</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
		<comment type="line">// Finding representatives of u and v.</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name>find_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><call><name>find_set</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// If u and v belong to different sets.</comment>
		<if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>y</name></expr>)</condition><then> <block>{
			<comment type="line">// Attaching the smaller tree to the bigger tree.</comment>
			<if>if <condition>(<expr><name><name>size</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name><name>size</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name><name>p</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>size</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <name><name>size</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></then>
			<else>else <block>{
				<expr_stmt><expr><name><name>p</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>size</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>size</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
			}</block></else></if>

			<comment type="line">// Decreasing number of sets.</comment>
			<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>

	<comment type="block">/* O(1). */</comment>
	<function><type><name>int</name></type> <name>num_sets</name><parameter_list>()</parameter_list> <block>{
		<return>return <expr><name>n</name></expr>;</return>
	}</block></function>

	<comment type="block">/* O(1). */</comment>
	<function><type><name>int</name></type> <name>set_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>)</parameter_list> <block>{
		<return>return <expr><name><name>size</name><index>[<expr><call><name>find_set</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
	}</block></function>
</public>}</block>;</class>

<struct>struct <name>Edge</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>w</name></decl>;</decl_stmt>

	<function type="operator"><type><name>bool</name></type> <name>operator <name>&lt;</name></name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Edge</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
		<return>return <expr><name>w</name> <operator>&lt;</operator> <name><name>b</name><operator>.</operator><name>w</name></name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>e</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>x</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>y</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>c</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>k</name><index>[<expr><name>N</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>power</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>Edge</name></expr></argument>&gt;</argument_list></name></type> <name>connection</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> <comment type="line">// (Input)</comment>

<comment type="block">/* O(E * Log(E)). */</comment>
<function><type><name>long</name> <name>long</name></type> <name>kruskal</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>UnionFind</name></type> <name>uf</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cost</name></decl>;</decl_stmt>

	<comment type="line">// Creating a Union Find data structure with sets from 1 to n.</comment>
	<expr_stmt><expr><name>uf</name> <operator>=</operator> <call><name>UnionFind</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// Sorting edges according to their weights.</comment>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>e</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>e</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cost</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="line">// For every edge (u, v).</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>e</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<comment type="line">// If vertex u and vertex v belongs to different sets.</comment>
		<if>if <condition>(<expr><call><name><name>uf</name><operator>.</operator><name>find_set</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name><name>uf</name><operator>.</operator><name>find_set</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<comment type="line">// Edge (u, v) belongs to the Minimum Spanning Tree. Unite u's set with v's set.</comment>
			<expr_stmt><expr><call><name><name>uf</name><operator>.</operator><name>union_set</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>, <argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>e</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>e</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>

	<return>return <expr><name>cost</name></expr>;</return>
}</block></function>

<function><type><name>long</name> <name>long</name></type> <name>dist</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
	<return>return <expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>u</name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>u</name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>u</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>v</name></expr>]</index></name><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>u</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>c</name> <operator>+</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>k</name> <operator>+</operator> <name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<for>for <control>(<init><expr><name>u</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>u</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>u</name><operator>++</operator></expr></incr>)</control> <block>{
		<for>for <control>(<init><expr><name>v</name> <operator>=</operator> <name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>v</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>u</name></expr>, <expr><name>v</name></expr>, <macro><name>dist</name><argument_list>(<argument>u</argument>, <argument>v</argument>)</argument_list></macro>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>u</name></expr>, <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>, <expr><name><name>c</name><index>[<expr><name>u</name></expr>]</index></name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><call><name>kruskal</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>n</name><operator>--</operator></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name> <operator>==</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>power</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block>{
			<expr_stmt><expr><call><name><name>connection</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>power</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>power</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><name><name>power</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name><name>connection</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>connection</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>, <argument><expr><name><name>connection</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>u</name></expr></argument>, <argument><expr><name><name>connection</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
