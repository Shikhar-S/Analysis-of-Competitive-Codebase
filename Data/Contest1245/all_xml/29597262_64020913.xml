<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29597262_64020913.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>100000000000000ll</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    
    <comment type="line">// (10,1)...(10,10)</comment>
    <comment type="line">// (9,10)...(9,1)</comment>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>S</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">10</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>x</name><operator>--</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>x</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>y</name><operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>y</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        }</block></then> <else>else <block>{
            <for>for<control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">10</literal></expr></init></decl>;</init><condition><expr><name>y</name><operator>&gt;=</operator><literal type="number">1</literal></expr>;</condition><incr><expr><name>y</name><operator>--</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><call><name><name>S</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        }</block></else></if>
    }</block></for>
    
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name><name>conns</name><index>[<expr><literal type="number">111</literal></expr>]</index></name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><name><name>conns</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for>
    
    
    <for>for<control>(<init><decl><type><name>int</name></type> <name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>x</name><operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>x</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>y</name><operator>&lt;=</operator><literal type="number">10</literal></expr>;</condition><incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>L</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>L</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>L</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
                <comment type="line">// (x,y) to (x-L, y)</comment>
                <decl_stmt><decl><type><name>int</name></type> <name>fr</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>int</name></type> <name>to</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><call><name><name>S</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
                    <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name><operator>==</operator><name>x</name> <operator>&amp;&amp;</operator> <name><name>S</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name><operator>==</operator><name>y</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>fr</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then></if>
                    <if>if <condition>(<expr><name><name>S</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>first</name><operator>==</operator><name>x</name><operator>-</operator><name>L</name> <operator>&amp;&amp;</operator> <name><name>S</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>second</name><operator>==</operator><name>y</name></expr>)</condition><then>
                        <block type="pseudo"><expr_stmt><expr><name>to</name><operator>=</operator><name>j</name></expr>;</expr_stmt></block></then></if>
                }</block></for>
                <expr_stmt><expr><name><name>conns</name><index>[<expr><name>fr</name></expr>]</index></name><operator>=</operator><name>to</name></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for></block></for>
    
    
    <decl_stmt><decl><type><name>double</name></type> <name><name>E</name><index>[<expr><literal type="number">111</literal></expr>]</index></name></decl>;</decl_stmt>
    
    <expr_stmt><expr><name><name>E</name><index>[<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>prob</name> <init>= <expr><literal type="number">1.0</literal><operator>/</operator><literal type="number">6.0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
        
        <decl_stmt><decl><type><name>double</name></type> <name>self_term</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>other_term</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        
        <for>for<control>(<init><decl><type><name>int</name></type> <name>s</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>s</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition><incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name>i</name><operator>+</operator><name>s</name><operator>&lt;=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                
                <if>if <condition>(<expr><name><name>conns</name><index>[<expr><name>i</name><operator>+</operator><name>s</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>other_term</name> <operator>+=</operator> <name>prob</name> <operator>*</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>E</name><index>[<expr><name>i</name><operator>+</operator><name>s</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>E</name><index>[<expr><name><name>conns</name><index>[<expr><name>i</name><operator>+</operator><name>s</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then> <else>else <block>{
                    <expr_stmt><expr><name>other_term</name> <operator>+=</operator> <name>prob</name> <operator>*</operator> <name><name>E</name><index>[<expr><name>i</name><operator>+</operator><name>s</name></expr>]</index></name></expr>;</expr_stmt>
                }</block></else></if>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>self_term</name> <operator>+=</operator> <name>prob</name></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        
        <comment type="line">// E[i] = 1 + self_term * E[i]+other_term</comment>
        <expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>other_term</name><operator>)</operator> <operator>/</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>-</operator> <name>self_term</name><operator>)</operator></expr>;</expr_stmt>
    }</block></for>
    
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%1.10f\n"</literal></expr></argument>,<argument><expr><name><name>E</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    
    
    
}</block></function>
</unit>
