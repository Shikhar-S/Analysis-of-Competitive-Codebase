<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29586405_64001719.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>push</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pop</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.rbegin(),a.rend()</cpp:value></cpp:define>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MAXN</name> <init>= <expr><literal type="number">3000</literal></expr></init></decl>, <decl><type ref="prev"/><name>MAXK</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>INF</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>, <decl><type ref="prev"/><name>M</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// mt19937 rnd(0);</comment>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <for>for <control>(<init>;</init><condition><expr><name>t</name></expr>;</condition><incr><expr><operator>--</operator><name>t</name></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>ans</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>p</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>p</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>b</name></expr>?</condition><then> <expr><literal type="char">'P'</literal></expr></then><else>: <expr><literal type="char">'$'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <operator>(</operator><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>b</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <elseif>else <if>if <condition>(<expr><name>p</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>c</name></expr>?</condition><then> <expr><literal type="char">'S'</literal></expr></then><else>: <expr><literal type="char">'$'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>c</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if></elseif> <else>else <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>a</name></expr>?</condition><then> <expr><literal type="char">'R'</literal></expr></then><else>: <expr><literal type="char">'$'</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt</name> <operator>+=</operator> <operator>(</operator><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>a</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><ternary><condition><expr><name>cnt</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>n</name></expr>?</condition><then> <expr><literal type="string">"YeS\n"</literal></expr></then><else>: <expr><literal type="string">"nO\n"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>cnt</name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;=</operator> <name>n</name></expr>)</condition><then> <block>{
            <for>for <control>(<init><decl><type><name>char</name></type> <name>p</name><range>: <expr><name>ans</name></expr></range></decl></init>)</control> <block>{
                <if>if <condition>(<expr><name>p</name> <operator>!=</operator> <literal type="char">'$'</literal></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>p</name></expr>;</expr_stmt>
                }</block></then> <elseif>else <if>if <condition>(<expr><name>a</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>b</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <else>else <block>{
                    <expr_stmt><expr><operator>--</operator><name>c</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                }</block></else></if>
            }</block></for>
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
