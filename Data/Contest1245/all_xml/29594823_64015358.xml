<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29594823_64015358.cpp"> 
<comment type="line">//#pragma GCC optimize("Ofast")</comment>
<comment type="line">//#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")</comment>
<comment type="line">//#pragma GCC optimize("unroll-loops")</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<function><type><name>void</name></type> <name>file</name><parameter_list>()</parameter_list><block>{
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"tst.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>,<decl><type ref="prev"/><name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>memo</name><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>win</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>char</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>(</operator><name>a</name><operator>==</operator><literal type="char">'P'</literal><operator>)</operator></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>(</operator><name>a</name><operator>==</operator><literal type="char">'R'</literal><operator>)</operator></expr>;</return></block></then></if>
	<if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>(</operator><name>a</name><operator>==</operator><literal type="char">'S'</literal><operator>)</operator></expr>;</return></block></then></if>
}</block></function>
<decl_stmt><decl><type><name>string</name></type> <name>ans</name></decl> ;</decl_stmt>
<function><type><name>int</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>indx</name><operator>==</operator><name>n</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>

	<decl_stmt><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>ret</name> <init>= <expr><name><name>memo</name><index>[<expr><name>indx</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<if>if<condition>(<expr><operator>~</operator><name>ret</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>ret</name></expr>;</return></block></then></if>

	<for>for<control>(<init><decl><type><name>auto</name></type> <name>c</name> <range>: <expr><block>{<expr><literal type="char">'R'</literal></expr>,<expr><literal type="char">'P'</literal></expr>,<expr><literal type="char">'S'</literal></expr>}</block></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>a</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>ret</name></expr></argument>,<argument><expr><call><name>solve</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>win</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else <block type="pseudo"><continue>continue;</continue></block></else></if>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>b</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>ret</name></expr></argument>,<argument><expr><call><name>solve</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>win</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else <block type="pseudo"><continue>continue;</continue></block></else></if>
		}</block></then></if></elseif>
		<else>else<block>{
			<if>if<condition>(<expr><name>n</name><operator>-</operator><name>indx</name><operator>-</operator><name>a</name><operator>-</operator><name>b</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>ret</name></expr></argument>,<argument><expr><call><name>solve</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>win</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then>
			<else>else <block type="pseudo"><continue>continue;</continue></block></else></if>
		}</block></else></if>
	}</block></for>

	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>trace</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>indx</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>indx</name><operator>==</operator><name>n</name></expr>)</condition><then><block type="pseudo"><return>return;</return></block></then></if>

	
	<decl_stmt><decl><type><name>int</name></type> <name>mx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>who</name></decl> ;</decl_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>c</name> <range>: <expr><block>{<expr><literal type="char">'R'</literal></expr>,<expr><literal type="char">'P'</literal></expr>,<expr><literal type="char">'S'</literal></expr>}</block></expr></range></decl></init>)</control><block>{
		<if>if<condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>a</name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>mx</name><operator>&lt;</operator><call><name>solve</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>win</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>who</name><operator>=</operator><name>c</name></expr><operator>,</operator><expr><name>mx</name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>win</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block></then>
			<else>else <block type="pseudo"><continue>continue;</continue></block></else></if>
		}</block></then>
		<elseif>else <if>if<condition>(<expr><name>c</name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{
			<if>if<condition>(<expr><name>b</name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>mx</name><operator>&lt;</operator><call><name>solve</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>win</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
					<expr_stmt><expr><name>who</name><operator>=</operator><name>c</name></expr><operator>,</operator><expr><name>mx</name><operator>=</operator><call><name>solve</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>win</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
			}</block></then>
			<else>else <block type="pseudo"><continue>continue;</continue></block></else></if>
		}</block></then></if></elseif>
		<else>else<block>{
			<if>if<condition>(<expr><name>n</name><operator>-</operator><name>indx</name><operator>-</operator><name>a</name><operator>-</operator><name>b</name></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>mx</name><operator>&lt;</operator><call><name>solve</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>win</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><then>
					<block type="pseudo"><expr_stmt><expr><name>who</name><operator>=</operator><name>c</name></expr><operator>,</operator><expr><name>mx</name> <operator>=</operator> <call><name>solve</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>win</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name><name>s</name><index>[<expr><name>indx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			}</block></then>
			<else>else <block type="pseudo"><continue>continue;</continue></block></else></if>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>who</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if>if<condition>(<expr><name>who</name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>trace</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then>
	<elseif>else <if>if<condition>(<expr><name>who</name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><call><name>trace</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></then></if></elseif>
	<else>else<block>{
		<expr_stmt><expr><call><name>trace</name><argument_list>(<argument><expr><name>indx</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>

}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>a</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>k</name><operator>&lt;=</operator><name>b</name></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>memo</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block></for></block></for></block></for>
	<if>if<condition>(<expr><literal type="number">2</literal><operator>*</operator><call><name>solve</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>&gt;=</operator><name>n</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>trace</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></then>
	<else>else<block>{
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
	}</block></else></if>
	

}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{	
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 	<expr_stmt><expr><call><name>file</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

 	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>tc</name></expr>;</expr_stmt>

 	<while>while<condition>(<expr><name>tc</name><operator>--</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>

}</block></function></unit>
