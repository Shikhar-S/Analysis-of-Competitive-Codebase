<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619733_64036062.cpp">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ios</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>

<function><type><name>ll</name></type> <name>sub</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>a</name><operator>-</operator><name>b</name><operator>+</operator><name>MOD</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>a</name><operator>*</operator><name>b</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>}</block></function>
<comment type="line">//Variables Start   </comment>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>u</name></decl>,<decl><type ref="prev"/><name>ni</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>fibo</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ios</name>
    <name>int</name></type> <name>ti</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <comment type="line">//cin&gt;&gt;ti;</comment>
    <while>while<condition>(<expr><name>ti</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fibo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>fibo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>=</operator><call><name><name>s</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>ok</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro>
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>u</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
            <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name><name>ni</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif>
            <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal><operator>||</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>ok</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if></elseif></if>
        }</block>
        <if>if<condition>(<expr><name>ok</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"0"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        }</block></then></if>
        <expr_stmt><expr><name><name>fibo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name><name>fibo</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><expr_stmt><expr><name><name>fibo</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>add</name><argument_list>(<argument><expr><name><name>fibo</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>fibo</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>u.size()</argument>)</argument_list></macro>
        <block>{
            <if>if<condition>(<expr><name><name>u</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>u</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block>
        <expr_stmt><expr><call><name><name>e</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>



        <expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>ni.size()</argument>)</argument_list></macro>
        <block>{
            <if>if<condition>(<expr><name><name>ni</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><name><name>ni</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else
                <block type="pseudo"><expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
        }</block>
        <expr_stmt><expr><call><name><name>d</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>d</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>mul</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>fibo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>e</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><call><name>mul</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name><name>fibo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
        
    
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
        
}</block></function></unit>
