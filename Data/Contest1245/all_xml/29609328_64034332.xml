<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29609328_64034332.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<class>class <name>pont</name><block>{<private type="default">
</private><public>public:
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>szulo</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>vanAram</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<function_decl><type><name>int</name></type> <name>getSzulo</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mivel</name></decl></parameter>)</parameter_list>;</function_decl>
</public>}</block>;</class>

<class>class <name>fejlesztes</name><block>{<private type="default">
</private><public>public:
	<decl_stmt><decl><type><name>bool</name></type> <name>kabel</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ar</name></decl>;</decl_stmt>
</public>}</block>;</class>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pont</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name><name>pont</name><operator>::</operator><name>getSzulo</name></name><parameter_list>()</parameter_list><block>{
	<if>if<condition>(<expr><name>index</name><operator>==</operator><name>szulo</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>index</name></expr>;</return></block></then></if>
	<return>return <expr><name>szulo</name><operator>=</operator><name><name>p</name><index>[<expr><name>szulo</name></expr>]</index></name><operator>.</operator><call><name>getSzulo</name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name><name>pont</name><operator>::</operator><name>merge</name></name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mivel</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>szulo</name><operator>==</operator><name>index</name> <operator>&amp;&amp;</operator> <name>mivel</name> <operator>==</operator> <name><name>p</name><index>[<expr><name>mivel</name></expr>]</index></name><operator>.</operator><name>szulo</name></expr>)</condition><then><block>{
		<expr_stmt><expr><name>szulo</name><operator>=</operator><name>mivel</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
		<expr_stmt><expr><name><name>p</name><index>[<expr><call><name>getSzulo</name><argument_list>()</argument_list></call></expr>]</index></name><operator>.</operator><call><name>merge</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>mivel</name></expr>]</index></name><operator>.</operator><call><name>getSzulo</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></else></if>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>fejlesztes</name></expr></argument>&gt;</argument_list></name></type> <name>f</name></decl>;</decl_stmt>

<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><name>fejlesztes</name></type> <name>f1</name></decl></parameter>, <parameter><decl><type><name>fejlesztes</name></type> <name>f2</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name><name>f1</name><operator>.</operator><name>ar</name></name> <operator>&lt;</operator> <name><name>f2</name><operator>.</operator><name>ar</name></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>ab</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name>a</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if>
	<return>return <expr><operator>-</operator><name>a</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>f</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>*</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>szulo</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then><block>{
				<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name><operator>*</operator><name>n</name><operator>+</operator><name>j</name></expr>]</index></name><operator>=</operator><block>{<expr><literal type="number">0</literal></expr>,<expr><name>i</name></expr>,<expr><name>i</name></expr>,<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c</name></expr>}</block></expr>;</expr_stmt>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name><operator>*</operator><name>n</name><operator>+</operator><name>j</name></expr>]</index></name><operator>=</operator><block>{<expr><literal type="number">1</literal></expr>,<expr><name>i</name></expr>,<expr><name>j</name></expr>,<expr><operator>(</operator><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>k</name><operator>+</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>k</name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>ab</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>-</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>ab</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>-</operator><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>}</block></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>f</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>f</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>allomas</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vez</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ossz</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>f</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>kabel</name></expr>)</condition><then><block>{
			<if>if<condition>(<expr><operator>(</operator><operator>!</operator><name><name>p</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name><operator>.</operator><name>vanAram</name> <operator>||</operator> <operator>!</operator><name><name>p</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name><operator>.</operator><name>vanAram</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name><operator>.</operator><call><name>getSzulo</name><argument_list>()</argument_list></call> <operator>!=</operator> <name><name>p</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name><operator>.</operator><call><name>getSzulo</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name><name>p</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name><operator>.</operator><name>vanAram</name></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>p</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name><operator>.</operator><call><name>getSzulo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getSzulo</name><argument_list>()</argument_list></call><operator>==</operator><name>s</name></expr>)</condition><then><block>{
							<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vanAram</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
						}</block></then></if>
					}</block></for>
				}</block></then></if>
				<if>if<condition>(<expr><name><name>p</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index></name><operator>.</operator><name>vanAram</name></expr>)</condition><then><block>{
					<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>p</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name><operator>.</operator><call><name>getSzulo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getSzulo</name><argument_list>()</argument_list></call><operator>==</operator><name>s</name></expr>)</condition><then><block>{
							<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vanAram</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
						}</block></then></if>
					}</block></for>
				}</block></then></if>
				<expr_stmt><expr><name><name>p</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name><operator>.</operator><call><name>merge</name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>vez</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>,<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ossz</name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ar</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then> <else>else <block>{
			<if>if<condition>(<expr><operator>!</operator><name><name>p</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name><operator>.</operator><name>vanAram</name></expr>)</condition><then><block>{
				<expr_stmt><expr><call><name><name>allomas</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name><name>p</name><index>[<expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index></name><operator>.</operator><call><name>getSzulo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
					<if>if<condition>(<expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>getSzulo</name><argument_list>()</argument_list></call><operator>==</operator><name>s</name></expr>)</condition><then><block>{
						<expr_stmt><expr><name><name>p</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>vanAram</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
				<expr_stmt><expr><name>ossz</name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ar</name></expr>;</expr_stmt>
			}</block></then></if>
		}</block></else></if>
	}</block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ossz</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>allomas</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><range>:<expr><name>allomas</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal> <operator>&lt;&lt;</operator> <call><name><name>vez</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>i</name><range>:<expr><name>vez</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt></block></for>
<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
