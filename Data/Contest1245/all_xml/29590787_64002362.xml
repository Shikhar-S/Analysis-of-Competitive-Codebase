<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29590787_64002362.cpp"> <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>comment</name><name>(</name><name>linker</name><name>,</name> <cpp:literal>"/stack:200000000"</cpp:literal><name>)</name></cpp:pragma>
 <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
 <cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>
 <cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
 <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
 <using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
     <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
 <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name> <argument_list>(<argument><expr><literal type="string">"INPUT.txt"</literal></expr></argument> , <argument><expr><literal type="string">"r"</literal></expr></argument> , <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name> <argument_list>(<argument><expr><literal type="string">"OUTPUT.txt"</literal></expr></argument> , <argument><expr><literal type="string">"w"</literal></expr></argument> , <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 
     <decl_stmt><decl><type><name>clock_t</name></type> <name>clk</name></decl>;</decl_stmt>
 	<expr_stmt><expr><name>clk</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
 
<comment type="line">// -------------------------------------Code starts here--------------------------------------------------------------------- </comment>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name><name>mm</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>mm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mm</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>ans</name><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>fill_n</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="char">'z'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'R'</literal><operator>&amp;&amp;</operator><name><name>mm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'P'</literal><operator>&amp;&amp;</operator><name><name>mm</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mm</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
            }</block></then></if></elseif>
            <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'S'</literal><operator>&amp;&amp;</operator><name><name>mm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>mm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
            }</block></then></if></elseif></if>
        }</block></for> 
        <decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>n</name><operator>-</operator><operator>(</operator><name><name>mm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>mm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>mm</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator><operator>&lt;</operator><operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
        }</block></then></if>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block>{
            <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'z'</literal></expr>)</condition><then>
            <block>{
                <if>if<condition>(<expr><name><name>mm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                }</block></then>
                <elseif>else <if>if<condition>(<expr><name><name>mm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mm</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if></elseif>
                 <elseif>else <if>if<condition>(<expr><name><name>mm</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>mm</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></then></if>
        }</block></for>
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES\n"</literal></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
                <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
                <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt>
        }</block></else></if>
        

    }</block></while>
    
    
<comment type="line">// -------------------------------------Code ends here------------------------------------------------------</comment>
 
     <expr_stmt><expr><name>clk</name> <operator>=</operator> <call><name>clock</name><argument_list>()</argument_list></call> <operator>-</operator> <name>clk</name></expr>;</expr_stmt>
 	<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"Time: "</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>clk</name><operator>)</operator><operator>/</operator><name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
 	<return>return <expr><literal type="number">0</literal></expr>;</return>
 }</block></function></unit>
