<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617008_64004647.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>


<function><type><name>long</name> <name>long</name></type> <name>DP</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><operator>++</operator><name>n</name></expr><operator>,</operator><expr><operator>++</operator><name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>std</name><operator>::</operator><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></name></type> <name>bn</name></decl>,<decl><type ref="prev"/><name>bm</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>bn</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>n</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <while>while<condition>(<expr><name>m</name></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>bm</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>m</name><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>m</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><call><name><name>std</name><operator>::</operator><name>max</name></name><argument_list>(<argument><expr><call><name><name>bn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><call><name><name>bm</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>bn</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>bm</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><specifier>static</specifier> <type><name>long</name> <name>long</name></type> <name><name>f</name><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>f</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>f</name><index>[<expr><name>len</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>len</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><operator>--</operator><name>i</name></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>sn</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>sn</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>sn</name></expr></incr>)</control>
            <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>sm</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>sm</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition><incr><expr><operator>++</operator><name>sm</name></expr></incr>)</control> <block>{
                <if>if<condition>(<expr><operator>!</operator><name>sn</name> <operator>||</operator> <name><name>bn</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>sn</name></expr>]</index><index>[<expr><name>sm</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bm</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>sn</name></expr>]</index><index>[<expr><name>sm</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
                <if>if<condition>(<expr><operator>!</operator><name>sm</name> <operator>||</operator> <name><name>bm</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
                    <block type="pseudo"><expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>sn</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bn</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>]</index><index>[<expr><name>sm</name></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>sn</name></expr>]</index><index>[<expr><name>sm</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
                <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>sn</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bn</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>]</index><index>[<expr><name>sm</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>bm</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>]</index></name><operator>+=</operator><name><name>f</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>sn</name></expr>]</index><index>[<expr><name>sm</name></expr>]</index></name></expr>;</expr_stmt>
            }</block></for></block></for></block></for>
    <return>return <expr><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen("in1.txt","r",stdin);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt><expr_stmt><expr><name><name>std</name><operator>::</operator><name>cin</name></name><operator>&gt;&gt;</operator><name>l</name><operator>&gt;&gt;</operator><name>r</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>std</name><operator>::</operator><name>cout</name></name><operator>&lt;&lt;</operator><call><name>DP</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">2</literal><operator>*</operator><call><name>DP</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>+</operator><call><name>DP</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
