<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29600187_64029225.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forstl</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto &amp;i: v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; e; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forsn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = s; i &lt; e; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rforn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = s; i &gt;= 0; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rforsn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>s</name></type></parameter>,<parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = s; i &gt;= e; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testcases</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int t,myzx;cin&gt;&gt;myzx;forsn(t,1,myzx+1)</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_clz(a)</cpp:value></cpp:define> <comment type="line">// count leading zeroes</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ctz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_ctz(a)</cpp:value></cpp:define> <comment type="line">// count trailing zeroes</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popc</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__builtin_popcount(a)</cpp:value></cpp:define> <comment type="line">// count set bits </comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ln</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>kyahai</name><parameter_list>(<parameter><type><name>args</name><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); \
stringstream _ss(_s); istream_iterator&lt;string&gt; _it(_ss); err(_it, args); cout&lt;&lt;ln; }</cpp:value></cpp:define>
<function><type><name>void</name></type> <name>err</name><parameter_list>(<parameter><decl><type><name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>it</name></decl></parameter>)</parameter_list> <block>{}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Args</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>err</name><parameter_list>(<parameter><decl><type><name><name>istream_iterator</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>it</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>Args</name><modifier>...</modifier></type> <name>args</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <operator>*</operator><name>it</name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <literal type="string">"\t\t"</literal></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr><operator>++</operator><name>it</name></expr></argument>, <argument><expr><name>args</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)n.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>n.begin() , n.end()</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tfi</name></cpp:macro> <cpp:value>first.first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tse</name></cpp:macro> <cpp:value>first.second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tth</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>p32</name>;</typedef> 
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>p64</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>pdd</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>v64</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v32</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>vv32</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>p64</name></expr></argument>&gt;</argument_list></name></type> <name>vp64</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>p32</name></expr></argument>&gt;</argument_list></name></type> <name>vp32</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m32</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> , <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>tri</name>;</typedef>
<typedef>typedef <type><name><name>tree</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>null_type</name></expr></argument>,<argument><expr><name><name>less</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name>rb_tree_tag</name></expr></argument>,<argument><expr><name>tree_order_statistics_node_update</name></expr></argument>&gt;</argument_list></name></type> <name>ordered_set</name>;</typedef> 
<comment type="line">//like set just find_by_order() and order_of_key() are extra</comment>
 
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name> <name>(</name><cpp:literal>"-O3"</cpp:literal><name>)</name></cpp:pragma>
<function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>tp</name></parameter> &gt;</parameter_list></template> <type><name>void</name></type> <name>in</name><parameter_list>( <parameter><decl><type><name>tp</name> <modifier>&amp;</modifier></type> <name>dig</name></decl></parameter> )</parameter_list><block>{
    <decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>dig</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><decl_stmt><decl><type><name>ll</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><operator>!</operator><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block>{ <if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></while>
    <while>while<condition>(<expr><call><name>isdigit</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>dig</name><operator>=</operator><name>dig</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
    <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>dig</name><operator>=</operator><operator>-</operator><name>dig</name></expr>;</expr_stmt></block></then></if>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>LIM</name> <init>= <expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl> ,<decl><type ref="prev"/><name>MOD</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>m</name></decl> , <decl><type ref="prev"/><name>t</name></decl> , <decl><type ref="prev"/><name>x</name></decl> ,<decl><type ref="prev"/><name>y</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>board</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ld</name></type> <name><name>dp</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>convert</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><operator>(</operator><name>i</name><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>(</operator><literal type="number">10</literal><operator>*</operator><name>i</name><operator>+</operator><name>j</name><operator>)</operator></expr>;</return></block></then>
	<else>else <block type="pseudo"><return>return <expr><operator>(</operator><literal type="number">10</literal><operator>*</operator><name>i</name> <operator>+</operator> <literal type="number">9</literal><operator>-</operator><name>j</name><operator>)</operator></expr>;</return></block></else></if>
}</block></function>
<function><type><name>int</name></type> <name>backconverti</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><name>num</name><operator>/</operator><literal type="number">10</literal></expr>;</return>
}</block></function> 
<function><type><name>int</name></type> <name>backconvertj</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><operator>(</operator><call><name>backconverti</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call><operator>%</operator><literal type="number">2</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<return>return <expr><name>num</name><operator>%</operator><literal type="number">10</literal></expr>;</return>
	}</block></then>
	<else>else <block type="pseudo"><return>return <expr><literal type="number">9</literal><operator>-</operator><name>num</name><operator>%</operator><literal type="number">10</literal></expr>;</return></block></else></if>
}</block></function>
<function><type><name>ld</name></type> <name>recurse</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>state</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>num</name><init>= <expr><call><name>convert</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>num</name><operator>==</operator><literal type="number">99</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>	;</return></block></then></if>
	<if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>state</name></expr>]</index></name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>state</name></expr>]</index></name></expr>;</return></block></then></if>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>state</name></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<comment type="line">// kyahai(num,state);</comment>
	<if>if<condition>(<expr><name>state</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<decl_stmt><decl><type><name>ld</name></type> <name>p</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>t</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;=</operator><literal type="number">6</literal></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control><block>{
			<decl_stmt><decl><type><name>int</name></type> <name>nextsq</name><init>= <expr><name>num</name><operator>+</operator><name>t</name></expr></init></decl>;</decl_stmt>
			<if>if<condition>(<expr><name>nextsq</name><operator>&gt;</operator><literal type="number">99</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>p</name><operator>=</operator><call>(<name>ld</name>)<argument_list>(<argument><expr><literal type="number">7</literal><operator>-</operator><name>t</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">6</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+</operator><name>p</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">1</literal><operator>-</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
				<return>return <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
			}</block></then></if> 
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>+=</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><operator>(</operator><call><name>recurse</name><argument_list>(<argument><expr><call><name>backconverti</name><argument_list>(<argument><expr><name>nextsq</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>backconvertj</name><argument_list>(<argument><expr><name>nextsq</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator><operator>/</operator><literal type="number">6</literal><operator>)</operator></expr> ;</expr_stmt>
		}</block></for>
		<return>return <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
	}</block></then></if>
	<if>if<condition>(<expr><name>state</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
		<if>if <condition>(<expr><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><call><name>recurse</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else<block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><call><name>recurse</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>recurse</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<return>return <expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
	}</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">9</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>board</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">11</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">11</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
		}</block></for>
	}</block></for>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><call><name>backconverti</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><call><name>backconvertj</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><call><name>backconverti</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><call><name>backconvertj</name><argument_list>(<argument><expr><literal type="number">99</literal></expr></argument>)</argument_list></call></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>fixed</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>recurse</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>
