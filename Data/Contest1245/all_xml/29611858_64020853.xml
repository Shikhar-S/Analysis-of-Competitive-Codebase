<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29611858_64020853.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>0x3f3f3f3f</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">3e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">1e6</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>fac</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>f</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>inv</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>fac</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>inv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>inv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>maxn</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>fac</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>%</operator><name>mod</name></expr>;</expr_stmt>   <comment type="line">// nï¼</comment>
        <decl_stmt><decl><type><name>ll</name></type> <name>t</name><init>=<expr><name>mod</name><operator>/</operator><name>i</name></expr></init></decl>,<decl><type ref="prev"/><name>k</name><init>=<expr><name>mod</name><operator>%</operator><name>i</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name>mod</name><operator>-</operator><name>t</name><operator>)</operator><operator>*</operator><name><name>f</name><index>[<expr><name>k</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt>  <comment type="line">// nçéå</comment>
        <expr_stmt><expr><name><name>inv</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>inv</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name><name>f</name><index>[<expr><name>i</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</expr_stmt> <comment type="line">// nï¼çéå</comment>
    }</block></for>
}</block></function>

<function><type><name>ll</name></type> <name>C</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>n</name><operator>&lt;</operator><name>m</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
    <return>return <expr><name><name>fac</name><index>[<expr><name>n</name></expr>]</index></name><operator>*</operator><name><name>inv</name><index>[<expr><name>m</name></expr>]</index></name><operator>%</operator><name>mod</name><operator>*</operator><name><name>inv</name><index>[<expr><name>n</name><operator>-</operator><name>m</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>suan</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>temp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>&lt;=</operator><name>x</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>temp</name><operator>+=</operator><call><name>C</name><argument_list>(<argument><expr><name>i</name><operator>+</operator><name>x</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>,<argument><expr><name>x</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>temp</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>temp</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><call><name>~<name>scanf</name></name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>len</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>flag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>len-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal><operator>||</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></then></if>
        }</block>
        <if>if<condition>(<expr><name>flag</name></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>num</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>len-<literal type="number">1</literal></argument>)</argument_list></macro><block>{
            <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>i</name><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'u'</literal></expr>)</condition><then><block>{
                    <if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>ans</name><operator>*=</operator><call><name>suan</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ans</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name>num</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>i</name><operator>&amp;&amp;</operator><name><name>s</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>!=</operator><literal type="char">'n'</literal></expr>)</condition><then><block>{
                    <if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>ans</name><operator>*=</operator><call><name>suan</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>ans</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
                    }</block></then></if>
                    <expr_stmt><expr><name>num</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>num</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then></if></elseif>
            <else>else<block>{
                <if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>ans</name><operator>*=</operator><call><name>suan</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ans</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
                }</block></then></if><expr_stmt><expr><name>num</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block>

        <if>if<condition>(<expr><name>num</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>ans</name><operator>*=</operator><call><name>suan</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>%=</operator><name>MOD</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
