<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610721_64014050.cpp"><comment type="block">/*
 * (c) fushar (Ashar Fuadi)
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0, _n = n; i &lt; _n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a, _b = b; i &lt;= _b; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = b, _a = a; i &gt;= _a; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESET</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(c, v, sizeof c)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>

<comment type="block" format="doxygen">/***********************************************************/</comment>

<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>D</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>E</name><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>win</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro> <expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>r</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>B</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>p</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>C</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>s</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>A</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
    }</block>

    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <if>if <condition>(<expr><name>A</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>A</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then> <elseif>else <if>if <condition>(<expr><name>B</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>B</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if></elseif> <else>else <block>{
            <expr_stmt><expr><name><name>E</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>C</name><operator>--</operator></expr>;</expr_stmt>
        }</block></else></if>
    }</block>

    <expr_stmt><expr><name><name>E</name><index>[<expr><name>N</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>string</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>N</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>A</name> <operator>&gt;&gt;</operator> <name>B</name> <operator>&gt;&gt;</operator> <name>C</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>D</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>can</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>M</name> <init>= <expr><operator>(</operator><name>N</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>P</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>R</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>S</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>N</argument>)</argument_list></macro> <block>{
        <if>if <condition>(<expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>P</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>D</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>R</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><name>S</name><operator>++</operator></expr>;</expr_stmt></block></else></if>
    }</block>

    <macro><name>REP</name><argument_list>(<argument>p</argument>, <argument>M+<literal type="number">1</literal></argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>r</argument>, <argument>M-p+<literal type="number">1</literal></argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name>M</name><operator>-</operator><name>p</name><operator>-</operator><name>r</name></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>R</name> <operator>||</operator> <name>p</name> <operator>&gt;</operator> <name>P</name> <operator>||</operator> <name>s</name> <operator>&gt;</operator> <name>S</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>

        <if>if <condition>(<expr><name>B</name> <operator>&gt;=</operator> <name>r</name> <operator>&amp;&amp;</operator> <name>C</name> <operator>&gt;=</operator> <name>p</name> <operator>&amp;&amp;</operator> <name>A</name> <operator>&gt;=</operator> <name>s</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>win</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>can</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block>
    <if>if <condition>(<expr><operator>!</operator><name>can</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>T</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>T</name><operator>--</operator></expr>)</condition> <block>{
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
}</block></function>
</unit>
