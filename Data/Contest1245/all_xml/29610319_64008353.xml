<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610319_64008353.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><literal type="number">505</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>draw</name><parameter_list>()</parameter_list> <block>{
        <if>if<condition>(<expr><name>a</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>a</name> <operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> <return>return;</return>}</block></then></if>
        <if>if<condition>(<expr><name>b</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>b</name> <operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> <return>return;</return>}</block></then></if>
        <if>if<condition>(<expr><name>c</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>c</name> <operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> <return>return;</return>}</block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>Solve</name><parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>t</name> <operator>--</operator></expr>)</condition> <block>{
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>a</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>A</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>B</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>C</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control>
                <block type="pseudo"><if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>B</name> <operator>++</operator></expr>;</expr_stmt></block></then>
                <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>C</name> <operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
                <elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>A</name> <operator>++</operator></expr>;</expr_stmt></block></then></if></elseif></if></block></for>

            <decl_stmt><decl><type><name>int</name></type> <name>a1</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>A</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>b1</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>B</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if>if<condition>(<expr><name>a1</name> <operator>+</operator> <name>b1</name> <operator>+</operator> <name>c1</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>a</name> <operator>-=</operator> <name>a1</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>-=</operator> <name>b1</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>-=</operator> <name>c1</name></expr>;</expr_stmt>
                <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator> <name>i</name></expr></incr>)</control> <block>{
                    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{
                        <if>if<condition>(<expr><name>b1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>b1</name><operator>--</operator></expr><operator>,</operator> <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'P'</literal></expr>;</expr_stmt></block></then>
                        <else>else <block type="pseudo"><expr_stmt><expr><call><name>draw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
                    }</block></then></if>
                    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block>{
                        <if>if<condition>(<expr><name>c1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>c1</name><operator>--</operator></expr><operator>,</operator> <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'S'</literal></expr>;</expr_stmt></block></then>
                        <else>else <block type="pseudo"><expr_stmt><expr><call><name>draw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
                    }</block></then></if>
                    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block>{
                        <if>if<condition>(<expr><name>a1</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a1</name><operator>--</operator></expr><operator>,</operator> <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'R'</literal></expr>;</expr_stmt></block></then>
                        <else>else <block type="pseudo"><expr_stmt><expr><call><name>draw</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
                    }</block></then></if>
                }</block></for>
                <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else
                <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
        }</block></while>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>task</name></cpp:macro> <cpp:value>"main"</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
        <comment type="line">//freopen(task".inp","r",stdin);</comment>
        <comment type="line">//freopen(task".out","w",stdout);</comment>
        <expr_stmt><expr><call><name>Solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
