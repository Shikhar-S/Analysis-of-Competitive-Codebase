<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613618_64001245.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">110</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(register int i = a;i &lt;= b; ++i)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt><comment type="line">//R,P,S;</comment>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
   <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>s</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>vis</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><sizeof>sizeof <name>vis</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
   <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><block>{
      <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then><block>{
         <if>if<condition>(<expr><name>b</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>b</name></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt></block></then>
         <else>else <block type="pseudo"><expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
      }</block></then><elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then><block>{
         <if>if<condition>(<expr><name>c</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>c</name></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt></block></then>
         <else>else <block type="pseudo"><expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
      }</block></then></if></elseif> <else>else <block>{
         <if>if<condition>(<expr><name>a</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>a</name></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt></block></then>
         <else>else <block type="pseudo"><expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></else></if>
      }</block></else></if>
   }</block>
   <macro><name>fr</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro><if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then><block>{
      <if>if<condition>(<expr><name>a</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>a</name></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt></block></then>
      <elseif>else <if>if<condition>(<expr><name>b</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>b</name></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if></elseif>
      <else>else <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>c</name></expr><operator>,</operator><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt></block></else></if>
   }</block></then></if>
   <if>if<condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <call><name>ceil</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
      <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>s</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
   }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
   <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
}</block></function>
</unit>
