<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29587673_64004034.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>int64_t</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = 0; i &lt; n; ++i)</cpp:value></cpp:define>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>Q</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>Q</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>Q</name> <operator>--</operator><operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>string</name></type> <name>ans</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <macro><name>F</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>ch</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>b</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>a</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
            }</block></then></if>
            <if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>c</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><operator>--</operator><name>c</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block>

        <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><name>n</name> <operator>-</operator> <name>a</name> <operator>-</operator> <name>b</name> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator> <name>n</name></expr>;</expr_stmt></block></then></if>
        <macro><name>F</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
            <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><then> <block>{
                <if>if<condition>(<expr><name>a</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><operator>--</operator> <name>a</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                }</block></then> <elseif>else
                <if>if<condition>(<expr><name>b</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><operator>--</operator> <name>b</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                }</block></then></if></elseif> <elseif>else
                <if>if<condition>(<expr><name>c</name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><operator>--</operator> <name>c</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                }</block></then></if></elseif></if>
            }</block></then></if>
        }</block>
        <if>if <condition>(<expr><name>cnt</name> <operator>&gt;=</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
        }</block></else></if>
    }</block></while>
}</block></function>
</unit>
