<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29585806_64011057.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>R</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>Readin</name><parameter_list>( <parameter><decl><type><name>R</name> <modifier>&amp;</modifier></type><name>K</name></decl></parameter> )</parameter_list> <block>{<decl_stmt><decl><type><name>bool</name></type> <name>F</name><init>=<expr><name>K</name><operator>=</operator><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>C</name><init>=<expr><call><name>getchar</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name><name>C</name><argument_list type="generic">&lt;<argument><expr><literal type="char">'0'</literal><operator>||</operator><name>C</name></expr></argument>&gt;</argument_list></name><literal type="char">'9'</literal></expr>)</condition>
<block>{<if>if<condition>(<expr><name>C</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>F</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>C</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></while><while>while<condition>(<expr><name>C</name><operator>&lt;=</operator><literal type="char">'9'</literal><operator>&amp;&amp;</operator><name>C</name><operator>&gt;=</operator><literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><expr_stmt><expr><name>K</name><operator>=</operator><operator>(</operator><name>K</name><operator>&lt;&lt;</operator><literal type="number">1</literal><operator>)</operator><operator>+</operator><operator>(</operator><name>K</name><operator>&lt;&lt;</operator><literal type="number">3</literal><operator>)</operator><operator>+</operator><name>C</name><operator>-</operator><literal type="char">'0'</literal></expr><operator>,</operator><expr><name>C</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while><if>if<condition>(<expr><name>F</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>K</name><operator>=</operator><operator>-</operator><name>K</name></expr>;</expr_stmt></block></then></if>}</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>R</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>Checkmax</name><parameter_list>( <parameter><decl><type><name>R</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter> , <parameter><decl><type><name>R</name></type> <name>B</name></decl></parameter> )</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>A</name> <operator>&lt;</operator> <name>B</name></expr> ?</condition><then> <expr><name>A</name> <operator>=</operator> <name>B</name></expr></then></ternary></expr> <operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr> ;</return> }</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>class</name></type> <name>R</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>Checkmin</name><parameter_list>( <parameter><decl><type><name>R</name> <modifier>&amp;</modifier></type><name>A</name></decl></parameter> , <parameter><decl><type><name>R</name></type> <name>B</name></decl></parameter> )</parameter_list> <block>{ <return>return <expr><ternary><condition><expr><name>A</name> <operator>&gt;</operator> <name>B</name></expr> ?</condition><then> <expr><name>A</name> <operator>=</operator> <name>B</name></expr></then></ternary></expr> <operator>,</operator> <expr><literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr> ;</return> }</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MaxN</name> <init>= <expr><literal type="number">1e6</literal> <operator>+</operator> <literal type="number">10</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>Mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>S</name><index>[<expr><name>MaxN</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>Dp</name><index>[<expr><name>MaxN</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl> ;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>( <argument><expr><literal type="string">"%s"</literal></expr></argument> , <argument><expr><name>S</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><name>N</name> <operator>=</operator> <call><name>strlen</name><argument_list>( <argument><expr><name>S</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
	<expr_stmt><expr><name><name>Dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr> ;</expr_stmt>
	<for>for<control>(<init><decl><type><specifier>register</specifier> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><operator>++</operator><name>i</name> <operator>&lt;=</operator> <name>N</name></expr> ;</condition> <incr/>)</control>
		<block type="pseudo"><switch>switch<condition>( <expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition> <block>{
			<case>case <expr><literal type="char">'m'</literal></expr> :</case> <block>{
				<return>return <expr><operator>not</operator> <call><name>printf</name><argument_list>( <argument><expr><literal type="string">"0\n"</literal></expr></argument> )</argument_list></call></expr> ;</return>
			}</block>
			<case>case <expr><literal type="char">'w'</literal></expr> :</case> <block>{
				<return>return <expr><operator>not</operator> <call><name>printf</name><argument_list>( <argument><expr><literal type="string">"0\n"</literal></expr></argument> )</argument_list></call></expr> ;</return>
			}</block>
			<case>case <expr><literal type="char">'u'</literal></expr> :</case> <block>{
				<expr_stmt><expr><operator>(</operator> <name><name>Dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>Dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator> <operator>%=</operator> <name>Mod</name></expr> ;</expr_stmt>
				<expr_stmt><expr><operator>(</operator> <name><name>Dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>Dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator> <operator>%=</operator> <name>Mod</name></expr> ;</expr_stmt>
				<expr_stmt><expr><operator>(</operator> <name><name>Dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>Dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>)</operator> <operator>%=</operator> <name>Mod</name></expr> ;</expr_stmt>
				<expr_stmt><expr><operator>(</operator> <name><name>Dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>Dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator> <operator>%=</operator> <name>Mod</name></expr> ;</expr_stmt>
				<break>break ;</break>
			}</block>
			<case>case <expr><literal type="char">'n'</literal></expr> :</case> <block>{
				<expr_stmt><expr><operator>(</operator> <name><name>Dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>Dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator> <operator>%=</operator> <name>Mod</name></expr> ;</expr_stmt>
				<expr_stmt><expr><operator>(</operator> <name><name>Dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>Dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator> <operator>%=</operator> <name>Mod</name></expr> ;</expr_stmt>
				<expr_stmt><expr><operator>(</operator> <name><name>Dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>Dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>)</operator> <operator>%=</operator> <name>Mod</name></expr> ;</expr_stmt>
				<expr_stmt><expr><operator>(</operator> <name><name>Dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>Dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>)</operator> <operator>%=</operator> <name>Mod</name></expr> ;</expr_stmt>
				<break>break ;</break>
			}</block>
			<default>default :</default> <block>{
				<expr_stmt><expr><operator>(</operator> <name><name>Dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>Dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>)</operator> <operator>%=</operator> <name>Mod</name></expr> ;</expr_stmt>
				<expr_stmt><expr><operator>(</operator> <name><name>Dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>Dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>)</operator> <operator>%=</operator> <name>Mod</name></expr> ;</expr_stmt>
				<expr_stmt><expr><operator>(</operator> <name><name>Dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>Dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>)</operator> <operator>%=</operator> <name>Mod</name></expr> ;</expr_stmt>
				<break>break ;</break>
			}</block>
		}</block></switch></block></for>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>Ans</name> <init>= <expr><name><name>Dp</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>Dp</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>Dp</name><index>[<expr><name>N</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl> ;</decl_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>Ans</name> <operator>%</operator> <name>Mod</name> <operator>&lt;&lt;</operator> <name>endl</name></expr> ;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function></unit>
