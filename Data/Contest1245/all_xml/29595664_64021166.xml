<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29595664_64021166.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = a; i &lt; b; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DB</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((s).size()))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>tri</name>;</typedef>
<typedef>typedef <type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>matrix</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>pss</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX</name> <init>= <expr><literal type="number">100001</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>oo</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

    <expr_stmt><expr><call><name><name>ios_base</name> <operator>::</operator> <name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>tc</name></expr>;</expr_stmt>

    <while>while<condition>(<expr><name>tc</name><operator>--</operator></expr>)</condition><block>{

        <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>r</name> <operator>&gt;&gt;</operator> <name>p</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>string</name></type> <name>a</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name></expr>;</expr_stmt>

        <comment type="line">//caso 1</comment>

        <decl_stmt><decl><type><name>string</name></type> <name>solve</name> <init>= <expr><call><name>string</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>r</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>p</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>s</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>r</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>s</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>s</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then><block>{
                <if>if<condition>(<expr><name>p</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>  <literal type="char">'R'</literal></expr>;</expr_stmt></block></then></if>
        }</block></for>

        <decl_stmt><decl><type><name>int</name></type> <name>cont</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>cont</name></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>cont</name></expr>;</expr_stmt></block></then></if>
            <if>if<condition>(<expr><name><name>solve</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>cont</name></expr>;</expr_stmt></block></then></if>
        }</block></for>

        <decl_stmt><decl><type><name>double</name></type> <name>x</name> <init>= <expr><name>n</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tot</name> <init>= <expr><call>(<name>int</name>)<argument_list>(<argument><expr><call><name>ceil</name><argument_list>(<argument><expr><name>x</name> <operator>/</operator> <literal type="number">2.0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if<condition>(<expr><name>cont</name> <operator>&gt;=</operator> <name>tot</name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal> <operator>&lt;&lt;</operator> <name>solve</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
    }</block></while>
}</block></function></unit>
