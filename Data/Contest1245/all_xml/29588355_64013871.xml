<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29588355_64013871.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>vvi</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>reco_table</name><index>[<expr><literal type="number">100002</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>reco_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>reco_table</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>reco_table</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>=  <expr><literal type="number">4</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100002</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name><name>reco_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>reco_table</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>reco_table</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>reco_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <literal type="number">1000000007</literal></expr>;</expr_stmt>

    <if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>)</condition><then> <block>{
      <comment type="line">// cout &lt;&lt; i &lt;&lt; " " &lt;&lt; reco_table[i] &lt;&lt; endl;</comment>
    }</block></then></if>
  }</block></for>

  <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>last_char_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>num_strings</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name>i</name> <operator>==</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><index>[<expr><name>last_char_index</name></expr>]</index></name></expr>)</condition><then> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name>i</name> <operator>-</operator> <name>last_char_index</name></expr></init></decl>;</decl_stmt>
      <comment type="line">// cout &lt;&lt; len &lt;&lt; endl;</comment>
      <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>last_char_index</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>last_char_index</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
        <comment type="line">// cout &lt;&lt; "times: " &lt;&lt; len &lt;&lt; endl;</comment>
        <expr_stmt><expr><name>num_strings</name> <operator>*=</operator> <name><name>reco_table</name><index>[<expr><name>len</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>num_strings</name> <operator>%=</operator> <literal type="number">1000000007</literal></expr>;</expr_stmt>
      }</block></then></if>

      <expr_stmt><expr><name>last_char_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control> <block>{
    <if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
  }</block></for>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>num_strings</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
