<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29598028_64026492.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name> ;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">2005</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>iii</name> ;</typedef>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>iii</name></expr></argument>&gt;</argument_list></name></type> <name>edges</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>ci</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>ki</name><index>[<expr><name>N</name></expr>]</index></name></decl> ;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>xi</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>yi</name><index>[<expr><name>N</name></expr>]</index></name></decl> ;</decl_stmt> 
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>fat</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt> 

<function><type><name>void</name></type> <name>ini</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter> )</parameter_list><block>{
     <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><name><name>fat</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr> ;</expr_stmt></block></for>
}</block></function>

<function><type><name>int</name></type> <name>fnd</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter> )</parameter_list> <block>{ 
     <if>if <condition>( <expr><name><name>fat</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <name>x</name></expr> )</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr> ;</return></block></then></if>
     <return>return <expr><name><name>fat</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>fnd</name> <argument_list>( <argument><expr><name><name>fat</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument> )</argument_list></call></expr> ;</return>
}</block></function>    

<function><type><name>void</name></type> <name>uni</name> <parameter_list>( <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter> )</parameter_list> <block>{
     <decl_stmt><decl><type><name>int</name></type> <name>compX</name> <init>= <expr><call><name>fnd</name> <argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>compY</name> <init>= <expr><call><name>fnd</name> <argument_list>( <argument><expr><name>y</name></expr></argument> )</argument_list></call></expr></init></decl> ;</decl_stmt>
     <expr_stmt><expr><name><name>fat</name><index>[<expr><name>compX</name></expr>]</index></name> <operator>=</operator> <name>compY</name></expr> ;</expr_stmt>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{ 
     <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
     <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr> ;</expr_stmt>
     <expr_stmt><expr><call><name>ini</name> <argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>magic</name> <init>= <expr><name>n</name></expr></init></decl> ;</decl_stmt> 
     <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>xi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>yi</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt></block></for>
     <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>ci</name><index>[<expr><name>i</name></expr>]</index></name></expr><operator>,</operator> <expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name> <argument_list>(<argument><expr><block>{<expr><name><name>ci</name><index>[<expr><name>i</name></expr>]</index></name></expr>, <expr><block>{<expr><name>magic</name></expr>, <expr><name>i</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
     <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block type="pseudo"><expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>ki</name><index>[<expr><name>i</name></expr>]</index></name></expr> ;</expr_stmt></block></for>
     <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{ 
          <for>for <control>( <init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr> )</control> 
               <block type="pseudo"><expr_stmt><expr><call><name><name>edges</name><operator>.</operator><name>push_back</name></name> <argument_list>( <argument><expr><block>{<expr><operator>(</operator><name><name>ki</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>ki</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>xi</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>xi</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>yi</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>yi</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>, <expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>}</block></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></for>    
     }</block></for>
     <expr_stmt><expr><call><name>sort</name> <argument_list>( <argument><expr><call><name><name>edges</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>edges</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
     <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>optimallyW</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
     <decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></type> <name>build</name></decl> ;</decl_stmt>
     <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>long</name> <name>long</name></expr></argument>,<argument><expr><name>long</name> <name>long</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edg</name></decl> ;</decl_stmt> 
     <for>for <control>( <init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>edges</name></expr></range></decl></init> )</control> <block>{ 
          <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>w</name> <init>= <expr><name><name>i</name><operator>.</operator><name>first</name></name></expr></init></decl> ;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>i</name><operator>.</operator><name>second</name><operator>.</operator><name>first</name></name></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><name><name>i</name><operator>.</operator><name>second</name><operator>.</operator><name>second</name></name></expr></init></decl> ;</decl_stmt>
          <if>if <condition>( <expr><call><name>fnd</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>fnd</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> )</condition><then> <block type="pseudo"><continue>continue ;</continue></block></then></if>
          <expr_stmt><expr><call><name>uni</name> <argument_list>( <argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument> )</argument_list></call></expr> ;</expr_stmt>
          <expr_stmt><expr><name>optimallyW</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
          <if>if <condition>( <expr><call><name>max</name> <argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>magic</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>build</name><operator>.</operator><name>push_back</name></name> <argument_list>( <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr> ;</expr_stmt></block></then>
          <else>else <block type="pseudo"><expr_stmt><expr><call><name><name>edg</name><operator>.</operator><name>push_back</name></name> <argument_list>( <argument><expr><block>{<expr><name>u</name></expr>, <expr><name>v</name></expr>}</block></expr></argument> )</argument_list></call></expr>;</expr_stmt></block></else></if>
     }</block></for>
     <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>optimallyW</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
     <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name><name>build</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
     <for>for<control>( <init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>build</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block></for>
     <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal> <operator>&lt;&lt;</operator> <call><name><name>edg</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
     <for>for <control>( <init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>edg</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>first</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">' '</literal><operator>&lt;&lt;</operator> <name><name>i</name><operator>.</operator><name>second</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt></block></for>
}</block></function></unit>
