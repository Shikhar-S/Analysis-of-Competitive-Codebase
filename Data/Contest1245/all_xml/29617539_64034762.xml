<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617539_64034762.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forn</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 0; i &lt; (int)(n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = 1; i &lt;= (int)(n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fore</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>l</name></type></parameter>, <parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (int)(l); i &lt;= (int)(r); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ford</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = (int)(n)-1; i &gt;= 0; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, x, sizeof(a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<struct>struct <name>edge</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>,<decl><type ref="prev"/><name>e</name></decl>,<decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>c</name></decl>;</decl_stmt>
	<constructor><name>edge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>s_</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>e_</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>cc</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>tt</name><init>=<expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list><member_init_list>:<call><name>s</name><argument_list>(<argument><expr><name>s_</name></expr></argument>)</argument_list></call>,<call><name>e</name><argument_list>(<argument><expr><name>e_</name></expr></argument>)</argument_list></call>,<call><name>c</name><argument_list>(<argument><expr><name>cc</name></expr></argument>)</argument_list></call>,<call><name>type</name><argument_list>(<argument><expr><name>tt</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>edge</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>)</parameter_list><specifier>const</specifier><block>{
		<return>return <expr><name>c</name><operator>&gt;</operator><name><name>a</name><operator>.</operator><name>c</name></name></expr>;</return>
	}</block></function>
</public>}</block>;</struct>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name><init>=<expr><literal type="number">2005</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//~ vector&lt;edge&gt; E[N];</comment>
<function><type><name>ll</name></type> <name>dis</name><parameter_list>(<parameter><decl><type><name>pii</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>pii</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>a</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>b</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>edge</name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type> <name>bwire</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>bsta</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>pii</name></type> <name><name>point</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>cost</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>wire</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	
	<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>point</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name><operator>&gt;&gt;</operator><name><name>point</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>mn</name><init>=<expr><name>INF</name></expr></init></decl>;</decl_stmt>
	<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro><block>{
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name>mn</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>mn</name><operator>=</operator><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>start</name><operator>=</operator><name>i</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block>
	<macro><name>forn</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>wire</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<comment type="line">//~ forn(i,n){</comment>
		<comment type="line">//~ forn(j,n){</comment>
			<comment type="line">//~ if(i==j) continue;</comment>
			<comment type="line">//~ E[i].pb({i,j,dis(point[i],point[j])*(wire[i]+wire[j]),1});</comment>
			<comment type="line">//~ E[i].pb({i,j,cost[j],2});</comment>
		<comment type="line">//~ }</comment>
	<comment type="line">//~ }</comment>
	
	<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><name>start</name></expr>,<expr><name>start</name></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>bsta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>start</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>totcost</name><init>=<expr><name><name>cost</name><index>[<expr><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>!</operator><call><name><name>q</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
		<decl_stmt><decl><type><name>edge</name></type> <name>tmp</name><init>=<expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>end</name><init>=<expr><name><name>tmp</name><operator>.</operator><name>e</name></name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>end</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<expr_stmt><expr><name><name>vis</name><index>[<expr><name>end</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>totcost</name><operator>+=</operator><name><name>tmp</name><operator>.</operator><name>c</name></name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name><name>tmp</name><operator>.</operator><name>type</name></name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>bwire</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name><name>tmp</name><operator>.</operator><name>s</name></name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name><name>tmp</name><operator>.</operator><name>e</name></name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
		<elseif>else <if>if<condition>(<expr><name><name>tmp</name><operator>.</operator><name>type</name></name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>bsta</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>end</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></elseif></if>
		<comment type="line">//~ for(auto it:E[end]) q.push(it);</comment>
		<macro><name>forn</name><argument_list>(<argument>j</argument>,<argument>n</argument>)</argument_list></macro><block>{
			<if>if<condition>(<expr><name>end</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<if>if<condition>(<expr><name><name>vis</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><name>end</name></expr>,<expr><name>j</name></expr>,<expr><call><name>dis</name><argument_list>(<argument><expr><name><name>point</name><index>[<expr><name>end</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>point</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><name><name>wire</name><index>[<expr><name>end</name></expr>]</index></name><operator>+</operator><name><name>wire</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>,<expr><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><name>end</name></expr>,<expr><name>j</name></expr>,<expr><name><name>cost</name><index>[<expr><name>j</name></expr>]</index></name></expr>,<expr><literal type="number">2</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>totcost</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>bsta</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>bsta</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>it</name><operator>&lt;&lt;</operator><literal type="char">' '</literal></expr>;</expr_stmt></block></for>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name><operator>&lt;&lt;</operator><call><name><name>bwire</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>bwire</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>it</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="char">' '</literal><operator>&lt;&lt;</operator><name><name>it</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt></block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
