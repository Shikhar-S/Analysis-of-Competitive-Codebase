<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29607946_64002709.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optmize</name><name>(</name><name>2</name><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pbb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>

<function><type><name>ll</name></type> <name>read</name><parameter_list>()</parameter_list><block>{ 
	<decl_stmt><decl><type><name>char</name></type> <name>ch</name></decl>;</decl_stmt>
 	<for>for<control>(<init><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name><name>ch</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0x30</literal><operator>||</operator><name>ch</name></expr></argument>&gt;</argument_list></name><literal type="number">0x39</literal></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
 	<decl_stmt><decl><type><name>ll</name></type> <name>x</name> <init>= <expr><name>ch</name> <operator>-</operator> <literal type="number">0x30</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>ch</name> <operator>=</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><name>ch</name><operator>&gt;=</operator><literal type="number">0x30</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="number">0x39</literal></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr></incr>)</control>
		<block type="pseudo"><expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="number">0x30</literal></expr>;</expr_stmt></block></for>
 	<return>return <expr><name>x</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>n</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>len</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>rock</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>paper</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl> , <decl><type ref="prev"/><name>sci</name> <init>= <expr><call><name>read</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>t</name></decl> ;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ll</name></type> <name>cur</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>ou</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name><name>t</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
			<if>if<condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{
				<if>if<condition>(<expr><name>paper</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>paper</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ou</name> <operator>=</operator> <name>ou</name><operator>+</operator><literal type="string">"P"</literal></expr>;</expr_stmt>}</block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>ou</name> <operator>=</operator> <name>ou</name><operator>+</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></else></if>
			}</block></then>
			<elseif>else <if>if<condition>(<expr><name><name>t</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then><block>{
				<if>if<condition>(<expr><name>rock</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>rock</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ou</name> <operator>=</operator> <name>ou</name><operator>+</operator><literal type="string">"R"</literal></expr>;</expr_stmt>}</block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>ou</name>  <operator>=</operator> <name>ou</name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></else></if>
			}</block></then></if></elseif>
			<else>else <block>{
				<if>if<condition>(<expr><name>sci</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>cur</name><operator>++</operator></expr>;</expr_stmt><expr_stmt><expr><name>sci</name><operator>--</operator></expr>;</expr_stmt><expr_stmt><expr><name>ou</name> <operator>=</operator> <name>ou</name> <operator>+</operator> <literal type="string">"S"</literal></expr>;</expr_stmt>}</block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>ou</name> <operator>=</operator> <name>ou</name> <operator>+</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></else></if>
			}</block></else></if>
		}</block></for>
		<if>if<condition>(<expr><name>cur</name><operator>*</operator><literal type="number">2</literal> <operator>&gt;=</operator> <name>len</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"YES"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>len</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
				<if>if<condition>(<expr><name><name>ou</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>ou</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></then>
				<elseif>else <if>if<condition>(<expr><name>rock</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal></expr>;</expr_stmt><expr_stmt><expr><name>rock</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if></elseif>
				<elseif>else <if>if<condition>(<expr><name>paper</name></expr>)</condition><then> <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"P"</literal></expr>;</expr_stmt><expr_stmt><expr><name>paper</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if></elseif>
				<else>else <block>{<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr>;</expr_stmt><expr_stmt><expr><name>sci</name><operator>--</operator></expr>;</expr_stmt>}</block></else></if>
			}</block></for>
			<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"NO"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
	}</block></while>
}</block></function></unit>
