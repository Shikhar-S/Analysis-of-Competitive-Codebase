<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29576870_64036649.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<function><type><name>string</name></type> <name>con</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>string</name></type> <name>res</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>n</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>mod</name> <init>= <expr><name>n</name><operator>%</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>mod</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="char">'1'</literal></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt></block></else></if>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>res</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>res</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>string</name></type> <name>str1</name></decl>, <decl><type ref="prev"/><name>str2</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>len</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>fun</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>s2</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b2</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>pos</name> <operator>==</operator> <name>len</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <comment type="line">//cout &lt;&lt; "HIGH" &lt;&lt; endl;</comment>
    <if>if<condition>(<expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>s1</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index><index>[<expr><name>b2</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>s1</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index><index>[<expr><name>b2</name></expr>]</index></name></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ns1</name></decl>, <decl><type ref="prev"/><name>ns2</name></decl>, <decl><type ref="prev"/><name>nb1</name></decl>, <decl><type ref="prev"/><name>nb2</name></decl>;</decl_stmt>
    <comment type="line">// check 0 0</comment>
    <expr_stmt><expr><name>ns1</name> <operator>=</operator> <name>s1</name></expr><operator>,</operator> <expr><name>ns2</name> <operator>=</operator> <name>s2</name></expr><operator>,</operator> <expr><name>nb1</name> <operator>=</operator> <name>b1</name></expr><operator>,</operator> <expr><name>nb2</name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>str1</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ns1</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ns2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><operator>(</operator><name><name>str2</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nb1</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nb2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>fun</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ns1</name></expr></argument>, <argument><expr><name>ns2</name></expr></argument>, <argument><expr><name>nb1</name></expr></argument>, <argument><expr><name>nb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <comment type="line">// check 0 1</comment>
    <expr_stmt><expr><name>ns1</name> <operator>=</operator> <name>s1</name></expr><operator>,</operator> <expr><name>ns2</name> <operator>=</operator> <name>s2</name></expr><operator>,</operator> <expr><name>nb1</name> <operator>=</operator> <name>b1</name></expr><operator>,</operator> <expr><name>nb2</name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>str1</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ns1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name><name>str2</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nb2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><operator>(</operator><name><name>str1</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ns2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then><block>{
        <if>if<condition>(<expr><operator>(</operator><name><name>str2</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nb1</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>fun</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ns1</name></expr></argument>, <argument><expr><name>ns2</name></expr></argument>, <argument><expr><name>nb1</name></expr></argument>, <argument><expr><name>nb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then></if>
    <comment type="line">// check 1 0</comment>
    <expr_stmt><expr><name>ns1</name> <operator>=</operator> <name>s1</name></expr><operator>,</operator> <expr><name>ns2</name> <operator>=</operator> <name>s2</name></expr><operator>,</operator> <expr><name>nb1</name> <operator>=</operator> <name>b1</name></expr><operator>,</operator> <expr><name>nb2</name> <operator>=</operator> <name>b2</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>str1</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ns2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><name><name>str2</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nb1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></then></if>
    <if>if<condition>(<expr><operator>(</operator><name><name>str1</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'1'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ns1</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then><block>{
        <if>if<condition>(<expr><operator>(</operator><name><name>str2</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>nb2</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>fun</name><argument_list>(<argument><expr><name>pos</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>ns1</name></expr></argument>, <argument><expr><name>ns2</name></expr></argument>, <argument><expr><name>nb1</name></expr></argument>, <argument><expr><name>nb2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block></then></if>

    <return>return <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>s1</name></expr>]</index><index>[<expr><name>s2</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index><index>[<expr><name>b2</name></expr>]</index></name> <operator>=</operator> <name>res</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>str1</name> <operator>=</operator> <call><name>con</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>str2</name> <operator>=</operator> <call><name>con</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><name>ll</name><operator>)</operator><call><name><name>str2</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>&lt;</operator> <operator>(</operator><name>ll</name><operator>)</operator><call><name><name>str1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <expr_stmt><expr><name>str2</name> <operator>=</operator> <literal type="string">"0"</literal> <operator>+</operator> <name>str2</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <operator>(</operator><name>ll</name><operator>)</operator> <call><name><name>str1</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>dp</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><call><name>fun</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>cases</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cases</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>cases</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><call><name>calc</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></while>
}</block></function></unit>
