<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615787_64033064.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>s</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name><name>vis</name><index>[<expr><literal type="number">35</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>long</name> <name>long</name></type> <name>f</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>l1</name></decl></parameter>,<parameter><decl><type><name>bool</name></type> <name>l2</name></decl></parameter>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>p</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if <condition>(<expr><name><name>vis</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index></name></expr>)</condition><then><block type="pseudo"><return>return <expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index></name></expr>;</return></block></then></if>
  <expr_stmt><expr><name><name>vis</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>lim1</name></decl>,<decl><type ref="prev"/><name>lim2</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>lim1</name><operator>=</operator><name>l1</name><operator>&amp;&amp;</operator><operator>!</operator><operator>(</operator><name>n</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>p</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>lim2</name><operator>=</operator><name>l2</name><operator>&amp;&amp;</operator><operator>!</operator><operator>(</operator><name>m</name><operator>&amp;</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>p</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index></name><operator>=</operator><call><name>f</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lim1</name></expr></argument>,<argument><expr><name>lim2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if <condition>(<expr><operator>!</operator><name>lim1</name></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index></name><operator>+=</operator><call><name>f</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l1</name></expr></argument>,<argument><expr><name>lim2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  <if>if <condition>(<expr><operator>!</operator><name>lim2</name></expr>)</condition><then>
    <block type="pseudo"><expr_stmt><expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index></name><operator>+=</operator><call><name>f</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>lim1</name></expr></argument>,<argument><expr><name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
  <return>return <expr><name><name>s</name><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>l1</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index></name></expr>;</return>
}</block></function>
<function><type><name>long</name> <name>long</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>_n</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>_m</name></decl></parameter>)</parameter_list>
<block>{
  <if>if <condition>(<expr><name>_n</name><operator>&lt;</operator><literal type="number">0</literal><operator>||</operator><name>_m</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal></expr>;</return></block></then></if>
  <expr_stmt><expr><name>n</name><operator>=</operator><name>_n</name></expr>;</expr_stmt><expr_stmt><expr><name>m</name><operator>=</operator><name>_m</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">31</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name><name>vis</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block></for>
  <return>return <expr><call><name>f</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt><expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>T</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%I64d\n"</literal></expr></argument>,<argument><expr><call><name>calc</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>r</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">2</literal><operator>*</operator><call><name>calc</name><argument_list>(<argument><expr><name>r</name></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>calc</name><argument_list>(<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while><return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
