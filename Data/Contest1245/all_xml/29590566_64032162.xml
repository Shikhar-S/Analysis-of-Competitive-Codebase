<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29590566_64032162.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vll</name></cpp:macro> <cpp:value>vector&lt;long long&gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fori</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i = a;i &lt;= b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>forj</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll j = a;j &lt;= b;j++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fork</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll k = a;k &lt;= b;k++)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; a &gt;&gt; b;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>input</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cin &gt;&gt; a;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a&lt;b?b:a)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a&gt;b?b:a)</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>ll</name></type> <name>MOD</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>unsigned</name> <name>ll</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>fac</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>temp12</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>mod</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>temp</name> <init>= <expr><call><name>power</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <return>return <expr><operator>(</operator><name>x</name><operator>*</operator><name>temp</name><operator>*</operator><name>temp</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
    }</block></then> <else>else <block>{
        <return>return <expr><operator>(</operator><name>temp</name><operator>*</operator><name>temp</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
    }</block></else></if>
}</block></function>
<function><type><name>ll</name></type> <name>abs</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then><block>{
        <return>return <expr><name>a</name> <operator>-</operator> <name>b</name></expr>;</return>
    }</block></then></if>
    <return>return <expr><name>b</name> <operator>-</operator> <name>a</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>perm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name><name>arr</name><index>[]</index></name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>sum1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>sum1</name> <operator>+=</operator> <name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>ll</name></type> <name>sol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sol</name> <operator>*=</operator> <name><name>fac</name><index>[<expr><name>sum1</name></expr>]</index></name></expr>;</expr_stmt>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><name>sol</name> <operator>/=</operator> <name><name>fac</name><index>[<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    }</block>
    <return>return <expr><name>sol</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name><name>arr</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>chosen</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>chosen</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition><then><block>{
        <comment type="line">//cout &lt;&lt; "!!!!" &lt;&lt; arr[0] &lt;&lt; " " &lt;&lt; arr[1] &lt;&lt; " " &lt;&lt; arr[9] &lt;&lt; endl;</comment>
        <expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>perm</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//cout &lt;&lt; "sum zvysene o " &lt;&lt; perm(arr) &lt;&lt; endl;</comment>
        <if>if<condition>(<expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum</name> <operator>-=</operator> <call><name>perm</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//cout &lt;&lt; "sum znizene o " &lt;&lt; perm(arr) &lt;&lt; endl;</comment>
            <expr_stmt><expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
        }</block></then></if>
        <return>return;</return>
    }</block></then> <else>else <block>{
        <if>if<condition>(<expr><name><name>arr</name><index>[<expr><name>chosen</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <comment type="line">//cout &lt;&lt; "1   " &lt;&lt; arr[chosen] &lt;&lt; "  " &lt;&lt; chosen+1 &lt;&lt; endl;</comment>
            <expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>chosen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return;</return>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>temp12</name><index>[<expr><name>chosen</name></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><name>chosen</name></expr>]</index></name></expr>;</expr_stmt>
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><name><name>arr</name><index>[<expr><name>chosen</name></expr>]</index></name></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name><name>arr</name><index>[<expr><name>chosen</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                <comment type="line">//cout &lt;&lt; "2   " &lt;&lt; arr[chosen] &lt;&lt; "  " &lt;&lt; chosen+1 &lt;&lt; endl;</comment>
                <expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>arr</name></expr></argument>, <argument><expr><name>chosen</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></for>
            <expr_stmt><expr><name><name>arr</name><index>[<expr><name>chosen</name></expr>]</index></name> <operator>=</operator> <name><name>temp12</name><index>[<expr><name>chosen</name></expr>]</index></name></expr>;</expr_stmt>
            <return>return;</return>
        }</block></else></if>
    }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>grid</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro><block>{
        <macro><name>forj</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro><block>{
            <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>grid</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        }</block>
    }</block>
    <decl_stmt><decl><type><name>double</name></type> <name><name>expect</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>expect</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>expect</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>expect</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>expect</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>expect</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>expect</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>lastSpaces</name></decl>;</decl_stmt>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro><block>{
        <expr_stmt><expr><call><name><name>lastSpaces</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
    <decl_stmt><decl><type><name>double</name></type> <name>answer</name></decl>;</decl_stmt>
    <macro><name>fori</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro><block>{
        <if>if<condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
            <comment type="line">//doprava</comment>
            <macro><name>forj</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">9</literal></argument>)</argument_list></macro><block>{
                <if>if<condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><then><block>{
                    <continue>continue;</continue>
                }</block></then></if>
                <expr_stmt><expr><name>answer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <macro><name>fork</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro><block>{
                    <if>if<condition>(<expr><name><name>grid</name><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>answer</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>expect</name><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>expect</name><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><operator>(</operator><name><name>grid</name><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>]</index><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>answer</name> <operator>+=</operator> <name><name>expect</name><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block>
                <expr_stmt><expr><name>answer</name> <operator>/=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>answer</name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>expect</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>answer</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>lastSpaces</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>lastSpaces</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//cout &lt;&lt; lastSpaces[0].first &lt;&lt; " " &lt;&lt; lastSpaces[1].first &lt;&lt; "    " &lt;&lt; lastSpaces[5].first &lt;&lt; endl;</comment>
                <expr_stmt><expr><call><name><name>lastSpaces</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; answer &lt;&lt; endl;</comment>
            }</block>
        }</block></then> <else>else <block>{
            <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><literal type="number">9</literal></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block>{
                <expr_stmt><expr><name>answer</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <macro><name>fork</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">5</literal></argument>)</argument_list></macro><block>{
                    <if>if<condition>(<expr><name><name>grid</name><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'0'</literal></expr>)</condition><then><block>{
                        <expr_stmt><expr><name>answer</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>expect</name><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>expect</name><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name><operator>-</operator><operator>(</operator><name><name>grid</name><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>]</index><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    }</block></then> <else>else <block>{
                        <expr_stmt><expr><name>answer</name> <operator>+=</operator> <name><name>expect</name><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index><index>[<expr><name><name>lastSpaces</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name></expr>;</expr_stmt>
                    }</block></else></if>
                }</block>
                <expr_stmt><expr><name>answer</name> <operator>/=</operator> <literal type="number">6.0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>answer</name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>expect</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>answer</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>lastSpaces</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name><name>lastSpaces</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>lastSpaces</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//cout &lt;&lt; i &lt;&lt; " " &lt;&lt; j &lt;&lt; " " &lt;&lt; answer &lt;&lt; endl;</comment>
            }</block></for>
        }</block></else></if>
    }</block>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name><name>expect</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
