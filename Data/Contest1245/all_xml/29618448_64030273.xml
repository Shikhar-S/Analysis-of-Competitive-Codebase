<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618448_64030273.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">50</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>go</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ok1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ok2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ok3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ok4</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><name><name>dp</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>ok1</name></expr>]</index><index>[<expr><name>ok2</name></expr>]</index><index>[<expr><name>ok3</name></expr>]</index><index>[<expr><name>ok4</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name>u</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
	<decl_stmt><decl><type><name>int</name></type> <name>newok1</name></decl>, <decl><type ref="prev"/><name>newok2</name></decl>, <decl><type ref="prev"/><name>newok3</name></decl>, <decl><type ref="prev"/><name>newok4</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>npos</name> <init>= <expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if>if <condition>(<expr><name><name>v1</name><index>[<expr><name>npos</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>v2</name><index>[<expr><name>npos</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>d1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>d1</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>d2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d2</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>d2</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><name>d1</name> <operator>+</operator> <name>d2</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><name>ok1</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>ok2</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<elseif>else <if>if <condition>(<expr><name>ok2</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if></elseif>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>ok3</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok3</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>ok4</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok4</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<elseif>else <if>if <condition>(<expr><name>ok4</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if></elseif>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>npos</name></expr>]</index><index>[<expr><name>newok1</name></expr>]</index><index>[<expr><name>newok2</name></expr>]</index><index>[<expr><name>newok3</name></expr>]</index><index>[<expr><name>newok4</name></expr>]</index></name> <operator>+=</operator> <name>u</name></expr>;</expr_stmt>
			}</block></for> 
		}</block></for>
	}</block></then></if>
	<if>if <condition>(<expr><name><name>v1</name><index>[<expr><name>npos</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>v2</name><index>[<expr><name>npos</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>d1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>d1</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>d2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d2</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>d2</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><name>d1</name> <operator>+</operator> <name>d2</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><name>ok1</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>ok2</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>ok3</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok3</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>ok4</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok4</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>npos</name></expr>]</index><index>[<expr><name>newok1</name></expr>]</index><index>[<expr><name>newok2</name></expr>]</index><index>[<expr><name>newok3</name></expr>]</index><index>[<expr><name>newok4</name></expr>]</index></name> <operator>+=</operator> <name>u</name></expr>;</expr_stmt>
			}</block></for> 
		}</block></for>
	}</block></then></if>
	<if>if <condition>(<expr><name><name>v1</name><index>[<expr><name>npos</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>v2</name><index>[<expr><name>npos</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>d1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>d1</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>d2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d2</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>d2</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><name>d1</name> <operator>+</operator> <name>d2</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><name>ok1</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<elseif>else <if>if <condition>(<expr><name>ok1</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if></elseif>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>ok2</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<elseif>else <if>if <condition>(<expr><name>ok2</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if></elseif>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>ok3</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok3</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<elseif>else <if>if <condition>(<expr><name>ok3</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if></elseif>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>ok4</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok4</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<elseif>else <if>if <condition>(<expr><name>ok4</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if></elseif>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>npos</name></expr>]</index><index>[<expr><name>newok1</name></expr>]</index><index>[<expr><name>newok2</name></expr>]</index><index>[<expr><name>newok3</name></expr>]</index><index>[<expr><name>newok4</name></expr>]</index></name> <operator>+=</operator> <name>u</name></expr>;</expr_stmt>
			}</block></for> 
		}</block></for>
	}</block></then></if>
	<if>if <condition>(<expr><name><name>v1</name><index>[<expr><name>npos</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>v2</name><index>[<expr><name>npos</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
		<for>for <control>(<init><decl><type><name>int</name></type> <name>d1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>d1</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>d2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>d2</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>d2</name><operator>++</operator></expr></incr>)</control> <block>{
				<if>if <condition>(<expr><name>d1</name> <operator>+</operator> <name>d2</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
				<if>if <condition>(<expr><name>ok1</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok1</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<elseif>else <if>if <condition>(<expr><name>ok1</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if></elseif>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>ok2</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d1</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok2</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>ok3</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok3</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<elseif>else <if>if <condition>(<expr><name>ok3</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if></elseif>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<if>if <condition>(<expr><name>ok4</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d2</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>newok4</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then>
				<else>else <block type="pseudo"><expr_stmt><expr><name>newok4</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block></else></if>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>npos</name></expr>]</index><index>[<expr><name>newok1</name></expr>]</index><index>[<expr><name>newok2</name></expr>]</index><index>[<expr><name>newok3</name></expr>]</index><index>[<expr><name>newok4</name></expr>]</index></name> <operator>+=</operator> <name>u</name></expr>;</expr_stmt>
			}</block></for> 
		}</block></for>
	}</block></then></if>
}</block></function>

<function><name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>v1</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>l</name> <operator>%</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>l</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		}</block></for>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
			<expr_stmt><expr><call><name><name>v2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>r</name> <operator>%</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>r</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>v1</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v1</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name><name>v2</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v2</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pos</name> <operator>&lt;</operator> <literal type="number">49</literal></expr>;</condition> <incr><expr><name>pos</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>ok1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ok1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ok1</name><operator>++</operator></expr></incr>)</control> <block>{
				<for>for <control>(<init><decl><type><name>int</name></type> <name>ok2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ok2</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ok2</name><operator>++</operator></expr></incr>)</control> <block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>ok3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ok3</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ok3</name><operator>++</operator></expr></incr>)</control> <block>{
						<for>for <control>(<init><decl><type><name>int</name></type> <name>ok4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ok4</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ok4</name><operator>++</operator></expr></incr>)</control> <block>{
							<expr_stmt><expr><call><name>go</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>ok1</name></expr></argument>, <argument><expr><name>ok2</name></expr></argument>, <argument><expr><name>ok3</name></expr></argument>, <argument><expr><name>ok4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						}</block></for>
					}</block></for>
				}</block></for>
			}</block></for>
		}</block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>ok1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ok1</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ok1</name><operator>++</operator></expr></incr>)</control> <block>{
			<for>for <control>(<init><decl><type><name>int</name></type> <name>ok2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ok2</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ok2</name><operator>++</operator></expr></incr>)</control> <block>{
				<for>for <control>(<init><decl><type><name>int</name></type> <name>ok3</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ok3</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ok3</name><operator>++</operator></expr></incr>)</control> <block>{
					<for>for <control>(<init><decl><type><name>int</name></type> <name>ok4</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ok4</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ok4</name><operator>++</operator></expr></incr>)</control> <block>{
						<expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>dp</name><index>[<expr><literal type="number">49</literal></expr>]</index><index>[<expr><name>ok1</name></expr>]</index><index>[<expr><name>ok2</name></expr>]</index><index>[<expr><name>ok3</name></expr>]</index><index>[<expr><name>ok4</name></expr>]</index></name></expr>;</expr_stmt>
					}</block></for>
				}</block></for>
			}</block></for>
		}</block></for>
		<comment type="line">//cout &lt;&lt; dp[48][0][1][0][0] &lt;&lt; endl;</comment>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
