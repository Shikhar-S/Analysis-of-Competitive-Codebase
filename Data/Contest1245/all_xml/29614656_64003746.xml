<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29614656_64003746.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLASH</name></cpp:macro> <cpp:value>cin.tie(0); cout.tie(0); ios_base::sync_with_stdio(false);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FILEIO</name></cpp:macro> <cpp:value>freopen("/home/aman/Desktop/Kachda/input.txt", "r", stdin); freopen("/home/aman/Desktop/Kachda/output.txt", "w", stdout);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>200000</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<decl_stmt><decl><type><name>FILEIO</name>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
 	<name>FLASH</name>

 	<name>int</name></type> <name>t</name></decl>;</decl_stmt>
 	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
 	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
 		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>z</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
 		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>

 		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
 		<decl_stmt><decl><type><name>string</name></type> <name>anss</name> <init>= <expr><name>s</name></expr></init></decl>;</decl_stmt>
 		<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>sc</name></decl>;</decl_stmt>

 		<macro><name>fr</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro><block>{
 			<expr_stmt><expr><name><name>anss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'*'</literal></expr>;</expr_stmt>
 			<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name>x</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></then>
 			<elseif>else <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block>{<expr_stmt><expr><call><name><name>p</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>}</block></then></if></elseif>
 			<else>else <block>{<expr_stmt><expr><call><name><name>sc</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>z</name><operator>++</operator></expr>;</expr_stmt>}</block></else></if>
 		}</block>
 		<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
 		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
 		<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>
 		<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
 		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

 		<if>if<condition>(<expr><name>ans</name><operator>*</operator><literal type="number">2</literal> <operator>&gt;=</operator> <name>n</name></expr>)</condition><then><block>{
 			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"yes\n"</literal></expr>;</expr_stmt>
 			<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>: <expr><name>r</name></expr></range></decl></init>)</control><block>{
 				<if>if<condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{<expr_stmt><expr><name><name>anss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if>
 			}</block></for>
 			<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>: <expr><name>p</name></expr></range></decl></init>)</control><block>{
 				<if>if<condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name><name>anss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if>
 			}</block></for>
 			<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>: <expr><name>sc</name></expr></range></decl></init>)</control><block>{
 				<if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><name><name>anss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if>
 			}</block></for>	
 			
 			<macro><name>fr</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>n</argument>)</argument_list></macro><block>{
 				<if>if<condition>(<expr><name><name>anss</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition><then><block>{
 					<if>if<condition>(<expr><name>a</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
 						<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"R"</literal></expr>;</expr_stmt>
 						<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt>
 					}</block></then>
 					<elseif>else <if>if<condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
 						<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"P"</literal></expr>;</expr_stmt>
 						<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt>
 					}</block></then></if></elseif>
 					<else>else <block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"S"</literal></expr>;</expr_stmt> <expr_stmt><expr><name>c</name><operator>--</operator></expr>;</expr_stmt>}</block></else></if>
 				}</block></then>
 				<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>anss</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></else></if>
 			}</block>
 			<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
 		}</block></then>
 		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"no\n"</literal></expr>;</expr_stmt></block></else></if>	
 	}</block></while>	
}</block></function></unit>
