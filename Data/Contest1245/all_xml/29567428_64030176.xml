<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29567428_64030176.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>cd</name></decl>,<decl><type ref="prev"/><name><name>ok</name><index>[<expr><literal type="number">300</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>cnt</name><index>[<expr><literal type="number">300</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>result</name><index>[<expr><literal type="number">300</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>kq1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>kq</name><index>[<expr><literal type="number">12334</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
				<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
				<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
				<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
				<block>{
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>cd</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>kq1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>cnt</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>cnt</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>cnt</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="char">'0'</literal> <operator>+</operator> <name>s</name></expr>;</expr_stmt>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name><operator>&lt;</operator> <literal type="number">300</literal></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
				<expr_stmt><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>kq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator><literal type="char">'A'</literal></expr>;</expr_stmt>
		}</block></for>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
				<expr_stmt><expr><name><name>result</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><name><name>ok</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ok</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>ok</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>kq1</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>cnt</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr></argument> , <argument><expr><name><name>result</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>kq1</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>cnt</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>kq1</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>cnt</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr></argument> , <argument><expr><name><name>result</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>need</name> <init>= <expr><name>cd</name> <operator>/</operator> <literal type="number">2</literal> <operator>+</operator> <name>cd</name> <operator>%</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>mx</name> <init>= <expr><literal type="char">'R'</literal></expr></init></decl>;</decl_stmt>						<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>mx</name></expr>]</index></name> <operator>&lt;</operator> <name><name>cnt</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name></expr>)</condition><then>
						<block>{
								<expr_stmt><expr><name>mx</name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
						}</block></then></if>						
						<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>mx</name></expr>]</index></name> <operator>&lt;</operator> <name><name>cnt</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr>)</condition><then>
						<block>{
								<expr_stmt><expr><name>mx</name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
						}</block></then></if>						
						<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name>mx</name></expr>]</index></name> <operator>&lt;</operator> <name><name>cnt</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name></expr>)</condition><then>
						<block>{
								<expr_stmt><expr><name>mx</name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
						}</block></then></if>

		<if>if <condition>(<expr><name>kq1</name> <operator>&gt;=</operator> <name>need</name></expr>)</condition><then>
		<block>{
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{
						<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><name><name>ok</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
						<block>{
								<expr_stmt><expr><name><name>cnt</name><index>[<expr><name><name>ok</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
								<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>ok</name><index>[<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
								<expr_stmt><expr><name><name>kq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
						}</block></then></if>
				}</block></for>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
				<block>{
						<if>if <condition>(<expr><name><name>kq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name><name>kq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name><name>kq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'P'</literal></expr>)</condition><then>
						<block>{
								<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
								<block>{
										<expr_stmt><expr><name><name>cnt</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
										<expr_stmt><expr><name><name>kq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr>;</expr_stmt>
								}</block></then>
								<elseif>else
								<if>if <condition>(<expr><name><name>cnt</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then>
								<block>{
										<expr_stmt><expr><name><name>cnt</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
										<expr_stmt><expr><name><name>kq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr>;</expr_stmt>
								}</block></then></if></elseif>
								<else>else
								<block>{
										<expr_stmt><expr><name><name>cnt</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>
										<expr_stmt><expr><name><name>kq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr>;</expr_stmt>
								}</block></else></if>
						}</block></then></if>
				}</block></for>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>cd</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><name><name>kq</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
				<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt></block></else></if>
				}</block></while>
}</block></function>
</unit>
