<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613405_64008641.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <name>ll</name><init>=<type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>datas</name><init>=<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>ddatas</name><init>=<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>,<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>tdata</name><init>=<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>datas</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vec</name><init>=<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>mat</name><init>=<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vec</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pvec</name><init>=<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>datas</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pmat</name><init>=<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pvec</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>For</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=a;i&lt;(ll)b;i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>bFor</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(i=a;i&gt;=(ll)b;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>For(i,0,N)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>For(i,1,N)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>brep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>N</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>bFor(i,N-1,0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(),(v).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>allr</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).rbegin(),(v).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vsort</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(all(v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vrsort</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(allr(v))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>output</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do{bool f=0;for(auto outi:v){cout&lt;&lt;(f?" ":"")&lt;&lt;outi;f=1;}cout&lt;&lt;endl;}while(0)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name><init>=<expr><literal type="number">1LL</literal><operator>&lt;&lt;</operator><literal type="number">60</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>bool</name></type> <name>x</name><init>=<expr><name>a</name><operator>&lt;</operator><name>b</name></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if><return>return <expr><name>x</name></expr>;</return>}</block></function> 
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>T</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>bool</name></type> <name>x</name><init>=<expr><name>a</name><operator>&gt;</operator><name>b</name></expr></init></decl>;</decl_stmt><if>if<condition>(<expr><name>x</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>a</name><operator>=</operator><name>b</name></expr>;</expr_stmt></block></then></if><return>return <expr><name>x</name></expr>;</return>}</block></function> 

<function><type><name>double</name></type> <name>distance</name><parameter_list>(<parameter><decl><type><name>ddatas</name><modifier>&amp;</modifier></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ddatas</name><modifier>&amp;</modifier></type> <name>y</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>double</name></type> <name>a</name><init>=<expr><name><name>x</name><operator>.</operator><name>first</name></name><operator>-</operator><name><name>y</name><operator>.</operator><name>first</name></name></expr></init></decl>,<decl><type ref="prev"/><name>b</name><init>=<expr><name><name>x</name><operator>.</operator><name>second</name></name><operator>-</operator><name><name>y</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqrt</name><argument_list>(<argument><expr><name>a</name><operator>*</operator><name>a</name><operator>+</operator><name>b</name><operator>*</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>modinv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>b</name><init>=<expr><name>mod</name></expr></init></decl>,<decl><type ref="prev"/><name>u</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>b</name></expr>)</condition><block>{
    <expr_stmt><expr><name>t</name><operator>=</operator><name>a</name><operator>/</operator><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name><operator>-=</operator><name>t</name><operator>*</operator><name>b</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>u</name><operator>-=</operator><name>t</name><operator>*</operator><name>v</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><operator>(</operator><name>u</name><operator>+</operator><name>mod</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>moddevide</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><operator>(</operator><name>a</name><operator>*</operator><call><name>modinv</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return>}</block></function>

<decl_stmt><decl><type><name>vec</name></type> <name>modncrlistp</name></decl>,<decl><type ref="prev"/><name>modncrlistm</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>modncr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>size</name><init>=<expr><call><name><name>modncrlistp</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if<condition>(<expr><name>size</name><operator>&lt;=</operator><name>n</name></expr>)</condition><then><block>{
    <expr_stmt><expr><call><name><name>modncrlistp</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>modncrlistm</name><operator>.</operator><name>resize</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><operator>!</operator><name>size</name></expr>)</condition><then><block>{
      <expr_stmt><expr><name><name>modncrlistp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>modncrlistm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>size</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <macro><name>For</name><argument_list>(<argument>i</argument>,<argument>size</argument>,<argument>n+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
      <expr_stmt><expr><name><name>modncrlistp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name><name>modncrlistp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>modncrlistm</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><call><name>modinv</name><argument_list>(<argument><expr><name><name>modncrlistp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
  }</block></then></if>
  <return>return <expr><name><name>modncrlistp</name><index>[<expr><name>n</name></expr>]</index></name><operator>*</operator><name><name>modncrlistm</name><index>[<expr><name>r</name></expr>]</index></name><operator>%</operator><name>mod</name><operator>*</operator><name><name>modncrlistm</name><index>[<expr><name>n</name><operator>-</operator><name>r</name></expr>]</index></name><operator>%</operator><name>mod</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>modpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>n</name></expr>)</condition><block>{
    <if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name>a</name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
    <expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<if>if<condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if><return>return <expr><ternary><condition><expr><operator>(</operator><name>a</name><operator>%</operator><name>b</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>?</condition><then><expr><name>b</name></expr></then><else>:<expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>}</block></function>
<function><type><name>ll</name></type> <name>lcm</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>/</operator><call><name>gcd</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>*</operator><name>b</name></expr>;</return>}</block></function>

<function><type><name>ll</name></type> <name>countdigits</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>n</name></expr>)</condition><block>{<expr_stmt><expr><name>n</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt><expr_stmt><expr><name>ans</name><operator>++</operator></expr>;</expr_stmt>}</block></while>
  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>sumdigits</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>)</parameter_list><block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><name>n</name></expr>)</condition><block>{<expr_stmt><expr><name>ans</name><operator>+=</operator><name>n</name><operator>%</operator><literal type="number">10</literal></expr>;</expr_stmt><expr_stmt><expr><name>n</name><operator>/=</operator><literal type="number">10</literal></expr>;</expr_stmt>}</block></while>
  <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>judgement</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><name>a</name></expr>)</condition><then><block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ll</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>N</name></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>N</name><operator>=</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>vec</name></type> <name>v</name><argument_list>(<argument><expr><name>N</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><name><name>v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <macro><name>For</name><argument_list>(<argument>i</argument>,<argument><literal type="number">2</literal></argument>,<argument>N+<literal type="number">1</literal></argument>)</argument_list></macro><block>{
    <expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>v</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>v</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
  }</block>
  <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>N</argument>)</argument_list></macro><block>{
    <expr_stmt><expr><name>cnt</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then><block>{
      <while>while<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><block>{
        <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      }</block></while>
      <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><name><name>v</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then><block>{
      <while>while<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><block>{
        <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
      }</block></while>
      <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>ans</name><operator>=</operator><operator>(</operator><name>ans</name><operator>*</operator><name><name>v</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal><operator>||</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal></expr>)</condition><then><block>{
      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="number">0</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    }</block></then></if>
  }</block>
  <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
