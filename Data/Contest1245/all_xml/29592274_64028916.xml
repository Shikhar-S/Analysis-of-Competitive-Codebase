<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29592274_64028916.cpp"><comment type="line">// #pragma GCC optimize("O3")</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N2</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Nmax</name></cpp:macro> <cpp:value>500001</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rep2(i,0,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=m;i&lt;(n);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>get</name><parameter_list>(<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ll (n); scanf("%lld",&amp;(n));</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(c).begin(),(c).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill_nums</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=0;i&lt;n;i++) scanf("%lld",&amp;A[i]);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill_edges</name><parameter_list>(<parameter><type><name>adj</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=0;i&lt;m;i++) {ll a, b; scanf("%lld %lld",&amp;a,&amp;b); adj[a-1].pb(b-1); adj[b-1].pb(a-1);}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill_direct</name><parameter_list>(<parameter><type><name>adj</name></type></parameter>,<parameter><type><name>m</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(ll i=0;i&lt;m;i++) {ll a, b; scanf("%lld %lld",&amp;a,&amp;b); adj[a-1].pb(b-1);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pi</name></cpp:macro> <cpp:value>3.1415926535897</cpp:value></cpp:define>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

    <expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>x</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>y</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>k</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><operator>&amp;</operator><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>fill_nums</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fill_nums</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>dist</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1e18</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>

    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <macro><name>rep</name><argument_list>(<argument>j</argument>,<argument>n</argument>)</argument_list></macro> <block>{
            <if>if<condition>(<expr><name>i</name><operator>==</operator><name>j</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>dist</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block>
    }</block>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>vis</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>p</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>par</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>conn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>st</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>counter</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


    <while>while<condition>(<expr><name>counter</name><operator>!=</operator><name>n</name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>m</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>m</name><operator>==</operator><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>&lt;</operator><name><name>c</name><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>m</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></then></if>
        }</block></for>

        <expr_stmt><expr><name><name>vis</name><index>[<expr><name>m</name></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cost</name><operator>+=</operator><name><name>c</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>par</name><index>[<expr><name>m</name></expr>]</index></name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>p</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>st</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>
        <else>else <block>{
            <expr_stmt><expr><call><name><name>conn</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name><name>par</name><index>[<expr><name>m</name></expr>]</index></name><operator>+</operator><literal type="number">1</literal></expr>,<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>counter</name><operator>++</operator></expr>;</expr_stmt>

        <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if<condition>(<expr><operator>!</operator><name><name>vis</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>ll</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator><operator>*</operator><name><name>dist</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if>if<condition>(<expr><name>c1</name><operator>&lt;</operator><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
                    <expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
                }</block></then></if>
            }</block></then></if>
        }</block></for>
    }</block></while>
    

    
    <comment type="line">// std::function&lt;void(ll)&gt; dfs = [&amp;](ll idx) {</comment>
    <comment type="line">//     for(ll i=0;i&lt;n;i++) {</comment>
    <comment type="line">//         if(!vis[i]) {</comment>
    <comment type="line">//             if(mindist[i]==dist[i][idx]) {</comment>
    <comment type="line">//                 cost += min(mindist[i], c[i]);</comment>
    <comment type="line">//                 if(c[i]==cost){</comment>
    <comment type="line">//                     p[i]=1;</comment>
    <comment type="line">//                     st++;</comment>
    <comment type="line">//                 }</comment>
    <comment type="line">//                 else {</comment>

    <comment type="line">//                     conn.push_back({idx+1,i+1});</comment>
    <comment type="line">//                 }</comment>
    <comment type="line">//                 vis[i]=1;</comment>
    <comment type="line">//                 dfs(i);</comment>
    <comment type="line">//             }</comment>
    <comment type="line">//         }</comment>
    <comment type="line">//     }</comment>
    <comment type="line">// };</comment>

    <comment type="line">// for(int j=0;j&lt;n;j++) {</comment>
    <comment type="line">//     while(!vis[j]) {</comment>
    <comment type="line">//         ll m = -1;</comment>
    <comment type="line">//         for(int i=0;i&lt;n;i++) {</comment>
    <comment type="line">//             if(!vis[i] &amp;&amp; (m==-1 || c[i]&lt;c[m]))</comment>
    <comment type="line">//                 m = i;</comment>
    <comment type="line">//         }</comment>

    <comment type="line">//         p[m] = 1; st++;</comment>
    <comment type="line">//         vis[m] = 1;</comment>
    <comment type="line">//         cost += c[m];</comment>

    <comment type="line">//         dfs(m);</comment>
    <comment type="line">//     }</comment>
    <comment type="line">// }</comment>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>cost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>n</argument>)</argument_list></macro> <block>{
        <if>if<condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>,<argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    }</block>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><operator>(</operator><name>ll</name><operator>)</operator><call><name><name>conn</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>rep</name><argument_list>(<argument>i</argument>,<argument>conn.size()</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument>,<argument><expr><name><name>conn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fi</name></expr></argument>,<argument><expr><name><name>conn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>se</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>


    <return>return <expr><literal type="number">0</literal></expr>;</return>  
}</block></function>
</unit>
