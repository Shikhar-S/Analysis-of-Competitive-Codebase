<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29563713_64008804.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name><name>ara</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name>mod</name><init>=<expr><operator>(</operator><literal type="number">1e9</literal><operator>)</operator><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>ch</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ara</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ara</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">2</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">1e5</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name><name>ara</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>ara</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>ara</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr><operator>,</operator><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>!=</operator><literal type="char">'\0'</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal><operator>||</operator><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>z</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
        <if>if<condition>(<expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <if>if<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>z</name><operator>*=</operator><name><name>ara</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>z</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name><name>ch</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then>
        <block>{
            <if>if<condition>(<expr><name>x</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>y</name><operator>++</operator></expr>;</expr_stmt>
            }</block></then>
            <else>else<block>{
                <if>if<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
                <block>{
                    <expr_stmt><expr><name>z</name><operator>*=</operator><name><name>ara</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>z</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
                }</block></then></if>
                <expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then></if></elseif>
        <else>else
        <block>{
            <if>if<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>z</name><operator>*=</operator><name><name>ara</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
                <expr_stmt><expr><name>z</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
            }</block></then></if>
        }</block></else></if>
    }</block></for>
    <if>if<condition>(<expr><name>y</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name>z</name><operator>*=</operator><name><name>ara</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>z</name><operator>%=</operator><name>mod</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>z</name><operator>%</operator><name>mod</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
