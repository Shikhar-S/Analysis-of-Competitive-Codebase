<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29610017_64012607.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>


<decl_stmt><decl><type><name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>


<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{

	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>or</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt> <return>return;</return>
		}</block></then></if>
	}</block></for>

	<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>d</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
	
	<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>second</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>



	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>and</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>+</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
		}</block></then><elseif>else

		<if>if<condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>and</operator> <name><name>s</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>+</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
		}</block></then></if></elseif><else>else<block>{
			<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>=</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>+</operator> <name><name>d</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
		}</block></else></if>

		<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>d</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>%=</operator> <name>mod</name></expr>;</expr_stmt>
 	}</block></for>


	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>d</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>first</name> <operator>+</operator> <name><name>d</name><index>[<expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>second</name><operator>)</operator> <operator>%</operator> <name>mod</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
 
}</block></function>


<function><name>main</name><parameter_list>()</parameter_list><block>{


	<decl_stmt><decl><type><name>int</name></type> <name>test</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

	<while>while<condition>(<expr><name>test</name><operator>--</operator></expr>)</condition><block>{
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></while>



	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>


</unit>
