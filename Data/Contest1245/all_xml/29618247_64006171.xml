<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29618247_64006171.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>fac</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>fac</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">4</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>MAXN</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name><name>fac</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>(</operator><name><name>fac</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>+</operator><name><name>fac</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></for>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>,<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>flag</name><init>=<expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'m'</literal><operator>||</operator><name><name>str</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator><literal type="char">'w'</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>flag</name><operator>=</operator><literal type="boolean">false</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">0</literal><operator>*</operator><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"0"</literal></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>idx</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>idx</name><operator>&lt;=</operator><name>n</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>idx</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>idx</name><operator>&lt;=</operator><name>n</name><operator>&amp;&amp;</operator><name><name>str</name><index>[<expr><name>idx</name></expr>]</index></name><operator>==</operator><literal type="char">'u'</literal></expr>)</condition><block>{
                <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name><name>fac</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
        }</block></then><else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <expr_stmt><expr><name>idx</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>idx</name><operator>&lt;=</operator><name>n</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name><name>str</name><index>[<expr><name>idx</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while<condition>(<expr><name>idx</name><operator>&lt;=</operator><name>n</name><operator>&amp;&amp;</operator><name><name>str</name><index>[<expr><name>idx</name></expr>]</index></name><operator>==</operator><literal type="char">'n'</literal></expr>)</condition><block>{
                <expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt>
                <expr_stmt><expr><operator>++</operator><name>cnt</name></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name><name>fac</name><index>[<expr><name>cnt</name></expr>]</index></name><operator>%</operator><name>MOD</name></expr>;</expr_stmt>
        }</block></then><else>else <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>idx</name></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
