<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29588530_64023190.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fill</name><parameter_list>(<parameter><type><name>space</name></type></parameter>,<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(space,a,sizeof(space))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>optimize</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>ios_base::sync_with_stdio(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<decl_stmt><decl><type><name>ll</name></type> <name><name>fib</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name>optimize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>||</operator> <name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></for>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>u</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><literal type="number">0LL</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1LL</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fib</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1LL</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">100005</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>fib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fib</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>fib</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fib</name><index>[<expr><name>i</name></expr>]</index></name> <operator>%=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
		<if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>u</name><operator>++</operator></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0LL</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <name><name>fib</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name> <operator>%=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then>
		<elseif>else <if>if <condition>(<expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>u</name> <operator>&gt;</operator> <literal type="number">0LL</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name> <operator>%=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>
			}</block></then></if>
		}</block></then></if></elseif>
		<else>else <block>{
			<if>if <condition>(<expr><name>u</name> <operator>&gt;</operator> <literal type="number">0LL</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name> <operator>%=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>
			}</block></then>
			<elseif>else <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0LL</literal></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <name><name>fib</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ans</name> <operator>%=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>
			}</block></then></if></elseif></if>
		}</block></else></if>
	}</block></for>
	<if>if <condition>(<expr><name>u</name> <operator>&gt;</operator> <literal type="number">0LL</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <operator>(</operator><name><name>fib</name><index>[<expr><name>u</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>%=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>u</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>
	}</block></then>
	<elseif>else <if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">0LL</literal></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <name><name>fib</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>ans</name> <operator>%=</operator> <call>(<name>ll</name>)<argument_list>(<argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0LL</literal></expr>;</expr_stmt>
	}</block></then></if></elseif></if>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
