<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29613432_64030686.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for_</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>for__</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&lt;=b;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rof_</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;b;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rof__</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=a;i&gt;=b;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ms</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a),(b),sizeof((a)))</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>db</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MN</name> <init>= <expr><literal type="number">3e3</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>P</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name><name>x</name><index>[<expr><name>MN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><name>MN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>c</name><index>[<expr><name>MN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>MN</name></expr>]</index></name></decl>;</decl_stmt>
<comment type="line">//inline hsh(int i){</comment>
<comment type="line">//	return x[i]*n+y[i];</comment>
<comment type="line">//}</comment>
<function><specifier>inline</specifier> <type><name>ll</name></type> <name>d</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<return>return <expr><operator>(</operator><name>ll</name><operator>)</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>a</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>a</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name><name>rt</name><index>[<expr><name>MN</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name>tot</name></decl>;</decl_stmt>
<struct>struct <name>ST</name><block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>w</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>usd</name></decl>;</decl_stmt>
	<function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><name>ST</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{
		<return>return <expr><name>w</name><operator>&lt;</operator><name><name>r</name><operator>.</operator><name>w</name></name></expr>;</return>	<comment type="line">//ï¿½ï¿½È¨Ð¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ç°ï¿½ï¿½ </comment>
	}</block></function>
</public>}</block><decl><name><name>edge</name><index>[<expr><name>MN</name><operator>*</operator><name>MN</name></expr>]</index></name></decl>;</struct>
<function><type><name>int</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
	<if>if<condition>(<expr><name><name>rt</name><index>[<expr><name>x</name></expr>]</index></name><operator>==</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
	<return>return <expr><name><name>rt</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>get</name><argument_list>(<argument><expr><name><name>rt</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<comment type="line">//vector&lt;int&gt; e[MN];</comment>

<function><specifier>inline</specifier> <type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>for__</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>rt</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt>
	<macro><name>for_</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><name>x</name><operator>+</operator><name>i</name></expr></argument>,<argument><expr><name>y</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>for_</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>c</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>for_</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><name>k</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>for_</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <macro><name>for_</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>edge</name><index>[<expr><name>tot</name><operator>++</operator></expr>]</index></name><operator>=</operator><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>,<expr><call><name>d</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>*</operator><operator>(</operator><operator>(</operator><name>ll</name><operator>)</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>}</block></expr>;</expr_stmt>
	<macro><name>for_</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>edge</name><index>[<expr><name>tot</name><operator>++</operator></expr>]</index></name><operator>=</operator><block>{<expr><name>n</name></expr>,<expr><name>i</name></expr>,<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>edge</name></expr></argument>,<argument><expr><name>edge</name><operator>+</operator><name>tot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>v</name></decl>;</decl_stmt>
	<macro><name>for_</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>tot</argument>)</argument_list></macro><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name><init>=<expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name><init>=<expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></init></decl>, <decl><type ref="prev"/><name>rx</name></decl>, <decl><type ref="prev"/><name>ry</name></decl>;</decl_stmt>
		<if>if<condition>(<expr><operator>(</operator><name>rx</name><operator>=</operator><call><name>get</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator><operator>==</operator><operator>(</operator><name>ry</name><operator>=</operator><call><name>get</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
		<if>if<condition>(<expr><name>x</name><operator>==</operator><name>n</name> <operator>||</operator> <name>y</name><operator>==</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name><operator>+</operator><name>y</name><operator>-</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name><name>rt</name><index>[<expr><name>rx</name></expr>]</index></name><operator>=</operator><name>ry</name></expr>;</expr_stmt><comment type="line">//rt[min(rx,ry)]=max(rx,ry);</comment>
		<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>x</name><operator>!=</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>usd</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		<if>if<condition>(<expr><name>cnt</name><operator>&gt;</operator><name>n</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
	}</block>
	
<comment type="line">//for__(i,0,n) printf("r %d: %d\n",i,rt[i]);</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//	for_(i,0,n) if(get(i)==get(n)) v.push_back(i+1);</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name><range>:<expr><name>v</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
<comment type="line">//	for_(i,0,n) e[rt[i]+1].push_back(i+1);</comment>
<comment type="line">//	ans=0;</comment>
<comment type="line">//	for_(i,0,n) if(rt[i]!=i/* &amp;&amp; rt[i]!=rt[n]*/) ++ans;</comment>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%d\n"</literal></expr></argument>,<argument><expr><name>n</name><operator>-</operator><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<macro><name>for_</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>tot</argument>)</argument_list></macro> <if>if<condition>(<expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>usd</name></expr>)</condition><then>
		<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list><block>{
<comment type="line">//	ios::sync_with_stdio(0);</comment>
<comment type="line">//	int _; scanf("%d",&amp;_); for_(i,0,_)</comment>
		<expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
