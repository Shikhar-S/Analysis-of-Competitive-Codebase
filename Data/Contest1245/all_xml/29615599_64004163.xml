<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29615599_64004163.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>



<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name><name>r</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>auto</name></type> <name>ch</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control> <block>{
			<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
			<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
		}</block></for>
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<comment type="line">//cout &lt;&lt; ans &lt;&lt; endl;</comment>
		<if>if <condition>(<expr><name>ans</name> <operator>&gt;=</operator> <operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>n1</name> <init>= <expr><name>a</name> <operator>-</operator> <name>t1</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>t2</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>n2</name> <init>= <expr><name>b</name> <operator>-</operator> <name>t2</name></expr></init></decl>;</decl_stmt>		
			<decl_stmt><decl><type><name>int</name></type> <name>t3</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>n3</name> <init>= <expr><name>c</name> <operator>-</operator> <name>t3</name></expr></init></decl>;</decl_stmt>
			<for>for <control>(<init><decl><type><name>auto</name></type> <name>ch</name> <range>: <expr><name>s</name></expr></range></decl></init>)</control> <block>{
				<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>t2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"P"</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>t2</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<if>if <condition>(<expr><name>n1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>n1</name> <operator>-=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal></expr>;</expr_stmt></block></then>
						<else>else <block type="pseudo"><expr_stmt><expr><name>n3</name> <operator>-=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr>;</expr_stmt></block></else></if>
					}</block></else></if>
				}</block></then></if>
				<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>t3</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>t3</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<if>if <condition>(<expr><name>n1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>n1</name> <operator>-=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal></expr>;</expr_stmt></block></then>
						<else>else <block type="pseudo"><expr_stmt><expr><name>n2</name> <operator>-=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"P"</literal></expr>;</expr_stmt></block></else></if>
					}</block></else></if>
				}</block></then></if>
				<if>if <condition>(<expr><name>ch</name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block>{
					<if>if <condition>(<expr><name>t1</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
						<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"R"</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name>t1</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
					}</block></then> <else>else <block>{
						<if>if <condition>(<expr><name>n2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>n2</name> <operator>-=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"P"</literal></expr>;</expr_stmt></block></then>
						<else>else <block type="pseudo"><expr_stmt><expr><name>n3</name> <operator>-=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"S"</literal></expr>;</expr_stmt></block></else></if>
					}</block></else></if>
				}</block></then></if>
			}</block></for>
			<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
		}</block></then> <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"NO"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
