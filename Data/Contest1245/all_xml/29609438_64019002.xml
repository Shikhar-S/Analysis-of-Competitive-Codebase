<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29609438_64019002.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<namespace>namespace <name>fastIO</name><block>{
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
	<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT_SIZE</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>
	<comment type="line">//fread-&gt;read</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>IOerror</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<comment type="line">//inline char nc(){char ch=getchar();if(ch==-1)IOerror=1;return ch;} </comment>
	<function><specifier>inline</specifier> <type><name>char</name></type> <name>nc</name><parameter_list>()</parameter_list><block>{
		<decl_stmt><decl><specifier>static</specifier> <type><name>char</name></type> <name><name>buf</name><index>[<expr><name>BUF_SIZE</name></expr>]</index></name></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>p1</name><init>=<expr><name>buf</name><operator>+</operator><name>BUF_SIZE</name></expr></init></decl>,<modifier>*</modifier><decl><type ref="prev"/><name>pend</name><init>=<expr><name>buf</name><operator>+</operator><name>BUF_SIZE</name></expr></init></decl>;</decl_stmt>
		<if>if<condition>(<expr><name>p1</name><operator>==</operator><name>pend</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>p1</name><operator>=</operator><name>buf</name></expr>;</expr_stmt><expr_stmt><expr><name>pend</name><operator>=</operator><name>buf</name><operator>+</operator><call><name>fread</name><argument_list>(<argument><expr><name>buf</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>BUF_SIZE</name></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>pend</name><operator>==</operator><name>p1</name></expr>)</condition><then><block>{<expr_stmt><expr><name>IOerror</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>}</block></then></if>
		}</block></then></if>
		<return>return <expr><operator>*</operator><name>p1</name><operator>++</operator></expr>;</return>
	}</block></function>
	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>blank</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>ch</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>ch</name><operator>==</operator><literal type="char">' '</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'\n'</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'\r'</literal><operator>||</operator><name>ch</name><operator>==</operator><literal type="char">'\t'</literal></expr>;</return>}</block></function>
	<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>bool</name></type> <name>sign</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>nc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init>;</init><condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
		<if>if<condition>(<expr><name>IOerror</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>sign</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		<for>for<control>(<init>;</init><condition><expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
		<if>if<condition>(<expr><name>sign</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>
	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>bool</name></type> <name>sign</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>nc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt><expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<for>for<control>(<init>;</init><condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
		<if>if<condition>(<expr><name>IOerror</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>sign</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></then></if>
		<for>for<control>(<init>;</init><condition><expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><literal type="number">10</literal><operator>+</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block></for>
		<if>if<condition>(<expr><name>ch</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition><then><block>{
			<decl_stmt><decl><type><name>double</name></type> <name>tmp</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<for>for<control>(<init>;</init><condition><expr><name>ch</name><operator>&gt;=</operator><literal type="char">'0'</literal><operator>&amp;&amp;</operator><name>ch</name><operator>&lt;=</operator><literal type="char">'9'</literal></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><name>tmp</name><operator>/=</operator><literal type="number">10.0</literal></expr><operator>,</operator><expr><name>x</name><operator>+=</operator><name>tmp</name><operator>*</operator><operator>(</operator><name>ch</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block></for>
		}</block></then></if>
		<if>if<condition>(<expr><name>sign</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>x</name><operator>=</operator><operator>-</operator><name>x</name></expr>;</expr_stmt></block></then></if>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>
	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{
		<decl_stmt><decl><type><name>char</name></type> <name>ch</name><init>=<expr><call><name>nc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<for>for<control>(<init>;</init><condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
		<if>if<condition>(<expr><name>IOerror</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
		<for>for<control>(<init>;</init><condition><expr><operator>!</operator><call><name>blank</name><argument_list>(<argument><expr><name>ch</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><operator>!</operator><name>IOerror</name></expr>;</condition><incr><expr><name>ch</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><expr_stmt><expr><operator>*</operator><name>s</name><operator>++</operator><operator>=</operator><name>ch</name></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><operator>*</operator><name>s</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return>
	}</block></function>
	<function><specifier>inline</specifier> <type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>&amp;</modifier></type><name>c</name></decl></parameter>)</parameter_list><block>{
		<for>for<control>(<init><expr><name>c</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr>;</init><condition><expr><call><name>blank</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>c</name><operator>=</operator><call><name>nc</name><argument_list>()</argument_list></call></expr></incr>)</control><block type="pseudo"><empty_stmt>;</empty_stmt></block></for>
		<if>if<condition>(<expr><name>IOerror</name></expr>)</condition><then><block>{<expr_stmt><expr><name>c</name><operator>=</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt><return>return <expr><literal type="boolean">false</literal></expr>;</return>}</block></then></if>
		<return>return <expr><literal type="boolean">true</literal></expr>;</return> 
	}</block></function>
	<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>,<parameter><type><name>class</name><modifier>...</modifier></type> <name>U</name></parameter>&gt;</parameter_list></template><type><name>bool</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name><modifier>&amp;</modifier></type> <name>h</name></decl></parameter>,<parameter><decl><type><name>U</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>t</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>read</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>&amp;&amp;</operator><call><name>read</name><argument_list>(<argument><expr><name>t</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
	<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>OUT_SIZE</name></cpp:undef>
	<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>BUF_SIZE</name></cpp:undef>
}</block></namespace><empty_stmt>;</empty_stmt>
<using>using <namespace>namespace <name>fastIO</name>;</namespace></using>
<comment type="block" format="doxygen">/************* debug begin *************/</comment>
<function><type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list><block>{<return>return <expr><literal type="char">'"'</literal><operator>+</operator><name>s</name><operator>+</operator><literal type="char">'"'</literal></expr>;</return>}</block></function>
<function><type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>s</name></decl></parameter>)</parameter_list><block>{<return>return <expr><call><name>to_string</name><argument_list>(<argument><expr><operator>(</operator><name>string</name><operator>)</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</return>}</block></function>
<function><type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>bool</name><modifier>&amp;</modifier></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return<expr><operator>(</operator><ternary><condition><expr><name>b</name></expr>?</condition><then><expr><literal type="string">"true"</literal></expr></then><else>:<expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name>ostringstream</name></type> <name>sout</name></decl>;</decl_stmt><expr_stmt><expr><name>sout</name><operator>&lt;&lt;</operator><name>x</name></expr>;</expr_stmt><return>return <expr><call><name><name>sout</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>A</name></parameter>,<parameter><type><name>class</name></type> <name>B</name></parameter>&gt;</parameter_list></template><type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>,<argument><expr><name>B</name></expr></argument>&gt;</argument_list></name></type> <name>p</name></decl></parameter>)</parameter_list><block>{<return>return <expr><literal type="string">"("</literal><operator>+</operator><call><name>to_string</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">", "</literal><operator>+</operator><call><name>to_string</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="string">")"</literal></expr>;</return>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>A</name></parameter>&gt;</parameter_list></template><type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>string</name></type> <name>res</name><init>=<expr><literal type="string">"{"</literal></expr></init></decl>;</decl_stmt><for>for<control>(<init><decl><type><specifier>const</specifier> <specifier>auto</specifier></type> <name>x</name><range>:<expr><name>v</name></expr></range></decl></init>)</control><block>{<if>if<condition>(<expr><operator>!</operator><name>f</name></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>+=</operator> <literal type="string">", "</literal></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>res</name><operator>+=</operator><call><name>to_string</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></for><expr_stmt><expr><name>res</name><operator>+=</operator><literal type="string">"}"</literal></expr>;</expr_stmt>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>debug_out</name><parameter_list>()</parameter_list><block>{<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>,<parameter><type><name>class</name><modifier>...</modifier></type> <name>U</name></parameter>&gt;</parameter_list></template><type><name>void</name></type> <name>debug_out</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name><modifier>&amp;</modifier></type> <name>h</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name>U</name><modifier>&amp;</modifier><modifier>...</modifier></type> <name>t</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><call><name>to_string</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>debug_out</name><argument_list>(<argument><expr><name>t</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>tokitsukaze</name></cpp:ifdef> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout&lt;&lt;"["&lt;&lt;#__VA_ARGS__&lt;&lt;"]:",debug_out(__VA_ARGS__);</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>233;</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block" format="doxygen">/*************  debug end  *************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mem</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a),(b),sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)x.size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sqr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)*(x)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>__gnu_cxx</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>PLL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>PIL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PLI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>VL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PII</name></expr></argument> &gt;</argument_list></name></type> <name>VPII</name>;</typedef>
<comment type="block" format="doxygen">/************* define end  *************/</comment>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>r</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>}</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>r</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>}</block></function>
<function><type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>r</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>}</block></function>
<function><type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>VI</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name>sz</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%c"</literal></expr></argument>,<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">" \n"</literal><index>[<expr><name>i</name><operator>==</operator><call><name>sz</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>}</block></function>
<function><type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>VL</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name>sz</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld%c"</literal></expr></argument>,<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">" \n"</literal><index>[<expr><name>i</name><operator>==</operator><call><name>sz</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>}</block></function>
<function><type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>r</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%c"</literal></expr></argument>,<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">" \n"</literal><index>[<expr><name>i</name><operator>==</operator><name>r</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>}</block></function>
<function><type><name>void</name></type> <name>println</name><parameter_list>(<parameter><decl><type><name>ll</name> <modifier>*</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list><block>{<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>l</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>r</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld%c"</literal></expr></argument>,<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">" \n"</literal><index>[<expr><name>i</name><operator>==</operator><name>r</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>}</block></function>
<comment type="block" format="doxygen">/*************** IO end  ***************/</comment>
<function_decl><type><name>void</name></type> <name>go</name><parameter_list>()</parameter_list>;</function_decl>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>tokitsukaze</name></cpp:ifdef>
		<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"TEST.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>go</name><argument_list>()</argument_list></call></expr>;</expr_stmt><return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>LLINF</name><init>=<expr><literal type="number">0x3f3f3f3f3f3f3f3fLL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>eps</name><init>=<expr><literal type="number">1e-6</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAX</name><init>=<expr><literal type="number">2e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/*********************************  head  *********************************/</comment>
<struct>struct <name>dsu</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name><name>pre</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
	<function><type><name>void</name></type> <name>init</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>pre</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>i</name></expr>;</expr_stmt></block></for>
	}</block></function>
	<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>
	<block>{
		<if>if<condition>(<expr><name><name>pre</name><index>[<expr><name>x</name></expr>]</index></name><operator>!=</operator><name>x</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>pre</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name><name>pre</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
		<return>return <expr><name><name>pre</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</return>
	}</block></function>
	<function><type><name>bool</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ra</name></decl>,<decl><type ref="prev"/><name>rb</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>ra</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>rb</name><operator>=</operator><call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>ra</name><operator>!=</operator><name>rb</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name><name>pre</name><index>[<expr><name>ra</name></expr>]</index></name><operator>=</operator><name>rb</name></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		}</block></then></if>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	}</block></function>
</public>}</block><decl><name>dsu</name></decl>;</struct>
<struct>struct <name>node</name>
<block>{<public type="default">
	<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>w</name></decl>;</decl_stmt>
	<constructor><name>node</name><parameter_list>()</parameter_list><block>{}</block></constructor>
	<constructor><name>node</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list><member_init_list>:<call><name>x</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call>,<call><name>y</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call>,<call><name>w</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></member_init_list><block>{}</block></constructor>
	<friend>friend <function type="operator"><type><name>bool</name></type> <name>operator<name>&lt;</name></name><parameter_list>(<parameter><decl><type><name>node</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>node</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<return>return <expr><name><name>a</name><operator>.</operator><name>w</name></name><operator>&lt;</operator><name><name>b</name><operator>.</operator><name>w</name></name></expr>;</return>}</block></function></friend>
</public>}</block>;</struct>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>node</name></expr></argument>&gt;</argument_list></name></type> <name>edge</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>kruskal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>dsu</name><operator>.</operator><name>init</name></name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>VI</name></type> <name>res</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VPII</name></type> <name>res2</name></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><call><name>sz</name><argument_list>(<argument><expr><name>edge</name></expr></argument>)</argument_list></call></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{
		<if>if<condition>(<expr><call><name><name>dsu</name><operator>.</operator><name>merge</name></name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ans</name><operator>+=</operator><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr>;</expr_stmt>
			<if>if<condition>(<expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name><operator>==</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>res</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><call><name><name>res2</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr></argument>,<argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
		}</block></then></if>
	}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name>sz</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>println</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><call><name>sz</name><argument_list>(<argument><expr><name>res2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>res2</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d %d\n"</literal></expr></argument>,<argument><expr><name><name>it</name><operator>.</operator><name>fi</name></name></expr></argument>,<argument><expr><name><name>it</name><operator>.</operator><name>se</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name><name>x</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>y</name><index>[<expr><literal type="number">2222</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>k</name><index>[<expr><name>MAX</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>go</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><call><name>read</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>k</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>edge</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>edge</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>node</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{
			<for>for<control>(<init><expr><name>j</name><operator>=</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{
				<expr_stmt><expr><call><name><name>edge</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><call><name>node</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></for>
		}</block></for>
		<expr_stmt><expr><call><name>kruskal</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
}</block></function></unit>
