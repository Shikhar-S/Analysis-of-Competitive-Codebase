<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29590810_64032025.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ext/rope&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/assoc_container.hpp&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ext/pb_ds/tree_policy.hpp&gt;</cpp:file></cpp:include> 
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_cxx</name>;</namespace></using>
<using>using <namespace>namespace <name>__gnu_pbds</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pa</name></cpp:macro> <cpp:value>pair&lt;int,pair&lt;int,int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1d</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v2d</name></cpp:macro> <cpp:value>vector&lt;vector&lt;int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1p</name></cpp:macro> <cpp:value>vector&lt;pair&lt;int,int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
<comment type="line">// #define mp make_pair</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RS</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>sort(v.rbegin(),v.rend())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>print</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>printf("%.16f\n", a);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PI</name></cpp:macro> <cpp:value>3.14159265</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ump</name></cpp:macro> <cpp:value>map&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>v1s</name></cpp:macro> <cpp:value>vector&lt;string&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort(v.begin(),v.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mxpq</name></cpp:macro> <cpp:value>priority_queue &lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mnpq</name></cpp:macro> <cpp:value>priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fio</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fff</name></cpp:macro> <cpp:value>cout.flush();</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>parr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter> , <parameter><decl><type><name>v1d</name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list><block>{

    <while>while<condition>(<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr>)</condition><block>{
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><name>i</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>unionn</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter> , <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter> , <parameter><decl><type><name>v1d</name> <modifier>&amp;</modifier></type><name>sze</name></decl></parameter> , <parameter><decl><type><name>v1d</name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list><block>{

    <expr_stmt><expr><name><name>sze</name><index>[<expr><name>b</name></expr>]</index></name> <operator>+=</operator> <name><name>sze</name><index>[<expr><name>a</name></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>p</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    
    <decl_stmt><decl><type><name>fio</name>


    <name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>v1p</name></type> <name>v</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name>  <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name><operator>&gt;&gt;</operator><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ss</name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>v1d</name></type> <name>cost</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name> <operator>:</operator> <name>cost</name></expr></init>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>i</name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>v1d</name></type> <name>k</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>i</name> <operator>:</operator> <name>k</name></expr></init>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>i</name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>pa</name></expr></argument>,<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pa</name></expr></argument>&gt;</argument_list></name></expr></argument>,<argument><expr><name><name>greater</name><argument_list type="generic">&lt;<argument><expr><name>pa</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>q</name></decl>;</decl_stmt>


    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name>  <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name>  <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{


            <decl_stmt><decl><type><name>int</name></type> <name>c</name>  <init>= <expr><operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ff</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ff</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ss</name> <operator>-</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>ss</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <comment type="line">// cout&lt;&lt;c&lt;&lt;" ";</comment>
            <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><name>c</name></expr> , <expr><block>{<expr><name>i</name></expr> , <expr><name>j</name></expr> }</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>


        }</block></for>
    }</block></for>
    
    <comment type="line">// cout&lt;&lt;endl;</comment>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr> ;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>push</name></name><argument_list>(<argument><expr><block>{<expr><name><name>cost</name><index>[<expr><name>i</name></expr>]</index></name></expr> , <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr> , <expr><name>i</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>v1d</name></type> <name>isit</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>v1d</name></type> <name>par</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name>  <operator>&lt;</operator><name>n</name></expr>  ;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>v1d</name></type> <name>sze</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument> , <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>v1d</name></type> <name>lans</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>v1p</name></type> <name>bijli</name></decl>;</decl_stmt>
    <while>while<condition>(<expr><call><name><name>q</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><block>{

        <decl_stmt><decl><type><name>pa</name></type> <name>p</name> <init>= <expr><call><name><name>q</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


        <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>p</name><operator>.</operator><name>ss</name><operator>.</operator><name>ff</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>p</name><operator>.</operator><name>ss</name><operator>.</operator><name>ss</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>p</name><operator>.</operator><name>ff</name></name></expr></init></decl>;</decl_stmt>
        
        <comment type="line">// cout&lt;&lt;c&lt;&lt;" "&lt;&lt;a&lt;&lt;endl;</comment>
        <if>if<condition>(<expr><name>a</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>parr</name><argument_list>(<argument><expr><name>b</name></expr></argument> , <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if>if<condition>(<expr><name><name>isit</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then><block>{
                <continue>continue;</continue>
            }</block></then><else>else<block>{
                <expr_stmt><expr><name><name>isit</name><index>[<expr><name>b</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>lans</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then><else>else<block>{

            <decl_stmt><decl><type><name>int</name></type> <name>tempa</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>tempb</name> <init>= <expr><name>b</name></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>parr</name><argument_list>(<argument><expr><name>a</name></expr></argument> , <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>parr</name><argument_list>(<argument><expr><name>b</name></expr></argument> , <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

            <if>if<condition>(<expr><name><name>isit</name><index>[<expr><name>a</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>isit</name><index>[<expr><name>b</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
                <expr_stmt><expr><name>temp</name> <operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            }</block></then></if>
            
            <if>if<condition>(<expr><name><name>isit</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>isit</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then><block>{
                <continue>continue;</continue>
            }</block></then></if>

            <if>if<condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><then><block>{
                <continue>continue;</continue>
            }</block></then><else>else<block>{

                <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bijli</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>tempa</name></expr> , <expr><name>tempb</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if>if<condition>( <expr><name><name>sze</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&lt;</operator> <name><name>sze</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then><block>{
                    <expr_stmt><expr><call><name>unionn</name><argument_list>(<argument><expr><name>a</name></expr></argument> , <argument><expr><name>b</name></expr></argument> , <argument><expr><name>sze</name></expr></argument> , <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></then><else>else<block>{
                    <expr_stmt><expr><call><name>unionn</name><argument_list>(<argument><expr><name>b</name></expr></argument> , <argument><expr><name>a</name></expr></argument> , <argument><expr><name>sze</name></expr></argument> , <argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block></else></if>

                <if>if<condition>(<expr><name>temp</name></expr>)</condition><then><block>{
                    <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>parr</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>isit</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                }</block></then></if>

            }</block></else></if>
        }</block></else></if>

    }</block></while>


    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>lans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>lans</name></expr></range></decl></init>)</control><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt>
    }</block></for><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name><name>bijli</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>auto</name></type> <name>i</name> <range>: <expr><name>bijli</name></expr></range></decl></init>)</control><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>ff</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>i</name><operator>.</operator><name>ss</name></name><operator>+</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></for>



        



}</block></function>
 
</unit>
