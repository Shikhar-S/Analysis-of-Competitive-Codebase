<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29619947_64021533.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>m</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name> <operator>&gt;&gt;</operator> <name>s</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>it</name><range>:<expr><name>s</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name><name>m</name><index>[<expr><name>it</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block></for>
    <decl_stmt><decl><type><name>string</name></type> <name>ans</name><init>=<expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>a</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
      <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>b</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
	<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>c</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
	  <if>if<condition>(<expr><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
	  <if>if<condition>(<expr><name>i</name> <operator>+</operator> <name>j</name> <operator>+</operator> <name>k</name> <operator>&lt;</operator> <operator>(</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
	  <if>if<condition>(<expr><name>i</name> <operator>&gt;</operator> <name><name>m</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name> <operator>||</operator> <name>j</name> <operator>&gt;</operator> <name><name>m</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name> <operator>||</operator> <name>k</name> <operator>&gt;</operator> <name><name>m</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
	  <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{
	    <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="char">'#'</literal></expr>;</expr_stmt>
	  }</block></for>
	  <decl_stmt><decl><type><name>int</name></type> <name>a1</name><init>=<expr><name>a</name></expr></init></decl>,<decl><type ref="prev"/><name>b1</name><init>=<expr><name>b</name></expr></init></decl>,<decl><type ref="prev"/><name>c1</name><init>=<expr><name>c</name></expr></init></decl>;</decl_stmt>
	  <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{
	    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal> <operator>&amp;&amp;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><literal type="char">'R'</literal></expr><operator>,</operator><expr><name>i</name><operator>--</operator></expr><operator>,</operator><expr><name>a1</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
	    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal> <operator>&amp;&amp;</operator> <name>j</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><literal type="char">'P'</literal></expr><operator>,</operator><expr><name>j</name><operator>--</operator></expr><operator>,</operator><expr><name>b1</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
	    <if>if<condition>(<expr><name><name>s</name><index>[<expr><name>l</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>&amp;&amp;</operator> <name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>l</name></expr>]</index></name><operator>=</operator><literal type="char">'S'</literal></expr><operator>,</operator><expr><name>k</name><operator>--</operator></expr><operator>,</operator><expr><name>c1</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
	  }</block></for>
	  <for>for<control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{
	    <if>if<condition>(<expr><name><name>ans</name><index>[<expr><name>l</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'#'</literal></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
	    <if>if<condition>( <expr><name>a1</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'R'</literal></expr><operator>,</operator> <expr><name>a1</name><operator>--</operator></expr>;</expr_stmt></block></then>
	    <elseif>else <if>if<condition>( <expr><name>b1</name></expr> )</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'P'</literal></expr><operator>,</operator> <expr><name>b1</name><operator>--</operator></expr>;</expr_stmt></block></then></if></elseif>
	    <else>else <block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>l</name></expr>]</index></name> <operator>=</operator> <literal type="char">'S'</literal></expr><operator>,</operator> <expr><name>c1</name><operator>--</operator></expr>;</expr_stmt></block></else></if>
	  }</block></for>
	  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>a1</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>b1</name><operator>==</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>c1</name><operator>==</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for></block></for></block></for>
    <if>if<condition>(<expr><call><name><name>ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"YES\n"</literal> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
    <else>else <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO\n"</literal></expr>;</expr_stmt></block></else></if>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr> ;</return>
}</block></function>
</unit>
