<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29579543_64025116.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INFLL</name> <init>= <expr><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><literal type="number">60</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><call>(<name>ll</name>)<argument_list>(<argument><expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>l_ength</name></cpp:macro> <cpp:value>size</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>mul_mod</name><parameter_list>(<parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>a</name> <operator>*=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>add_mod</name><parameter_list>(<parameter><decl><type><name>ll</name><modifier>&amp;</modifier></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
	<expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>a</name><operator>&lt;</operator><name>MOD</name><operator>)</operator></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><operator>(</operator><name>a</name><operator>-</operator><name>MOD</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>b</name><operator>&lt;</operator><name>MOD</name><operator>)</operator></expr>?</condition><then><expr><name>b</name></expr></then><else>:<expr><operator>(</operator><name>b</name><operator>-</operator><name>MOD</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>a</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>a</name><operator>&lt;</operator><name>MOD</name><operator>)</operator></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><operator>(</operator><name>a</name><operator>-</operator><name>MOD</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">50</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
<comment type="line">// l&lt;a, a&lt;r, l&lt;b, b&lt;r</comment>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>p</name></decl>,<decl><type ref="prev"/><name>q</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>l</name></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;</operator><name>t</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control><block>{
		<expr_stmt><expr><call><name>fill</name><argument_list>(<argument><expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>dp</name><index>[<expr><literal type="number">50</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="number">0ll</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1ll</literal></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>l</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">31</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control><block>{
			<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>l</name><operator>&amp;</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>r</name><operator>&amp;</operator><operator>(</operator><literal type="number">1ll</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
			<for>for<control>(<init><expr><name>a</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>a</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>a</name></expr></incr>)</control><block>{
				<for>for<control>(<init><expr><name>b</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control><block>{
					<if>if<condition>(<expr><name>a</name><operator>&amp;&amp;</operator><name>b</name></expr>)</condition><then><block>{
						<continue>continue;</continue>
					}</block></then></if>
					<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>x</name></expr></incr>)</control><block>{
						<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>y</name></expr></incr>)</control><block>{
							<if>if<condition>(<expr><operator>(</operator><name>x</name><operator>&amp;</operator><name>y</name><operator>)</operator><operator>!=</operator><name>x</name></expr>)</condition><then><block>{
								<continue>continue;</continue>
							}</block></then></if>
							<if>if<condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><then><block>{
								<if>if<condition>(<expr><name>p</name><operator>&gt;</operator><name>a</name></expr>)</condition><then><block>{
									<continue>continue;</continue>
								}</block></then></if>
								<if>if<condition>(<expr><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>^</operator><operator>(</operator><name>p</name><operator>&lt;</operator><name>a</name><operator>)</operator></expr>)</condition><then><block>{
									<continue>continue;</continue>
								}</block></then></if>
								
							}</block></then></if>
							<if>if<condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>)</condition><then><block>{
								<if>if<condition>(<expr><name>q</name><operator>&lt;</operator><name>a</name></expr>)</condition><then><block>{
									<continue>continue;</continue>
								}</block></then></if>
								<if>if<condition>(<expr><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator><operator>^</operator><operator>(</operator><name>q</name><operator>&gt;</operator><name>a</name><operator>)</operator></expr>)</condition><then><block>{
									<continue>continue;</continue>
								}</block></then></if>
							}</block></then></if>
							<if>if<condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator></expr>)</condition><then><block>{
								<if>if<condition>(<expr><name>p</name><operator>&gt;</operator><name>b</name></expr>)</condition><then><block>{
									<continue>continue;</continue>
								}</block></then></if>
								<if>if<condition>(<expr><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">4</literal><operator>)</operator><operator>)</operator><operator>^</operator><operator>(</operator><name>p</name><operator>&lt;</operator><name>b</name><operator>)</operator></expr>)</condition><then><block>{
									<continue>continue;</continue>
								}</block></then></if>
							}</block></then></if>
							<if>if<condition>(<expr><operator>(</operator><operator>!</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>)</condition><then><block>{
								<if>if<condition>(<expr><name>q</name><operator>&lt;</operator><name>b</name></expr>)</condition><then><block>{
									<continue>continue;</continue>
								}</block></then></if>
								<if>if<condition>(<expr><operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><name>y</name><operator>&amp;</operator><literal type="number">8</literal><operator>)</operator><operator>)</operator><operator>^</operator><operator>(</operator><name>q</name><operator>&gt;</operator><name>b</name><operator>)</operator></expr>)</condition><then><block>{
									<continue>continue;</continue>
								}</block></then></if>
							}</block></then></if>
							<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>y</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
						}</block></for>
					}</block></for>
				}</block></for>
			}</block></for>
		}</block></for>
		<expr_stmt><expr><name>ans</name> <operator>=</operator> <literal type="number">0ll</literal></expr>;</expr_stmt>
		<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
			<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		}</block></for>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
