<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29617139_63998870.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxn</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>maxm</name></cpp:macro> <cpp:value>1000005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inf</name></cpp:macro> <cpp:value>1e9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>998244353</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inv2</name></cpp:macro> <cpp:value>500000004</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>inv3</name></cpp:macro> <cpp:value>333333336</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>scanf("%d",&amp;x)</cpp:value></cpp:define>
<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>K</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>res</name></decl>,<decl><type ref="prev"/><name>ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>w</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>v</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>pd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">10000</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">5</literal></expr>;</return></block></then>
    <elseif>else <if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">1000</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">4</literal></expr>;</return></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">100</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">3</literal></expr>;</return></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>x</name><operator>&gt;=</operator><literal type="number">10</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">2</literal></expr>;</return></block></then></if></elseif></if>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>y</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>x</name></expr>;</return></block></then></if>
    <return>return <expr><call><name>gcd</name><argument_list>(<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name><operator>%</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
<if>if<condition>(<expr><literal type="number">2</literal><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>sc</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><call><name>gcd</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Finite\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Infinite\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
    }</block></while>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
