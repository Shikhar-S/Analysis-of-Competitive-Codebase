<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616244_64015888.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name><name>a1</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>a2</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>dp</name><index>[<expr><literal type="number">31</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<comment type="line">//exclusive bound</comment>
<function><type><name>ll</name></type> <name>calc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>r1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r2</name></decl></parameter>)</parameter_list> <block>{
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">30</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><name><name>a1</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>r1</name><operator>&gt;&gt;</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>a2</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><name>r2</name><operator>&gt;&gt;</operator><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></for>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">30</literal></expr></init></decl>;</init> <condition><expr><name>i</name></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
		<for>for<control>(<init><decl><type><name>int</name></type> <name>b1</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b1</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>b1</name></expr></incr>)</control> <block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>b2</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b2</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>b2</name></expr></incr>)</control> <block>{
				<comment type="line">//0, 0</comment>
				<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b1</name><operator>|</operator><name><name>a1</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>b2</name><operator>|</operator><name><name>a2</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index><index>[<expr><name>b2</name></expr>]</index></name></expr>;</expr_stmt>
				<comment type="line">//0, 1</comment>
				<if>if<condition>(<expr><name>b2</name><operator>||</operator><name><name>a2</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b1</name><operator>|</operator><name><name>a1</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name>b2</name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index><index>[<expr><name>b2</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></then></if>
				<comment type="line">//1, 0</comment>
				<if>if<condition>(<expr><name>b1</name><operator>||</operator><name><name>a1</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b1</name></expr>]</index><index>[<expr><name>b2</name><operator>|</operator><name><name>a2</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>+=</operator><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>b1</name></expr>]</index><index>[<expr><name>b2</name></expr>]</index></name></expr>;</expr_stmt>
				}</block></then></if>
			}</block></for>
		}</block></for>
	}</block></for>

	<return>return <expr><name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>calc</name><argument_list>(<argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-</operator><call><name>calc</name><argument_list>(<argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call><operator>-</operator><call><name>calc</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>r</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>+</operator><call><name>calc</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>l</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
