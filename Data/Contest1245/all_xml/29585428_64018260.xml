<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29585428_64018260.cpp"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>LL</name>;</typedef>

<decl_stmt><decl><type><name>LL</name></type> <name><name>low</name><index>[<expr><literal type="number">66</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>hi</name><index>[<expr><literal type="number">66</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>LL</name></type> <name><name>dp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">66</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>LL</name></type> <name>serc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>l2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>take</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>x</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index><index>[<expr><name>h2</name></expr>]</index><index>[<expr><name>take</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index><index>[<expr><name>h2</name></expr>]</index><index>[<expr><name>take</name></expr>]</index></name></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>LL</name> <modifier>&amp;</modifier></type><name>ret</name> <init>= <expr><name><name>dp</name><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>h</name></expr>]</index><index>[<expr><name>l2</name></expr>]</index><index>[<expr><name>h2</name></expr>]</index><index>[<expr><name>take</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><operator>(</operator><name>l</name> <operator>||</operator> <name><name>low</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;=</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>h</name> <operator>||</operator> <name><name>hi</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;=</operator> <name>i</name><operator>)</operator></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>nl</name> <init>= <expr><name>l</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>low</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>nh</name> <init>= <expr><name>h</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>hi</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nh</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>serc</name><argument_list>(<argument><expr><name>m</name><operator>^</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><name>nh</name></expr></argument>, <argument><expr><name>l2</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
  }</block></then></if>
  <if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <if>if <condition>(<expr><name>take</name> <operator>&amp;&amp;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
      <if>if <condition>(<expr><operator>(</operator><name>l2</name> <operator>||</operator> <name><name>low</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;=</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>h2</name> <operator>||</operator> <name><name>hi</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;=</operator> <name>i</name><operator>)</operator></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>nl</name> <init>= <expr><name>l2</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>low</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nl</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <decl_stmt><decl><type><name>int</name></type> <name>nh</name> <init>= <expr><name>h2</name></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name><name>hi</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <name>i</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nh</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>ret</name> <operator>+=</operator> <call><name>serc</name><argument_list>(<argument><expr><name>m</name><operator>^</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>nl</name></expr></argument>, <argument><expr><name>nh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></for>
  }</block></then></if>
  <comment type="line">// DEBUG(printf("on %d %d %d %d %d %d %d -&gt; %lld\n", m, x, l, h, l2, h2, take, ret);)</comment>
  <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>tc</name><operator>--</operator></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>l</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">66</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <expr_stmt><expr><name><name>low</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>l</name> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>hi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>h</name> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>l</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>h</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">66</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
          <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{
            <for>for <control>(<init><decl><type><name>int</name></type> <name>kk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>kk</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>kk</name><operator>++</operator></expr></incr>)</control> <block>{
              <for>for <control>(<init><decl><type><name>int</name></type> <name>ll</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ll</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ll</name><operator>++</operator></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>kk</name></expr>]</index><index>[<expr><name>ll</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>kk</name></expr>]</index><index>[<expr><name>ll</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
              }</block></for>
            }</block></for>
          }</block></for>
        }</block></for>
      }</block></for>
    }</block></for>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld\n"</literal></expr></argument>, <argument><expr><call><name>serc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
