<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616051_64025123.cpp"><comment type="line">//</comment>
<comment type="line">//  2019/03/30 Ver1.10</comment>
<comment type="line">//</comment>
<comment type="line">//  Codeforces: ganariya</comment>
<comment type="line">//  AtCoder: ganariya2525</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMHBYYYWMMMM#BYYTTTYWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMB9O1==?????zzCC111&gt;&gt;;;;;;;;;;;;&lt;?TMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMMMMMMMMMMMMMMM9Olll=l======??????????&gt;&gt;&gt;&gt;&gt;&gt;;;;;;;;;;:;?TMMMMMMMMMMMMMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMMMMMMMMMMMM9ttlllllllll=l=======?????????&gt;&gt;&gt;&gt;&gt;&gt;;;;;;;;;;;?TMMMMMMMMMMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMMMMMMMMMBOttOtttttltlllllllll=======??????????&gt;&gt;&gt;&gt;&gt;&gt;&gt;;;;;;;?TMMMMMMMMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMMMMMMMBttwOtttttttttttttlllllllll========?????????&gt;&gt;&gt;&gt;&gt;&gt;;;;;;&lt;TMMMMMMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMMMMMBrwZrttttttttttttttttttlllllllllll======???????????&gt;&gt;&gt;&gt;&gt;&gt;;;?HMMMMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMMMMSw0trtrrtrtrttrtttttttttttttlllOllllll========????&lt;&lt;zz??&gt;&gt;&gt;&gt;&gt;&gt;ZMMMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMMMX0ttrtrOOttrttrttOOttttttttttttltwllllllllll========??wy?????&gt;&gt;&gt;vZMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMM0ttrI+wV1rtttttttwZtttttttltttOwylOXOllllllllllll=l====1dkz???????vZdMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMSrrwrtwZCjttttttttwSttOlllltllllwtXOlZkOlllllllllllllll==z+dk===?????X2JMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMBrtwwtrw0&lt;jttttttttOXllOttltllttllOZwHOtXkyltlllllllllllllll&lt;+XZ======?dk?JMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMStwdZtwXC&lt;+ttttttOOOd6ltZlltllllttllStWWOOHWytttttltltOllltllz:zHllll===zX=?dMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMBrwdKOtwW3;;zrttttwZwXRlldOllltltlltttwlXvktdXWytltttttttOttlttl&lt;&lt;dklllllllZ===dMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMM8tQM#ttwW3;;;1trttwSwfUOlORltllltlllllldtX&gt;dktDOWOtlttltttOOttltO&lt;;+WOllllllXlllzMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMM9OdM#Ottd$;;;;;&lt;?1z0OKjRltd0llltOllllllldZX&gt;?WOw_WWOtttttttttOttI&lt;;;&lt;dkttttllllllldMMMMMMMMM</comment>
<comment type="line">//  MMMMMMM9wMMMSttwS&lt;;;;;&gt;;;;J&lt;j&gt;(I&lt;?U111zltllllllld0X&gt;~dkwl(WkttlttlOOwWk&lt;;;:;;zHttttttwOllllMMMMMMMMM</comment>
<comment type="line">//  MMMMMMBdMMM8tttdI+zttttttdSXt~dlzXwlllzzOzzzzzlldkW&lt;~?kOk~?sx++++jdHmH6+++&lt;;;jdZtttttdkOtlldMMMMMMMM</comment>
<comment type="line">//  MMMMM#dMMM#tttw0+tttttttdKdf((RsdfRllllldZllltlldWK~~_W0w_~OWOlOdgg9ZtOWOtttz+wktttttdpktttwMMMMMMMM</comment>
<comment type="line">//  MMMMMWMMMMSlttdIttttttOdWHH&gt;~(IzWDRll=llzRlllzlldk$&gt;++dkd&lt;~_XkdgH9tttttdktttt+OkrttrtdfpkttOMMMMMMMM</comment>
<comment type="line">//  MMMMNWMMM#Zttlk=tttttOXWWd$_.(IdW1R=llll=SlllzOldK&lt;_._(kd6+-(MM9lltttttrWktttztWZttrwXppWttrMMMMMMMM</comment>
<comment type="line">//  MMMMNMMMM#lltwDzttllOXyW0X:..(OXk&lt;Rl=ll=lwOlllOld3&lt;``.(Rd&gt;~?CdklllltttttXdXttzOWktrwwWpfpkrtMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMM@ltldIzlttOXyW$w$```(OyD(Rl==llldZ=llIlw;~```-Xd:~~~~UkylltttAyHdgSrzObRtOXwpfppWrrMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMM@llldtlllldVyW+d&gt;```.wZ$ wl==lI=wRl=ll=w&lt;```` dd_..~~(RZXOQdggHH9ZwrzwHWrdXXppfppkrMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMM#llldlltlwyyyD(S-...,Wk] zI=l=llzWzl=l=P~```` jZ``...~zQkH@MBUtrZtrtldHRdSdpfpffpkwMMMMMMMM</comment>
<comment type="line">//  MMMMNMMMMNZllXtllldVyW3(Mf=&lt;ONMHP~(k===l=zdk=lld3```...(C````..(M96lttttrrtrrtdHWHXpfpppfpRwMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMNzzWZllzyyyy(W@`  =~MWK6 jz=lzlzvRz=lZ`.I+JgkWm&amp;-. `..(ZltlttttrtttrWWHppfppfpppSdMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMkAWRllzVyyS_(b    .MNHU-(Uz=lI={XkzO&gt;.dVT7&lt;TMHMNHHx-.(kwZyltttrtrrdHHpfppfpffpp0dMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMKyWzOzyyyk.`&lt;!  hdWMH]``(S==t=l(kX2 ?_`    WMMHH#HH+.XwkwOttttrwrZ~(HfpfpppfpWwXMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMHWROOyyyW;` `. (WVM#b```(0=zzz wX!```  a.dM#NM@N(4WhXkXkWtttttwd3O_(HpffpfpfWwSMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMNZvWzXXyyXP```-_ ?o+?!````.4=Z=`(:````  HpbNNMHHH (C=XXyWZWttrdwf:(&gt;.dfppffppSXSMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMRzuHzXyZXH.``````````````` ?zz ``````` ZKvTHHbWt `` XZyyHZWOdSZ&lt;::~`(fpfpfffXp0WMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMKzyyHvyZZW____.`````````````.I_```````` ?nJzX7^````.WXWyyHyWKZ&lt;:::_`Jffpfpfpfp0WMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMM@zZyZWwWyXo-_~(~ ```````````` `````````````` _`````.WXkyyVWmWc::&lt;~ .HffppfffffkXMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMKzZZZZXkUXr~....```````....```````````` ...  ````..JXWWyyW83vXx~..WfffVfWVffffkdMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMRzZZZZZZZZb````````````&lt;````````````./&lt;~._&lt;_.____`(WfdyW3&lt;:~~(XWkVVVVVVVHVVVVV0dMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMSzZZZZZZZWX-```````````````````````````.......~~._j9jX=_~~_(XZyVHHkyyyyWHyyykykOMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMSzuuuuuZXWZW,```````````````````````````````.``..(3&lt;! ...JWyyXWyyyWHkyyWHyyyHyklMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMNXzuuuXXuXSuuXh,```````` .... ```````````````````_~ .JWyyyyZyy0HyyZyyZyZXWZZZWHZIdMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMNwtuuuXkuXXuuuuXh,``````(:::~&lt;?71(,``````````````.(UMNUkZZZZZZZHZZ0ZZZZZWWZZZWNXIdMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMNKOzuzXkuXuuuuuXuXW, ```` _~~~:~~(}```````````.(YC;::&lt;kCfZZZZXO#ZZVZZZZZMZZuuMMNXzMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMHKOzzuXkzdzzzzuXXzuuU&amp;.``````````````````` .JY&gt;::::;;J=:dZuZuZd#uuruuuud#uuuXMMMNXdMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMNOvzzXkvMRzzzzXKzuzzzXh, `````````````..JC&lt;;:;;:;;+7&lt;:~(HHuXIdNuuzuuuXMSuuuWMMMMROMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMNvvvrdkvM#vzzzzHzzzzzuzzUG. ``` ...JdY&lt;:;:;:::;;+v&lt;~~~:(HpHmzMNXZzuzzd#zzzdMMMMMMRdMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMNwrrvdRrMNwvvvvdRvvvzwkzzzzXWWHY=~~O+::::::::&lt;+&lt;~~~~~~~dppppWMMkZzzzwM#zzdMMMMMMMMNMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMM#rrrwRrMMbOrrOZNkrvvvXwvvvvvwX;.~._W_:::::(?!~~~~~~~~(HpppppppHWdvwM#XwdMMMMMMMMMMNMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMNyrrrRrWMMmzOrzdNyrrrZNvrwQWWfb....(r~~_J&gt;_.....~.~~-dpfpffpfpppWHHMNdMMMMMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMNrtrStdMMMNxzrzMNmrrrdNWfVfffP._-.(~_J!............JpfpffpfpfffpppWNppppHMMMMMMMMMMMM</comment>
<comment type="line">//  MMMMMMMMMMMMMMMMNOtXtdMMMMMNxzZMMNmgHyVVVVVW%..?/(.,(x-..........(HfffpffpffpffWHHffpffppfVyyWMMMMMM</comment>


<comment type="line">//include</comment>
<comment type="line">//------------------------------------------</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;list&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;climits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;random&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;complex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;regex&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<comment type="line">//typedef</comment>
<comment type="line">//------------------------------------------</comment>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>bool</name></expr></argument>&gt;</argument_list></name></type> <name>VB</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>char</name></expr></argument>&gt;</argument_list></name></type> <name>VC</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>double</name></expr></argument>&gt;</argument_list></name></type> <name>VD</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>VS</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>VLL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VI</name></expr></argument>&gt;</argument_list></name></type> <name>VVI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VB</name></expr></argument>&gt;</argument_list></name></type> <name>VVB</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VS</name></expr></argument>&gt;</argument_list></name></type> <name>VVS</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VLL</name></expr></argument>&gt;</argument_list></name></type> <name>VVLL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VVI</name></expr></argument>&gt;</argument_list></name></type> <name>VVVI</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VVLL</name></expr></argument>&gt;</argument_list></name></type> <name>VVVLL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>PLL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>PIS</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PSI</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>PSS</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PII</name></expr></argument>&gt;</argument_list></name></type> <name>VPII</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>PLL</name></expr></argument>&gt;</argument_list></name></type> <name>VPLL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VPII</name></expr></argument>&gt;</argument_list></name></type> <name>VVPII</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VPLL</name></expr></argument>&gt;</argument_list></name></type> <name>VVPLL</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>VS</name></expr></argument>&gt;</argument_list></name></type> <name>VVS</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>MII</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>MLL</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>MSI</name>;</typedef>
<typedef>typedef <type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>MIS</name>;</typedef>

<comment type="line">//æ°å¤ã»æå­å</comment>
<comment type="line">//------------------------------------------</comment>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>toInt</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>istringstream</name></type> <name>sin</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>sin</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
    <return>return <expr><name>v</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>LL</name></type> <name>toLongLong</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>istringstream</name></type> <name>sin</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>sin</name> <operator>&gt;&gt;</operator> <name>v</name></expr>;</expr_stmt>
    <return>return <expr><name>v</name></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>string</name></type> <name>toString</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>ostringstream</name></type> <name>sout</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>sout</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt>
    <return>return <expr><call><name><name>sout</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>VC</name></type> <name>toVC</name><parameter_list>(<parameter><decl><type><name>string</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>VC</name></type> <name>data</name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>s</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <return>return <expr><name>data</name></expr>;</return>
}</block></function>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>SPRIT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>string</name> <modifier>&amp;</modifier></type><name>delim</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>string</name></expr></argument>&gt;</argument_list></name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>string</name><operator>::</operator><name>size_type</name></name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pos</name> <operator>!=</operator> <name><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition> <block>{
        <decl_stmt><decl><type><name><name>string</name><operator>::</operator><name>size_type</name></name></type> <name>p</name> <init>= <expr><call><name><name>s</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>delim</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>p</name> <operator>==</operator> <name><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>s</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>pos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><name>pos</name> <operator>=</operator> <name>p</name> <operator>+</operator> <call><name><name>delim</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>string</name></type> <name>TRIM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name> <modifier>&amp;</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>trimCharacterList</name> <init>= <expr><literal type="string">" \t\v\r\n"</literal></expr></init></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>string</name></type> <name>result</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>string</name><operator>::</operator><name>size_type</name></name></type> <name>left</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>find_first_not_of</name></name><argument_list>(<argument><expr><name>trimCharacterList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>left</name> <operator>!=</operator> <name><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name><name>string</name><operator>::</operator><name>size_type</name></name></type> <name>right</name> <init>= <expr><call><name><name>str</name><operator>.</operator><name>find_last_not_of</name></name><argument_list>(<argument><expr><name>trimCharacterList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>str</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name> <operator>-</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>string</name></type> <name>REPLACE_STRING</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>string</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>string</name></type> <name>find</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>string</name></type> <name>alt</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>string</name></type> <name>result</name> <init>= <expr><name>source</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>string</name><operator>::</operator><name>size_type</name></name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>pos</name> <operator>=</operator> <call><name><name>result</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>find</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>pos</name> <operator>!=</operator> <name><name>string</name><operator>::</operator><name>npos</name></name></expr>)</condition> <block>{
        <expr_stmt><expr><call><name><name>result</name><operator>.</operator><name>replace</name></name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><call><name><name>find</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>alt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name><name>alt</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>VECTOR_EXISTS</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>itr</name> <init>= <expr><call><name><name>std</name><operator>::</operator><name>find</name></name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>index</name> <init>= <expr><call><name>distance</name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>itr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>index</name> <operator>!=</operator> <call><name><name>vec</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">true</literal></expr>;</return></block></then>
    <else>else <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></else></if>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>void</name></type> <name>VECTOR_REMOVE_VALUE_ALL</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>vec</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>vec</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>remove</name><argument_list>(<argument><expr><call><name><name>vec</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>vec</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>VECTOR_REMOVE_VALUE_ALL_FAST</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>data</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>vec2</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator> <name>vec</name></expr></init>)</control> <block type="pseudo"><if>if <condition>(<expr><name>x</name> <operator>!=</operator> <name>data</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>vec2</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if></block></for>
    <return>return <expr><name>vec2</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>REG_MATCH</name><parameter_list>(<parameter><decl><type><name>string</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>regex</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>re</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><call><name>regex_match</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>REG_MATCH</name><parameter_list>(<parameter><decl><type><name>string</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>smatch</name> <modifier>&amp;</modifier></type><name>match</name></decl></parameter>, <parameter><decl><type><name>regex</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>re</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><call><name>regex_match</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>match</name></expr></argument>, <argument><expr><name>re</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>smatch</name></type> <name>REG_SEARCH</name><parameter_list>(<parameter><decl><type><name>string</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>regex</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>re</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>smatch</name></type> <name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>regex_search</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>m</name></expr>;</return>
}</block></function>

<function><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>smatch</name></expr></argument>&gt;</argument_list></name></type> <name>REG_ALL_SEARCH</name><parameter_list>(<parameter><decl><type><name>string</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>regex</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>re</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>smatch</name></expr></argument>&gt;</argument_list></name></type> <name>matchs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sregex_iterator</name></type> <name>iter</name><argument_list>(<argument><expr><call><name><name>text</name><operator>.</operator><name>cbegin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>text</name><operator>.</operator><name>cend</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>re</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sregex_iterator</name></type> <name>end</name></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>iter</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>iter</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>matchs</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><operator>*</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <return>return <expr><name>matchs</name></expr>;</return>
}</block></function>

<function><type><name>string</name></type> <name>REG_REPLACE</name><parameter_list>(<parameter><decl><type><name>string</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>regex</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>re</name></decl></parameter>, <parameter><decl><type><name>string</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>replace</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>string</name></type> <name>result</name> <init>= <expr><call><name>regex_replace</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>replace</name></expr></argument>, <argument><expr><name><name>regex_constants</name><operator>::</operator><name>format_first_only</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>string</name></type> <name>REG_ALL_REPLACE</name><parameter_list>(<parameter><decl><type><name>string</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>regex</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>re</name></decl></parameter>, <parameter><decl><type><name>string</name> <specifier>const</specifier> <modifier>&amp;</modifier></type><name>replace</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>string</name></type> <name>result</name> <init>= <expr><call><name>regex_replace</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><name>re</name></expr></argument>, <argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>COMPRESS</name><parameter_list>(<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>erase</name></name><argument_list>(<argument><expr><call><name>unique</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>v</name></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>MAPPING</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>zip</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>unzip</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>zip</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block></for>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>unzip</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>
    <return>return <expr><call><name>make_pair</name><argument_list>(<argument><expr><name>zip</name></expr></argument>, <argument><expr><name>unzip</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>RUN_LENGTH</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>=</operator> <name>j</name></expr></incr>)</control> <block>{
        <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>v</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block type="pseudo"><expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block></while>
        <expr_stmt><expr><call><name><name>ret</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>, <parameter><type><name>typename</name></type> <name>W</name></parameter>&gt;</parameter_list></template>
<type><name>auto</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>V</name></expr></argument>, <argument><expr><name>W</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>r</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><decltype>decltype<argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>first</name></name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></decltype></expr></argument>, <argument><expr><decltype>decltype<argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>second</name></name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></decltype></expr></argument>&gt;</argument_list></name></name></type> <block>{
    <return>return <expr><block>{<expr><name><name>l</name><operator>.</operator><name>first</name></name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>first</name></name></expr>, <expr><name><name>l</name><operator>.</operator><name>second</name></name> <operator>+</operator> <name><name>r</name><operator>.</operator><name>second</name></name></expr>}</block></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>, <parameter><type><name>typename</name></type> <name>V</name></parameter>, <parameter><type><name>typename</name></type> <name>W</name></parameter>&gt;</parameter_list></template>
<type><name>auto</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>U</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>V</name></expr></argument>, <argument><expr><name>W</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>r</name></decl></parameter>)</parameter_list> -&gt; <type><name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><decltype>decltype<argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></decltype></expr></argument>, <argument><expr><decltype>decltype<argument_list>(<argument><expr><name><name>l</name><operator>.</operator><name>second</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></decltype></expr></argument>&gt;</argument_list></name></name></type> <block>{
    <return>return <expr><block>{<expr><name><name>l</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>first</name></name></expr>, <expr><name><name>l</name><operator>.</operator><name>second</name></name> <operator>-</operator> <name><name>r</name><operator>.</operator><name>second</name></name></expr>}</block></expr>;</return>
}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UPPER</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>transform((s).begin(), (s).end(), (s).begin(), ::toupper)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOWER</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>transform((s).begin(), (s).end(), (s).begin(), ::tolower)</cpp:value></cpp:define>


<comment type="line">//åæ¨äºå¥ nLen=å°æ°ç¹ç¬¬nä½ã«ãã</comment>
<comment type="line">//------------------------------------------</comment>

<comment type="line">//åãä¸ã</comment>
<function><type><name>double</name></type> <name>ceil_n</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>dIn</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>nLen</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>double</name></type> <name>dOut</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>dOut</name> <operator>=</operator> <name>dIn</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dOut</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call>(<name>long</name> <name>long</name>) <argument_list>(<argument><expr><name>dOut</name> <operator>+</operator> <literal type="number">0.9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>dOut</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><operator>-</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//åãæ¨ã¦</comment>
<function><type><name>double</name></type> <name>floor_n</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>dIn</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>nLen</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>double</name></type> <name>dOut</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>dOut</name> <operator>=</operator> <name>dIn</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dOut</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call>(<name>long</name> <name>long</name>) <argument_list>(<argument><expr><name>dOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>dOut</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><operator>-</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//åæ¨äºå¥</comment>
<function><type><name>double</name></type> <name>round_n</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>dIn</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>nLen</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>double</name></type> <name>dOut</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>dOut</name> <operator>=</operator> <name>dIn</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><name>nLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dOut</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <call>(<name>long</name> <name>long</name>) <argument_list>(<argument><expr><name>dOut</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>dOut</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><operator>-</operator><name>nLen</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//næ¡ç®ã®æ°ã®åå¾</comment>
<function><type><name>int</name></type> <name>take_a_n</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>string</name></type> <name>str</name> <init>= <expr><call><name>toString</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name><name>str</name><index>[<expr><call><name><name>str</name><operator>.</operator><name>length</name></name><argument_list>()</argument_list></call> <operator>-</operator> <name>n</name></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>bitcount32</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&amp;</operator> <literal type="number">0x55555555</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">0x33333333</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x0f0f0f0f</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">0x0f0f0f0f</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0x00ff00ff</literal><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x0000ffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0x0000ffff</literal><operator>)</operator></expr>;</return>
}</block></function>

<comment type="line">//æ´æ°ã2é²æ°è¡¨è¨ããã¨ãã®1ã®åæ°ãè¿ã</comment>
<function><type><name>LL</name></type> <name>bitcount64</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x5555555555555555</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&amp;</operator> <literal type="number">0x5555555555555555</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x3333333333333333</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">0x3333333333333333</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x0f0f0f0f0f0f0f0f</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">0x0f0f0f0f0f0f0f0f</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x00ff00ff00ff00ff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0x00ff00ff00ff00ff</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bits</name> <operator>=</operator> <operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x0000ffff0000ffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0x0000ffff0000ffff</literal><operator>)</operator></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>bits</name> <operator>&amp;</operator> <literal type="number">0x00000000ffffffff</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal> <operator>&amp;</operator> <literal type="number">0x00000000ffffffff</literal><operator>)</operator></expr>;</return>
}</block></function>


<comment type="line">//comparison</comment>
<comment type="line">//------------------------------------------</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_MAX</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&gt;(b)?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;(b)?(a):(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C_ABS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;(b)?(b)-(a):(a)-(b))</cpp:value></cpp:define>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T1</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T2</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T1</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>T2</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then></if>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>

<comment type="line">//container util</comment>
<comment type="line">//------------------------------------------</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(a).begin(),(a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).rbegin(), (a).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int((a).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EACH</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(typeof((arr).begin()) i=(arr).begin(); i!=(arr).end(); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXIST</name><parameter_list>(<parameter><type><name>str</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((str).find(e)!=(str).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COUNT</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>count((arr).begin(), (arr).end(), v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEARCH</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>w</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>search((v).begin(), (v).end(), (w).begin(), (w).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>B_SEARCH</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>binary_search((arr).begin(), (arr).end(), v)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SORT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort((c).begin(),(c).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSORT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>sort((c).rbegin(),(c).rend())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REVERSE</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>reverse((c).begin(), (c).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_LEFT</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rotate((arr).begin(), (arr).begin()+(c), (arr).end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE_RIGHT</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rotate((arr).rbegin(), (arr).rbegin() + (c), (arr).rend())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUMI</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>accumulate((arr).begin(), (arr).end(), 0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUMD</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>accumulate((arr).begin(), (arr).end(), 0.)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUMLL</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>accumulate((arr).begin(), (arr).end(), 0LL)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SUMS</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>accumulate((arr).begin(), (arr).end(), string())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULD</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>accumulate((arr).begin(), (arr).end(), 1., multiplies&lt;double&gt;())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MULLL</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>accumulate((arr).begin(), (arr).end(), 1LL, multiplies&lt;long long&gt;())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UB</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>upper_bound((arr).begin(), (arr).end(), n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LB</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>lower_bound((arr).begin(), (arr).end(), n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OF_ALL</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>all_of((arr).begin(), (arr).end(), (func))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OF_NONE</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>none_of((arr).begin(), (arr).end(), (func))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OF_ANY</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>, <parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>any_of((arr).begin(), (arr).end(), (func))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ft</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>



<comment type="line">//input output</comment>
<comment type="line">//------------------------------------------</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GL</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>getline(cin, (s))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>std::ios::sync_with_stdio(false);std::cin.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::cout&lt;&lt;(d)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUT_L</name><parameter_list>(<parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::cout&lt;&lt;(d)&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOUT</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::cout&lt;&lt;std::fixed&lt;&lt;std::setprecision(n)&lt;&lt;(data)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOUT_L</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>data</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>std::cout&lt;&lt;std::fixed&lt;&lt;std::setprecision(n)&lt;&lt;(data)&lt;&lt;"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EL</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>printf("\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOW_VECTOR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{std::cerr &lt;&lt; #v &lt;&lt; "\t:";for(const auto&amp; xxx : v){std::cerr &lt;&lt; xxx &lt;&lt; " ";}std::cerr &lt;&lt; "\n";}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHOW_MAP</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{std::cerr &lt;&lt; #v &lt;&lt; endl; for(const auto&amp; xxx: v){std::cerr &lt;&lt; xxx.first &lt;&lt; " " &lt;&lt; xxx.second &lt;&lt; "\n";}}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Yes</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>printf("Yes\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>No</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>printf("No\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YES</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>printf("YES\n")</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NO</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>printf("NO\n")</cpp:value></cpp:define>


<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name> <modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&gt;&gt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>istream</name> <modifier>&amp;</modifier></type><name>operator<name>&gt;&gt;</name></name><parameter_list>(<parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter>)</parameter_list> <block>{
    <for>for <control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>x</name><operator>:</operator> <name>v</name></expr></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>in</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt></block></for>
    <return>return <expr><name>in</name></expr>;</return>
}</block></function>

<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<type><name>ostream</name> <modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>std</name><operator>::</operator><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T1</name></expr></argument>, <argument><expr><name>T2</name></expr></argument>&gt;</argument_list></name></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>out</name> <operator>&lt;&lt;</operator> <literal type="string">"["</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal> <operator>&lt;&lt;</operator> <name><name>p</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator> <literal type="string">"]"</literal> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
    <return>return <expr><name>out</name></expr>;</return>
}</block></function>


<comment type="line">//repetition</comment>
<comment type="line">//------------------------------------------</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&lt;(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(b)-1;i&gt;=(a);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>FOR(i,0,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = n-1;i &gt;= 0;i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORLL</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(LL i=LL(a);i&lt;LL(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFORLL</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(LL i=LL(b)-1;i&gt;=LL(a);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLL</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(LL i=0;i&lt;LL(n);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREPLL</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(LL i=LL(n)-1;i&gt;=0;--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREACH</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto &amp;(x) : (arr))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORITER</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>arr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto (x) = (arr).begin(); (x) != (arr).end(); ++(x))</cpp:value></cpp:define>


<comment type="line">//constant</comment>
<comment type="line">//--------------------------------------------</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dx</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>


<comment type="line">//math</comment>
<comment type="line">//--------------------------------------------</comment>

<comment type="line">//min &lt;= aim &lt;= max</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>BETWEEN</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>aim</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>min</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>max</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>min</name> <operator>&lt;=</operator> <name>aim</name> <operator>&amp;&amp;</operator> <name>aim</name> <operator>&lt;=</operator> <name>max</name></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></then> <else>else <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></else></if>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>IS_OUT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T1</name></type> <name>toY</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T1</name></type> <name>toX</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name></type> <name>H</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name></type> <name>W</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>toY</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>toY</name> <operator>&gt;=</operator> <name>H</name> <operator>||</operator> <name>toX</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>toX</name> <operator>&gt;=</operator> <name>W</name><operator>)</operator></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>T</name></type> <name>SQR</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name> <operator>*</operator> <name>x</name></expr>;</return> }</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T1</name></parameter>, <parameter><type><name>class</name></type> <name>T2</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>T1</name></type> <name>POW</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T1</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T2</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>!</operator><name>y</name></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
    <elseif>else <if>if <condition>(<expr><operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <return>return <expr><call><name>SQR</name><argument_list>(<argument><expr><call><name>POW</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
    }</block></then></if></elseif> <else>else <block type="pseudo"><return>return <expr><call><name>POW</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name> <operator>^</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>x</name></expr>;</return></block></else></if>
}</block></function>


<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>constexpr</specifier> <type><name>T</name></type> <name>ABS</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>x</name></expr> </then><else>: <expr><name>x</name></expr></else></ternary></expr>;</return>
}</block></function>

<comment type="line">//partial_permutation nPr é å</comment>
<comment type="line">//firstã»ã»æåã®æ°</comment>
<comment type="line">//middleã»ã»r(åãåºãæ°)</comment>
<comment type="line">//lastã»ã»n(å¨ä½æ°)</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>Iter</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>next_partial_permutation</name><parameter_list>(<parameter><decl><type><name>Iter</name></type> <name>first</name></decl></parameter>, <parameter><decl><type><name>Iter</name></type> <name>middle</name></decl></parameter>, <parameter><decl><type><name>Iter</name></type> <name>last</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><name>middle</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>next_permutation</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="line">//combination nCr çµã¿åãã</comment>
<comment type="line">//first1ã»ã»æåã®æ°</comment>
<comment type="line">//last1==first2ã»ã»r(åãåºãæ°)</comment>
<comment type="line">//last2ã»ã»n(å¨ä½æ°)</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>Iter</name></parameter>&gt;</parameter_list></template>
<type><name>bool</name></type> <name>next_combination</name><parameter_list>(<parameter><decl><type><name>Iter</name></type> <name>first1</name></decl></parameter>, <parameter><decl><type><name>Iter</name></type> <name>last1</name></decl></parameter>, <parameter><decl><type><name>Iter</name></type> <name>first2</name></decl></parameter>,
                      <parameter><decl><type><name>Iter</name></type> <name>last2</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><operator>(</operator><name>first1</name> <operator>==</operator> <name>last1</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>first2</name> <operator>==</operator> <name>last2</name><operator>)</operator></expr>)</condition><then> <block>{
        <return>return <expr><literal type="boolean">false</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>Iter</name></type> <name>m1</name> <init>= <expr><name>last1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Iter</name></type> <name>m2</name> <init>= <expr><name>last2</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>--</operator><name>m2</name></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>--</operator><name>m1</name> <operator>!=</operator> <name>first1</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>m1</name> <operator>&lt;</operator> <operator>*</operator><name>m2</name><operator>)</operator></expr>)</condition> <block>{
    }</block></while>
    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>m1</name> <operator>==</operator> <name>first1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>first1</name> <operator>&lt;</operator> <operator>*</operator><name>m2</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><operator>!</operator><name>result</name></expr>)</condition><then> <block>{
        <while>while <condition>(<expr><name>first2</name> <operator>!=</operator> <name>m2</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>m1</name> <operator>&lt;</operator> <operator>*</operator><name>first2</name><operator>)</operator></expr>)</condition> <block>{
            <expr_stmt><expr><operator>++</operator><name>first2</name></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>first1</name> <operator>=</operator> <name>m1</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>iter_swap</name></name><argument_list>(<argument><expr><name>first1</name></expr></argument>, <argument><expr><name>first2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>first1</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>first2</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><operator>(</operator><name>first1</name> <operator>!=</operator> <name>last1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>first2</name> <operator>!=</operator> <name>last2</name><operator>)</operator></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>m1</name> <operator>=</operator> <name>last1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>m2</name> <operator>=</operator> <name>first2</name></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>m1</name> <operator>!=</operator> <name>first1</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>m2</name> <operator>!=</operator> <name>last2</name><operator>)</operator></expr>)</condition> <block>{
            <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>iter_swap</name></name><argument_list>(<argument><expr><operator>--</operator><name>m1</name></expr></argument>, <argument><expr><name>m2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>++</operator><name>m2</name></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>reverse</name></name><argument_list>(<argument><expr><name>first1</name></expr></argument>, <argument><expr><name>m1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>reverse</name></name><argument_list>(<argument><expr><name>first1</name></expr></argument>, <argument><expr><name>last1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>reverse</name></name><argument_list>(<argument><expr><name>m2</name></expr></argument>, <argument><expr><name>last2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>reverse</name></name><argument_list>(<argument><expr><name>first2</name></expr></argument>, <argument><expr><name>last2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><operator>!</operator><name>result</name></expr>;</return>
}</block></function>




<comment type="line">//numeric_law</comment>
<comment type="line">//--------------------------------------------</comment>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>constexpr</specifier> <type><name>bool</name></type> <name>ODD</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>x</name> <operator>%</operator> <literal type="number">2</literal> <operator>!=</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>

<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>constexpr</specifier> <type><name>bool</name></type> <name>EVEN</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><name>x</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="line">//æå¤§å¬ç´æ°</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>T</name></type> <name>GCD</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>GCD</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>GCD</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <return>return <expr><ternary><condition><expr><operator>(</operator><operator>!</operator><name>y</name><operator>)</operator></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><call><name>GCD</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>x</name> <operator>%</operator> <name>y</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>

<comment type="line">//æå°å¬åæ°</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>T</name></type> <name>LCM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>LCM</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <if>if <condition>(<expr><name>y</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><call><name>LCM</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><operator>-</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <return>return <expr><name>x</name> <operator>*</operator> <operator>(</operator><name>y</name> <operator>/</operator> <call><name>GCD</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
}</block></function>

<comment type="line">//ax + by = gcd(a, b)</comment>
<comment type="line">//x,yãå¤æ°ã«æ ¼ç´ããã</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>T</name></type> <name>EXTGCD</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>T</name></type> <name>d</name> <init>= <expr><call><name>EXTGCD</name><argument_list>(<argument><expr><operator>-</operator><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>-</operator><name>x</name></expr>;</expr_stmt>
        <return>return <expr><name>d</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>T</name></type> <name>d</name> <init>= <expr><call><name>EXTGCD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>-</operator><name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <operator>-</operator><name>y</name></expr>;</expr_stmt>
        <return>return <expr><name>d</name></expr>;</return>
    }</block></then></if>
    <if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>a</name></expr>;</return>
    }</block></then> <else>else <block>{
        <decl_stmt><decl><type><name>T</name></type> <name>d</name> <init>= <expr><call><name>EXTGCD</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name> <operator>%</operator> <name>b</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>T</name></type> <name>t</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <name>t</name> <operator>-</operator> <operator>(</operator><name>a</name> <operator>/</operator> <name>b</name><operator>)</operator> <operator>*</operator> <name>y</name></expr>;</expr_stmt>
        <return>return <expr><name>d</name></expr>;</return>
    }</block></else></if>
}</block></function>

<comment type="line">//mã®ä¸çã§ã®aã®éå</comment>
<comment type="line">//gce(a, m) = 1</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>T</name></type> <name>INV_MOD</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>m</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>T</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>EXTGCD</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>(</operator><name>x</name> <operator>+</operator> <name>m</name><operator>)</operator> <operator>%</operator> <name>m</name></expr>;</return>
}</block></function>

<comment type="line">//ç´ æ°</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>bool</name></type> <name>ISPRIME</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>x</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <for>for <control>(<init><decl><type><name>T</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>x</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><if>if <condition>(<expr><name>x</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<comment type="line">//ç´ æ°ãtrueã¨ãã¦è¿ã</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>class</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>VB</name></type> <name>ERATOSTHENES</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>VB</name></type> <name>arr</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>T</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>arr</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
            <for>for <control>(<init><decl><type><name>T</name></type> <name>j</name> <init>= <expr><name>i</name> <operator>*</operator> <literal type="number">2LL</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>arr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></for>
    <return>return <expr><name>arr</name></expr>;</return>
}</block></function>

<comment type="line">// a &lt;= x &lt; b ã®ç´ æ°ãè¿ã</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name>VB</name></type> <name>ERATOSTHENES</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>VB</name></type> <name>small</name> <init>= <expr><call><name>ERATOSTHENES</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>VB</name></type> <name>prime</name><argument_list>(<argument><expr><name>b</name> <operator>-</operator> <name>a</name></expr></argument>, <argument><expr><literal type="boolean">true</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>T</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>b</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>small</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><then> <block>{
            <for>for <control>(<init><decl><type><name>T</name></type> <name>j</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><literal type="number">2LL</literal></expr></argument>, <argument><expr><operator>(</operator><name>a</name> <operator>+</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>i</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>b</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr>)</control> <block>{
                <expr_stmt><expr><name><name>prime</name><index>[<expr><name>j</name> <operator>-</operator> <name>a</name></expr>]</index></name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
            }</block></for>
        }</block></then></if>
    }</block></for>

    <return>return <expr><name>prime</name></expr>;</return>
}</block></function>

<comment type="line">//nã®ç´æ°</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>DIVISOR</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>T</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>n</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>n</name> <operator>/</operator> <name>i</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>n</name> <operator>/</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></then></if>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>v</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>v</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>v</name></expr>;</return>
}</block></function>

<comment type="line">//nã¾ã§ã®ãã¹ã¦ã®ç´æ°</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>DIVISOR_ALL</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>res</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>T</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>T</name></type> <name>j</name> <init>= <expr><name>i</name></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>i</name></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>res</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
    <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<comment type="line">//ç´ å æ°åè§£</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>FACTORIZATION</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ans</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>T</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>*</operator> <name>i</name> <operator>&lt;=</operator> <name>x</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name>x</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>T</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>x</name> <operator>%</operator> <name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{
                <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>x</name> <operator>/=</operator> <name>i</name></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>
    <if>if <condition>(<expr><name>x</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name><name>ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<comment type="line">//N^P (mod M)</comment>
<function><type><name>LL</name></type> <name>POW_MOD</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>N</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>P</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>M</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>LL</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>P</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
        <if>if <condition>(<expr><name>P</name> <operator>&amp;</operator> <literal type="number">1LL</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>(</operator><name>ret</name> <operator>*</operator> <name>N</name><operator>)</operator> <operator>%</operator> <name>M</name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name>N</name> <operator>=</operator> <operator>(</operator><name>N</name> <operator>*</operator> <name>N</name><operator>)</operator> <operator>%</operator> <name>M</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>P</name> <operator>&gt;&gt;=</operator> <literal type="number">1LL</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<comment type="line">//çµã¿åããåæ°</comment>
<function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>T</name></type> <name>NCR</name><parameter_list>(<parameter><decl><type><name>T</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>n</name> <operator>-</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>r</name> <operator>=</operator> <name>n</name> <operator>-</operator> <name>r</name></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>T</name></type> <name>ans</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>T</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>ans</name></expr>;</return>
}</block></function>

<comment type="line">//çµã¿åããåæ° (mod M)</comment>
<function><type><name>LL</name></type> <name>NCR_MOD</name><parameter_list>(<parameter><decl><type><name>LL</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>r</name></decl></parameter>, <parameter><decl><type><name>LL</name></type> <name>M</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>r</name> <operator>&gt;</operator> <name>n</name> <operator>-</operator> <name>r</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><call><name>NCR_MOD</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <name>r</name></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>LL</name></type> <name>numerator</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt> <comment type="line">//åå­</comment>
    <decl_stmt><decl><type><name>LL</name></type> <name>denominator</name> <init>= <expr><literal type="number">1LL</literal></expr></init></decl>;</decl_stmt> <comment type="line">//åæ¯</comment>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name>numerator</name> <operator>*=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>numerator</name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>denominator</name> <operator>*=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>denominator</name> <operator>%=</operator> <name>M</name></expr>;</expr_stmt>
    }</block></for>
    <return>return <expr><name>numerator</name> <operator>*</operator> <call><name>POW_MOD</name><argument_list>(<argument><expr><name>denominator</name></expr></argument>, <argument><expr><name>M</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>M</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>M</name></expr>;</return>
}</block></function>

<comment type="line">//confirmation</comment>
<comment type="line">//--------------------------------------------</comment>

<comment type="line">//clear memory</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLR</name><parameter_list>(<parameter><type><name>arr</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((arr), (d),sizeof(arr))</cpp:value></cpp:define>

<comment type="line">//debug</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; " (L" &lt;&lt; __LINE__ &lt;&lt; ")" &lt;&lt; " "  &lt;&lt; endl;</cpp:value></cpp:define>


<comment type="line">//2019-04-14</comment>
<comment type="line">//~~~~~~~~~~~~~~~~~~~~~_(ï¼¾ï½ï¼¾ ï½£ â )_~~~~~~~~~~~~~~~~~~~~~</comment>

<struct>struct <name>UnionFind</name> <block>{<public type="default">

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>par</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>sizes</name></decl>;</decl_stmt>

    <constructor><name>UnionFind</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>
            <member_init_list>: <call><name>par</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call>, <call><name>sizes</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> </member_init_list><block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
            <expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        }</block></for>
    }</block></constructor>

    <function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><ternary><condition><expr><name>x</name> <operator>==</operator> <name><name>par</name><index>[<expr><name>x</name></expr>]</index></name></expr> ?</condition><then> <expr><name>x</name></expr> </then><else>: <expr><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><type><name>void</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
        <if>if <condition>(<expr><name><name>sizes</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <name><name>sizes</name><index>[<expr><name>y</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><name><name>par</name><index>[<expr><name>y</name></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>sizes</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+=</operator> <name><name>sizes</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></function>

    <function><type><name>bool</name></type> <name>same</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>get_size</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><name><name>sizes</name><index>[<expr><call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>all_same</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name>bool</name></type> <name>good</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name><name>par</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><if>if <condition>(<expr><call><name>find</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>good</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if></block></for>
        <return>return <expr><name>good</name></expr>;</return>
    }</block></function>

    <function><type><name>int</name></type> <name>get_connectivity</name><parameter_list>()</parameter_list> <block>{
        <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>s</name></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name> <init>= <expr><call><name><name>par</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>s</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><call><name>find</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
        <return>return <expr><call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</return>
    }</block></function>

</public>}</block>;</struct>

<typedef>typedef <type><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>TP</name>;</typedef>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{

    <decl_stmt><decl><type><name>LL</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>x</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>y</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>i</argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>c</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>k</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>TP</name></expr></argument>&gt;</argument_list></name></type> <name>cands</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name><name>cands</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_tuple</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>LL</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>LL</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
            <if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name>j</name></expr>)</condition><then> <block>{
                <decl_stmt><decl><type><name>LL</name></type> <name>cost</name> <init>= <expr><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><call><name>abs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>cands</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_tuple</name><argument_list>(<argument><expr><name>cost</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
        }</block></for>
    }</block></for>

    <expr_stmt><expr><call><name>SORT</name><argument_list>(<argument><expr><name>cands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>LL</name></type> <name>sumV</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>ans_v</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>ans_edges</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>already</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>UnionFind</name></type> <name>UF</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>cands</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <decl_stmt><decl><type><name>auto</name></type> <name>t</name> <init>= <expr><name><name>cands</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>cost</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">0</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>which</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">1</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>my</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>LL</name></type> <name>you</name> <init>= <expr><call><name><name>get</name><argument_list type="generic">&lt;<argument><expr><literal type="number">3</literal></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><name>which</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>already</name><index>[<expr><call><name><name>UF</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <expr_stmt><expr><name><name>already</name><index>[<expr><call><name><name>UF</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ans_v</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sumV</name> <operator>+=</operator> <name>cost</name></expr>;</expr_stmt>
        }</block></then></if>
        <if>if <condition>(<expr><name>which</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><call><name><name>UF</name><operator>.</operator><name>same</name></name><argument_list>(<argument><expr><name>my</name></expr></argument>, <argument><expr><name>you</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <if>if <condition>(<expr><name><name>already</name><index>[<expr><call><name><name>UF</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>already</name><index>[<expr><call><name><name>UF</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>you</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
            <decl_stmt><decl><type><name>bool</name></type> <name>good</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
            <if>if <condition>(<expr><name><name>already</name><index>[<expr><call><name><name>UF</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>good</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
            <if>if <condition>(<expr><name><name>already</name><index>[<expr><call><name><name>UF</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>you</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>good</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>sumV</name> <operator>+=</operator> <name>cost</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>UF</name><operator>.</operator><name>unite</name></name><argument_list>(<argument><expr><name>my</name></expr></argument>, <argument><expr><name>you</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>already</name><index>[<expr><call><name><name>UF</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>good</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>ans_edges</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>my</name></expr></argument>, <argument><expr><name>you</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></for>

    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>sumV</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>


    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>ans_v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ans_v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld "</literal></expr></argument>, <argument><expr><name><name>ans_v</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name><name>ans_edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>ans_edges</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld\n"</literal></expr></argument>, <argument><expr><name><name>ans_edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ans_edges</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
 










































</unit>
