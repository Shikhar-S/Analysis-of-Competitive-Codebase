<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29568571_64015336.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cctype&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;chrono&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_USE_MATH_DEFINES</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tuple&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>m</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(m);i&lt;(n);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR(i,0,n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(v).begin(),(v).end()</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>LINF</name> <init>= <expr><literal type="number">0x3f3f3f3f3f3f3f3fLL</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-8</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt> <comment type="line">// 998244353;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>dy</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>, <decl><type ref="prev"/><name><name>dx</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>IOSetup</name> <block>{<public type="default">
  <constructor><name>IOSetup</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></constructor>
</public>}</block> <decl><name>iosetup</name></decl>;</struct>
<comment type="block">/*-------------------------------------------------*/</comment>
<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>l</name> <operator>&gt;&gt;</operator> <name>r</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>dp</name><index>[<expr><literal type="number">31</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>dp</name><index>[<expr><literal type="number">30</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>L</name> <init>= <expr><name>l</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>R</name> <init>= <expr><name>r</name> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <macro><name>REP</name><argument_list>(<argument>j</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>k</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>m</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>x</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <block>{
      <comment type="line">// 0 1</comment>
      <decl_stmt><decl><type><name>bool</name></type> <name>ok</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nx_j</name> <init>= <expr><name>j</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>L</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
      <decl_stmt><decl><type><name>int</name></type> <name>nx_k</name> <init>= <expr><name>k</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nx_k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
      <decl_stmt><decl><type><name>int</name></type> <name>nx_m</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>L</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nx_m</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
      <decl_stmt><decl><type><name>int</name></type> <name>nx_x</name> <init>= <expr><name>x</name></expr></init></decl>;</decl_stmt>
      <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>R</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>nx_j</name></expr>]</index><index>[<expr><name>nx_k</name></expr>]</index><index>[<expr><name>nx_m</name></expr>]</index><index>[<expr><name>nx_x</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
      <comment type="line">// 1 0</comment>
      <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nx_j</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>L</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nx_j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><name>nx_k</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>R</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><name>nx_m</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>L</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><name>nx_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nx_x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>nx_j</name></expr>]</index><index>[<expr><name>nx_k</name></expr>]</index><index>[<expr><name>nx_m</name></expr>]</index><index>[<expr><name>nx_x</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
      <comment type="line">// 0 0</comment>
      <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>nx_j</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>j</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>L</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><name>nx_k</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>k</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nx_k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><name>nx_m</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>m</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>L</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></block></then></if>
      <expr_stmt><expr><name>nx_x</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>R</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>nx_x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block></then></if>
      <if>if <condition>(<expr><name>ok</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>nx_j</name></expr>]</index><index>[<expr><name>nx_k</name></expr>]</index><index>[<expr><name>nx_m</name></expr>]</index><index>[<expr><name>nx_x</name></expr>]</index></name> <operator>+=</operator> <name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
    }</block>
  }</block></for>
  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <macro><name>REP</name><argument_list>(<argument>j</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>k</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>m</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <macro><name>REP</name><argument_list>(<argument>x</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro> <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name><name>dp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
