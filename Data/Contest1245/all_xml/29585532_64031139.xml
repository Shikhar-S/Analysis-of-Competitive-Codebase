<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29585532_64031139.cpp"><comment type="line">//be name khoda</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>maxn</name> <init>= <expr><literal type="number">2020</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>x</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name><name>c</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>k</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ll</name></type> <name><name>par</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>siz</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>minn</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edg_ans</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ll</name></type> <name>cost</name></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>get_par</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>)</parameter_list>
<block>{
    <while>while<condition>(<expr><name>v</name> <operator>!=</operator> <name><name>par</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition>
        <block type="pseudo"><expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>par</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt></block></while>
    <return>return <expr><name>v</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>dsu</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>u</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>w</name></decl></parameter>)</parameter_list>
<block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>u1</name> <init>= <expr><name>u</name></expr></init></decl>, <decl><type ref="prev"/><name>v1</name> <init>= <expr><name>v</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>get_par</name><argument_list>(<argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_par</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if>if<condition>(<expr><name>u</name> <operator>==</operator> <name>v</name></expr>)</condition><then> <block type="pseudo"><return>return;</return></block></then></if>
    <if>if<condition>(<expr><name><name>siz</name><index>[<expr><name>u</name></expr>]</index></name> <operator>&gt;</operator> <name><name>siz</name><index>[<expr><name>v</name></expr>]</index></name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>

    <if>if<condition>(<expr><name><name>c</name><index>[<expr><name><name>minn</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name><operator>+</operator><name><name>c</name><index>[<expr><name><name>minn</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name> <operator>&gt;</operator> <call><name>min</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name><name>minn</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name><name>minn</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>w</name></expr>)</condition><then>
    <block>{
        <expr_stmt><expr><name><name>par</name><index>[<expr><name>u</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>siz</name><index>[<expr><name>v</name></expr>]</index></name> <operator>+=</operator> <name><name>siz</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name><name>c</name><index>[<expr><name><name>minn</name><index>[<expr><name>u</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <name><name>c</name><index>[<expr><name><name>minn</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name></expr>)</condition><then>
            <block type="pseudo"><expr_stmt><expr><name><name>minn</name><index>[<expr><name>v</name></expr>]</index></name> <operator>=</operator> <name><name>minn</name><index>[<expr><name>u</name></expr>]</index></name></expr>;</expr_stmt></block></then></if>
        <expr_stmt><expr><call><name><name>edg_ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><name>u1</name></expr>,<expr><name>v1</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
    }</block></then></if>
}</block></function>

<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>edge</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator> <name><name>x</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>par</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>siz</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator> <name><name>c</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name><name>minn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>}</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator> <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block></for>

    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><call><name><name>edge</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><block>{<expr><operator>(</operator><operator>(</operator><name><name>k</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><name><name>k</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator><operator>*</operator><operator>(</operator><call><name>fabs</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>x</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>-</operator><name><name>y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>, <expr><block>{<expr><name>i</name></expr>,<expr><name>j</name></expr>}</block></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name><name>edge</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name><name>edge</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name><name>edge</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><expr_stmt><expr><call><name>dsu</name><argument_list>(<argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>first</name></name></expr></argument>, <argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>second</name><operator>.</operator><name>second</name></name></expr></argument>, <argument><expr><name><name>edge</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>

    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>no_ans</name></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>v</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>v</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>v</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><if>if<condition>(<expr><name><name>par</name><index>[<expr><name>v</name></expr>]</index></name> <operator>==</operator> <name>v</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>c</name><index>[<expr><name><name>minn</name><index>[<expr><name>v</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>no_ans</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><name><name>minn</name><index>[<expr><name>v</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></block></for>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator> <name>cost</name> <operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator> <call><name><name>no_ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name> <range>: <expr><name>no_ans</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator> <name>v</name> <operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator> <call><name><name>edg_ans</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call> <operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>e</name> <range>: <expr><name>edg_ans</name></expr></range></decl></init>)</control>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>first</name></name> <operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>second</name></name> <operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt></block></for>
}</block></function></unit>
