<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29585428_64005778.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><name>int</name></type> <name>A</name></decl>, <decl><type ref="prev"/><name>B</name></decl>, <decl><type ref="prev"/><name>C</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dp</name><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>bt</name><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">105</literal></expr>]</index><index>[<expr><literal type="number">105</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>serc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name>a</name> <operator>&gt;</operator> <name>A</name> <operator>||</operator> <name>b</name> <operator>&gt;</operator> <name>B</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1000000</literal></expr>;</return></block></then></if>
  <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>N</name></expr>)</condition><then> <block>{
    <if>if <condition>(<expr><name>a</name> <operator>!=</operator> <name>A</name> <operator>||</operator> <name>b</name> <operator>!=</operator> <name>B</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1000000</literal></expr>;</return></block></then></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>
  <if>if <condition>(<expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>ret</name> <init>= <expr><name><name>dp</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1000000</literal></expr>;</expr_stmt>
  <if>if <condition>(<expr><name>a</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>A</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><call><name>serc</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <literal type="char">'S'</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <name>ret</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
  <if>if <condition>(<expr><name>b</name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;=</operator> <name>B</name></expr>)</condition><then> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><call><name>serc</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <name>ret</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
  <decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><call><name>serc</name><argument_list>(<argument><expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name><name>str</name><index>[<expr><name>x</name></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
  }</block></then></if>
  <if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <name>ret</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bt</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>tc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>tc</name><operator>--</operator></expr>)</condition> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d %d %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>A</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>B</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>C</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>A</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>B</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{
          <expr_stmt><expr><name><name>dp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></for>
      }</block></for>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name>serc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>ans</name> <operator>&gt;=</operator> <operator>(</operator><name>N</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"YES\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <if>if <condition>(<expr><name><name>bt</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"R"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>a</name><operator>++</operator></expr>;</expr_stmt></block></then>
        <elseif>else <if>if <condition>(<expr><name><name>bt</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>a</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"P"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>b</name><operator>++</operator></expr>;</expr_stmt></block></then></if></elseif>
        <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"S"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
      }</block></for>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"NO\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></while>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
