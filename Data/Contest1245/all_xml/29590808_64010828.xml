<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29590808_64010828.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fo</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i = a; i &lt; ll(b); i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fr</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i = b - 1; i &gt;= ll(a); i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>al</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>begin(x), end(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ral</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>rbegin(x), rend(x)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>I</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ll x; cin &gt;&gt; x;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>this</name></cpp:macro> <cpp:value>(*this)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ar</name></cpp:macro> <cpp:value>array</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vc</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name></cpp:macro> <cpp:value>resize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>is</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vl</name></cpp:macro> <cpp:value>vc&lt;ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>popcnt</name></cpp:macro> <cpp:value>__builtin_popcountll</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sp</name></cpp:macro> <cpp:value>&lt;&lt;" "&lt;&lt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name><name>std</name><operator>::</operator><name>placeholders</name></name>;</namespace></using>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using>using <name>pa</name> <init>= <type><name><name>array</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>ve</name> <init>= <type><name><name>ar</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><literal type="number">3000</literal></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>mt</name> <init>= <type><name><name>ar</name><argument_list type="generic">&lt;<argument><expr><name>ve</name></expr></argument>,<argument><expr><literal type="number">3000</literal></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pr</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>bt</name> <init>= <type><name><name>bitset</name><argument_list type="generic">&lt;<argument><expr><literal type="number">64</literal></expr></argument>&gt;</argument_list></name></type></init>;</using>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../debug.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cerr</name></cpp:macro> <cpp:value>if(false) cerr</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>M</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>, <decl><type ref="prev"/><name>inf</name> <init>= <expr><literal type="number">1e18</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><argument_list>(<argument><expr><name>auto</name><operator>&amp;</operator> <name>is</name></expr></argument>, <argument><expr><name>auto</name> <operator>&amp;</operator><name>v</name></expr></argument>)</argument_list> <argument_list>{
  for <argument><expr><operator>(</operator><name>auto</name> <operator>&amp;</operator><name>x</name> <operator>:</operator> <name>v</name><operator>)</operator> <block>{
    <expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;
  }</block></expr></argument>
  <return>return <expr><name>is</name></expr>;</return></argument_list></decl></decl_stmt>
}
int <function><name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>exceptions</name></name><argument_list>(<argument><expr><name><name>ios</name><operator>::</operator><name>badbit</name></name> <operator>|</operator> <name><name>ios</name><operator>::</operator><name>failbit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>I</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
    <expr_stmt><expr><call><name>I</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vl</name></type> <name>a</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><literal type="char">'S'</literal></expr>]</index></name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><literal type="char">'R'</literal></expr>]</index></name><operator>&gt;&gt;</operator><name><name>a</name><index>[<expr><literal type="char">'P'</literal></expr>]</index></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>string</name></type> <name>s</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>s</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>vl</name></type> <name>cnt</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name>s</name></expr></range></decl></init>)</control><block>{<expr_stmt><expr><operator>++</operator><name><name>cnt</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>}</block></for>
    <decl_stmt><decl><type><name>string</name></type> <name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>win</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>x</name><range>:<expr><name>s</name></expr></range></decl></init>)</control><block>{
      <decl_stmt><decl><type><name>char</name></type> <name>tar</name><init>=<expr><literal type="char">'E'</literal></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>tar</name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>win</name></expr>;</expr_stmt>
      }</block></then>
      <else>else <block>{
        <for>for<control>(<init><decl><type><name>char</name></type> <name>c</name><range>:<expr><literal type="string">"RPS"</literal><name>s</name></expr></range></decl></init>)</control><block>{
          <if>if<condition>(<expr><name><name>a</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&gt;</operator> <name><name>cnt</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition><then><block>{
            <expr_stmt><expr><name>tar</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
            <break>break;</break>
          }</block></then></if>
        }</block></for>
      }</block></else></if>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tar</name><operator>!=</operator><literal type="char">'E'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator><name><name>cnt</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator><name><name>a</name><index>[<expr><name>tar</name></expr>]</index></name></expr>;</expr_stmt>
      <if>if<condition>(<expr><name>tar</name><operator>==</operator><literal type="char">'S'</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>out</name><operator>+=</operator><literal type="char">'R'</literal></expr>;</expr_stmt>}</block></then></if>
      <if>if<condition>(<expr><name>tar</name><operator>==</operator><literal type="char">'R'</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>out</name><operator>+=</operator><literal type="char">'P'</literal></expr>;</expr_stmt>}</block></then></if>
      <if>if<condition>(<expr><name>tar</name><operator>==</operator><literal type="char">'P'</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>out</name><operator>+=</operator><literal type="char">'S'</literal></expr>;</expr_stmt>}</block></then></if>
    }</block></for>
    <if>if<condition>(<expr><literal type="number">2</literal><operator>*</operator><name>win</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"YES"</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>out</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>}</block></then>
    <else>else<block>{
      <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"NO"</literal><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
    }</block></else></if>
  }</block></while>
}</block></function>
</unit>
