<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1245/all/29616693_64020957.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>X.begin(),X.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro>    <cpp:value>for(int I = A; (I) &lt;= (B); (I)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORW</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(int I = A; (I) &lt; (B);  (I)++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>I</name></type></parameter>,<parameter><type><name>A</name></type></parameter>,<parameter><type><name>B</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>for(int I = A; (I) &gt;= (B); (I)--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>      <cpp:value>memset(X,0,sizeof(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>int(X.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONTAINS</name><parameter_list>(<parameter><type><name>A</name></type></parameter>,<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(A.find(X) != A.end())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro>            <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro>            <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro>             <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro>             <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>signed</name> <name>long</name> <name>long</name></type> <name>slong</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ldouble</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>slong</name></type> <name>INF</name> <init>= <expr><literal type="number">1000000100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ldouble</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>


<struct>struct <name>find_union</name> <block>{<public type="default">
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>S</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>slong</name></expr></argument>&gt;</argument_list></name></type> <name>M</name></decl>;</decl_stmt>

    <constructor><name>find_union</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>slong</name></expr></argument>&gt;</argument_list></name></type> <name>_M</name></decl></parameter>)</parameter_list> <member_init_list>: <call><name>S</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call>, <call><name>M</name><argument_list>(<argument><expr><name>_M</name></expr></argument>)</argument_list></call> </member_init_list><block>{
        <macro><name>FORW</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>n</argument>)</argument_list></macro> <expr_stmt><expr><name><name>S</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    }</block></constructor>

    <function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
        <return>return <expr><ternary><condition><expr><name><name>S</name><index>[<expr><name>a</name></expr>]</index></name> <operator>==</operator> <name>a</name></expr> ?</condition><then> <expr><name>a</name></expr> </then><else>: <expr><operator>(</operator><name><name>S</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>S</name><index>[<expr><name>a</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></else></ternary></expr>;</return>
    }</block></function>

    <function><type><name>bool</name></type> <name>unite</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
        <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>a</name> <operator>==</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
        <if>if <condition>(<expr><name><name>M</name><index>[<expr><name>a</name></expr>]</index></name> <operator>&lt;</operator> <name><name>M</name><index>[<expr><name>b</name></expr>]</index></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name><name>S</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><name><name>S</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
        }</block></else></if>
        <return>return <expr><literal type="boolean">true</literal></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">2020</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>slong</name></type> <name><name>X</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>slong</name></type> <name><name>Y</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>slong</name></type> <name><name>K</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>slong</name></type> <name><name>C</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>read_data</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>FORW</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>, <argument><expr><name>X</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>Y</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>FORW</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>C</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>FORW</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>K</name><operator>+</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>slong</name></type> <name>weight</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>j</name></decl></parameter>)</parameter_list> <block>{
    <decl_stmt><decl><type><name>slong</name></type> <name>dist</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>X</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>X</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>Y</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>Y</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>dist</name> <operator>*</operator> <operator>(</operator><name><name>K</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>K</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>find_union</name></type> <name>F</name><argument_list>(<argument><expr><name>N</name></expr></argument>, <argument><expr><call><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>slong</name></expr></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>C</name></expr></argument>, <argument><expr><name>C</name><operator>+</operator><name>N</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>tuple</name><argument_list type="generic">&lt;<argument><expr><name>slong</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>E</name></decl>;</decl_stmt>
    <macro><name>FORW</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro> <macro><name>FORW</name><argument_list>(<argument>j</argument>,<argument>i+<literal type="number">1</literal></argument>,<argument>N</argument>)</argument_list></macro> <expr_stmt><expr><call><name><name>E</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><call><name>make_tuple</name><argument_list>(<argument><expr><call><name>weight</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>ALL</name><argument_list>(<argument><expr><name>E</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>slong</name></type> <name>edge_w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>built_e</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name><range>: <expr><name>E</name></expr></range></decl></init>)</control> <block>{
        <decl_stmt><decl><type><name>slong</name></type> <name>w</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tie</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>e</name></expr>;</expr_stmt>
        <if>if <condition>(<expr><call><name><name>F</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name><name>F</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <decl_stmt><decl><type><name>slong</name></type> <name>m</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name><name>F</name><operator>.</operator><name>M</name><index>[<expr><call><name><name>F</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>, <argument><expr><name><name>F</name><operator>.</operator><name>M</name><index>[<expr><call><name><name>F</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <name>m</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>built_e</name><operator>.</operator><name>PB</name></name><argument_list>(<argument><expr><call><name>MP</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>F</name><operator>.</operator><name>unite</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>edge_w</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
    }</block></for>

    <decl_stmt><decl><type><name>slong</name></type> <name>node_w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>built</name></decl>;</decl_stmt>
    <macro><name>FORW</name><argument_list>(<argument>i</argument>,<argument><literal type="number">0</literal></argument>,<argument>N</argument>)</argument_list></macro> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><call><name><name>F</name><operator>.</operator><name>find</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if <condition>(<expr><call><name>CONTAINS</name><argument_list>(<argument><expr><name>built</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
        <expr_stmt><expr><call><name><name>built</name><operator>.</operator><name>insert</name></name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>node_w</name> <operator>+=</operator> <name><name>F</name><operator>.</operator><name>M</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>
    }</block>

<comment type="line">//    cout &lt;&lt; "DEBUG: edge_w=" &lt;&lt; edge_w &lt;&lt; " node_w=" &lt;&lt; node_w &lt;&lt; endl;</comment>
    <decl_stmt><decl><type><name>slong</name></type> <name>r</name> <init>= <expr><name>edge_w</name> <operator>+</operator> <name>node_w</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>r</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>SIZE</name><argument_list>(<argument><expr><name>built</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>x</name><range>: <expr><name>built</name></expr></range></decl></init>)</control> <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>SIZE</name><argument_list>(<argument><expr><name>built_e</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>auto</name></type> <name>e</name><range>: <expr><name>built_e</name></expr></range></decl></init>)</control> <block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>X</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="string">" "</literal> <operator>&lt;&lt;</operator> <name><name>e</name><operator>.</operator><name>Y</name></name><operator>+</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></for>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name>read_data</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
