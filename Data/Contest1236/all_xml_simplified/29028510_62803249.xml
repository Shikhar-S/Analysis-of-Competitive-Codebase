include directive file pragma directive name name name literal name define directive macro name value define directive macro name value define directive macro name value define directive macro name value define directive macro name value using namespace name typedef type name name name decl_stmt decl type name name decl type ref prev name decl type ref prev name decl_stmt decl type name name argument_list type generic argument expr name name name index expr literal type number decl type ref prev name name index expr literal type number function type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr name name index expr name operator call name argument_list operator literal type number decl_stmt decl type name name init expr operator literal type number operator literal type number operator while condition expr name operator name block decl_stmt decl type name name init expr operator name operator name operator operator literal type number if condition expr name name index expr name index expr name operator name then block type pseudo expr_stmt expr name operator name operator literal type number else block type pseudo expr_stmt expr name operator name name index expr name index expr name operator expr name operator name operator literal type number return expr name function type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr name name index expr name operator call name argument_list operator literal type number decl_stmt decl type name name init expr operator literal type number operator literal type number operator while condition expr name operator name block decl_stmt decl type name name init expr operator name operator name operator operator literal type number if condition expr name name index expr name index expr name operator name then block type pseudo expr_stmt expr name operator name operator literal type number else block type pseudo expr_stmt expr name operator name name index expr name index expr name operator expr name operator name operator literal type number return expr name function type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr name name index expr name operator call name argument_list operator literal type number decl_stmt decl type name name init expr operator operator literal type number operator literal type number operator while condition expr name operator name block decl_stmt decl type name name init expr operator name operator name operator operator literal type number if condition expr name name index expr name index expr name operator name then block type pseudo expr_stmt expr name operator name operator literal type number else block type pseudo expr_stmt expr name operator name name index expr name index expr name operator expr name operator name operator literal type number return expr name function type name name parameter_list parameter decl type name name parameter decl type name name block decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr name name index expr name operator call name argument_list operator literal type number decl_stmt decl type name name init expr operator operator literal type number operator literal type number operator while condition expr name operator name block decl_stmt decl type name name init expr operator name operator name operator operator literal type number if condition expr name name index expr name index expr name operator name then block type pseudo expr_stmt expr name operator name operator literal type number else block type pseudo expr_stmt expr name operator name name index expr name index expr name operator expr name operator name operator literal type number return expr name function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr name operator name operator name operator name decl_stmt decl type name name init expr literal type number operator name operator name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator literal type number incr expr operator name block expr_stmt expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list expr_stmt expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list decl_stmt decl type name name init expr literal type number decl type ref prev name init expr name decl type ref prev name init expr literal type number decl type ref prev name init expr name comment type line decl_stmt decl type name name init expr literal type number while condition expr name operator name operator name operator name block if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name if condition expr name operator operator literal type number operator literal type number operator then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr name operator literal type number expr_stmt expr name operator operator name operator name operator literal type number operator expr_stmt expr operator name expr_stmt expr name operator literal type number elseif if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name if condition expr name operator operator literal type number operator literal type number operator then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr name operator literal type number expr_stmt expr name operator operator name operator name operator literal type number operator expr_stmt expr name operator expr_stmt expr name operator literal type number else block if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name if condition expr name operator operator operator literal type number operator literal type number operator then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr name operator literal type number expr_stmt expr name operator operator name operator name operator literal type number operator expr_stmt expr operator name expr_stmt expr name operator literal type number else block decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name if condition expr name operator operator operator literal type number operator literal type number operator then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr name operator literal type number expr_stmt expr name operator operator name operator name operator literal type number operator expr_stmt expr name operator expr_stmt expr name operator literal type number if condition expr name operator literal type number then block expr_stmt expr name operator literal type string else block expr_stmt expr name operator literal type string return expr literal type number 
