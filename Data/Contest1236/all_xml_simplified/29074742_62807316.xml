include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file include directive file using namespace name function specifier type name name parameter_list block decl_stmt decl type specifier name name init expr literal type number decl type ref prev name while condition expr name operator call name argument_list operator expr name name argument_list type generic argument expr literal type char operator name literal type char block type pseudo empty_stmt do block expr_stmt expr name operator operator name operator literal type number operator operator operator name operator literal type number operator condition expr name operator call name argument_list operator expr name operator literal type char operator name operator literal type char return expr name decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name decl type ref prev name decl type ref prev name decl type ref prev name function type name name parameter_list block decl_stmt decl type name name init expr call name argument_list decl type ref prev name init expr call name argument_list decl type ref prev name init expr call name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name init expr call name argument_list decl type ref prev name init expr call name argument_list expr_stmt expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name expr_stmt expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name expr_stmt expr call name name operator name argument_list argument expr call name argument_list argument expr operator name argument expr operator name expr_stmt expr call name name operator name argument_list argument expr call name argument_list argument expr operator name argument expr operator name decl_stmt decl type name name init expr literal type number decl type ref prev name init expr name decl type ref prev name init expr literal type number decl type ref prev name init expr name decl_stmt decl type name name init expr literal type number while condition expr literal type boolean block if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name if condition expr name operator call name name operator name argument_list operator name operator operator name operator operator name operator name operator name operator operator name operator operator name operator name then block decl_stmt decl type name name init expr name operator operator name operator operator name for control init decl type name name init expr name condition expr name operator name incr expr name operator block for control init decl type name name init expr name condition expr name operator name incr expr name operator block if condition expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name operator call name name operator name argument_list then block return expr call name argument_list argument expr literal type string operator expr literal type number expr_stmt expr name operator name operator literal type number expr_stmt expr name operator expr_stmt expr name operator literal type number elseif if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name if condition expr name operator call name name operator name argument_list operator name operator operator name operator operator name operator name operator name operator operator name operator operator name operator name then block decl_stmt decl type name name init expr name operator operator name operator operator name for control init decl type name name init expr name condition expr name operator name incr expr name operator block for control init decl type name name init expr name condition expr name operator name incr expr name operator block if condition expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name operator call name name operator name argument_list then block return expr call name argument_list argument expr literal type string operator expr literal type number expr_stmt expr name operator name operator literal type number expr_stmt expr name operator expr_stmt expr name operator literal type number elseif if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name name operator name argument_list argument expr call name argument_list argument expr operator name argument expr operator name if condition expr name operator call name name operator name argument_list operator name operator operator name operator operator name operator operator name operator operator name operator operator name operator operator name operator name then block decl_stmt decl type name name init expr operator name operator operator name operator operator name for control init decl type name name init expr name condition expr name operator name incr expr name operator block for control init decl type name name init expr name condition expr name operator name incr expr name operator block if condition expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name operator call name name operator name argument_list then block return expr call name argument_list argument expr literal type string operator expr literal type number expr_stmt expr name operator name operator literal type number expr_stmt expr name operator expr_stmt expr name operator literal type number elseif if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name name operator name argument_list argument expr call name argument_list argument expr operator name argument expr operator name if condition expr name operator call name name operator name argument_list operator operator name operator operator name operator operator name operator name operator operator name operator operator name operator operator name operator name then block decl_stmt decl type name name init expr operator name operator operator name operator operator name for control init decl type name name init expr name condition expr name operator name incr expr name operator block for control init decl type name name init expr name condition expr name operator name incr expr name operator block if condition expr call name name operator name argument_list argument expr call name argument_list argument expr name argument expr name operator call name name operator name argument_list then block return expr call name argument_list argument expr literal type string operator expr literal type number expr_stmt expr name operator name operator literal type number expr_stmt expr name operator expr_stmt expr name operator literal type number if condition expr name operator name operator name operator name then block type pseudo break expr_stmt expr call name argument_list argument expr literal type string return expr literal type number 
