include directive file define directive macro name value using namespace name typedef type name name name function type name name parameter_list block decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name init expr call name argument_list while condition expr name name argument_list type generic argument expr literal type char operator name literal type char block if condition expr name operator literal type char then block type pseudo expr_stmt expr name operator operator name expr_stmt expr name operator call name argument_list while condition expr name operator literal type char operator name operator literal type char block type pseudo expr_stmt expr name operator name operator literal type number operator name operator literal type char operator expr name operator call name argument_list return expr name operator name decl_stmt decl type name name decl type ref prev name decl type ref prev name decl_stmt decl type name name name index init expr block expr literal type number expr literal type number expr literal type number expr operator literal type number decl type ref prev name name index init expr block expr literal type number expr literal type number expr operator literal type number expr literal type number decl_stmt decl type name name argument_list type generic argument expr name name name index expr literal type number decl type ref prev name name index expr literal type number function type name name parameter_list block expr_stmt expr name operator call name argument_list operator expr name operator call name argument_list operator expr name operator call name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block decl_stmt decl type name name init expr call name argument_list decl type ref prev name init expr call name argument_list expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo if condition expr operator name name index expr name operator call name argument_list then block type pseudo expr_stmt expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo if condition expr operator name name index expr name operator call name argument_list then block type pseudo expr_stmt expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list function type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name block if condition expr name name index expr name operator call name argument_list then block type pseudo return expr operator literal type number if condition expr name operator literal type number then block comment type line decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list argument expr name operator name name index expr name operator call name argument_list if condition expr name operator literal type number operator name operator name name index expr name operator call name argument_list operator name name index expr name index expr name operator name then block type pseudo return expr name name index expr name index expr name else block type pseudo return expr operator literal type number else block decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list argument expr name operator name name index expr name operator call name argument_list expr_stmt expr operator name if condition expr name operator literal type number operator name operator name name index expr name operator call name argument_list operator name name index expr name index expr name operator name then block type pseudo return expr name name index expr name index expr name else block type pseudo return expr operator literal type number function type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name block if condition expr name name index expr name operator call name argument_list then block type pseudo return expr operator literal type number if condition expr name operator literal type number then block comment type line decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list argument expr name operator name name index expr name operator call name argument_list if condition expr name operator literal type number operator name operator name name index expr name operator call name argument_list operator name name index expr name index expr name operator name then block type pseudo return expr name name index expr name index expr name else block type pseudo return expr operator literal type number else block decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list argument expr name operator name name index expr name operator call name argument_list expr_stmt expr operator name if condition expr name operator literal type number operator name operator name name index expr name operator call name argument_list operator name name index expr name index expr name operator name then block type pseudo return expr name name index expr name index expr name else block type pseudo return expr operator literal type number function type name name parameter_list block decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr name operator literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr name operator literal type number decl_stmt decl type name name init expr literal type number for control init condition incr block comment type line if condition expr name operator literal type number then block decl_stmt decl type name name init expr name operator literal type number decl type ref prev name init expr name if condition expr name operator literal type number operator name operator literal type number then block type pseudo expr_stmt expr name operator literal type number comment type line decl_stmt decl type name name init expr name operator literal type number if condition expr name operator name then block type pseudo break decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name operator literal type number argument expr name argument expr literal type number if condition expr name operator operator literal type number then block type pseudo expr_stmt expr name operator name operator literal type number operator expr name operator name if condition expr name operator name then block type pseudo break expr_stmt expr name operator literal type number operator expr operator name if condition expr name operator name operator literal type number then block type pseudo expr_stmt expr name operator literal type number operator operator name operator name operator else block if condition expr name operator literal type number operator name operator literal type number then block expr_stmt expr operator name break elseif if condition expr name operator literal type number then block decl_stmt decl type name name init expr name decl type ref prev name init expr name operator literal type number decl_stmt decl type name name init expr name operator literal type number if condition expr name operator name then block type pseudo break decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name operator literal type number argument expr name argument expr literal type number if condition expr name operator operator literal type number then block type pseudo expr_stmt expr name operator name operator literal type number operator expr name operator name if condition expr name operator name then block type pseudo break expr_stmt expr name operator literal type number operator expr operator name if condition expr name operator name operator literal type number then block type pseudo expr_stmt expr name operator literal type number operator operator name operator name operator else block expr_stmt expr operator name break elseif if condition expr name operator literal type number then block decl_stmt decl type name name init expr name operator literal type number decl type ref prev name init expr name decl_stmt decl type name name init expr name operator literal type number if condition expr name operator name then block type pseudo break decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name argument expr name operator literal type number argument expr operator literal type number if condition expr name operator operator literal type number then block type pseudo expr_stmt expr name operator name operator literal type number operator expr name operator name if condition expr name operator name then block type pseudo break expr_stmt expr name operator literal type number operator expr operator name if condition expr name operator name operator literal type number then block type pseudo expr_stmt expr name operator literal type number operator operator name operator name operator else block expr_stmt expr operator name break else block decl_stmt decl type name name init expr name decl type ref prev name init expr name operator literal type number decl_stmt decl type name name init expr name operator literal type number if condition expr name operator name then block type pseudo break decl_stmt decl type name name init expr call name argument_list argument expr name argument expr name argument expr name operator literal type number argument expr operator literal type number if condition expr name operator operator literal type number then block type pseudo expr_stmt expr name operator name operator literal type number operator expr name operator name if condition expr name operator name then block type pseudo break expr_stmt expr name operator literal type number operator expr operator name if condition expr name operator name operator literal type number then block type pseudo expr_stmt expr name operator literal type number operator operator name operator name operator else block expr_stmt expr operator name break comment type line if condition expr name operator literal type number operator name operator name operator name then block type pseudo expr_stmt expr call name argument_list argument expr literal type string else block type pseudo expr_stmt expr call name argument_list argument expr literal type string function type name name parameter_list block expr_stmt expr call name argument_list expr_stmt expr call name argument_list return expr literal type number 
