include directive file using namespace name typedef type name name name decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type name name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl_stmt decl type name name decl_stmt decl type name name name index expr literal type number init expr block expr literal type number expr literal type number expr literal type number expr literal type number expr operator literal type number decl_stmt decl type name name name index expr literal type number init expr block expr literal type number expr literal type number expr literal type number expr operator literal type number expr literal type number decl_stmt decl type name name argument_list type generic argument expr name name name index expr name decl type ref prev name name index expr name function type name name parameter_list block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name argument expr operator name expr_stmt expr name operator literal type number expr_stmt expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number expr_stmt expr name operator name operator name operator name operator literal type number decl_stmt decl type name name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block decl_stmt decl type name name decl type ref prev name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list while condition expr literal type boolean block comment type line if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list argument expr name operator name name index expr name operator call name argument_list if condition expr name operator literal type number then block if condition expr name operator name name index expr name operator call name argument_list then block type pseudo expr_stmt expr name operator name operator literal type number else block type pseudo expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr name name index expr name index expr name operator literal type number expr_stmt expr name operator name else block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name operator literal type number else block type pseudo expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr name name index expr name index expr operator name operator literal type number expr_stmt expr name operator name if condition expr operator name operator literal type number then block type pseudo break expr_stmt expr name operator call name argument_list argument expr name operator name if condition expr name operator name then block type pseudo expr_stmt expr name operator literal type number expr_stmt expr name operator name else block decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list argument expr name operator name name index expr name operator call name argument_list if condition expr name operator literal type number then block if condition expr name operator name name index expr name operator call name argument_list then block type pseudo expr_stmt expr name operator name operator literal type number else block type pseudo expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr name name index expr name index expr name operator literal type number expr_stmt expr name operator name else block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name operator literal type number else block type pseudo expr_stmt expr name operator call name argument_list argument expr name operator literal type number argument expr name name index expr name index expr operator name operator literal type number expr_stmt expr name operator name if condition expr operator name operator literal type number then block type pseudo break expr_stmt expr name operator call name argument_list argument expr name operator name if condition expr name operator name then block type pseudo expr_stmt expr name operator literal type number expr_stmt expr name operator name expr_stmt expr operator name if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type number comment type line expr_stmt expr call name argument_list argument expr ternary condition expr literal type number operator name operator name operator name operator name then expr literal type string else expr literal type string return expr literal type number 
