include directive file using namespace name define directive macro name value define directive macro name value define directive macro name value decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name argument expr name name init expr block expr block expr literal type number expr literal type number expr block expr literal type number expr literal type number expr block expr operator literal type number expr literal type number expr block expr literal type number expr operator literal type number function type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name modifier name parameter decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name modifier name block if condition expr name operator literal type number then block decl_stmt decl type name name init expr name for control init decl type name name init expr literal type number condition expr name operator name name index expr name operator call name argument_list incr expr name operator block if condition expr name name index expr name index expr name operator name then block expr_stmt expr name operator name name index expr name index expr name operator literal type number break expr_stmt expr name operator call name argument_list argument expr name argument expr name if condition expr name operator name then block return expr name operator name operator call name argument_list argument expr name operator literal type number argument expr name argument expr name argument expr name argument expr name argument expr name argument expr literal type number argument expr name argument expr name return expr literal type number elseif if condition expr name operator literal type number then block decl_stmt decl type name name init expr name for control init decl type name name init expr literal type number condition expr name operator name name index expr name operator call name argument_list incr expr name operator block if condition expr name name index expr name index expr name operator name then block expr_stmt expr name operator name name index expr name index expr name operator literal type number break expr_stmt expr name operator call name argument_list argument expr name argument expr name if condition expr name operator name then block return expr name operator name operator call name argument_list argument expr name argument expr name argument expr name argument expr name operator literal type number argument expr name argument expr name argument expr literal type number argument expr name argument expr name return expr literal type number elseif if condition expr name operator literal type number then block decl_stmt decl type name name init expr name for control init decl type name name init expr literal type number condition expr name operator name name index expr name operator call name argument_list incr expr name operator block if condition expr name name index expr name index expr name name index expr name operator call name argument_list operator literal type number operator name operator name then block expr_stmt expr name operator name name index expr name index expr name name index expr name operator call name argument_list operator literal type number operator name operator literal type number break expr_stmt expr name operator call name argument_list argument expr name argument expr name if condition expr name operator name then block return expr name operator name operator call name argument_list argument expr name argument expr name operator literal type number argument expr name argument expr name argument expr name argument expr name argument expr literal type number argument expr name argument expr name return expr literal type number else block decl_stmt decl type name name init expr name for control init decl type name name init expr literal type number condition expr name operator name name index expr name operator call name argument_list incr expr name operator block if condition expr name name index expr name index expr name name index expr name operator call name argument_list operator literal type number operator name operator name then block expr_stmt expr name operator name name index expr name index expr name name index expr name operator call name argument_list operator literal type number operator name operator literal type number break expr_stmt expr name operator call name argument_list argument expr name argument expr name if condition expr name operator name then block return expr name operator name operator call name argument_list argument expr name argument expr name argument expr name operator literal type number argument expr name argument expr name argument expr name argument expr literal type number argument expr name argument expr name return expr literal type number function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type boolean expr_stmt expr call name name operator name argument_list argument expr name expr_stmt expr call name name operator name argument_list argument expr name decl_stmt decl type name name decl type ref prev name decl type ref prev name expr_stmt expr name operator name operator name operator name decl_stmt decl type name name argument_list type generic argument expr name name argument_list type generic argument expr name name argument_list argument expr name decl type ref prev name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name expr_stmt expr name operator operator expr name operator expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator call name argument_list operator literal type number then block expr_stmt expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block if condition expr name name index expr name operator call name argument_list operator literal type number then block expr_stmt expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list decl_stmt decl type name name init expr call name argument_list argument expr literal type number argument expr name operator literal type number argument expr literal type number argument expr name operator literal type number argument expr literal type number argument expr operator literal type number argument expr literal type number argument expr name argument expr name expr_stmt expr name operator operator ternary condition expr operator name operator name operator name operator name operator then expr literal type string else expr literal type string operator return expr literal type number 
