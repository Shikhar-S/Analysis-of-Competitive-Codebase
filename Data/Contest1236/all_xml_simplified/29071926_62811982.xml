include directive file using namespace name using name init type name name decl_stmt decl type specifier name name init expr literal type number operator literal type number struct name block public type default decl_stmt decl type name name decl type ref prev name decl name name index expr name decl type ref prev name name index expr name decl_stmt decl type name name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name decl type ref prev name name index init expr block expr literal type number expr literal type number expr literal type number expr operator literal type number decl type ref prev name name index init expr block expr literal type number expr literal type number expr operator literal type number expr literal type number decl_stmt decl type name name decl type ref prev name function type name name parameter_list parameter decl type specifier name modifier name parameter decl type specifier name modifier name block return expr ternary condition expr name name operator name operator name name operator name then expr name name operator name operator name name operator name else expr name name operator name operator name name operator name function type name name parameter_list parameter decl type specifier name modifier name parameter decl type specifier name modifier name block return expr ternary condition expr name name operator name operator name name operator name then expr name name operator name operator name name operator name else expr name name operator name operator name name operator name function type name name parameter_list parameter decl type name name parameter decl type name name parameter decl type name name parameter decl type name modifier name block if condition expr name operator literal type number operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr call name argument_list argument expr name operator literal type number argument expr name operator literal type number operator name argument expr operator name operator block expr name expr name argument expr name operator name if condition expr name operator literal type number then block type pseudo expr_stmt expr operator name if condition expr name name index expr name operator name operator name then block type pseudo return expr name operator name name index expr name operator expr literal type boolean else block decl_stmt decl type name name init expr call name argument_list argument expr call name argument_list argument expr name operator literal type number argument expr name operator literal type number operator name argument expr operator name operator block expr name expr name argument expr name operator name if condition expr name operator literal type number then block type pseudo expr_stmt expr operator name if condition expr name name index expr name operator name operator name then block type pseudo return expr name operator name name index expr name operator expr literal type boolean return expr literal type boolean function type name name parameter_list parameter decl type name name parameter decl type name name block if condition expr name operator name operator name operator name operator name operator name operator name operator name then block type pseudo return expr literal type boolean decl_stmt decl type name name init expr call name argument_list argument expr call name argument_list argument expr name operator literal type number argument expr name operator literal type number operator name argument expr operator name operator block expr name expr name argument expr name operator name return expr name name index expr name operator name operator name operator name name index expr name operator name operator name function type name name parameter_list block comment type line expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name argument expr operator name operator expr name operator literal type number operator name operator name operator name expr_stmt expr name operator name operator literal type number operator expr name operator name operator literal type number operator expr name operator name operator literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr operator name name index expr name operator name argument expr operator name name index expr name operator name operator expr name name index expr name operator name name index expr name expr_stmt expr call name argument_list argument expr name operator literal type number argument expr name operator literal type number operator name argument expr name expr_stmt expr call name argument_list argument expr name operator literal type number argument expr name operator literal type number operator name argument expr name expr_stmt expr name operator literal type number for control init decl type name name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name decl type ref prev name decl type ref prev name init expr literal type number condition incr block comment type line decl_stmt decl type name name expr_stmt expr name operator name operator expr name operator name if condition expr call name argument_list argument expr name argument expr name argument expr name argument expr name then block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator call name argument_list argument expr name name operator name argument expr name operator literal type number elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator call name argument_list argument expr name name operator name argument expr name operator literal type number elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator call name argument_list argument expr name name operator name argument expr name operator literal type number else block type pseudo expr_stmt expr name operator call name argument_list argument expr name name operator name argument expr name operator literal type number else block if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name operator literal type number elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name operator literal type number elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name operator literal type number else block type pseudo expr_stmt expr name operator name operator literal type number expr_stmt expr name operator call name argument_list argument expr name operator name operator call name argument_list argument expr name operator name expr_stmt expr name operator name operator expr name operator name expr_stmt expr operator operator name operator operator literal type number if condition expr call name argument_list argument expr name operator name name index expr name argument expr name operator name name index expr name then block type pseudo break if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name elseif if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator name else block type pseudo expr_stmt expr name operator name expr_stmt expr call name argument_list argument expr ternary condition expr name operator name then expr literal type string else expr literal type string return expr literal type number 
