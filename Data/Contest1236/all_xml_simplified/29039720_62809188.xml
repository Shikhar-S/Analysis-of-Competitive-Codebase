include directive file include directive file include directive file define directive macro name value using namespace name function type name name parameter_list block decl_stmt decl type name name name decl type ref prev name decl type ref prev name decl_stmt decl type name name decl type ref prev name expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name argument expr operator name decl_stmt decl type name name argument_list type generic argument expr name name name index expr name decl type ref prev name name index expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name expr_stmt expr name name index expr name operator literal type number operator call name argument_list argument expr name operator literal type number expr_stmt expr name name index expr name operator literal type number operator call name argument_list argument expr name operator literal type number decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr name operator literal type number decl type ref prev name init expr name operator literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name name init expr literal type number while condition expr literal type boolean block if condition expr name operator literal type number then block decl_stmt decl type name name name argument_list type generic argument expr name operator name name init expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name init expr name operator literal type number if condition expr name operator name name index expr name operator call name argument_list then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr operator name if condition expr name operator name operator literal type number then block type pseudo break else block type pseudo expr_stmt expr name operator name operator literal type number operator name expr_stmt expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number elseif if condition expr name operator literal type number then block decl_stmt decl type name name name argument_list type generic argument expr name operator name name init expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name init expr name operator literal type number if condition expr name operator name name index expr name operator call name argument_list then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr operator name if condition expr name operator name operator literal type number then block type pseudo break else block type pseudo expr_stmt expr name operator name operator literal type number operator name expr_stmt expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number elseif if condition expr name operator literal type number then block decl_stmt decl type name name name argument_list type generic argument expr name operator name name init expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name init expr name operator literal type number if condition expr name operator name name index expr name operator call name argument_list then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr operator operator operator name operator if condition expr name operator name operator literal type number then block type pseudo break else block type pseudo expr_stmt expr name operator name operator literal type number operator name expr_stmt expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number else block decl_stmt decl type name name name argument_list type generic argument expr name operator name name init expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name init expr name operator literal type number if condition expr name operator name name index expr name operator call name argument_list then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr operator operator operator name operator if condition expr name operator name operator literal type number then block type pseudo break else block type pseudo expr_stmt expr name operator name operator literal type number operator name expr_stmt expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number expr_stmt expr name operator operator name operator literal type number operator operator literal type number if condition expr name operator name operator name operator name then block type pseudo expr_stmt expr call name argument_list argument expr literal type string else block decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr name operator literal type number decl type ref prev name init expr name operator literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name name init expr literal type number while condition expr literal type boolean block if condition expr name operator literal type number then block decl_stmt decl type name name name argument_list type generic argument expr name operator name name init expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name init expr name operator literal type number if condition expr name operator name name index expr name operator call name argument_list then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr operator name if condition expr name operator name operator literal type number then block type pseudo break else block type pseudo expr_stmt expr name operator name operator literal type number operator name expr_stmt expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number elseif if condition expr name operator literal type number then block decl_stmt decl type name name name argument_list type generic argument expr name operator name name init expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name init expr name operator literal type number if condition expr name operator name name index expr name operator call name argument_list then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr operator name if condition expr name operator name operator literal type number then block type pseudo break else block type pseudo expr_stmt expr name operator name operator literal type number operator name expr_stmt expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number elseif if condition expr name operator literal type number then block decl_stmt decl type name name name argument_list type generic argument expr name operator name name init expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name init expr name operator literal type number if condition expr name operator name name index expr name operator call name argument_list then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr operator operator operator name operator if condition expr name operator name operator literal type number then block type pseudo break else block type pseudo expr_stmt expr name operator name operator literal type number operator name expr_stmt expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number else block decl_stmt decl type name name name argument_list type generic argument expr name operator name name init expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name init expr name operator literal type number if condition expr name operator name name index expr name operator call name argument_list then block type pseudo expr_stmt expr name operator call name argument_list argument expr name argument expr operator operator operator name operator if condition expr name operator name operator literal type number then block type pseudo break else block type pseudo expr_stmt expr name operator name operator literal type number operator name expr_stmt expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number expr_stmt expr name operator operator name operator literal type number operator operator literal type number if condition expr name operator name operator name operator name then block type pseudo expr_stmt expr call name argument_list argument expr literal type string else block type pseudo expr_stmt expr call name argument_list argument expr literal type string return expr literal type number 
