include directive file using namespace name decl_stmt decl type specifier name name init expr literal type number operator literal type number operator literal type number decl_stmt decl type name name decl type ref prev name decl type ref prev name decl_stmt decl type name name name index expr name decl type ref prev name name index expr name decl_stmt decl type name name argument_list type generic argument expr name name name index expr name decl type ref prev name name index expr name decl_stmt decl type name name name index expr literal type number init expr block expr literal type number expr literal type number expr literal type number expr operator literal type number decl type ref prev name name index expr literal type number init expr block expr literal type number expr literal type number expr operator literal type number expr literal type number decl_stmt decl type name name name index expr literal type number decl_stmt decl type name name decl type ref prev name decl type ref prev name name index expr name function type name name parameter_list block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name argument expr operator name argument expr operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block expr_stmt expr call name argument_list argument expr literal type string argument expr operator name name index expr name argument expr operator name name index expr name operator expr name name index expr name name index expr name operator call name argument_list argument expr name name index expr name operator expr name name index expr name name index expr name operator call name argument_list argument expr name name index expr name if condition expr name name index expr name operator literal type number then block type pseudo expr_stmt expr name name index expr name name index expr name operator literal type number decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number while condition expr name operator name block if condition expr name name index expr name then block type pseudo break expr_stmt expr name operator expr_stmt expr name operator if condition expr name operator literal type number operator name operator name operator name then block expr_stmt expr call name argument_list argument expr literal type string return expr literal type number for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name operator call name argument_list argument expr literal type number operator expr name name index expr name operator call name argument_list argument expr name operator literal type number operator expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr name name index expr name operator call name argument_list argument expr literal type number operator expr name name index expr name operator call name argument_list argument expr name operator literal type number operator expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list expr_stmt expr name name index expr literal type number operator name operator literal type number operator expr name name index expr literal type number operator name operator literal type number operator expr name name index expr literal type number operator literal type number operator expr name name index expr literal type number operator literal type number decl_stmt decl type name name init expr literal type number expr_stmt expr name operator name operator literal type number decl_stmt decl type name name name init expr literal type number while condition expr literal type number block expr_stmt expr name operator operator name operator literal type number operator operator literal type number if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list argument expr name operator name name index expr name operator call name argument_list decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name index expr name argument expr name name index expr name if condition expr name operator name operator literal type number then block type pseudo break expr_stmt expr name operator name operator name operator literal type number expr_stmt expr name name index expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list argument expr name operator name name index expr name operator call name argument_list decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name index expr name argument expr name name index expr name if condition expr name operator name operator literal type number then block type pseudo break expr_stmt expr name operator name operator name operator literal type number expr_stmt expr name name index expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list argument expr name operator name name index expr name operator call name argument_list operator literal type number decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name index expr name argument expr name name index expr name if condition expr name operator name operator literal type number then block type pseudo break expr_stmt expr name operator name operator name operator literal type number expr_stmt expr name name index expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name operator call name argument_list argument expr name name index expr name operator call name argument_list argument expr name operator name name index expr name operator call name argument_list operator literal type number decl_stmt decl type name name init expr call name argument_list argument expr name name index expr name index expr name argument expr name name index expr name if condition expr name operator name operator literal type number then block type pseudo break expr_stmt expr name operator name operator name operator literal type number expr_stmt expr name name index expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number if condition expr name operator literal type number operator name operator name operator name then block type pseudo expr_stmt expr call name argument_list argument expr literal type string else block type pseudo expr_stmt expr call name argument_list argument expr literal type string 
