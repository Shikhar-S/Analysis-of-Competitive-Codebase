include directive file using namespace name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name name decl type ref prev name decl type ref prev name decl_stmt decl type name name argument_list type generic argument expr name name name index expr name decl_stmt decl type name name argument_list type generic argument expr name name name index expr name function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr name operator name expr_stmt expr name operator name operator name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name expr_stmt expr operator name expr_stmt expr operator name expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr name decl_stmt decl type name name init expr name decl_stmt decl type name name init expr operator literal type number decl_stmt decl type name name init expr literal type number decl_stmt decl type name name init expr literal type number decl_stmt decl type name name name init expr literal type number while condition expr literal type boolean block if condition expr name operator literal type number then block decl_stmt decl type name name init expr name name index expr name operator call name argument_list argument expr name if condition expr name operator name name index expr name operator call name argument_list operator operator name operator name then block type pseudo expr_stmt expr name operator operator name if condition expr name operator name operator literal type number then block type pseudo break expr_stmt expr name operator call name name argument_list argument expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number expr_stmt expr name operator literal type number expr_stmt expr name operator literal type number continue if condition expr name operator literal type number then block decl_stmt decl type name name init expr name name index expr name operator call name argument_list argument expr name if condition expr name operator name name index expr name operator call name argument_list operator operator name operator name then block type pseudo expr_stmt expr name operator operator name if condition expr name operator name operator literal type number then block type pseudo break expr_stmt expr name operator call name name argument_list argument expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number expr_stmt expr name operator expr_stmt expr name operator literal type number continue if condition expr name operator literal type number then block decl_stmt decl type name name init expr name name index expr name operator call name argument_list argument expr name if condition expr name operator name name index expr name operator call name argument_list then block expr_stmt expr operator name if condition expr operator name operator name then block type pseudo expr_stmt expr name operator operator name if condition expr name operator name operator literal type number then block type pseudo break expr_stmt expr name operator call name name argument_list argument expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number expr_stmt expr operator name expr_stmt expr name operator literal type number continue if condition expr name operator literal type number then block decl_stmt decl type name name init expr name name index expr name operator call name argument_list argument expr name if condition expr name operator name name index expr name operator call name argument_list then block expr_stmt expr operator name if condition expr operator name operator name then block type pseudo expr_stmt expr name operator operator name if condition expr name operator name operator literal type number then block type pseudo break expr_stmt expr name operator call name name argument_list argument expr name operator name operator literal type number expr_stmt expr name operator name operator literal type number expr_stmt expr operator name expr_stmt expr name operator literal type number continue if condition expr name operator name operator name operator name then block type pseudo expr_stmt expr name operator literal type string operator name else block expr_stmt expr name operator literal type number expr_stmt expr name operator literal type number expr_stmt expr name operator literal type number while condition expr name operator name operator name name index expr literal type number operator call name argument_list argument expr name operator name name index expr literal type number operator call name argument_list block expr_stmt expr operator name expr_stmt expr operator name if condition expr name operator name operator name operator name then block expr_stmt expr name operator literal type string else block expr_stmt expr name operator literal type string return expr literal type number 
