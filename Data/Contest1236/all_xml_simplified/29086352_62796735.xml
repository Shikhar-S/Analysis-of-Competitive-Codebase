include directive file using namespace name typedef type name name name typedef type name name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name modifier name parameter decl type name name block if condition expr name operator name then block type pseudo expr_stmt expr name operator name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name modifier name parameter decl type name name block if condition expr name operator name then block type pseudo expr_stmt expr name operator name function template parameter_list parameter type name name specifier type name name parameter_list parameter decl type name modifier name block expr_stmt expr name operator literal type number decl_stmt decl type name name decl type ref prev name init expr literal type number while condition expr name operator call name argument_list operator expr name operator literal type number block type pseudo if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator operator name do block type pseudo expr_stmt expr name operator operator name operator literal type number operator operator operator name operator literal type number operator operator operator name operator literal type number operator condition expr name operator call name argument_list operator expr name operator literal type number expr_stmt expr name operator name decl_stmt decl type specifier name name init expr literal type number decl_stmt decl type name name decl type ref prev name name index expr name index expr name function type name name parameter_list block ifndef directive name comment type line comment type line endif directive expr_stmt expr call name argument_list argument expr name decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number while condition expr literal type number block expr_stmt expr name name index expr name index expr name operator operator name if condition expr name operator name then block type pseudo break if condition expr name then block expr_stmt expr name operator if condition expr name operator literal type number then block type pseudo expr_stmt expr name operator literal type number operator expr name operator literal type number operator expr name operator else block expr_stmt expr name operator if condition expr name operator name operator literal type number then block type pseudo expr_stmt expr name operator literal type number operator expr name operator name operator expr name operator for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo for control init decl type name name init expr literal type number condition expr name operator name incr expr name operator block type pseudo expr_stmt expr call name argument_list argument expr literal type string argument expr name name index expr name index expr name argument expr ternary condition expr name operator name then expr literal type char else expr literal type char return expr operator literal type number operator literal type number operator 
