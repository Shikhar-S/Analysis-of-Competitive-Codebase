include directive file define directive macro name parameter_list parameter type name value using namespace name using name init type name name decl_stmt decl type specifier name name init expr literal type number operator literal type number decl_stmt decl type name name decl type ref prev name decl type ref prev name decl_stmt decl type name name argument_list type generic argument expr name name name index expr name decl type ref prev name name index expr name function type name name parameter_list block expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr call name name operator name argument_list argument expr literal type number expr_stmt expr name operator name operator name operator name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block decl_stmt decl type name name decl type ref prev name expr_stmt expr name operator name operator name expr_stmt expr name name index expr name operator call name argument_list argument expr name expr_stmt expr name name index expr name operator call name argument_list argument expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name name index expr name operator call name argument_list argument expr literal type number expr_stmt expr name name index expr name operator call name argument_list argument expr name operator literal type number expr_stmt expr call name argument_list argument expr call name argument_list argument expr name name index expr name for control init decl type name name init expr literal type number condition expr name operator name incr expr operator name block expr_stmt expr name name index expr name operator call name argument_list argument expr literal type number expr_stmt expr name name index expr name operator call name argument_list argument expr name operator literal type number expr_stmt expr call name argument_list argument expr call name argument_list argument expr name name index expr name decl_stmt decl type name name init expr literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr literal type number decl_stmt decl type name name init expr literal type number decl type ref prev name init expr name operator literal type number decl type ref prev name init expr literal type number decl type ref prev name init expr name operator literal type number decl_stmt decl type name name init expr literal type number decl type ref prev name init expr operator name operator name operator operator name operator name operator operator name operator name decl_stmt decl type name name init expr literal type boolean while condition expr name operator name block if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr operator call name argument_list argument expr call name argument_list argument expr name name index expr name argument expr name argument expr name operator literal type number if condition expr name operator name then block if condition expr name then block type pseudo break expr_stmt expr name operator literal type number expr_stmt expr name operator literal type boolean else block expr_stmt expr name operator call name argument_list argument expr name operator name expr_stmt expr name operator name expr_stmt expr name operator call name argument_list argument expr name argument expr name expr_stmt expr name operator literal type boolean elseif if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr operator call name argument_list argument expr call name argument_list argument expr name name index expr name argument expr name argument expr name operator literal type number if condition expr name operator name then block if condition expr name then block type pseudo break expr_stmt expr name operator literal type number expr_stmt expr name operator literal type boolean else block expr_stmt expr name operator call name argument_list argument expr name operator name expr_stmt expr name operator name expr_stmt expr name operator call name argument_list argument expr name argument expr name expr_stmt expr name operator literal type boolean elseif if condition expr name operator literal type number then block decl_stmt decl type name name init expr call name argument_list argument expr operator operator operator call name argument_list argument expr call name argument_list argument expr name name index expr name argument expr name operator argument expr name operator literal type number if condition expr name operator name then block if condition expr name then block type pseudo break expr_stmt expr name operator literal type number expr_stmt expr name operator literal type boolean else block expr_stmt expr name operator call name argument_list argument expr name operator name expr_stmt expr name operator name expr_stmt expr name operator call name argument_list argument expr name argument expr name expr_stmt expr name operator literal type boolean else block decl_stmt decl type name name init expr call name argument_list argument expr operator operator operator call name argument_list argument expr call name argument_list argument expr name name index expr name argument expr name operator argument expr name operator literal type number if condition expr name operator name then block if condition expr name then block type pseudo break expr_stmt expr name operator literal type number expr_stmt expr name operator literal type boolean else block expr_stmt expr name operator call name argument_list argument expr name operator name expr_stmt expr name operator name expr_stmt expr name operator call name argument_list argument expr name argument expr name expr_stmt expr name operator literal type boolean if condition expr name operator name then block type pseudo expr_stmt expr name operator literal type string else block type pseudo expr_stmt expr name operator literal type string return expr literal type number 
