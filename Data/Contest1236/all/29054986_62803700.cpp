/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author aajisaka
 */

#include<bits/stdc++.h>

using namespace std;

void debug_out() { cerr << endl; }
template <typename Head, typename... Tail>
void debug_out(Head H, Tail... T) {
  cerr << " " << to_string(H);
  debug_out(T...);
}
#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

#define SPEED ios_base::sync_with_stdio(false);cin.tie(nullptr)
#define rep(i,n) for(int i=0; i<(int)(n); i++)
#define all(v) v.begin(), v.end()
template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return true; } return false; }
template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return true; } return false; }

using ll = long long;
using P = pair<ll, ll>;

constexpr double PI = 3.14159265358979323846;
mt19937_64 engine(chrono::steady_clock::now().time_since_epoch().count());

set<int> stx[100005], sty[100005];
set<int, greater<>> stx1[100005], sty1[100005];

class DAliceAndTheDoll {
public:

    void solve(istream& cin, ostream& cout) {
      SPEED;
      ll n, m, k; cin >> n >> m >> k;

      for(int i=1; i<=max(n,m); i++) {
        stx[i].clear();
        sty[i].clear();
        stx1[i].clear();
        sty1[i].clear();
        stx[i].insert(0);
        stx[i].insert(m+1);
        sty[i].insert(0);
        sty[i].insert(n+1);
        stx1[i].insert(0);
        stx1[i].insert(m+1);
        sty1[i].insert(0);
        sty1[i].insert(n+1);
      }

      rep(i, k) {
        int x, y; cin >> x >> y;
        stx[x].insert(y);
        sty[y].insert(x);
        stx1[x].insert(y);
        sty1[y].insert(x);
      }

      int x = 1;
      int y = 1;

      int mix = 2;
      int miy = 1;
      int max = n;
      int may = m;

      int pos = 1;
      ll cnt = 0;
      while(true) {
        debug(x, y, pos);
        if (pos%4==1) {
          auto r = (*(stx[x].upper_bound(y)))-1;
          chmin(r, may);
          chmin(may, r-1);
          if (y==r && pos>1) break;
          cnt += r-y;
          y = r;
        } else if (pos%4==2) {
          auto r = (*(sty[y].upper_bound(x)))-1;
          chmin(r, max);
          chmin(max, r-1);
          if (x==r) break;
          cnt += r-x;
          x = r;
        } else if (pos%4==3) {
          auto r = (*(stx1[x].upper_bound(y)))+1;
          chmax(r, miy);
          chmax(miy, r+1);
          if (y==r) break;
          cnt += y-r;
          y = r;
        } else {
          auto r = (*(sty1[y].upper_bound(x)))+1;
          chmax(r, mix);
          chmax(mix, r+1);
          if (x==r) break;
          cnt += x-r;
          x = r;
        }
        pos++;
      }

      if (k+1+cnt == n*m) {
        cout << "Yes" << endl;
      } else {
        cout << "No" << endl;
      }

    }
};

signed main() {
  DAliceAndTheDoll solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}