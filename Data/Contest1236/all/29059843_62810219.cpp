/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author indy256
 */

#include <bits/stdc++.h>

using namespace std;

void solve(istream &in, ostream &out) {
    int n, m, k;
    in >> n >> m >> k;

    vector<vector<int>> rows(n), cols(m);
    for (int i = 0; i < k; ++i) {
        int r, c;
        in >> r >> c;
        --r;
        --c;
        rows[r].emplace_back(c);
        cols[c].emplace_back(r);
    }
    for (int i = 0; i < n; ++i) {
        sort(rows[i].begin(), rows[i].end());
    }
    for (int i = 0; i < m; ++i) {
        sort(cols[i].begin(), cols[i].end());
    }
    for (int init_dir = 0; init_dir <= 1; ++init_dir) {
        long long cnt = 0;
        int dir = init_dir;
        int rmin = 1, rmax = n - 1, cmin = 0, cmax = m - 1;
        int r = 0, c = 0;
        while (true) {
            int tr = r, tc = c;
            if (dir == 0) {
                auto it = lower_bound(rows[r].begin(), rows[r].end(), c);
                int p = it != rows[r].end() ? *it - 1 : numeric_limits<int>::max();
                c = min(cmax, p);
                cmax = c - 1;
            }
            if (dir == 1) {
                auto it = lower_bound(cols[c].begin(), cols[c].end(), r);
                int p = it != cols[c].end() ? *it - 1 : numeric_limits<int>::max();
                r = min(rmax, p);
                rmax = r - 1;
            }
            if (dir == 2) {
                auto it = lower_bound(rows[r].begin(), rows[r].end(), c);
                int p = it != rows[r].begin() ? *--it + 1 : numeric_limits<int>::min();
                c = max(cmin, p);
                cmin = c + 1;
            }
            if (dir == 3) {
                auto it = lower_bound(cols[c].begin(), cols[c].end(), r);
                int p = it != cols[c].begin() ? *--it + 1 : numeric_limits<int>::min();
                r = max(rmin, p);
                rmin = r + 1;
            }
            if (r == tr && c == tc) {
                break;
            }
            cnt += abs(r - tr) + abs(c - tc);
            dir = (dir + 1) % 4;
        }
        if (1 + cnt + k == (long long) n * m) {
            out << "Yes" << '\n';
            return;
        }
    }
    out << "No" << '\n';
}


int main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solve(in, out);
}
