<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090253_62786772.cpp"><comment type="line">// warm heart, wagging tail,and a smile just for you!</comment>
<comment type="line">//                                                                     âââââââââââ</comment>
<comment type="line">//                                                                   ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ</comment>
<comment type="line">//                                                                ââââ¬â¬â¬â¬â¬âââââ¬â¬â¬â¬â¬â¬âââ</comment>
<comment type="line">//                                            âââââââââââ       âââ¬â¬â¬â¬â¬âââââ¬â¬âââââ¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//                                      ââââââââââ¬â¬â¬â¬â¬âââââââââââââ¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬ââââ¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//                               âââââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââââââ¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//                             âââââ¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//                           ââââ¬â¬â¬ââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬ââââ¬â¬â¬â¬â¬â¬â¬âââââ</comment>
<comment type="line">//                         ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬âââââââââ¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//                       ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬âââ</comment>
<comment type="line">//                     ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââ¬â¬â¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//                 âââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââââ¬â¬â¬â¬â¬ââââ</comment>
<comment type="line">//     ââââââââââââââ¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬âââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââ¬â¬â¬â¬ââââââ</comment>
<comment type="line">//   âââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬âââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââââââ¬â¬â¬â¬â¬â¬â¬ââââââââââââ¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬âââ¬â¬â¬ââ</comment>
<comment type="line">// ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââ¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬ââ</comment>
<comment type="line">// âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬âââââââ¬â¬â¬âââââ¬â¬âââââ¬â¬â¬â¬â¬â¬â¬âââââââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬âââ</comment>
<comment type="line">// âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââââââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬âââââ</comment>
<comment type="line">// ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââ¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââââ</comment>
<comment type="line">//   ââââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââââ¬â¬â¬â¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââ¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââ</comment>
<comment type="line">//       ââââââââââââââ  âââââ¬â¬â¬â¬â¬â¬ââââââââââââââââââââââââââââ¬â¬â¬â¬â¬âââ¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬â¬ââââ</comment>
<comment type="line">//                         âââââââ                           âââââ  âââââââââââââââââââ  </comment>
<comment type="line">//</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bits/stdc++.h"</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<comment type="line">//#define MOD 998244353</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>(1LL&lt;&lt;60)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fs</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sc</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&lt;(b);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i = (b-1);i&gt;=(a);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>FOR(i,0,(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RREP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RFOR(i,0,(n))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ITR</name><parameter_list>(<parameter><type><name>itr</name></type></parameter>,<parameter><type><name>mp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto itr = (mp).begin(); itr != (mp).end(); ++itr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RITR</name><parameter_list>(<parameter><type><name>itr</name></type></parameter>,<parameter><type><name>mp</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(auto itr = (mp).rbegin(); itr != (mp).rend(); ++itr)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>range</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a)&lt;=(i) &amp;&amp; (i)&lt;(b))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>cout &lt;&lt; #x &lt;&lt; " = " &lt;&lt; (x) &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SP</name></cpp:macro> <cpp:value>&lt;&lt; " " &lt;&lt;</cpp:value></cpp:define> 
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>P</name>;</typedef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdint&gt;</cpp:file></cpp:include>

<class><template>template <parameter_list>&lt;<parameter><type><name><name>std</name><operator>::</operator><name>uint_fast64_t</name></name></type> <name>Modulus</name></parameter>&gt;</parameter_list></template> class <name>modint</name> <block>{<private type="default">
  <using>using <name>u64</name> <init>= <type><name><name>std</name><operator>::</operator><name>uint_fast64_t</name></name></type></init>;</using>

  <decl_stmt><decl><type><name>u64</name></type> <name>a</name></decl>;</decl_stmt>

</private><public>public:
  <constructor><specifier>constexpr</specifier> <name>modint</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>u64</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept></constructor> : <macro><name>a</name><argument_list>(<argument>x % Modulus</argument>)</argument_list></macro> <block>{}</block>
  <function><specifier>constexpr</specifier> <type><name>u64</name></type> <name>val</name><parameter_list>()</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{ <return>return <expr><name>a</name></expr>;</return> }</block></function>
  <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
    <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>+=</operator> <name>rhs</name></expr>;</return>
  }</block></function>
  <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
    <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>-=</operator> <name>rhs</name></expr>;</return>
  }</block></function>
  <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
    <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>*=</operator> <name>rhs</name></expr>;</return>
  }</block></function>
  <function type="operator"><specifier>constexpr</specifier> <type><name>modint</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
    <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call> <operator>/=</operator> <name>rhs</name></expr>;</return>
  }</block></function>
  <function type="operator"><specifier>constexpr</specifier> <type><name>bool</name></type> <name>operator<name>==</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <noexcept>noexcept</noexcept> <block>{
    <return>return <expr><call><name>modint</name><argument_list>(<argument><expr><operator>*</operator><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><call><name>val</name><argument_list>()</argument_list></call> <operator>==</operator> <call><name><name>rhs</name><operator>.</operator><name>val</name></name><argument_list>()</argument_list></call></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>modint</name> <modifier>&amp;</modifier></type><name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
    <expr_stmt><expr><name>a</name> <operator>+=</operator> <name><name>rhs</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>a</name> <operator>&gt;=</operator> <name>Modulus</name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>a</name> <operator>-=</operator> <name>Modulus</name></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>modint</name> <modifier>&amp;</modifier></type><name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
    <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <name><name>rhs</name><operator>.</operator><name>a</name></name></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>a</name> <operator>+=</operator> <name>Modulus</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>a</name> <operator>-=</operator> <name><name>rhs</name><operator>.</operator><name>a</name></name></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>modint</name> <modifier>&amp;</modifier></type><name>operator<name>*=</name></name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
    <expr_stmt><expr><name>a</name> <operator>=</operator> <name>a</name> <operator>*</operator> <name><name>rhs</name><operator>.</operator><name>a</name></name> <operator>%</operator> <name>Modulus</name></expr>;</expr_stmt>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
  }</block></function>
  <function type="operator"><type><name>modint</name> <modifier>&amp;</modifier></type><name>operator<name>/=</name></name><parameter_list>(<parameter><decl><type><name>modint</name></type> <name>rhs</name></decl></parameter>)</parameter_list> <noexcept>noexcept</noexcept> <block>{
    <decl_stmt><decl><type><name>u64</name></type> <name>exp</name> <init>= <expr><name>Modulus</name> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>exp</name></expr>)</condition> <block>{
      <if>if <condition>(<expr><name>exp</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>*=</operator> <name>rhs</name></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>rhs</name> <operator>*=</operator> <name>rhs</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>exp</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></while>
    <return>return <expr><operator>*</operator><name>this</name></expr>;</return>
  }</block></function>
</public>}</block>;</class>
<using>using <name>mint</name> <init>= <type><name><name>modint</name><argument_list type="generic">&lt;<argument><expr><name>MOD</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mint</name></expr></argument>&gt;</argument_list></name></type> <name>vec</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>mint</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>mat</name>;</typedef>

<function><type><name>void</name></type> <name>add</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
  <expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>a</name><operator>+</operator><name>b</name><operator>)</operator> <operator>%</operator> <name>MOD</name> <operator>+</operator> <name>MOD</name><operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</expr_stmt>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>mul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_WIN64</name></expr></argument>)</argument_list></call></expr></cpp:if>
      <return>return <expr><call>(<name>int</name>) <argument_list>(<argument><expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>a</name> <operator>*</operator> <name>b</name> <operator>%</operator> <name>MOD</name></expr></argument>)</argument_list></call></expr>;</return>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name> <init>= <expr><operator>(</operator><name>long</name> <name>long</name><operator>)</operator> <name>a</name> <operator>*</operator> <name>b</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name></type> <name>xh</name> <init>= <expr><call>(<name>unsigned</name>) <argument_list>(<argument><expr><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>xl</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator> <name>x</name></expr></init></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
      <asm>asm(
        "divl %4; \n\t"
        : "=a" (d), "=d" (m)
        : "d" (xh), "a" (xl), "r" (MOD)
      );</asm>
      <return>return <expr><name>m</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>modpow</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>b</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
    <if>if <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>mul</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  }</block></while>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><specifier>inline</specifier> <type><name>int</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list> <block>{
    <expr_stmt><expr><name>a</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>a</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
    <decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name>MOD</name></expr></init></decl>, <decl><type ref="prev"/><name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>a</name></expr>)</condition> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><name>b</name> <operator>/</operator> <name>a</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>b</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>u</name> <operator>-=</operator> <name>t</name> <operator>*</operator> <name>v</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>swap</name><argument_list>(<argument><expr><name>u</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>b</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>u</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>u</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt></block></then></if>
    <return>return <expr><name>u</name></expr>;</return>
}</block></function>

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>modpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>modpow</name><argument_list>(<argument><expr><name>ans</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>


  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
