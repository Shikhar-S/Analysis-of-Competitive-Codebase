<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29029185_62798382.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>F</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(),(x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int)(x).size()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CLEAR</name><parameter_list>(<parameter><type><name>tab</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(tab, 0, sizeof(tab))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int x = 0; x &lt; (n); x++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int x = (b); x &lt;= (e); x++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FORD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int x = (b); x &gt;= (e); x--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VAR</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__typeof(n) v = (n)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOREACH</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(VAR(i, (c).begin()); i != (c).end(); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, fmt, ##__VA_ARGS__)</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>VI</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MXN</name> <init>= <expr><literal type="number">310</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>C</name> <init>= <expr><literal type="number">262144</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name> <init>= <expr><literal type="number">1000000001</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VI</name></type> <name><name>grupa</name><index>[<expr><name>MXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>test</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>n</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal> * k</argument>)</argument_list></macro>
            <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument>k</argument>)</argument_list></macro>
                <expr_stmt><expr><name><name>grupa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>iter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>FORD</name><argument_list>(<argument>i</argument>, <argument><literal type="number">2</literal> * k</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
            <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument>k</argument>)</argument_list></macro>
                <expr_stmt><expr><name><name>grupa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>iter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>iter</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal> * k + <literal type="number">1</literal></argument>)</argument_list></macro>
            <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument>k</argument>)</argument_list></macro>
                <expr_stmt><expr><name><name>grupa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>iter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>FORD</name><argument_list>(<argument>i</argument>, <argument><literal type="number">2</literal> * k + <literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>
            <macro><name>FOR</name><argument_list>(<argument>j</argument>, <argument><literal type="number">1</literal></argument>, <argument>k</argument>)</argument_list></macro>
                <expr_stmt><expr><name><name>grupa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>iter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">2</literal> * k + <literal type="number">1</literal></argument>)</argument_list></macro>
            <expr_stmt><expr><name><name>grupa</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>PB</name><argument_list>(<argument><expr><name>iter</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>, <argument><literal type="number">1</literal></argument>, <argument>n</argument>)</argument_list></macro> <block>{
        <macro><name>FOREACH</name><argument_list>(<argument>it</argument>, <argument>grupa[i]</argument>)</argument_list></macro>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d "</literal></expr></argument>, <argument><expr><operator>*</operator><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>te</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//	scanf("%d", &amp;te);</comment>
	<while>while<condition>(<expr><name>te</name><operator>--</operator></expr>)</condition>
		<block type="pseudo"><expr_stmt><expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
