<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090878_62786795.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"Ofast"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>target</name><name>(</name><cpp:literal>"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native"</cpp:literal><name>)</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"unroll-loops"</cpp:literal><name>)</name></cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x"=" &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fout</name></cpp:macro> <cpp:value>cout&lt;&lt;fixed&lt;&lt;setprecision(10)</cpp:value></cpp:define>
<typedef>typedef <type><name>long</name> <name>long</name> <name>int</name></type> <name>ll</name>;</typedef>
<function><type><name>bool</name></type> <name>sortbysec</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>,<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter>)</parameter_list> 
<block>{ 
    	<return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>a</name><operator>.</operator><name>second</name></name><operator>)</operator> <operator>&gt;</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>first</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>second</name></name><operator>)</operator></expr>;</return>
}</block></function> 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt><expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>cnt1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>cnt2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>t1</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>a</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>t1</name></expr></argument>,<argument><expr><name>b</name><operator>-</operator><name>b</name><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cnt1</name><operator>+=</operator><operator>(</operator><name>t1</name><operator>*</operator><literal type="number">3</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>t2</name><init>= <expr><name>b</name> <operator>-</operator> <name>t1</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>t3</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>t2</name></expr></argument>,<argument><expr><name>c</name><operator>-</operator><name>c</name><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>cnt1</name><operator>+=</operator> <operator>(</operator><name>t3</name><operator>*</operator><literal type="number">3</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name>t1</name> <operator>=</operator> <literal type="number">2</literal><operator>*</operator><name>b</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t1</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>t1</name></expr></argument>,<argument><expr><name>c</name><operator>-</operator><name>c</name><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cnt2</name><operator>+=</operator><operator>(</operator><name>t1</name><operator>*</operator><literal type="number">3</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>t1</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
		 <expr_stmt><expr><name>t3</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>a</name></expr></argument>,<argument><expr><name>b</name><operator>-</operator><name>b</name><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cnt2</name><operator>+=</operator> <operator>(</operator><name>t3</name><operator>*</operator><literal type="number">3</literal><operator>)</operator><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>max</name><argument_list>(<argument><expr><name>cnt1</name></expr></argument>,<argument><expr><name>cnt2</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
		

	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
