<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29086195_62784301.cpp"><comment type="line">// Author: Vamsi Krishna Reddy Satti</comment>
<comment type="line">// With love for Competitive Programming!</comment>
 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast_io</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cout_precision</name></cpp:macro> <cpp:value>cout.setf(ios::fixed); cout.precision(32);</cpp:value></cpp:define>
 
<using>using <name>ll</name> <init>= <type><name>int64_t</name></type></init>;</using> <using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using>
<using>using <name>pii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>pll</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>vll</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>

<comment type="line">// -----------------------------------------------------------------------------</comment>

<function><type><name>void</name></type> <name>func</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>b</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>and</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	}</block></while>
	<while>while <condition>(<expr><name>a</name> <operator>&gt;=</operator> <literal type="number">1</literal> <operator>and</operator> <name>b</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{
		<expr_stmt><expr><name>ans</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>fast_io</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>t</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>func</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function></unit>
