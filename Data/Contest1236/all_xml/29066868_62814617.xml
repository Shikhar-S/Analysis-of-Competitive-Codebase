<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29066868_62814617.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>ll</name></expr></argument> &gt;</argument_list></name></type> <name><name>perrow</name><index>[<expr><literal type="number">200000</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>percol</name><index>[<expr><literal type="number">200000</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld %lld"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>x</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perrow</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>percol</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>ll</name></type> <name>upr</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>dwn</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>lft</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>rgh</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>


    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>perrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>perrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>perrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>perrow</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>percol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>percol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>percol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>percol</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>ll</name></type> <name>curmove</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition><block>{

        <if>if<condition>(<expr><name>upr</name> <operator>&gt;</operator> <name>dwn</name> <operator>||</operator> <name>lft</name> <operator>&gt;</operator> <name>rgh</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>

        <comment type="line" format="doxygen">///going right</comment>
        <if>if<condition>(<expr><name>curmove</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{

            <decl_stmt><decl><type><name>ll</name></type> <name>poss</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>perrow</name><index>[<expr><name>upr</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>perrow</name><index>[<expr><name>upr</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lft</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>perrow</name><index>[<expr><name>upr</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>nwrgh</name> <init>= <expr><name><name>perrow</name><index>[<expr><name>upr</name></expr>]</index><index>[<expr><name>poss</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>nwrgh</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>nwrgh</name></expr></argument>, <argument><expr><name>rgh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>tot</name> <operator>+=</operator> <name>nwrgh</name> <operator>-</operator> <name>lft</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>rgh</name> <operator>=</operator> <name>nwrgh</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>upr</name><operator>++</operator></expr>;</expr_stmt>
        }</block></then>

        <comment type="line" format="doxygen">///going down</comment>
        <elseif>else <if>if<condition>(<expr><name>curmove</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>poss</name> <init>= <expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>percol</name><index>[<expr><name>rgh</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>percol</name><index>[<expr><name>rgh</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>upr</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>percol</name><index>[<expr><name>rgh</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>nwdwn</name> <init>= <expr><name><name>percol</name><index>[<expr><name>rgh</name></expr>]</index><index>[<expr><name>poss</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>nwdwn</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>nwdwn</name></expr></argument>, <argument><expr><name>dwn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>tot</name> <operator>+=</operator> <name>nwdwn</name> <operator>-</operator> <name>upr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>dwn</name> <operator>=</operator> <name>nwdwn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>rgh</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <comment type="line" format="doxygen">///going left</comment>
        <elseif>else <if>if<condition>(<expr><name>curmove</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>poss</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>perrow</name><index>[<expr><name>dwn</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>perrow</name><index>[<expr><name>dwn</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>rgh</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>perrow</name><index>[<expr><name>dwn</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>poss</name><operator>--</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>nwlft</name> <init>= <expr><name><name>perrow</name><index>[<expr><name>dwn</name></expr>]</index><index>[<expr><name>poss</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>nwlft</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>nwlft</name></expr></argument>, <argument><expr><name>lft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>tot</name> <operator>+=</operator> <name>rgh</name> <operator>-</operator> <name>nwlft</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>lft</name> <operator>=</operator> <name>nwlft</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>dwn</name><operator>--</operator></expr>;</expr_stmt>
        }</block></then></if></elseif>

        <else>else<block>{

            <decl_stmt><decl><type><name>ll</name></type> <name>poss</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>percol</name><index>[<expr><name>lft</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>percol</name><index>[<expr><name>lft</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>dwn</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>percol</name><index>[<expr><name>lft</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>poss</name><operator>--</operator></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>ll</name></type> <name>nwupr</name> <init>= <expr><name><name>percol</name><index>[<expr><name>lft</name></expr>]</index><index>[<expr><name>poss</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>nwupr</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>upr</name></expr></argument>, <argument><expr><name>nwupr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">//            cout &lt;&lt; "yo : " &lt;&lt; lft &lt;&lt; ' ' &lt;&lt; dwn &lt;&lt; ' ' &lt;&lt; percol[lft][poss] &lt;&lt; endl;</comment>

            <expr_stmt><expr><name>tot</name> <operator>+=</operator> <name>dwn</name> <operator>-</operator> <name>nwupr</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name>upr</name> <operator>=</operator> <name>nwupr</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lft</name><operator>++</operator></expr>;</expr_stmt>
        }</block></else></if>

<comment type="line">//        cout &lt;&lt; curmove &lt;&lt; ' ' &lt;&lt; tot &lt;&lt; endl;</comment>

        <expr_stmt><expr><name>curmove</name> <operator>=</operator> <operator>(</operator><name>curmove</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    }</block></while>
<comment type="line">//    cout &lt;&lt; tot &lt;&lt; endl;</comment>
    <if>if<condition>(<expr><name>tot</name> <operator>!=</operator> <name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
