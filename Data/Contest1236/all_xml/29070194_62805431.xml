<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29070194_62805431.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100010</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>iter</name></cpp:macro> <cpp:value>set&lt;int&gt;::iterator</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>LL</name></decl>,<decl><type ref="prev"/><name>RR</name></decl>,<decl><type ref="prev"/><name>UU</name></decl>,<decl><type ref="prev"/><name>DD</name></decl>;</decl_stmt><decl_stmt><decl><type><name>ll</name></type> <name>res</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>L</name><index>[<expr><name>N</name></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>H</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
  <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>,<decl><type ref="prev"/><name>pos</name></decl>,<decl><type ref="prev"/><name>tag</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt><decl_stmt><decl><type><name>iter</name></type> <name>it</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block type="pseudo"><expr_stmt><expr><name><name>H</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><name><name>H</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
  <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>L</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name><name>H</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>res</name><operator>=</operator><literal type="number">1ll</literal><operator>*</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>LL</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt><expr_stmt><expr><name>RR</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>UU</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt><expr_stmt><expr><name>DD</name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition>
  <block>{
  	<comment type="line">//cout&lt;&lt;x&lt;&lt;"---"&lt;&lt;y&lt;&lt;' '&lt;&lt;res&lt;&lt;endl;</comment>
    <expr_stmt><expr><name>it</name><operator>=</operator><name><name>L</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>&lt;</operator><name>y</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>++</operator><name>it</name></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>pos</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>RR</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>y</name><operator>==</operator><name>pos</name><operator>&amp;&amp;</operator><name>tag</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if><expr_stmt><expr><name>tag</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name><operator>-=</operator><name>pos</name><operator>-</operator><name>y</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><name>pos</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>RR</name><operator>=</operator><name>pos</name></expr>;</expr_stmt>
    <comment type="line">//(x,y+1)</comment>
    <comment type="line">//cout&lt;&lt;x&lt;&lt;"---"&lt;&lt;y&lt;&lt;' '&lt;&lt;res&lt;&lt;endl;</comment>
    <expr_stmt><expr><name>it</name><operator>=</operator><name><name>H</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>&lt;</operator><name>x</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>++</operator><name>it</name></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>pos</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>DD</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name><operator>==</operator><name>pos</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
    <expr_stmt><expr><name>res</name><operator>-=</operator><name>pos</name><operator>-</operator><name>x</name></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><name>pos</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>DD</name><operator>=</operator><name>pos</name></expr>;</expr_stmt>
    <comment type="line">//(x+1,y)</comment>
    <comment type="line">//cout&lt;&lt;x&lt;&lt;"---"&lt;&lt;y&lt;&lt;' '&lt;&lt;res&lt;&lt;endl;</comment>
	<expr_stmt><expr><name>it</name><operator>=</operator><name><name>L</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>&gt;</operator><name>y</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>pos</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>LL</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>y</name><operator>==</operator><name>pos</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
    <expr_stmt><expr><name>res</name><operator>-=</operator><name>y</name><operator>-</operator><name>pos</name></expr>;</expr_stmt><expr_stmt><expr><name>y</name><operator>=</operator><name>pos</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>LL</name><operator>=</operator><name>pos</name></expr>;</expr_stmt>
	<comment type="line">//(x,y-1)</comment>
	<comment type="line">//cout&lt;&lt;x&lt;&lt;"---"&lt;&lt;y&lt;&lt;' '&lt;&lt;res&lt;&lt;endl;</comment>
	<expr_stmt><expr><name>it</name><operator>=</operator><name><name>H</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while<condition>(<expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>&gt;</operator><name>x</name></expr>)</condition><block type="pseudo"><expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt></block></while>
    <expr_stmt><expr><name>pos</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>UU</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name><operator>==</operator><name>pos</name></expr>)</condition><then><block type="pseudo"><break>break;</break></block></then></if>
    <expr_stmt><expr><name>res</name><operator>-=</operator><name>x</name><operator>-</operator><name>pos</name></expr>;</expr_stmt><expr_stmt><expr><name>x</name><operator>=</operator><name>pos</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>UU</name><operator>=</operator><name>pos</name></expr>;</expr_stmt>
    <comment type="line">//(x-1,y)</comment>
  }</block></while>
  <comment type="line">//cout&lt;&lt;res&lt;&lt;"+++"&lt;&lt;endl;</comment>
  <if>if<condition>(<expr><name>res</name><operator>&gt;</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
  <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
