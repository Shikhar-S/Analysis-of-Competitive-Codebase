<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29071340_62796968.cpp"><comment type="block">/* while(!cin.eof()) */</comment>
 
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>(int)(1e9+7)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXI</name></cpp:macro> <cpp:value>(int)(1e15+100)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
 
<function><type><name>int</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>m1</name></decl></parameter>)</parameter_list>
<block>{
    <if>if<condition>(<expr><name>m1</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then>
    <elseif>else <if>if<condition>(<expr><name>m1</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>a</name></expr>;</return></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>m1</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>(</operator><literal type="number">1LL</literal><operator>*</operator><name>a</name><operator>*</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return></block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>m1</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>(</operator><literal type="number">1LL</literal><operator>*</operator><name>a</name><operator>*</operator><call><name>power</name><argument_list>(<argument><expr><call><name>power</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m1</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><name>mod</name></expr>;</return></block></then></if></elseif>
    <else>else <block type="pseudo"><return>return <expr><call><name>power</name><argument_list>(<argument><expr><call><name>power</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>m1</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>%</operator><name>mod</name></expr>;</return></block></else></if>
}</block></function>

<comment type="line">// Driver code to test above functions</comment>
<function><type><name>int32_t</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    
 
    <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <comment type="line">// for getting input from inpu.txt</comment>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// for writing output to output.txt</comment>
    <comment type="line">//freopen("output.txt", "w", stdout);</comment>
    <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
     
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><name>n</name><operator>*</operator><name>n</name></expr></init></decl>;</decl_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>n</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
    <block>{
        <if>if<condition>(<expr><name>i</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block>{
            <while>while<condition>(<expr><name>i</name><operator>&lt;=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>)</condition>
            <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>ans</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>i</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        }</block></then>
        <else>else 
        <block>{
            <while>while<condition>(<expr><name>i</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition>
            <block>{
                <expr_stmt><expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>ans</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>ans</name><operator>--</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>
            }</block></while>
            <expr_stmt><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        }</block></else></if>
    }</block></for>

    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="string">" "</literal></expr>;</expr_stmt></block></for>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></for>
 
    <return>return <expr><literal type="number">0</literal></expr>;</return>
    
}</block></function> </unit>
