<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29064439_62814110.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name> <init>= <expr><literal type="number">1e5</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl> , <decl><type ref="prev"/><name>m</name></decl> , <decl><type ref="prev"/><name>k</name></decl> , <decl><type ref="prev"/><name><name>cnt_n</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name><name>cnt_m</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl> , <decl><type ref="prev"/><name>cot_n</name></decl> , <decl><type ref="prev"/><name>cot_m</name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>( <parameter><decl><type><name>void</name></type></decl></parameter> )</parameter_list> <block>{
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>x</name></decl> , <decl><type ref="prev"/><name>y</name></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr> ;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control> <block>{
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>cnt_n</name><index>[<expr><name>x</name></expr>]</index></name></expr> <operator>,</operator> <expr><operator>++</operator><name><name>cnt_m</name><index>[<expr><name>y</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>right</name> <init>= <expr><name>m</name></expr></init></decl> , <decl><type ref="prev"/><name>up</name> <init>= <expr><literal type="number">1</literal></expr></init></decl> , <decl><type ref="prev"/><name>down</name> <init>= <expr><name>n</name></expr></init></decl> , <decl><type ref="prev"/><name>dir</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>( <expr><name>right</name> <operator>&gt;=</operator> <name>left</name> <operator>&amp;&amp;</operator> <name><name>cnt_m</name><index>[<expr><name>right</name></expr>]</index></name>  <operator>==</operator> <operator>(</operator> <name>down</name> <operator>-</operator> <name>up</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>right</name></expr> <operator>,</operator> <expr><operator>++</operator><name>cot_m</name></expr>;</expr_stmt></block></while>
  <while>while<condition>( <expr><name>down</name> <operator>&gt;=</operator> <name>up</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>cnt_n</name><index>[<expr><name>down</name></expr>]</index></name> <operator>-</operator> <name>cot_m</name> <operator>)</operator> <operator>==</operator> <operator>(</operator> <name>right</name> <operator>-</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>down</name></expr> <operator>,</operator> <expr><operator>++</operator><name>cot_n</name></expr>;</expr_stmt></block></while>
  <while>while<condition>( <expr><name>left</name> <operator>&lt;=</operator> <name>right</name> <operator>&amp;&amp;</operator> <name>up</name> <operator>&lt;=</operator> <name>down</name></expr> )</condition> <block>{
    <if>if<condition>( <expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr> )</condition><then> <block>{
      <while>while<condition>( <expr><name>right</name> <operator>&gt;=</operator> <name>left</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>cnt_m</name><index>[<expr><name>right</name></expr>]</index></name> <operator>-</operator> <name>cot_n</name> <operator>)</operator> <operator>==</operator> <operator>(</operator> <name>down</name> <operator>-</operator> <name>up</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>right</name></expr> <operator>,</operator> <expr><operator>++</operator><name>cot_m</name></expr>;</expr_stmt></block></while>
      <while>while<condition>( <expr><name>down</name> <operator>&gt;=</operator> <name>up</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>cnt_n</name><index>[<expr><name>down</name></expr>]</index></name> <operator>-</operator> <name>cot_m</name> <operator>)</operator> <operator>==</operator> <operator>(</operator> <name>right</name> <operator>-</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>down</name></expr> <operator>,</operator> <expr><operator>++</operator><name>cot_n</name></expr>;</expr_stmt></block></while>
      <if>if<condition>( <expr><name>right</name> <operator>&lt;</operator> <name>left</name></expr> )</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
      <if>if<condition>( <expr><name>up</name> <operator>&gt;</operator> <name>down</name></expr> )</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
      <if>if<condition>( <expr><operator>(</operator> <name><name>cnt_m</name><index>[<expr><name>right</name></expr>]</index></name> <operator>-</operator> <name>cot_n</name> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
      <expr_stmt><expr><operator>++</operator><name>up</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if<condition>( <expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr> )</condition><then> <block>{
      <while>while<condition>( <expr><name>down</name> <operator>&gt;=</operator> <name>up</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>cnt_n</name><index>[<expr><name>down</name></expr>]</index></name> <operator>-</operator> <name>cot_m</name> <operator>)</operator> <operator>==</operator> <operator>(</operator> <name>right</name> <operator>-</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>down</name></expr> <operator>,</operator> <expr><operator>++</operator><name>cot_n</name></expr>;</expr_stmt></block></while>
      <while>while<condition>( <expr><name>left</name> <operator>&lt;=</operator> <name>right</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>cnt_m</name><index>[<expr><name>left</name></expr>]</index></name> <operator>-</operator> <name>cot_n</name> <operator>)</operator> <operator>==</operator> <operator>(</operator> <name>down</name> <operator>-</operator> <name>up</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>left</name></expr> <operator>,</operator> <expr><operator>++</operator><name>cot_m</name></expr>;</expr_stmt></block></while>
      <if>if<condition>( <expr><name>down</name> <operator>&lt;</operator> <name>up</name></expr> )</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
      <if>if<condition>( <expr><name>right</name> <operator>&lt;</operator> <name>left</name></expr> )</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
      <if>if<condition>( <expr><operator>(</operator> <name><name>cnt_n</name><index>[<expr><name>down</name></expr>]</index></name> <operator>-</operator> <name>cot_m</name> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
      <expr_stmt><expr><operator>--</operator><name>right</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if<condition>( <expr><name>dir</name> <operator>==</operator> <literal type="number">3</literal></expr> )</condition><then> <block>{
      <while>while<condition>( <expr><name>left</name> <operator>&lt;=</operator> <name>right</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>cnt_m</name><index>[<expr><name>left</name></expr>]</index></name> <operator>-</operator> <name>cot_n</name> <operator>)</operator> <operator>==</operator> <operator>(</operator> <name>down</name> <operator>-</operator> <name>up</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>left</name></expr> <operator>,</operator> <expr><operator>++</operator><name>cot_m</name></expr>;</expr_stmt></block></while>
      <while>while<condition>( <expr><name>down</name> <operator>&gt;=</operator> <name>up</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>cnt_n</name><index>[<expr><name>up</name></expr>]</index></name> <operator>-</operator> <name>cot_m</name> <operator>)</operator> <operator>==</operator> <operator>(</operator> <name>right</name> <operator>-</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>up</name></expr> <operator>,</operator> <expr><operator>++</operator><name>cot_n</name></expr>;</expr_stmt></block></while>
      <if>if<condition>( <expr><name>right</name> <operator>&lt;</operator> <name>left</name></expr> )</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
      <if>if<condition>( <expr><name>up</name> <operator>&gt;</operator> <name>down</name></expr> )</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
      <if>if<condition>( <expr><operator>(</operator> <name><name>cnt_m</name><index>[<expr><name>left</name></expr>]</index></name> <operator>-</operator> <name>cot_n</name> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
      <expr_stmt><expr><operator>--</operator><name>down</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <while>while<condition>( <expr><name>down</name> <operator>&gt;=</operator> <name>up</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>cnt_n</name><index>[<expr><name>up</name></expr>]</index></name> <operator>-</operator> <name>cot_m</name> <operator>)</operator> <operator>==</operator> <operator>(</operator> <name>right</name> <operator>-</operator> <name>left</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>++</operator><name>up</name></expr> <operator>,</operator> <expr><operator>++</operator><name>cot_n</name></expr>;</expr_stmt></block></while>
      <while>while<condition>( <expr><name>right</name> <operator>&gt;=</operator> <name>left</name> <operator>&amp;&amp;</operator> <operator>(</operator> <name><name>cnt_m</name><index>[<expr><name>right</name></expr>]</index></name> <operator>-</operator> <name>cot_n</name> <operator>)</operator> <operator>==</operator> <operator>(</operator> <name>down</name> <operator>-</operator> <name>up</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator></expr> )</condition> <block type="pseudo"><expr_stmt><expr><operator>--</operator><name>right</name></expr> <operator>,</operator> <expr><operator>++</operator><name>cot_m</name></expr>;</expr_stmt></block></while>
      <if>if<condition>( <expr><name>down</name> <operator>&lt;</operator> <name>up</name></expr> )</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
      <if>if<condition>( <expr><name>right</name> <operator>&lt;</operator> <name>left</name></expr> )</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
      <if>if<condition>( <expr><operator>(</operator> <name><name>cnt_n</name><index>[<expr><name>up</name></expr>]</index></name> <operator>-</operator> <name>cot_m</name> <operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr> )</condition><then> <block type="pseudo"><return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return></block></then></if>
      <expr_stmt><expr><operator>++</operator><name>left</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>dir</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></else></if>
  }</block></while>
  <return>return <expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><literal type="number">0</literal></expr>;</return>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
