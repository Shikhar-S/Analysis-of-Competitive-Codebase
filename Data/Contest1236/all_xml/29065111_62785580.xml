<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29065111_62785580.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bitset&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;cstring&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;ctime&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>max</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a&gt;b?a:b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a&lt;b?a:b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>__int64</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>make_pair(a,b)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-5</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>pi</name><init>=<expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ls</name></cpp:macro> <cpp:value>(num&lt;&lt;1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rs</name></cpp:macro> <cpp:value>(num&lt;&lt;1|1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lson</name></cpp:macro> <cpp:value>ls,l,mid</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rson</name></cpp:macro> <cpp:value>rs,mid+1,r</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MID</name></cpp:macro> <cpp:value>int mid=(l+r)/2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name><init>=<expr><literal type="number">300050</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxm</name><init>=<expr><literal type="number">500050</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>INF</name><init>=<expr><literal type="number">0x7f7f7f7f</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>string</name></type> <name>YES</name><init>=<expr><literal type="string">"YES"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>string</name></type> <name>NO</name><init>=<expr><literal type="string">"NO"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>string</name></type> <name>A</name><init>=<expr><literal type="string">"A"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>string</name></type> <name>B</name><init>=<expr><literal type="string">"B"</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>qpow</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>y</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name>y</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><name>res</name><operator>*</operator><name>x</name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>x</name><operator>=</operator><name>x</name><operator>*</operator><name>x</name><operator>%</operator><name>mod</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>p</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><call><name>qpow</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>p</name><operator>-</operator><operator>(</operator><name>ll</name><operator>)</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
	<return>return <expr><ternary><condition><expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>?</condition><then><expr><name>a</name></expr></then><else>:<expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>exgcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>,<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>,<parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>d</name><init>=<expr><name>a</name></expr></init></decl>;</decl_stmt>
	<if>if<condition>(<expr><name>b</name><operator>!=</operator><literal type="number">0</literal></expr>)</condition><then><block>{
		<expr_stmt><expr><name>d</name><operator>=</operator><call><name>exgcd</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>a</name><operator>%</operator><name>b</name></expr></argument>,<argument><expr><name>y</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name><operator>-=</operator><operator>(</operator><name>a</name><operator>/</operator><name>b</name><operator>)</operator><operator>*</operator><name>x</name></expr>;</expr_stmt>
	}</block></then>
	<else>else<block>{
		<expr_stmt><expr><name>x</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
	}</block></else></if>
	<return>return <expr><name>d</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>T</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>T</name></expr>;</expr_stmt>
	<while>while<condition>(<expr><name>T</name><operator>--</operator></expr>)</condition><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>a</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>b</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ans</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>c</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
		<if>if<condition>(<expr><name>b</name><operator>&gt;=</operator><name>c</name></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ans</name><operator>=</operator><name>c</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name><operator>-=</operator><name>c</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
			<if>if<condition>(<expr><name>a</name><operator>&gt;=</operator><name>b</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">3</literal><operator>*</operator><name>b</name></expr>;</expr_stmt></block></then>
			<else>else <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>+=</operator><name>a</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt></block></else></if>
		}</block></then>
		<else>else <block type="pseudo"><expr_stmt><expr><name>ans</name><operator>=</operator><name>b</name><operator>*</operator><literal type="number">3</literal></expr>;</expr_stmt></block></else></if>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d\n"</literal></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
