<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29086309_62797028.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iomanip&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sstream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_set&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unordered_map&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stack&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;queue&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;deque&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;functional&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iterator&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;numeric&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;utility&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;type_traits&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cmath&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cassert&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<using>using <namespace>namespace <name>placeholders</name>;</namespace></using>

<using>using <name>LL</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using>
<using>using <name>ULL</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using>
<using>using <name>VI</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using>using <name>VVI</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using>using <name>VS</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>string</name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using>using <name>ISS</name> <init>= <type><name>istringstream</name></type></init>;</using>
<using>using <name>OSS</name> <init>= <type><name>ostringstream</name></type></init>;</using>
<using>using <name>PII</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using>using <name>VPII</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>pair</name><argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name> <init>= <expr><name>int</name></expr></init></parameter> &gt;</parameter_list></template> using <name>VT</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name> <init>= <expr><name>int</name></expr></init></parameter> &gt;</parameter_list></template> using <name>VVT</name> <init>= <type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name> <init>= <expr><name>int</name></expr></init></parameter> &gt;</parameter_list></template> using <name>LIM</name> <init>= <type><name><name>numeric_limits</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name></type></init>;</using>

<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>istream</name><modifier>&amp;</modifier></type> <name>operator<name>&gt;&gt;</name></name><parameter_list>( <parameter><decl><type><name>istream</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list><block>{ <for>for <control>( <init><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>t</name> <range>: <expr><name>v</name></expr></range></decl></init> )</control> <block>{ <expr_stmt><expr><name>s</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt> }</block></for> <return>return <expr><name>s</name></expr>;</return> }</block></function>
<function type="operator"><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>ostream</name><modifier>&amp;</modifier></type> <name>operator<name>&lt;&lt;</name></name><parameter_list>( <parameter><decl><type><name>ostream</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt; <argument><expr><name>T</name></expr></argument> &gt;</argument_list></name> <modifier>&amp;</modifier></type><name>v</name></decl></parameter> )</parameter_list><block>{ <for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>int</name><argument_list>( <argument><expr><call><name><name>v</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument> )</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control><block>{ <expr_stmt><expr><name>s</name> <operator>&lt;&lt;</operator> <operator>(</operator> <literal type="string">" "</literal> <operator>+</operator> <operator>!</operator><name>i</name> <operator>)</operator> <operator>&lt;&lt;</operator> <name><name>v</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt> }</block></for> <return>return <expr><name>s</name></expr>;</return> }</block></function>

<function><type><name>void</name></type> <name>in_impl</name><parameter_list>()</parameter_list><block>{}</block></function><empty_stmt>;</empty_stmt>
<function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>TS</name></parameter> &gt;</parameter_list></template> <type><name>void</name></type> <name>in_impl</name><parameter_list>( <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>head</name></decl></parameter>, <parameter><decl><type><name>TS</name> <modifier>&amp;</modifier><modifier>...</modifier></type> <name>tail</name></decl></parameter> )</parameter_list><block>{ <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>head</name></expr>;</expr_stmt> <expr_stmt><expr><call><name>in_impl</name><argument_list>( <argument><expr><name>tail</name> <operator>...</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN</name><parameter_list>( <parameter><type><name>T</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>T __VA_ARGS__; in_impl( __VA_ARGS__ );</cpp:value></cpp:define>

<function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>fromString</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>string</name> <modifier>&amp;</modifier></type><name>s</name></decl></parameter> )</parameter_list> <block>{ <decl_stmt><decl><type><name>T</name></type> <name>res</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>istringstream</name></type> <name>iss</name><argument_list>( <argument><expr><name>s</name></expr></argument> )</argument_list></decl>;</decl_stmt> <expr_stmt><expr><name>iss</name> <operator>&gt;&gt;</operator> <name>res</name></expr>;</expr_stmt> <return>return <expr><name>res</name></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>string</name></type> <name>toString</name><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter> )</parameter_list> <block>{ <decl_stmt><decl><type><name>ostringstream</name></type> <name>oss</name></decl>;</decl_stmt> <expr_stmt><expr><name>oss</name> <operator>&lt;&lt;</operator> <name>a</name></expr>;</expr_stmt> <return>return <expr><call><name><name>oss</name><operator>.</operator><name>str</name></name><argument_list>()</argument_list></call></expr>;</return> }</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMBERED</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>number</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>NUMBERED2( name, number )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUMBERED2</name><parameter_list>( <parameter><type><name>name</name></type></parameter>, <parameter><type><name>number</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>name ## _ ## number</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP1</name><parameter_list>( <parameter><type><name>n</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>REP2( NUMBERED( REP_COUNTER, __LINE__ ), n )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP2</name><parameter_list>( <parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>REP3( i, 0, n )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP3</name><parameter_list>( <parameter><type><name>i</name></type></parameter>, <parameter><type><name>m</name></type></parameter>, <parameter><type><name>n</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>for ( int i = ( int )( m ); i &lt; ( int )( n ); ++i )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_REP</name><parameter_list>( <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>F</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>F</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>( <parameter><type><modifier>...</modifier></type></parameter> )</parameter_list></cpp:macro> <cpp:value>GET_REP( __VA_ARGS__, REP3, REP2, REP1 )( __VA_ARGS__ )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>( <parameter><type><name>e</name></type></parameter>, <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>for ( auto &amp;&amp;e : c )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>( <parameter><type><name>c</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>begin( c ), end( c )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AALL</name><parameter_list>( <parameter><type><name>a</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( remove_all_extents&lt; decltype( a ) &gt;::type * )a, ( remove_all_extents&lt; decltype( a ) &gt;::type * )a + sizeof( a ) / sizeof( remove_all_extents&lt; decltype( a ) &gt;::type )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>( <parameter><type><name>v</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( (int)( v ).size() )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXISTS</name><parameter_list>( <parameter><type><name>c</name></type></parameter>, <parameter><type><name>e</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>( ( c ).find( e ) != ( c ).end() )</cpp:value></cpp:define>

<function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmin</name><parameter_list>( <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter> )</parameter_list><block>{ <if>if <condition>( <expr><name>b</name> <operator>&lt;</operator> <name>a</name></expr> )</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt; <parameter><type><name>typename</name></type> <name>T</name></parameter> &gt;</parameter_list></template> <specifier>inline</specifier> <type><name>bool</name></type> <name>chmax</name><parameter_list>( <parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>b</name></decl></parameter> )</parameter_list><block>{ <if>if <condition>( <expr><name>a</name> <operator>&lt;</operator> <name>b</name></expr> )</condition><then> <block>{ <expr_stmt><expr><name>a</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <return>return <expr><literal type="boolean">true</literal></expr>;</return> }</block></then></if> <return>return <expr><literal type="boolean">false</literal></expr>;</return> }</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EM</name></cpp:macro> <cpp:value>emplace</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EB</name></cpp:macro> <cpp:value>emplace_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BI</name></cpp:macro> <cpp:value>back_inserter</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fst</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMP</name><parameter_list>( <parameter><type><name>x</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; " = " &lt;&lt; ( x ) &lt;&lt; endl</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>( <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>( <argument><expr><literal type="boolean">false</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>( <argument><expr><literal type="number">12</literal></expr></argument> )</argument_list></call> <operator>&lt;&lt;</operator> <name>fixed</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>IN</name><argument_list>( <argument><expr><name>int</name></expr></argument>, <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>VVI</name></type> <name>A</name><argument_list>( <argument><expr><name>N</name></expr></argument>, <argument><expr><call><name>VI</name><argument_list>( <argument><expr><name>N</name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></decl>;</decl_stmt>
	<macro><name>REP</name><argument_list>( <argument>i</argument>, <argument>N</argument> )</argument_list></macro>
	<block>{
		<expr_stmt><expr><call><name>iota</name><argument_list>( <argument><expr><call><name>ALL</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>N</name> <operator>+</operator> <literal type="number">1</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block>
	<for>for <control>( <init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr> )</control>
	<block>{
		<expr_stmt><expr><call><name>reverse</name><argument_list>( <argument><expr><call><name>ALL</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<macro><name>REP</name><argument_list>( <argument>i</argument>, <argument>N</argument> )</argument_list></macro>
	<block>{
		<macro><name>REP</name><argument_list>( <argument>j</argument>, <argument>i</argument> )</argument_list></macro>
		<block>{
			<expr_stmt><expr><call><name>swap</name><argument_list>( <argument><expr><name><name>A</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>A</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		}</block>
	}</block>
	
	<expr_stmt><expr><call><name>for_each</name><argument_list>( <argument><expr><call><name>ALL</name><argument_list>( <argument><expr><name>A</name></expr></argument> )</argument_list></call></expr></argument>, <argument><expr><lambda><capture>[]</capture><parameter_list>( <parameter><decl><type><specifier>const</specifier> <name>VI</name> <modifier>&amp;</modifier></type><name>row</name></decl></parameter> )</parameter_list><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>row</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt> }</block></lambda></expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>flush</name></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
