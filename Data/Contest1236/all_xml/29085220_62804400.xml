<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29085220_62804400.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ansl</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>ansr</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>goleft</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>goright</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name><name>blocked</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>

  <if>if<condition>(<expr><name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>m</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  }</block></then></if>

  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blocked</name><index>[<expr><name><name>a</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>

  <decl_stmt><decl><type><name><name>map</name> <argument_list type="generic">&lt; <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument> &gt;</argument_list></name></type> <name>mymap</name></decl>;</decl_stmt>

  <comment type="line" format="doxygen">/// calc goright()</comment>
  <expr_stmt><expr><call><name><name>mymap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name>n</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>--</operator><name>i</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>blocked</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>blocked</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>rend</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>id</name> <range>: <expr><name><name>blocked</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name>id</name> <operator>-</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><call><name><name>mymap</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>goright</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name><name>mymap</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name><name>goright</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block></else></if>

      <expr_stmt><expr><name><name>mymap</name><index>[<expr><name>id</name> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>goright</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <comment type="line" format="doxygen">/// we know that it's blocked at 0th moment</comment>
    <if>if<condition>(<expr><operator>!</operator><call><name><name>mymap</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>ansr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>mymap</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>-</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>ansr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>m</name> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>

  <comment type="line">// calc goleft</comment>
  <expr_stmt><expr><call><name><name>mymap</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <for>for<control>(<init><decl><type><name>int</name></type> <name>id</name> <range>: <expr><name><name>blocked</name><index>[<expr><name>i</name></expr>]</index></name></expr></range></decl></init>)</control> <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name>i</name> <operator>+</operator> <name>id</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><call><name><name>mymap</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name><name>goleft</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name><name>mymap</name><index>[<expr><name>v</name></expr>]</index></name></expr>;</expr_stmt></block></then>
      <else>else <block type="pseudo"><expr_stmt><expr><name><name>goleft</name><index>[<expr><name>id</name></expr>]</index></name> <operator>=</operator> <name>id</name></expr>;</expr_stmt></block></else></if>
      <expr_stmt><expr><name><name>mymap</name><index>[<expr><name>i</name> <operator>+</operator> <name>id</name></expr>]</index></name> <operator>=</operator> <name><name>goleft</name><index>[<expr><name>id</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>

    <if>if<condition>(<expr><operator>!</operator><call><name><name>mymap</name><operator>.</operator><name>count</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>ansl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <else>else <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>mymap</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>ansl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>a</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>m</name> <operator>-</operator> <name>x</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>

  <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>tot</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
    <expr_stmt><expr><name><name>ansl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ansl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ansr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>ansr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>tot</name> <operator>+=</operator> <name><name>ansr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>ansl</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  }</block></for>

  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>tot</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
