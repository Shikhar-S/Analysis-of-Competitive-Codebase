<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29081424_62783870.cpp"><comment type="line">// Code by H~$~C</comment>
<comment type="line">//#pragma comment(linker, "/STACK:1024000000,1024000000")</comment>
<comment type="line">//#pragma GCC optimize("Ofast", "unroll-loops")</comment>
<comment type="line">//#pragma target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native")</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_CRT_SECURE_NO_WARNINGS</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rint</name></cpp:macro> <cpp:value>register int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (rint i = 0; i &lt; (n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (rint i = (1); i &lt;= (n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (rint i = (a); i &lt;= (b); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (rint i = ((n) - 1); ~i; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per1</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (rint i = (n); i; --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (rint i = (a); i &gt;= (b); --i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>repit</name><parameter_list>(<parameter><type><name>it</name></type></parameter>, <parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (__typeof(a.begin()) it = a.begin(); it != a.end(); ++it)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eprintf</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(fprintf(stderr, __VA_ARGS__) &amp; fflush(stderr))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fillset</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(a, val, sizeof(a))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>All</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(), a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)a.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y0</name></cpp:macro> <cpp:value>y19260817</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>y19268107</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>j0</name></cpp:macro> <cpp:value>j19260817</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>j1</name></cpp:macro> <cpp:value>j19268107</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x0</name></cpp:macro> <cpp:value>x19260817</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x1</name></cpp:macro> <cpp:value>x19268107</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>LOCAL_JUDGE</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>_debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>names</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{
<expr_stmt><expr><operator>(</operator><name>cerr</name> <operator>&lt;&lt;</operator> <name>names</name> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>t</name> <operator>&lt;&lt;</operator> <name>endl</name><operator>)</operator><operator>.</operator><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T1</name></parameter>, <parameter><type><name>typename</name> <modifier>...</modifier></type><name>T</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>void</name></type> <name>_debug</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>names</name></decl></parameter>, <parameter><decl><type><name>T1</name> <modifier>&amp;&amp;</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>T</name> <modifier>&amp;&amp;</modifier><modifier>...</modifier></type> <name>t</name></decl></parameter>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>comma</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<expr_stmt><expr><operator>(</operator><call><name><name>cerr</name><operator>.</operator><name>write</name></name><argument_list>(<argument><expr><name>names</name></expr></argument>, <argument><expr><name>comma</name> <operator>-</operator> <name>names</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" = "</literal> <operator>&lt;&lt;</operator> <name>t1</name> <operator>&lt;&lt;</operator> <literal type="string">", "</literal><operator>)</operator><operator>.</operator><call><name>flush</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>_debug</name><argument_list>(<argument><expr><name>comma</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>t</name> <operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Debug</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_debug(#__VA_ARGS__, __VA_ARGS__)</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<struct>struct <name>__STARTER_OF_PROGRAM__</name> <block>{<public type="default"> <constructor><name>__STARTER_OF_PROGRAM__</name><parameter_list>()</parameter_list> <block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
  <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"Code by H~$~C: \n"</literal> <operator>&lt;&lt;</operator> <name>flush</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="null">nullptr</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>fixed</name> <operator>&lt;&lt;</operator> <call><name>setprecision</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></constructor> </public>}</block> <decl><name>__starter_of_program__</name></decl>;</struct>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LOCAL_JUDGE</name></cpp:ifdef>
<struct>struct <name>__ENDDER_OF_PROGRAM__</name> <block>{<public type="default"> <destructor><name>~<name>__ENDDER_OF_PROGRAM__</name></name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><name>cerr</name> <operator>&lt;&lt;</operator> <literal type="string">"\n\nTime elasped: "</literal> <operator>&lt;&lt;</operator> <call><name>clock</name><argument_list>()</argument_list></call> <operator>*</operator> <literal type="number">1000.0</literal> <operator>/</operator> <name>CLOCKS_PER_SEC</name> <operator>&lt;&lt;</operator> <literal type="string">" ms\n"</literal> <operator>&lt;&lt;</operator> <name>flush</name></expr>;</expr_stmt>
}</block></destructor> </public>}</block> <decl><name>__endder_of_program__</name></decl>;</struct>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<using>using <name>ll</name> <init>= <type><name>long</name> <name>long</name></type></init>;</using> <using>using <name>ull</name> <init>= <type><name>unsigned</name> <name>long</name> <name>long</name></type></init>;</using> <using>using <name>uint</name> <init>= <type><name>unsigned</name> <name>int</name></type></init>;</using>
<using>using <name>ld</name> <init>= <type><name>long</name> <name>double</name></type></init>;</using> <using>using <name>pii</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>pll</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using>using <name>pli</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type></init>;</using> <using>using <name>pil</name> <init>= <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>min_queue</name> <init>= <type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name><name>vector</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument>, <argument><expr><name><name>greater</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type></init>;</using>
<using><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> using <name>max_queue</name> <init>= <type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type></init>;</using>
<decl_stmt><decl><type><name>mt19937</name></type> <name>gen</name><argument_list>(<argument><expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
<decl_stmt><decl><specifier>static</specifier> <type><name><name>uniform_int_distribution</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>__disint__</name></decl>;</decl_stmt>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>randint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__disint__</name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>int</name></type> <name>randint</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>l</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>r</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><call><name>__disint__</name><argument_list>(<argument><expr><name>gen</name></expr></argument>)</argument_list></call> <operator>%</operator> <operator>(</operator><name>r</name> <operator>-</operator> <name>l</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>l</name></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>reinit</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>t</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name><name>t</name><operator>.</operator>~<name>T</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><operator>new</operator> <operator>(</operator><operator>&amp;</operator><name>t</name><operator>)</operator> <call><name>T</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>T</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>chmax</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name><name>initializer_list</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>max</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>T</name></type> <name>chmin</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name><name>initializer_list</name> <argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><name>x</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return> }</block></function>
<function><specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>()</parameter_list> <block>{ }</block></function> <function><specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>()</parameter_list> <block>{ }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>x</name></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>U</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name><name>cout</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>write</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name></type> <name>U</name></parameter>&gt;</parameter_list></template>
<specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>, <argument><expr><name>U</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>read</name><argument_list>(<argument><expr><name><name>x</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>}</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name> <modifier>...</modifier></type><name>Ts</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>read</name><parameter_list>(<parameter><decl><type><name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>Ts</name> <modifier>&amp;</modifier><modifier>...</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><call><name>read</name><argument_list>(<argument><expr><name>y</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>typename</name> <modifier>...</modifier></type><name>Ts</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>write</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>T</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Ts</name> <modifier>&amp;</modifier><modifier>...</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
<expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><operator>(</operator><sizeof type="pack">sizeof...<argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></sizeof> <operator>&amp;&amp;</operator> <operator>(</operator><call><name><name>cout</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>,</operator> <literal type="number">0</literal><operator>)</operator><operator>)</operator></expr><operator>,</operator> <expr><call><name>write</name><argument_list>(<argument><expr><name>y</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>writeln</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(write(__VA_ARGS__), cout.put('\n'), 0)</cpp:value></cpp:define>
<function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>It</name></parameter>&gt;</parameter_list></template> <specifier>inline</specifier> <type><name>void</name></type> <name>_write</name><parameter_list>(<parameter><decl><type><name>It</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>It</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
<decl_stmt><decl><type><specifier>register</specifier> <name>char</name></type> <name>flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <while>while <condition>(<expr><name>a</name> <operator>!=</operator> <name>b</name></expr>)</condition> <block>{ <expr_stmt><expr><call><name>flag</name> <argument_list>&amp;&amp; <argument><expr><operator>(</operator><call><name><name>cout</name><operator>.</operator><name>put</name></name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>; <argument><expr><call><name>write</name><argument_list>(<argument><expr><operator>*</operator><name>a</name> <operator>++</operator></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>flag</name> <operator>=</operator> <literal type="number">1</literal></expr></argument>;</argument_list></call></expr></expr_stmt> }</block></while> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_writeln</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(_write(__VA_ARGS__), cout.put('\n'), 0)</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod1</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>, <decl><type ref="prev"/><name>mod2</name> <init>= <expr><literal type="number">998244353</literal></expr></init></decl>, <decl><type ref="prev"/><name>mod3</name> <init>= <expr><literal type="number">1000000009</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>EPS</name> <init>= <expr><literal type="number">1e-9</literal></expr></init></decl>, <decl><type ref="prev"/><name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>_E_</name> <init>= <expr><call><name>exp</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">0x3f3f3f3f</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>lnf</name> <init>= <expr><literal type="number">0x3f3f3f3f3f3f3f3f</literal></expr></init></decl>;</decl_stmt>

<function><type><name>signed</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>tests</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>tests</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>tests</name><operator>--</operator></expr>)</condition> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>read</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>b</name> <operator>-=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>writeln</name><argument_list>(<argument><expr><name>p</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
