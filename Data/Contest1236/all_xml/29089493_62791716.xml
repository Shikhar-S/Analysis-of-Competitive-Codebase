<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29089493_62791716.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<function><type><name>long</name> <name>long</name></type> <name>pow</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>x</name><init>=<expr><literal type="number">2</literal></expr></init></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><then> <block>{
        <comment type="line">//printf("%lli\n",1);</comment>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>p</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then> <block>{
        <return>return <expr><operator>(</operator><operator>(</operator><name>x</name><operator>%</operator><literal type="number">1000000007</literal><operator>)</operator><operator>*</operator><call><name>pow</name><argument_list>(<argument><expr><name>p</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>)</operator><operator>%</operator><literal type="number">1000000007</literal></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>k</name><init>=<expr><call><name>pow</name><argument_list>(<argument><expr><operator>(</operator><name>p</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>k</name><operator>*</operator><name>k</name><operator>)</operator><operator>%</operator><literal type="number">1000000007</literal></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lli%lli"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//printf("%lli\n",pow(3));</comment>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lli"</literal></expr></argument>,<argument><expr><call><name>pow</name><argument_list>(<argument><expr><name>n</name></expr></argument>,<argument><expr><operator>(</operator><call><name>pow</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
