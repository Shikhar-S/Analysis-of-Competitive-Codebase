<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29058615_62814351.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>ll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>pll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>,<argument><expr><name>ll</name></expr></argument>&gt;</argument_list></name></type> <name>plll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>,<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>ppll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rall</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).rbegin(), (x).rend()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fst</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>snd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ins</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">5e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument> &gt;</argument_list></name></type> <name>mpr</name></decl>,<decl><type ref="prev"/><name>mpc</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pll</name></expr></argument>&gt;</argument_list></name></type> <name>kr</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>u</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>r</name></decl>,<decl><type ref="prev"/><name>nl</name></decl>,<decl><type ref="prev"/><name>nr</name></decl>,<decl><type ref="prev"/><name>nu</name></decl>,<decl><type ref="prev"/><name>nd</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list><block>{
    <for>for<control>(<init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><name>x1</name></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <name>x2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <for>for<control>(<init><decl><type><name>ll</name></type> <name>j</name> <init>= <expr><name>y1</name></expr></init></decl>;</init><condition><expr><name>j</name> <operator>&lt;=</operator> <name>y2</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control><block>{
            <if>if<condition>(<expr><operator>!</operator><call><name>binary_search</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>kr</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><call><name>make_pair</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><then><block>{
                <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><name><name>mpr</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>mpc</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><call><name>erase</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
    }</block></for>
}</block></function>
<function><type><name>ll</name></type> <name>get</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>np</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>mpr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><name>nr</name> <operator>=</operator> <operator>*</operator><name><name>mpr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><operator>*</operator><name><name>mpr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>d</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>r</name> <operator>=</operator> <name>nr</name></expr>;</expr_stmt>
        <return>return <expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>mpc</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><name>nd</name> <operator>=</operator> <operator>*</operator><name><name>mpc</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><operator>*</operator><name><name>mpc</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>d</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> <operator>=</operator> <name>nd</name></expr>;</expr_stmt>
        <return>return <expr><name>d</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>mpr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><name>nl</name> <operator>=</operator> <operator>*</operator><name><name>mpr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><operator>*</operator><name><name>mpr</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>l</name> <operator>=</operator> <name>nl</name></expr>;</expr_stmt>
        <return>return <expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
    }</block></then></if>
    <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{
        <if>if<condition>(<expr><name><name>mpc</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block type="pseudo"><return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block></then></if>
        <expr_stmt><expr><name>nu</name> <operator>=</operator> <operator>*</operator><name><name>mpc</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>check</name><argument_list>(<argument><expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><name>x</name></expr></argument>,<argument><expr><operator>*</operator><name><name>mpc</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>rbegin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>u</name> <operator>=</operator> <name>nu</name></expr>;</expr_stmt>
        <return>return <expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
    }</block></then></if>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//freopen(".in", "r", stdin);</comment>
    <comment type="line">//freopen(".out", "w", stdout);</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr><operator>,</operator><expr><name>r</name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>kr</name><operator>.</operator><name>pb</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name></expr>,<expr><name>y</name></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>kr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for<control>(<init><expr><name>auto</name> <operator>&amp;</operator><name>it</name> <operator>:</operator> <name>kr</name></expr></init>)</control><block>{
        <expr_stmt><expr><name><name>mpr</name><index>[<expr><name><name>it</name><operator>.</operator><name>fst</name></name></expr>]</index></name><operator>.</operator><call><name>ins</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>snd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mpc</name><index>[<expr><name><name>it</name><operator>.</operator><name>snd</name></name></expr>]</index></name><operator>.</operator><call><name>ins</name><argument_list>(<argument><expr><name><name>it</name><operator>.</operator><name>fst</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <decl_stmt><decl><type><name>int</name></type> <name>np</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while<condition>(<expr><name>u</name> <operator>&lt;=</operator> <name>d</name> <operator>||</operator> <name>l</name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><block>{
        <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>u</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>u</name><operator>++</operator></expr>;</expr_stmt>}</block></then></if>
        <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>r</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>r</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if>
        <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>d</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>d</name><operator>--</operator></expr>;</expr_stmt>}</block></then></if>
        <if>if<condition>(<expr><name>np</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then><block>{<expr_stmt><expr><call><name>get</name><argument_list>(<argument><expr><name>l</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>l</name><operator>++</operator></expr>;</expr_stmt>}</block></then></if>
        <expr_stmt><expr><name>np</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>np</name> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="block" format="doxygen">/**
5 5 7
2 1
2 2
2 3
2 4
3 4
4 4
4 2
*/</comment>
</unit>
