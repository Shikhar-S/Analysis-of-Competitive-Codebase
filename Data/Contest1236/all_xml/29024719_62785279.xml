<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29024719_62785279.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector &lt; int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>pair &lt; int, int &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro> <cpp:value>vector &lt; pair &lt; int, int &gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vvi</name></cpp:macro> <cpp:value>vector &lt; vector &lt; int &gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>X</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>( <parameter><type><name>i</name></type></parameter>, <parameter><type><name>lo</name></type></parameter>, <parameter><type><name>hi</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>for( int i = (lo);i &lt; (hi);i++ )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DFOR</name><parameter_list>( <parameter><type><name>i</name></type></parameter>, <parameter><type><name>hi</name></type></parameter>, <parameter><type><name>lo</name></type></parameter> )</parameter_list></cpp:macro> <cpp:value>for( int i = (hi);i &gt;= (lo);i-- )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pqueue</name></cpp:macro> <cpp:value>priority_queue</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name> <name>int</name></type> <name>MOD</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<function><type><name>ll</name></type> <name>ADD</name><parameter_list>( <parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{
	<return>return <expr><operator>(</operator> <operator>(</operator> <name>a</name> <operator>%</operator> <name>MOD</name> <operator>)</operator> <operator>+</operator> <operator>(</operator> <name>b</name> <operator>%</operator> <name>MOD</name> <operator>)</operator> <operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>SUB</name><parameter_list>( <parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{
	<return>return <expr><operator>(</operator> <operator>(</operator> <name>a</name> <operator>%</operator> <name>MOD</name> <operator>)</operator> <operator>-</operator> <operator>(</operator> <name>b</name> <operator>%</operator> <name>MOD</name> <operator>)</operator> <operator>+</operator> <name>MOD</name> <operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>MUL</name><parameter_list>( <parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{
	<return>return <expr><operator>(</operator> <operator>(</operator> <name>a</name> <operator>%</operator> <name>MOD</name> <operator>)</operator> <operator>*</operator> <operator>(</operator> <name>b</name> <operator>%</operator> <name>MOD</name> <operator>)</operator> <operator>)</operator> <operator>%</operator> <name>MOD</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>POT</name><parameter_list>( <parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>k</name></decl></parameter> )</parameter_list>
<block>{
	<if>if <condition>( <expr><name>k</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition><then>
		<block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>

	<decl_stmt><decl><type><name>ll</name></type> <name>ret</name> <init>= <expr><call><name>POT</name><argument_list>( <argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name> <operator>/</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>MUL</name><argument_list>( <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>ret</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<if>if <condition>( <expr><name>k</name> <operator>%</operator> <literal type="number">2</literal></expr> )</condition><then>
		<block type="pseudo"><return>return <expr><call><name>MUL</name><argument_list>( <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</return></block></then></if>
	<return>return <expr><name>ret</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>DIV</name><parameter_list>( <parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter> )</parameter_list>
<block>{
	<return>return <expr><call><name>MUL</name><argument_list>( <argument><expr><name>a</name></expr></argument> , <argument><expr><call><name>POT</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><name>MOD</name> <operator>-</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></argument> )</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>isPrime</name><parameter_list>( <parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter> )</parameter_list>
<block>{
	<for>for <control>( <init><decl><type><name>ll</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init><condition><expr><name>i</name> <operator>&lt;=</operator> <call><name>sqrt</name><argument_list>( <argument><expr><name>x</name></expr></argument> )</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr> )</control>
		<block type="pseudo"><if>if <condition>( <expr><name>x</name> <operator>%</operator> <name>i</name></expr> )</condition><then>
			<block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if></block></for>
	<return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>solve</name><parameter_list>( )</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>m1</name> <init>= <expr><call><name>min</name><argument_list>( <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>m2</name> <init>= <expr><call><name>min</name><argument_list>( <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name> <operator>/</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>m2</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>b</name> <operator>-=</operator> <name>m2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ans</name> <operator>+=</operator> <call><name>min</name><argument_list>( <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name> <operator>/</operator> <literal type="number">2</literal></expr></argument> )</argument_list></call> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="string">"\n"</literal></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
	<while>while <condition>( <expr><name>t</name><operator>--</operator></expr> )</condition>
		<block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

</unit>
