<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29071554_62793304.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name><name>ans</name><index>[<expr><literal type="number">303</literal></expr>]</index><index>[<expr><literal type="number">303</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>, <decl><type ref="prev"/><name>cur</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>c</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>r</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>cur</name><operator>++</operator></expr>;</expr_stmt></block></for>
		}</block></then>
		<else>else<block>{
			<for>for<control>(<init><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name>N</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>r</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>r</name><operator>--</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name><name>ans</name><index>[<expr><name>r</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>=</operator> <name>cur</name><operator>++</operator></expr>;</expr_stmt></block></for>
		}</block></else></if>
	}</block></for>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>N</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d%c"</literal></expr></argument>, <argument><expr><name><name>ans</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">" \n"</literal><index>[<expr><name>j</name> <operator>==</operator> <name>N</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for></block></for>
		
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
