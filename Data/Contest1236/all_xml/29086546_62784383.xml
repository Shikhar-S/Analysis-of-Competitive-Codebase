<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29086546_62784383.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a.begin(),a.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(a).size())</cpp:value></cpp:define>
<comment type="line">//#define ONLINE_JUDGE</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifdef>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEBUG</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if(DEBUG) cout&lt;&lt;#a&lt;&lt;" = "&lt;&lt;(a)&lt;&lt;endl</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Time</name></cpp:macro> <cpp:value>((long long)(clock()*1000/CLOCKS_PER_SEC))</cpp:value></cpp:define>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"( "</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>T</name><modifier>&amp;</modifier></type><name>x</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">")"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><return>return <expr><name>os</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"( "</literal></expr>;</expr_stmt><for>for<control>(<init><decl><type><name>T</name></type> <name>x</name><range>:<expr><name>a</name></expr></range></decl></init>)</control><block type="pseudo"><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><name>x</name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">")"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt><return>return <expr><name>os</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><name><name>stack</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>b</name></decl>;</decl_stmt><while>while<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>back</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>a</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while><expr_stmt><expr><call><name>reverse</name><argument_list>(<argument><expr><call><name>all</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><name>b</name></expr>;</expr_stmt><return>return <expr><name>os</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><name><name>queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>b</name></decl>;</decl_stmt><while>while<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>front</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>a</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><name>b</name></expr>;</expr_stmt><return>return <expr><name>os</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><name><name>priority_queue</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>)</parameter_list><block>{<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>b</name></decl>;</decl_stmt><while>while<condition>(<expr><call><name>sz</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><expr_stmt><expr><call><name><name>b</name><operator>.</operator><name>push_back</name></name><argument_list>(<argument><expr><call><name><name>a</name><operator>.</operator><name>top</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr><operator>,</operator><expr><call><name><name>a</name><operator>.</operator><name>pop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></while><expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><name>b</name></expr>;</expr_stmt><return>return <expr><name>os</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>X</name></parameter>,<parameter><type><name>typename</name></type> <name>Y</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"("</literal><operator>&lt;&lt;</operator><name><name>a</name><operator>.</operator><name>first</name></name><operator>&lt;&lt;</operator><literal type="string">" "</literal><operator>&lt;&lt;</operator><name><name>a</name><operator>.</operator><name>second</name></name><operator>&lt;&lt;</operator><literal type="string">")"</literal></expr>;</expr_stmt><expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><return>return <expr><name>os</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>&gt;</parameter_list></template><type><name>ostream</name><modifier>&amp;</modifier></type><name>operator<name>&lt;&lt;</name></name><parameter_list>(<parameter><decl><type><name>ostream</name><modifier>&amp;</modifier></type><name>os</name></decl></parameter>,<parameter><decl><type><name><name>complex</name><argument_list type="generic">&lt;<argument><expr><name>T</name></expr></argument>&gt;</argument_list></name></type><name>a</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>os</name><operator>&lt;&lt;</operator><literal type="string">"(r="</literal><operator>&lt;&lt;</operator><call><name><name>a</name><operator>.</operator><name>real</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">" i="</literal><operator>&lt;&lt;</operator><call><name><name>a</name><operator>.</operator><name>imag</name></name><argument_list>()</argument_list></call><operator>&lt;&lt;</operator><literal type="string">") "</literal></expr>;</expr_stmt><expr_stmt><expr><call><name><name>os</name><operator>.</operator><name>flush</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt><return>return <expr><name>os</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>X</name></parameter>,<parameter><type><name>typename</name></type> <name>Y</name></parameter>&gt;</parameter_list></template><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>-=</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>A</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name></type><name>B</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>A</name><operator>.</operator><name>x</name></name><operator>-=</operator><name><name>B</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt><expr_stmt><expr><name><name>A</name><operator>.</operator><name>y</name></name><operator>-=</operator><name><name>B</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt><return>return <expr><name>A</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>X</name></parameter>,<parameter><type><name>typename</name></type> <name>Y</name></parameter>&gt;</parameter_list></template><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>operator<name>+=</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name><modifier>&amp;</modifier></type><name>A</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name></type><name>B</name></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name><name>A</name><operator>.</operator><name>x</name></name><operator>+=</operator><name><name>B</name><operator>.</operator><name>x</name></name></expr>;</expr_stmt><expr_stmt><expr><name><name>A</name><operator>.</operator><name>y</name></name><operator>+=</operator><name><name>B</name><operator>.</operator><name>y</name></name></expr>;</expr_stmt><return>return <expr><name>A</name></expr>;</return>}</block></function>
<comment type="line">//template&lt;typename X,typename Y,typename Z&gt;pair&lt;X,Y&gt;&amp;operator*=(pair&lt;X,Y&gt;&amp;A,Z n){A.x*=n;A.y*=n;return A;}</comment>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>X</name></parameter>,<parameter><type><name>typename</name></type> <name>Y</name></parameter>&gt;</parameter_list></template><type><name>X</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name></type><name>A</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name></type><name>B</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>A</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>B</name><operator>.</operator><name>x</name></name><operator>+</operator><name><name>A</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>B</name><operator>.</operator><name>y</name></name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>X</name></parameter>,<parameter><type><name>typename</name></type> <name>Y</name></parameter>&gt;</parameter_list></template><type><name>X</name></type> <name>operator<name>^</name></name><parameter_list>(<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name></type><name>A</name></decl></parameter>,<parameter><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>X</name></expr></argument>,<argument><expr><name>Y</name></expr></argument>&gt;</argument_list></name></type><name>B</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name><name>A</name><operator>.</operator><name>x</name></name><operator>*</operator><name><name>B</name><operator>.</operator><name>y</name></name><operator>-</operator><name><name>A</name><operator>.</operator><name>y</name></name><operator>*</operator><name><name>B</name><operator>.</operator><name>x</name></name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>X</name></parameter>,<parameter><type><name>typename</name></type> <name>Y</name></parameter>&gt;</parameter_list></template><type><name>X</name></type> <name>operator<name>^</name></name><parameter_list>(<parameter><decl><type><name>X</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>Y</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>^=</operator><name>b</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>X</name></parameter>,<parameter><type><name>typename</name></type> <name>Y</name></parameter>&gt;</parameter_list></template><type><name>X</name></type> <name>operator<name>+</name></name><parameter_list>(<parameter><decl><type><name>X</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>Y</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>+=</operator><name>b</name></expr>;</return>}</block></function><function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>X</name></parameter>,<parameter><type><name>typename</name></type> <name>Y</name></parameter>&gt;</parameter_list></template><type><name>X</name></type> <name>operator<name>-</name></name><parameter_list>(<parameter><decl><type><name>X</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>Y</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>-=</operator><name>b</name></expr>;</return>}</block></function>
<function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>X</name></parameter>,<parameter><type><name>typename</name></type> <name>Y</name></parameter>&gt;</parameter_list></template><type><name>X</name></type> <name>operator<name>*</name></name><parameter_list>(<parameter><decl><type><name>X</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>Y</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>*=</operator><name>b</name></expr>;</return>}</block></function><function type="operator"><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>X</name></parameter>,<parameter><type><name>typename</name></type> <name>Y</name></parameter>&gt;</parameter_list></template><type><name>X</name></type> <name>operator<name>/</name></name><parameter_list>(<parameter><decl><type><name>X</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>Y</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<return>return <expr><name>a</name><operator>/=</operator><name>b</name></expr>;</return>}</block></function>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef><typedef>typedef <type><name>double</name></type> <name>dd</name>;</typedef><typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>pii</name>;</typedef><typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>vi</name>;</typedef><typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>&gt;</argument_list></name></type><name>vii</name>;</typedef><typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>vi</name></expr></argument>&gt;</argument_list></name></type><name>vvi</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>base</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>power</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>mod</name><init>=<expr><name>base</name></expr></init></decl></parameter>)</parameter_list><block>{<expr_stmt><expr><name>a</name><operator>=</operator><ternary><condition><expr><name>a</name><operator>&lt;</operator><literal type="number">0</literal></expr>?</condition><then><expr><operator>(</operator><name>mod</name><operator>-</operator><operator>(</operator><operator>-</operator><name>a</name><operator>)</operator><operator>%</operator><name>mod</name><operator>)</operator></expr></then><else>:<expr><operator>(</operator><name>a</name><operator>%</operator><name>mod</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt><decl_stmt><decl><type><name>ll</name></type> <name>r</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt><while>while<condition>(<expr><name>n</name></expr>)</condition><block>{<if>if<condition>(<expr><name>n</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>r</name><operator>=</operator><name>r</name><operator>*</operator><name>a</name><operator>%</operator><name>mod</name></expr>;</expr_stmt></block></then></if><expr_stmt><expr><name>a</name><operator>=</operator><name>a</name><operator>*</operator><name>a</name><operator>%</operator><name>mod</name></expr>;</expr_stmt><expr_stmt><expr><name>n</name><operator>&gt;&gt;=</operator><literal type="number">1</literal></expr>;</expr_stmt>}</block></while><return>return <expr><name>r</name></expr>;</return>}</block></function>

<function_decl><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>argc</name></decl></parameter>,<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
	<expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if>if <condition>(<expr><name>argc</name><operator>&gt;</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>freopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"r"</literal></expr></argument>,<argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><empty_stmt>;</empty_stmt></block></then></if>
    <if>if <condition>(<expr><name>argc</name><operator>&gt;</operator><literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>freopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,<argument><expr><literal type="string">"w"</literal></expr></argument>,<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>)</condition><then><block type="pseudo"><empty_stmt>;</empty_stmt></block></then></if>
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>t</name></expr>;</condition><incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>solve</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
    <expr_stmt><expr><call><name>debug</name><argument_list>(<argument><expr><name>Time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
<comment type="line">//================================================================Head=========================================================================//</comment>

<function><type><name>void</name></type> <name>solve</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>testID</name></decl></parameter>)</parameter_list><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>b</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block>{
        <expr_stmt><expr><operator>--</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>ans</name></expr>;</expr_stmt>
    }</block></while>
    <while>while <condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition><block>{
        <expr_stmt><expr><operator>--</operator><name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>ans</name></expr>;</expr_stmt>
    }</block></while>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>*</operator> <literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
}</block></function>
</unit>
