<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29030212_62785829.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FastRead</name></cpp:macro> <cpp:value>ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i=(a);i&lt;=(n);++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RFOR</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i=(n);i&gt;=(a);--i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FI</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (ll i=0; i&lt;(n); ++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ZERO</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a),0,sizeof((a)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINUS</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset((a),-1,sizeof((a)))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>f</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>s</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>g</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>g.begin(),g.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(ll)x.size()</cpp:value></cpp:define>
<function><type><name>int</name></type> <name>fastMax</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>y</name><operator>-</operator><name>x</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">32</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>)</operator><operator>^</operator><name>y</name></expr>;</return> }</block></function>
<function><type><name>int</name></type> <name>fastMin</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list> <block>{ <return>return <expr><operator>(</operator><operator>(</operator><operator>(</operator><name>y</name><operator>-</operator><name>x</name><operator>)</operator><operator>&gt;&gt;</operator><operator>(</operator><literal type="number">32</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>x</name><operator>^</operator><name>y</name><operator>)</operator><operator>)</operator><operator>^</operator><name>x</name></expr>;</return> }</block></function>
 
<comment type="line">// #include &lt;ext/pb_ds/assoc_container.hpp&gt; // Common file</comment>
<comment type="line">// #include &lt;ext/pb_ds/tree_policy.hpp&gt;     // Including tree_order_statistics_node_updat</comment>
<comment type="line">// using namespace __gnu_pbds;</comment>
<comment type="line">// typedef tree&lt;ll, null_type, less&lt;ll&gt;, rb_tree_tag, tree_order_statistics_node_update&gt; ordered_set;</comment>

<function><type><name>void</name></type> <name>solve</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt> <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ll</name></type> <name>stones</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <macro><name>FOR</name><argument_list>(<argument>aa</argument>,<argument><literal type="number">0</literal></argument>,<argument>a</argument>)</argument_list></macro><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>f_b</name> <init>= <expr><literal type="number">2</literal><operator>*</operator><name>aa</name></expr></init></decl>;</decl_stmt>
        <if>if<condition>(<expr><name>f_b</name> <operator>&gt;</operator> <name>b</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then>
        <else>else <block>{
            <decl_stmt><decl><type><name>ll</name></type> <name>b_left</name> <init>= <expr><name>b</name> <operator>-</operator> <name>f_b</name></expr></init></decl>;</decl_stmt>

            <macro><name>FOR</name><argument_list>(<argument>bb</argument>,<argument><literal type="number">0</literal></argument>,<argument>b_left</argument>)</argument_list></macro><block>{
                <if>if<condition>(<expr><name>bb</name><operator>*</operator><literal type="number">2</literal> <operator>&gt;</operator> <name>c</name></expr>)</condition><then> <block type="pseudo"><continue>continue;</continue></block></then></if>
                <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><name>aa</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>aa</name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>ans</name> <operator>=</operator> <name>ans</name> <operator>+</operator> <name>bb</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>bb</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>stones</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>stones</name></expr></argument>,<argument><expr><name>ans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block>
        }</block></else></if>
    }</block>

    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>stones</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
}</block></function>   

<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
 
   <expr_stmt><expr><name>FastRead</name></expr>;</expr_stmt>    
 
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input.txt"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output.txt"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <decl_stmt><decl><type><name>ll</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <macro><name>FOR</name><argument_list>(<argument>i</argument>,<argument><literal type="number">1</literal></argument>,<argument>t</argument>)</argument_list></macro><block>{
        <comment type="line">// cout&lt;&lt;"Case #"&lt;&lt;i&lt;&lt;": ";</comment>
        <expr_stmt><expr><call><name>solve</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block>
}</block></function></unit>
