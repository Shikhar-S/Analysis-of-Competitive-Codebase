<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29056361_62796428.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIM</name></cpp:macro> <cpp:value>300009</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>((long long)1e18+9ll)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pairll</name></cpp:macro> <cpp:value>pair&lt;long long,long long&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fast</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false),cin.tie(0),cout.tie(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>amen</name></cpp:macro> <cpp:value>exit(0)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODULO</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>l</name></decl>,<decl><type ref="prev"/><name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name><name>a</name><index>[<expr><name>DIM</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>long</name> <name>long</name></type> <name>mpow</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl></parameter>,<parameter><decl><type><name>long</name> <name>long</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>curr</name><init>=<expr><name>n</name></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><name>m</name></expr>)</condition><block>{
		<if>if<condition>(<expr><name>m</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><expr_stmt><expr><name>res</name><operator>=</operator><operator>(</operator><name>res</name><operator>*</operator><name>curr</name><operator>)</operator><operator>%</operator><name>MODULO</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>curr</name><operator>=</operator><operator>(</operator><name>curr</name><operator>*</operator><name>curr</name><operator>)</operator><operator>%</operator><name>MODULO</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>m</name><operator>/=</operator><literal type="number">2</literal></expr>;</expr_stmt>
	}</block></while>
	<return>return <expr><name>res</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
 
	<expr_stmt><expr><name>fast</name></expr>;</expr_stmt> 

	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>mpow</name><argument_list>(<argument><expr><call><name>mpow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>amen</name></expr>;</expr_stmt>
}</block></function></unit>
