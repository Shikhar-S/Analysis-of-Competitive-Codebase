<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29082634_62814658.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdio&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;cstdlib&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;vector&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_n</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>dir</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>next</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>dirx</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>dirx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>obstacles</name><argument_list>(<argument><expr><name>k</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>rows</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>cols</name><argument_list>(<argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obstacles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>obstacles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rows</name><index>[<expr><name><name>obstacles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>obstacles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cols</name><index>[<expr><name><name>obstacles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>second</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name><name>obstacles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
        <expr_stmt><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>cur</name> <init>= <expr><call><name>make_pair</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>curdir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>up</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>down</name> <init>= <expr><name>n</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>right</name> <init>= <expr><name>m</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
        <comment type="line">// printf("%d %d\n", cur.first, cur.second);</comment>
        <if>if <condition>(<expr><name><name>dir</name><index>[<expr><name>curdir</name></expr>]</index></name><operator>.</operator><name>first</name></expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>cury</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>cols</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cur</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>cols</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// printf("%d\n", idx);</comment>
            <if>if <condition>(<expr><name><name>dir</name><index>[<expr><name>curdir</name></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>up</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>down</name></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name>cury</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>end</name> <operator>-</operator> <name><name>cur</name><operator>.</operator><name>first</name></name><operator>)</operator> <operator>*</operator> <name><name>dir</name><index>[<expr><name>curdir</name></expr>]</index></name><operator>.</operator><name>first</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// printf("moving from %d to %d, len = %d\n", cur.first, end, len);</comment>
            <if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>first</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name><name>dir</name><index>[<expr><name>curdir</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>dir</name><index>[<expr><call><name>next</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>right</name> <operator>=</operator> <name><name>cur</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>cur</name><operator>.</operator><name>second</name></name></expr>;</expr_stmt></block></else></if>
            <comment type="line">// printf("%d %d\n", cur.first, cur.second);</comment>
        }</block></then> <else>else <block>{
            <decl_stmt><decl><type><name>int</name></type> <name>cury</name> <init>= <expr><name><name>cur</name><operator>.</operator><name>first</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>rows</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>rows</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>rows</name><index>[<expr><name>cury</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <comment type="line">// printf("%d\n", idx);</comment>
            <if>if <condition>(<expr><name><name>dir</name><index>[<expr><name>curdir</name></expr>]</index></name><operator>.</operator><name>second</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>idx</name><operator>--</operator></expr>;</expr_stmt></block></then></if>
            <decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name>max</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><call><name>min</name><argument_list>(<argument><expr><name>right</name></expr></argument>, <argument><expr><name><name>rows</name><index>[<expr><name>cury</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>end</name> <operator>-</operator> <name><name>cur</name><operator>.</operator><name>second</name></name><operator>)</operator> <operator>*</operator> <name><name>dir</name><index>[<expr><name>curdir</name></expr>]</index></name><operator>.</operator><name>second</name></expr></init></decl>;</decl_stmt>
            <comment type="line">// printf("moving from %d to %d, len = %d\n", cur.second, end, len);</comment>
            <if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>second</name></name> <operator>=</operator> <name>end</name> <operator>-</operator> <name><name>dir</name><index>[<expr><name>curdir</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><name><name>dir</name><index>[<expr><call><name>next</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>.</operator><name>first</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>down</name> <operator>=</operator> <name><name>cur</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt></block></then>
            <else>else <block type="pseudo"><expr_stmt><expr><name>up</name> <operator>=</operator> <name><name>cur</name><operator>.</operator><name>first</name></name></expr>;</expr_stmt></block></else></if>
            <comment type="line">// printf("%d %d\n", cur.first, cur.second);</comment>
        }</block></else></if>
        <expr_stmt><expr><name>curdir</name> <operator>=</operator> <call><name>next</name><argument_list>(<argument><expr><name>curdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>first</name></name> <operator>+=</operator> <name><name>dir</name><index>[<expr><name>curdir</name></expr>]</index></name><operator>.</operator><name>first</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cur</name><operator>.</operator><name>second</name></name> <operator>+=</operator> <name><name>dir</name><index>[<expr><name>curdir</name></expr>]</index></name><operator>.</operator><name>second</name></expr>;</expr_stmt>
        <comment type="line">// printf("%d %d\n", cur.first, cur.second);</comment>
        <comment type="line">// printf("%d %d %d %d\n", down, up, right, left);</comment>
        <if>if <condition>(<expr><name><name>cur</name><operator>.</operator><name>first</name></name> <operator>&gt;=</operator> <name>down</name> <operator>||</operator> <name><name>cur</name><operator>.</operator><name>first</name></name> <operator>&lt;=</operator> <name>up</name> <operator>||</operator> <name><name>cur</name><operator>.</operator><name>second</name></name> <operator>&gt;=</operator> <name>right</name> <operator>||</operator> <name><name>cur</name><operator>.</operator><name>second</name></name> <operator>&lt;=</operator> <name>left</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <if>if <condition>(<expr><call><name>binary_search</name><argument_list>(<argument><expr><name><name>rows</name><index>[<expr><name><name>cur</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>rows</name><index>[<expr><name><name>cur</name><operator>.</operator><name>first</name></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
        <if>if <condition>(<expr><call><name>binary_search</name><argument_list>(<argument><expr><name><name>cols</name><index>[<expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cols</name><index>[<expr><name><name>cur</name><operator>.</operator><name>second</name></name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>cur</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>
    }</block></while>

    <if>if <condition>(<expr><name>sum</name> <operator>==</operator> <operator>(</operator><name>long</name> <name>long</name><operator>)</operator><name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name></expr>)</condition><then> <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
