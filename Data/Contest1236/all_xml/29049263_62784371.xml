<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29049263_62784371.cpp"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>optimize</name><name>(</name><cpp:literal>"O3"</cpp:literal><name>)</name></cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<struct>struct <name>custom_hash</name> <block>{<public type="default">
    <function><specifier>static</specifier> <type><name>uint64_t</name></type> <name>splitmix64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{
        <comment type="line">// http://xorshift.di.unimi.it/splitmix64.c</comment>
        <expr_stmt><expr><name>x</name> <operator>+=</operator> <literal type="number">0x9e3779b97f4a7c15</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">0xbf58476d1ce4e5b9</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">0x94d049bb133111eb</literal></expr>;</expr_stmt>
        <return>return <expr><name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</return>
    }</block></function>

    <function type="operator"><type><name>size_t</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
        <decl_stmt><decl><specifier>static</specifier> <type><specifier>const</specifier> <name>uint64_t</name></type> <name>FIXED_RANDOM</name> <init>= <expr><call><name><name>chrono</name><operator>::</operator><name>steady_clock</name><operator>::</operator><name>now</name></name><argument_list>()</argument_list></call><operator>.</operator><call><name>time_since_epoch</name><argument_list>()</argument_list></call><operator>.</operator><call><name>count</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><call><name>splitmix64</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <name>FIXED_RANDOM</name></expr></argument>)</argument_list></call></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>n_l</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbg</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; "[" &lt;&lt; #__VA_ARGS__ &lt;&lt; "]: "; cout &lt;&lt; to_string(__VA_ARGS__) &lt;&lt; endl</cpp:value></cpp:define>
<decl_stmt><decl><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>T</name></parameter>, <parameter><type><name>size_t</name></type> <name>N</name></parameter>&gt;</parameter_list></template> <type><name>int</name></type> <name>SIZE</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>T</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>t</name></expr></argument>)</argument_list></call><index>[<expr><name>N</name></expr>]</index></expr></argument>)</argument_list><argument_list>{ return <argument><expr><name>N</name></expr></argument>; }</argument_list> template<name/>&lt;<name><typename>typename</typename> <name>T</name></name>&gt; <name>int</name> <name>SIZE</name><argument_list>(<argument><expr><specifier>const</specifier> <name>T</name> <operator>&amp;</operator><name>t</name></expr></argument>)</argument_list><argument_list>{ return <argument><expr><call><name><name>t</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call></expr></argument>; }</argument_list> <name>string</name> <name>to_string</name><argument_list>(<argument><expr><specifier>const</specifier> <name>string</name> <name>s</name></expr></argument>, <argument><expr><name>int</name> <name>x1</name><operator>=</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>int</name> <name>x2</name><operator>=</operator><literal type="number">1e9</literal></expr></argument>)</argument_list><argument_list>{ return <argument><expr><literal type="char">'"'</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>x1</name> <operator>&lt;</operator> <call><name><name>s</name><operator>.</operator><name>size</name></name><argument_list>()</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><call><name><name>s</name><operator>.</operator><name>substr</name></name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><name>x2</name><operator>-</operator><name>x1</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="char">'"'</literal></expr></argument>; }</argument_list> <name>string</name> <name>to_string</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>s</name></expr></argument>)</argument_list> <argument_list>{ return <argument><expr><call><name>to_string</name><argument_list>(<argument><expr><operator>(</operator><name>string</name><operator>)</operator> <name>s</name></expr></argument>)</argument_list></call></expr></argument>; }</argument_list> <name>string</name> <name>to_string</name><argument_list>(<argument><expr><specifier>const</specifier> <name>bool</name> <name>b</name></expr></argument>)</argument_list> <argument_list>{ return <argument><expr><operator>(</operator><ternary><condition><expr><name>b</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>; }</argument_list> <name>string</name> <name>to_string</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <name>c</name></expr></argument>)</argument_list><argument_list>{ return <argument><expr><call><name>string</name><argument_list>(<argument><expr><block>{<expr><name>c</name></expr>}</block></expr></argument>)</argument_list></call></expr></argument>; }</argument_list> template<name/>&lt;<name>size_t</name> <name>N</name>&gt; <name>string</name> <name>to_string</name><argument_list>(<argument><expr><specifier>const</specifier> <name><name>bitset</name><argument_list type="generic">&lt;<argument><expr><name>N</name></expr></argument>&gt;</argument_list></name> <operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><name>int</name> <name>x1</name><operator>=</operator><literal type="number">0</literal></expr></argument>, <argument><expr><name>int</name> <name>x2</name><operator>=</operator><literal type="number">1e9</literal></expr></argument>)</argument_list><argument_list>{ <argument><expr><name>string</name> <name>t</name> <operator>=</operator> <literal type="string">""</literal></expr></argument>; for<argument><expr><operator>(</operator><name>int</name> <name>__iii__</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>  <name>__jjj__</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call>; <name>__iii__</name> <operator>&lt;=</operator> <name>__jjj__</name>; <operator>++</operator><name>__iii__</name><operator>)</operator><block>{ <expr><name>t</name> <operator>+=</operator> <name><name>b</name><index>[<expr><name>__iii__</name></expr>]</index></name> <operator>+</operator> <literal type="char">'0'</literal></expr>; }</block></expr></argument> <return>return <expr><literal type="char">'"'</literal> <operator>+</operator> <name>t</name> <operator>+</operator> <literal type="char">'"'</literal></expr>;</return></argument_list></decl></decl_stmt> } template <expr_stmt><expr><operator>&lt;</operator><name><typename>typename</typename> <name>A</name></name></expr><operator>,</operator> <expr><name><typename>typename</typename></name><operator>...</operator> <name>C</name><operator>&gt;</operator> <name>string</name> <macro><name>to_string</name><argument_list>(<argument>const A (&amp;v)</argument>, <argument>int x1=<literal type="number">0</literal></argument>, <argument>int x2=<literal type="number">1e9</literal></argument>, <argument>C... coords</argument>)</argument_list></macro></expr>;</expr_stmt> <decl_stmt><decl><type><name>int</name></type> <name>l_v_l_v_l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>t_a_b_s</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <function><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name></type> <name>B</name></parameter>&gt;</parameter_list></template> <type><name>string</name></type> <name>to_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>, <argument><expr><name>B</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{ <expr_stmt><expr><name>l_v_l_v_l</name><operator>++</operator></expr>;</expr_stmt> <decl_stmt><decl><type><name>string</name></type> <name>res</name> <init>= <expr><literal type="string">"("</literal> <operator>+</operator> <call><name>to_string</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>first</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">", "</literal> <operator>+</operator> <call><name>to_string</name><argument_list>(<argument><expr><name><name>p</name><operator>.</operator><name>second</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="string">")"</literal></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>l_v_l_v_l</name><operator>--</operator></expr>;</expr_stmt> <return>return <expr><name>res</name></expr>;</return> }</block></function> <decl_stmt><decl><template>template <parameter_list>&lt;<parameter><type><name>typename</name></type> <name>A</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>C</name></parameter>&gt;</parameter_list></template> <type><name>string</name></type> <name>to_string</name><argument_list>(<argument><expr><specifier>const</specifier> <call><name>A</name> <argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>int</name> <name>x1</name></expr></argument>, <argument><expr><name>int</name> <name>x2</name></expr></argument>, <argument><expr><name>C</name><operator>...</operator> <name>coords</name></expr></argument>)</argument_list> <argument_list>{ <argument><expr><name>int</name> <name>rnk</name> <operator>=</operator> <name><name><name>rank</name><argument_list type="generic">&lt;<argument><expr><name>A</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>value</name></name></expr></argument>; <argument><expr><name>string</name> <call><name>tab</name><argument_list>(<argument><expr><name>t_a_b_s</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></argument>; <argument><expr><name>string</name> <name>res</name> <operator>=</operator> <literal type="string">""</literal></expr></argument>; <argument><expr><name>bool</name> <name>first</name> <operator>=</operator> <literal type="boolean">true</literal></expr></argument>; if<argument><expr><operator>(</operator><name>l_v_l_v_l</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <name>res</name> <operator>+=</operator> <name>n_l</name></expr></argument>; <argument><expr><name>res</name> <operator>+=</operator> <name>tab</name> <operator>+</operator> <literal type="string">"["</literal></expr></argument>; <argument><expr><name>x1</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x1</name></expr></argument>, <argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>x2</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x2</name></expr></argument>, <argument><expr><call><name>SIZE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>; <argument><expr><name>auto</name> <name>l</name> <operator>=</operator> <call><name>begin</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>; <argument><expr><call><name>advance</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr></argument>; <argument><expr><name>auto</name> <name>r</name> <operator>=</operator> <name>l</name></expr></argument>; <argument><expr><call><name>advance</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>x2</name><operator>-</operator><name>x1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>x2</name> <operator>&lt;</operator> <call><name>SIZE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>; for <argument><expr><operator>(</operator><name>auto</name> <name>e</name> <operator>=</operator> <name>l</name>; <name>e</name> <operator>!=</operator> <name>r</name>; <name>e</name> <operator>=</operator> <call><name>next</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call><operator>)</operator> <block>{ <if>if <condition>(<expr><operator>!</operator><name>first</name></expr>)</condition><then> <expr_stmt><expr><block>{ <expr><name>res</name> <operator>+=</operator> <literal type="string">", "</literal></expr>; }</block> <name>first</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt></then></if> <name>l_v_l_v_l</name><operator>++</operator></block></expr></argument>; if<argument><expr><operator>(</operator><name>e</name> <operator>!=</operator> <name>l</name><operator>)</operator><block>{ <if>if<condition>(<expr><name>rnk</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><then> <expr_stmt><expr><block>{ <expr><name>res</name> <operator>+=</operator> <name>n_l</name></expr>; <name>t_a_b_s</name> <operator>=</operator> <name>l_v_l_v_l</name></block></expr>;</expr_stmt></then></if> }</block></expr></argument>; }</argument_list> else<argument_list>{ <argument><expr><name>t_a_b_s</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>; }</argument_list> <name>res</name> += <name>to_string</name><argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>, <argument><expr><name>coords</name><operator>...</operator></expr></argument>)</argument_list></decl>;</decl_stmt> <expr_stmt><expr><name>l_v_l_v_l</name><operator>--</operator></expr>;</expr_stmt> } res <expr_stmt><expr><operator>+=</operator> <literal type="string">"]"</literal></expr>;</expr_stmt> <if>if<condition>(<expr><name>l_v_l_v_l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>res</name> <operator>+=</operator> <name>n_l</name></expr>;</expr_stmt></block></then></if> <return>return <expr><name>res</name></expr>;</return> } void <macro><name>dbgm</name><argument_list>()</argument_list></macro><block>{<empty_stmt>;</empty_stmt>}</block> <function><template>template<parameter_list>&lt;<parameter><type><name>typename</name></type> <name>Heads</name></parameter>, <parameter><type><name>typename</name><modifier>...</modifier></type> <name>Tails</name></parameter>&gt;</parameter_list></template> <type><name>void</name></type> <name>dbgm</name><parameter_list>(<parameter><decl><type><name>Heads</name></type> <name>H</name></decl></parameter>, <parameter><decl><type><name>Tails</name><modifier>...</modifier></type> <name>T</name></decl></parameter>)</parameter_list><block>{ <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <call><name>to_string</name><argument_list>(<argument><expr><name>H</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="string">" | "</literal></expr>;</expr_stmt> <expr_stmt><expr><call><name>dbgm</name><argument_list>(<argument><expr><name>T</name><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dbgm</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cout &lt;&lt; "[" &lt;&lt; #__VA_ARGS__ &lt;&lt; "]: "; dbgm(__VA_ARGS__); cout &lt;&lt; endl</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=0;i&lt;(b);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPP</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=1;i&lt;=(b);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PER</name><parameter_list>(<parameter><type><name>i</name></type></parameter>,<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for(int i=(a);i&gt;(b);i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SZ</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int((a).size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(a).begin(), (a).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MS</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(s, 0, sizeof(s))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PB</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MP</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>

<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>VPII</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>PII</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>ull</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>MOD</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator> <literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>ascii_lowercase</name> <init>= <expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>string</name></type> <name>ascii_uppercase</name> <init>= <expr><literal type="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZ"</literal></expr></init></decl>;</decl_stmt>

<struct>struct <name>hashLL</name> <block>{<public type="default"> <comment type="block">/* mp.rehash(n &lt;&lt; 2); */</comment>
    <function type="operator"><type><name>size_t</name></type> <name>operator<name>()</name></name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x</name></decl></parameter>)</parameter_list> <specifier>const</specifier> <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xbf58476d1ce4e5b9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x94d049bb133111eb</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>
        <return>return <expr><name>x</name></expr>;</return>
    }</block></function>
</public>}</block>;</struct>

<function><type><name>long</name> <name>long</name></type> <name>inv</name><parameter_list>(<parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><ternary><condition><expr><literal type="number">1</literal> <operator>&lt;</operator> <name>a</name></expr> ?</condition><then> <expr><name>b</name> <operator>-</operator> <call><name>inv</name><argument_list>(<argument><expr><name>b</name> <operator>%</operator> <name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>b</name> <operator>/</operator> <name>a</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>INF</name> <init>= <expr><literal type="number">1e6</literal></expr></init></decl>;</decl_stmt>

<comment type="line">// unordered_map&lt;int, int, custom_hash&gt; mp;</comment>
<comment type="line">// unordered_map&lt;int, unordered_map&lt;int, int, custom_hash&gt;, custom_hash&gt; g;</comment>

<function><type><name>ll</name></type> <name>gcd</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>x</name></decl></parameter>, <parameter><decl><type><name>ll</name> <modifier>&amp;</modifier></type><name>y</name></decl></parameter>)</parameter_list> <block>{
    <if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <return>return <expr><name>b</name></expr>;</return>
    }</block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>d</name> <init>= <expr><call><name>gcd</name><argument_list>(<argument><expr><name>b</name> <operator>%</operator> <name>a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>x1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y1</name> <operator>-</operator> <operator>(</operator><name>b</name> <operator>/</operator> <name>a</name><operator>)</operator> <operator>*</operator> <name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <name>x1</name></expr>;</expr_stmt>
    <return>return <expr><name>d</name></expr>;</return>
}</block></function>

<function><type><name>ll</name></type> <name>distsq</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>y2</name></decl></parameter>)</parameter_list> <block>{
    <return>return <expr><operator>(</operator><name>x2</name><operator>-</operator><name>x1</name><operator>)</operator><operator>*</operator><operator>(</operator><name>x2</name><operator>-</operator><name>x1</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>y2</name><operator>-</operator><name>y1</name><operator>)</operator><operator>*</operator><operator>(</operator><name>y2</name><operator>-</operator><name>y1</name><operator>)</operator></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
    <comment type="line">// freopen("input.txt", "r", stdin); freopen("output.txt","w",stdout);</comment>
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>numb</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>numb</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>-=</operator> <name>numb</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ll</name></type> <name>numa</name> <init>= <expr><call><name>min</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>numa</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans</name> <operator>&lt;&lt;</operator> <literal type="char">'\n'</literal></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
