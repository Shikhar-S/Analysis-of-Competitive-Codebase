<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29074379_62814654.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mk</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>N</name> <init>= <expr><literal type="number">5e5</literal> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name> <init>= <expr><literal type="number">1e9</literal> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name><name>x</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>y</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>dy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>R</name><index>[<expr><name>N</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>C</name><index>[<expr><name>N</name></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{
		<expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d %d"</literal></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>y</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>R</name><index>[<expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>C</name><index>[<expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<decl_stmt><decl><type><name>int</name></type> <name>sx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>sy</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>t</name> <init>= <expr><operator>(</operator><name>ll</name><operator>)</operator><name>n</name> <operator>*</operator> <name>m</name> <operator>-</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>r1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>r2</name> <init>= <expr><name>n</name></expr></init></decl>, <decl><type ref="prev"/><name>c1</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>c2</name> <init>= <expr><name>m</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{
		<decl_stmt><decl><type><name>ll</name></type> <name>pre</name> <init>= <expr><name>t</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>bound</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name><operator>::</operator><name>iterator</name></name></type> <name>it</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>bound</name> <operator>=</operator> <name>c2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>R</name><index>[<expr><name>sx</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>R</name><index>[<expr><name>sx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> 
				<block type="pseudo"><expr_stmt><expr><name>bound</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>bound</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>t</name> <operator>-=</operator> <name>bound</name> <operator>-</operator> <name>sy</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>bound</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r1</name> <operator>=</operator> <name>sx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then> <elseif>else 
		<if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>bound</name> <operator>=</operator> <name>r2</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>C</name><index>[<expr><name>sy</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>it</name> <operator>!=</operator> <name><name>C</name><index>[<expr><name>sy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then> 
				<block type="pseudo"><expr_stmt><expr><name>bound</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>bound</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
			<expr_stmt><expr><name>t</name> <operator>-=</operator> <name>bound</name> <operator>-</operator> <name>sx</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>sx</name> <operator>=</operator> <name>bound</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>c2</name> <operator>=</operator> <name>sy</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if></elseif> <elseif>else 
		<if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>bound</name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>R</name><index>[<expr><name>sx</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>sy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name><name>R</name><index>[<expr><name>sx</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>it</name> <operator>!=</operator> <name><name>R</name><index>[<expr><name>sx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>bound</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>bound</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>t</name> <operator>-=</operator> <name>sy</name> <operator>-</operator> <name>bound</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>sy</name> <operator>=</operator> <name>bound</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>r2</name> <operator>=</operator> <name>sx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></then></if></elseif> <else>else <block>{
			<expr_stmt><expr><name>bound</name> <operator>=</operator> <name>r1</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>it</name> <operator>=</operator> <name><name>C</name><index>[<expr><name>sy</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>sx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name><name>C</name><index>[<expr><name>sy</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <name>it</name> <operator>!=</operator> <name><name>C</name><index>[<expr><name>sy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><operator>--</operator><name>it</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>bound</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>bound</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>t</name> <operator>-=</operator> <name>sx</name> <operator>-</operator> <name>bound</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>sx</name> <operator>=</operator> <name>bound</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>sy</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		}</block></else></if>
		<if>if <condition>(<expr><name>t</name> <operator>==</operator> <name>pre</name> <operator>&amp;&amp;</operator> <name>f</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>d</name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name>d</name> <operator>%=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name>f</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	}</block></while>
	<if>if <condition>(<expr><name>t</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
	<else>else <block type="pseudo"><expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if> 
}</block></function></unit>
