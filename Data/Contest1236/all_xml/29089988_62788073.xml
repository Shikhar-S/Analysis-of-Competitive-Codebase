<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29089988_62788073.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ii</name></cpp:macro> <cpp:value>for(int i=1;i&lt;=n;++i)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ji</name></cpp:macro> <cpp:value>for(int j=1;j&lt;=n;++j)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>jj</name></cpp:macro> <cpp:value>for(int j=1;j&lt;=m;++j)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ij</name></cpp:macro> <cpp:value>for(int i=1;i&lt;=m;++i )</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int) x.size())</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(),x.end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>asd</name></cpp:macro> <cpp:value>cout&lt;&lt;"ok"&lt;&lt;endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
 
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>t</name></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name><operator>&gt;&gt;</operator><name>c</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ans</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while<condition>(<expr><name>b</name> <operator>&amp;&amp;</operator> <name>c</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>b</name><operator>--</operator></expr><operator>,</operator><expr><name>c</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
        }</block></while>
        <while>while<condition>(<expr><name>a</name> <operator>&amp;&amp;</operator> <name>b</name><operator>&gt;=</operator><literal type="number">2</literal></expr>)</condition>
        <block>{
            <expr_stmt><expr><name>a</name><operator>--</operator></expr><operator>,</operator> <expr><name>b</name><operator>-=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>ans</name><operator>+=</operator><literal type="number">3</literal></expr>;</expr_stmt>
        }</block></while>
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></while>
}</block></function>
</unit>
