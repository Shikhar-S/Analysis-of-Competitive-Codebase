<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090530_62808731.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;algorithm&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>

<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>kMaxN</name> <init>= <expr><literal type="number">100001</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>kDir</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>Node</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name><name>b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>Node</name></type> <name><name>rn</name><index>[<expr><name>kMaxN</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cn</name><index>[<expr><name>kMaxN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name><name>rr</name><index>[<expr><name>kMaxN</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>cr</name><index>[<expr><name>kMaxN</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>tot</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<function><type><name>bool</name></type> <name>CompareR</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>n2</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name><name>n1</name><operator>.</operator><name>x</name></name> <operator>!=</operator> <name><name>n2</name><operator>.</operator><name>x</name></name></expr>)</condition><then> <block>{
    <return>return <expr><name><name>n1</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>n2</name><operator>.</operator><name>x</name></name></expr>;</return>
  }</block></then></if>
  <return>return <expr><name><name>n1</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>n2</name><operator>.</operator><name>y</name></name></expr>;</return>
}</block></function>

<function><type><name>bool</name></type> <name>CompareC</name><parameter_list>(<parameter><decl><type><name>Node</name></type> <name>n1</name></decl></parameter>, <parameter><decl><type><name>Node</name></type> <name>n2</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><name><name>n1</name><operator>.</operator><name>y</name></name> <operator>!=</operator> <name><name>n2</name><operator>.</operator><name>y</name></name></expr>)</condition><then> <block>{
    <return>return <expr><name><name>n1</name><operator>.</operator><name>y</name></name> <operator>&lt;</operator> <name><name>n2</name><operator>.</operator><name>y</name></name></expr>;</return>
  }</block></then></if>
  <return>return <expr><name><name>n1</name><operator>.</operator><name>x</name></name> <operator>&lt;</operator> <name><name>n2</name><operator>.</operator><name>x</name></name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;&gt;</operator> <name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>rn</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>rn</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>CompareR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name>cn</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cn</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>k</name></expr></argument>, <argument><expr><name>CompareC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name><name>rr</name><index>[<expr><name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>rr</name><index>[<expr><name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>rr</name><index>[<expr><name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  }</block></for>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
    <if>if <condition>(<expr><name><name>cr</name><index>[<expr><name><name>cn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name><name>cr</name><index>[<expr><name><name>cn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name><name>cr</name><index>[<expr><name><name>cn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>tot</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>d</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>m</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>n</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="boolean">true</literal></expr>)</condition> <block>{
    <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>b</name><index>[<expr><name>d</name></expr>]</index></name></expr>;</expr_stmt>
    <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name><name>rr</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>rr</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>rr</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
          <if>if <condition>(<expr><name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&gt;</operator> <name>y</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name>tmp</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
          }</block></then></if>
        }</block></for>
      }</block></then></if>
      <if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <break>break;</break>
      }</block></then></if>
      <expr_stmt><expr><name>tot</name> <operator>+=</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>y</name> <operator>=</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    }</block></then> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name><name>cr</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>cr</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>cr</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{
          <if>if <condition>(<expr><name><name>cn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;</operator> <name>x</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>cn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name>tmp</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>cn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
          }</block></then></if>
        }</block></for>
      }</block></then></if>
      <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <break>break;</break>
      }</block></then></if>
      <expr_stmt><expr><name>tot</name> <operator>+=</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> <operator>=</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    }</block></then></if></elseif> <elseif>else <if>if <condition>(<expr><name>d</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <if>if <condition>(<expr><name><name>rr</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>rr</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>rr</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
          <if>if <condition>(<expr><name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&lt;</operator> <name>y</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name> <operator>&gt;</operator> <name>tmp</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>rn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>y</name></expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
          }</block></then></if>
        }</block></for>
      }</block></then></if>
      <if>if <condition>(<expr><name>y</name> <operator>==</operator> <name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <break>break;</break>
      }</block></then></if>
      <expr_stmt><expr><name>tot</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>y</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>x</name></expr>;</expr_stmt>
    }</block></then></if></elseif> <else>else <block>{
      <if>if <condition>(<expr><name><name>cr</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
        <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>cr</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <name><name>cr</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{
          <if>if <condition>(<expr><name><name>cn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&lt;</operator> <name>x</name></expr>)</condition><then> <block>{
            <if>if <condition>(<expr><name><name>cn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name> <operator>&gt;</operator> <name>tmp</name></expr>)</condition><then> <block>{
              <expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>cn</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>x</name></expr>;</expr_stmt>
            }</block></then></if>
            <break>break;</break>
          }</block></then></if>
        }</block></for>
      }</block></then></if>
      <if>if <condition>(<expr><name>x</name> <operator>==</operator> <name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
        <break>break;</break>
      }</block></then></if>
      <expr_stmt><expr><name>tot</name> <operator>+=</operator> <name>x</name> <operator>-</operator> <name>tmp</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> <operator>=</operator> <name>tmp</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>b</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    }</block></else></if>
        <comment type="line">// cout &lt;&lt; d &lt;&lt; " " &lt;&lt; x &lt;&lt; " " &lt;&lt; y &lt;&lt; endl;</comment>
  }</block></while>
  <if>if <condition>(<expr><name>n</name> <operator>*</operator> <name>m</name> <operator>==</operator> <name>k</name> <operator>+</operator> <name>tot</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></else></if>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
