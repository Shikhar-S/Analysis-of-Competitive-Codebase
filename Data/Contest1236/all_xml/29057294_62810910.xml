<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29057294_62810910.cpp">

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//#include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
<comment type="line">//typedef tree &lt; int , null_type, less &lt;int&gt;, rb_tree_tag, tree_order_statistics_node_update&gt; TREE;</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ull</name></cpp:macro> <cpp:value>unsigned long long int</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vi</name></cpp:macro> <cpp:value>vector&lt;int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pii</name></cpp:macro> <cpp:value>pair&lt;int,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pss</name></cpp:macro> <cpp:value>pair&lt;short,short&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pld</name></cpp:macro> <cpp:value>pair&lt;long double,long double &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>piii</name></cpp:macro>  <cpp:value>pair&lt;pii,int&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vii</name></cpp:macro> <cpp:value>vector&lt;pair&lt;int,int&gt; &gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>st</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>nd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pll</name></cpp:macro> <cpp:value>pair&lt;ll,ll&gt;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>speed</name></cpp:macro> <cpp:value>ios::sync_with_stdio(false);cin.tie();cout.tie();</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define>
<comment type="line">//#define int long long</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//const int mod=998244353;</comment>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name><init>=<expr><literal type="number">1000000009</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>INF</name><init>=<expr><literal type="number">1000000000000000009</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>long</name></type> <name>big</name><init>=<expr><literal type="number">1000000000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>long</name> <name>double</name></type> <name>eps</name><init>=<expr><literal type="number">0.0000000001</literal></expr></init></decl>;</decl_stmt>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<decl_stmt><decl><type><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>K</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>map</name><argument_list type="generic">&lt;<argument><expr><name>pii</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>M</name></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>cmp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>
<block>{
    <return>return <expr><name>a</name><operator>&gt;</operator><name>b</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>bool</name></type> <name>czy</name><init>=<expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
<function><type><name>bool</name></type> <name>check</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="line">// cout&lt;&lt;"check "&lt;&lt;x1&lt;&lt;" "&lt;&lt;x2&lt;&lt;" "&lt;&lt;y1&lt;&lt;" "&lt;&lt;y2&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><name>x1</name><operator>&gt;</operator><name>x2</name><operator>||</operator><name>y1</name><operator>&gt;</operator><name>y2</name></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>x1</name></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>x2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
        <block type="pseudo"><for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><name>y1</name></expr></init></decl>;</init> <condition><expr><name>j</name><operator>&lt;=</operator><name>y2</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
            <block type="pseudo"><if>if<condition>(<expr><operator>!</operator><name><name>M</name><index>[<expr><call><name>mp</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>czy</name><operator>=</operator><literal type="boolean">true</literal></expr>;</expr_stmt>
                <return>return <expr><literal type="boolean">true</literal></expr>;</return>
            }</block></then></if></block></for></block></for>
    <return>return <expr><literal type="boolean">false</literal></expr>;</return>
}</block></function>
<function><type><name>void</name></type> <name>funkcja</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>)</parameter_list>
<block>{
    <comment type="line">//  cout&lt;&lt;x1&lt;&lt;" "&lt;&lt;x2&lt;&lt;" "&lt;&lt;y1&lt;&lt;" "&lt;&lt;y2&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><name>x1</name><operator>&gt;</operator><name>x2</name><operator>||</operator><name>y1</name><operator>&gt;</operator><name>y2</name></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then></if>
    <if>if<condition>(<expr><name>czy</name></expr>)</condition><then>
        <block type="pseudo"><return>return;</return></block></then></if>
    <for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name><range>:<expr><name><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name></expr></range></decl></init>)</control>
    <block>{
        <if>if<condition>(<expr><name>v</name><operator>&lt;</operator><name>y1</name></expr>)</condition><then>
        <block>{
            <expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x1</name></expr>]</index></name><operator>.</operator><call><name>pop_front</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
        }</block></then></if>
        <if>if<condition>(<expr><name>v</name><operator>&gt;</operator><name>y2</name></expr>)</condition><then>
            <block type="pseudo"><break>break;</break></block></then></if>

        <comment type="line">//cout&lt;&lt;"jeden"&lt;&lt;endl;</comment>
        <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>x1</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
            <block type="pseudo"><return>return;</return></block></then>
        <else>else
        <block>{
            <expr_stmt><expr><name>y2</name><operator>=</operator><name>v</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        }</block></else></if>

    }</block></for>
    <if>if<condition>(<expr><name>y2</name><operator>&gt;=</operator><name>y1</name></expr>)</condition><then>
    <block>{
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name><range>:<expr><name><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y2</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block>{
            <comment type="line">//  cout&lt;&lt;"dwa"&lt;&lt;endl;</comment>
            <if>if<condition>(<expr><name>v</name><operator>&lt;</operator><name>x1</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y2</name></expr>]</index></name><operator>.</operator><call><name>pop_front</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <if>if<condition>(<expr><name>v</name><operator>&gt;</operator><name>x2</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>v</name></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y2</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return;</return></block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>x2</name><operator>=</operator><name>v</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>

        }</block></for>
    }</block></then></if>
    <if>if<condition>(<expr><name>x2</name><operator>&gt;</operator><name>x1</name></expr>)</condition><then>
    <block>{
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name><range>:<expr><name><name>K</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block>{
            <comment type="line">//cout&lt;&lt;"trzy"&lt;&lt;endl;</comment>
            <if>if<condition>(<expr><name>v</name><operator>&gt;</operator><name>y2</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x2</name></expr>]</index></name><operator>.</operator><call><name>pop_front</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <if>if<condition>(<expr><name>v</name><operator>&lt;</operator><name>y1</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>x1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x2</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return;</return></block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>y1</name><operator>=</operator><name>v</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>

        }</block></for>
    }</block></then></if>
    <if>if<condition>(<expr><name>y2</name><operator>&gt;</operator><name>y1</name></expr>)</condition><then>
    <block>{
        <for>for<control>(<init><decl><type><name>auto</name></type> <name>v</name><range>:<expr><name><name>K</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name></expr></range></decl></init>)</control>
        <block>{
            <comment type="line">// cout&lt;&lt;"cztery"&lt;&lt;endl;</comment>
            <if>if<condition>(<expr><name>v</name><operator>&gt;</operator><name>x2</name></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>y1</name></expr>]</index></name><operator>.</operator><call><name>pop_front</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
            }</block></then></if>
            <if>if<condition>(<expr><name>v</name><operator>&lt;</operator><name>x1</name></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <if>if<condition>(<expr><call><name>check</name><argument_list>(<argument><expr><name>x1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>v</name></expr></argument>,<argument><expr><name>y1</name></expr></argument>,<argument><expr><name>y2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><return>return;</return></block></then>
            <else>else
            <block>{
                <expr_stmt><expr><name>x1</name><operator>=</operator><name>v</name></expr>;</expr_stmt>
                <break>break;</break>
            }</block></else></if>

        }</block></for>
    }</block></then></if>
    <expr_stmt><expr><call><name>funkcja</name><argument_list>(<argument><expr><name>x1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x2</name><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y1</name><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y2</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><name>speed</name>
    <name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <comment type="line">// cout&lt;&lt;"ZYJE"&lt;&lt;endl;</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>M</name><index>[<expr><call><name>mp</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>]</index></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>K</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <comment type="line">// cout&lt;&lt;"ZYJE"&lt;&lt;endl;</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <comment type="line">// cout&lt;&lt;i&lt;&lt;endl;</comment>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>K</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>K</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>K</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <comment type="line">//cout&lt;&lt;"ZYJE"&lt;&lt;endl;</comment>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>K</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>K</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>K</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <comment type="line">// cout&lt;&lt;"ZYJE"&lt;&lt;endl;</comment>
    <expr_stmt><expr><call><name>funkcja</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>n</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//cout&lt;&lt;"ZYJE"&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><name>czy</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal></expr>;</expr_stmt></block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
