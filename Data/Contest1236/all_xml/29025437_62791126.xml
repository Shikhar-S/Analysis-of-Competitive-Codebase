<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29025437_62791126.cpp"><comment type="line">//**AUTHOR : @sam_jn**</comment>

<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>boost</name></cpp:macro> <cpp:value>ios_base::sync_with_stdio(false); cin.tie(NULL);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ff</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ss</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<function_decl><type><name>ll</name></type> <name>pwr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>ll</name></type> <name>pwr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>int</name></type> <name><name>baap</name><index>[<expr><literal type="number">200002</literal></expr>]</index></name></decl>;</decl_stmt>
<function_decl><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>  
<function_decl><type><name>bool</name></type> <name>Union</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">//GLOBALS</comment>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
                                            <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ONLINE_JUDGE</name></cpp:ifndef>
                                            <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"input"</literal></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <expr_stmt><expr><call><name>freopen</name><argument_list>(<argument><expr><literal type="string">"output"</literal></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                                            <comment type="line">// online submission</comment>
                                            <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="line">//SOLUTION</comment>
    <decl_stmt><decl><type><name>boost</name>
    <name>ll</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>ans</name> <operator>=</operator> <call><name>pwr</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>+=</operator> <name>MOD</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>MOD</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>ll</name></type> <name>ans2</name> <init>= <expr><call><name>pwr</name><argument_list>(<argument><expr><name>ans</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>MOD</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>ans2</name></expr>;</expr_stmt>
}</block></function>




<comment type="line">//DEFININTIONS</comment>
<function><type><name>ll</name></type> <name>pwr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr> ;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><call><name>pwr</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name>c</name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>b</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><name>c</name><operator>*</operator><name>a</name></expr>;</return></block></then></if>
    <return>return <expr><name>c</name></expr> ;</return>
}</block></function>
<function><type><name>ll</name></type> <name>pwr</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>m</name></decl></parameter>)</parameter_list><block>{
    <if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
    <decl_stmt><decl><type><name>ll</name></type> <name>c</name> <init>= <expr><call><name>pwr</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>m</name></expr></init></decl> ;</decl_stmt>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><name>c</name> <operator>*</operator> <name>c</name><operator>)</operator> <operator>%</operator> <name>m</name></expr>;</expr_stmt>    
    <if>if<condition>(<expr><name>b</name> <operator>%</operator> <literal type="number">2</literal></expr>)</condition><then>
        <block type="pseudo"><return>return <expr><operator>(</operator><name>c</name> <operator>*</operator> <name>a</name><operator>%</operator><name>m</name><operator>)</operator> <operator>%</operator> <name>m</name></expr>;</return></block></then></if>
    <return>return <expr><name>c</name></expr> ;</return>
}</block></function>
<function><type><name>int</name></type> <name>find</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>  
<block>{  
    <if>if <condition>(<expr><name><name>baap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>i</name></expr>)</condition><then>  
        <block type="pseudo"><expr_stmt><expr><name><name>baap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name><name>baap</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>  
  
    <return>return <expr><name><name>baap</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>  
}</block></function>

<function><type><name>bool</name></type> <name>Union</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>)</parameter_list>
<block>{
    <expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>find</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>(<expr><name>x</name> <operator>==</operator> <name>y</name></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="boolean">false</literal></expr>;</return></block></then></if>
    <expr_stmt><expr><name><name>baap</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>
    <return>return <expr><literal type="boolean">true</literal></expr>;</return>
}</block></function>  
</unit>
