<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29035031_62787833.cpp"><cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<comment type="line">//#include &lt;ext/pb_ds/assoc_container.hpp&gt;</comment>
<comment type="line">//#include &lt;ext/pb_ds/tree_policy.hpp&gt;</comment>
<comment type="line">//using namespace __gnu_pbds;</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eps</name></cpp:macro> <cpp:value>1e-8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>eq</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(fabs((x)-(y)) &lt; eps)</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>double</name></type> <name>ld</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>mod</name><init>= <expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>long</name> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acosl</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>ll</name></type> <name>inf</name> <init>= <expr><literal type="number">1e15</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>nmax</name> <init>= <expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">5</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXLG</name> <init>= <expr><call><name>log2</name><argument_list>(<argument><expr><name>nmax</name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="line">//mt19937 rng(chrono::system_clock::now().time_since_epoch().count());</comment>
<comment type="line">//typedef tree&lt; int, null_type, less&lt;int&gt;, rb_tree_tag, tree_order_statistics_node_update&gt; ost;</comment>


<function><type><name>long</name> <name>long</name></type> <name>bigmod</name> <parameter_list>( <parameter><decl><type><name>long</name> <name>long</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>long</name></type> <name>m</name></decl></parameter> )</parameter_list>
<block>{
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>x</name> <init>= <expr><name>a</name></expr></init></decl>;</decl_stmt>

    <while>while <condition>( <expr><name>p</name></expr> )</condition>
    <block>{
        <if>if <condition>( <expr><name>p</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> )</condition><then> <comment type="line">//p is odd</comment>
        <block>{
            <expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator> <name>res</name> <operator>*</operator> <name>x</name> <operator>)</operator> <operator>%</operator> <name>m</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>)</operator> <operator>%</operator> <name>m</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>=</operator> <name>p</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><name>res</name></expr>;</return>
}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
    <expr_stmt><expr><call><name><name>ios</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <while>while<condition>(<expr><name>t</name><operator>--</operator></expr>)</condition><block>{
        <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator> <call><name>bigmod</name><argument_list>( <argument><expr><operator>(</operator><call><name>bigmod</name><argument_list>(<argument><expr><literal type="number">2LL</literal></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name>mod</name> <operator>)</operator><operator>%</operator><name>mod</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>mod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    }</block></while>



}</block></function></unit>
