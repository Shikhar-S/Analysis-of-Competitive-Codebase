<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29060352_62798097.cpp"><comment type="block" format="doxygen">/**
	WGkKWGkF
	@author: harshkirat2
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive><cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ll</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ld</name></cpp:macro> <cpp:value>long double</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vec</name></cpp:macro> <cpp:value>vector</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mkp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fst</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>scd</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ins</name></cpp:macro> <cpp:value>insert</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>psf</name></cpp:macro> <cpp:value>push_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ppf</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<comment type="line">//#define MAXN 1001</comment>
<comment type="line">//#define modv 1000000007</comment>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<comment type="line">//Power Template</comment>
<function><type><name>ll</name></type> <name>modExp</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{
	<expr_stmt><expr><name>a</name> <operator>%=</operator> <name>c</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init> <condition><expr><name>b</name></expr>;</condition> <incr><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then><block>{
			<expr_stmt><expr><name>ans</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>ans</name> <operator>%=</operator> <name>c</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> <operator>%=</operator> <name>c</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<function><type><name>ll</name></type> <name>fastExp</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>ll</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{
	<decl_stmt><decl><type><name>ll</name></type> <name>ans</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init>;</init> <condition><expr><name>b</name></expr>;</condition> <incr><expr><name>b</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{
		<if>if<condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><expr_stmt><expr><name>ans</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt></block></then></if>
		<expr_stmt><expr><name>a</name> <operator>*=</operator> <name>a</name></expr>;</expr_stmt>
	}</block></for>
	<return>return <expr><name>ans</name></expr>;</return>
}</block></function>
<comment type="block">/*//Factorial Template
ll fact[MAXN];
void factorialBoot(ll p){
	ll i;
	fact[0] = 1;
	for(i = 1; i &lt; MAXN; i++)
		fact[i] = fact[i-1] * i % p;
}
ll nCr(ll n, ll r, ll p) {
	if(r &lt; 0 || r &gt; n)
		return 0;
	return fact[n] * modExp(fact[r] * fact[n - r] % p, p - 2, p);
}
*/</comment>
<comment type="block">/*//primiality Template
bool isPrime(ll n) {
    if (n &lt; 2)
		return false;
    if (n &lt; 4)
		return true;
    if (n % 2 == 0 || n % 3 == 0)
		return false;
    for (ll i = 5; i * i &lt;= n; i += 6)
        if (n % i == 0 || n % (i+2) == 0)
           return false;
    return true;
}
ll eulerTotient(ll n) {
    ld result = n;
    for(ll p = 2; p * p &lt;= n; ++p) {
        if (n % p == 0) {
         	while (n % p == 0)
                n /= p;
            result *= (1.0 - (1.0 / (ld)p));
        }
    }
    if (n &gt; 1)
        result *= (1.0 - (1.0 / (ld)n));
    return (ll)result;
}
map&lt;ll, ll&gt; primeFactoriseMap(ll n) {
	map&lt;ll, ll&gt; a;
	if(n == 1)
		return a;
	ll i, x = 0;
	while((n &amp; 1) == 0) {
		x++;
		n &gt;&gt;= 1;
	}
	if(x) {
		a[2] = x;
		x = 0;
	}
	while(n % 3 == 0) {
		x++;
		n /= 3;
	}
	if(x) {
		a[3] = x;
		x = 0;
	}
	for(i = 5; i * i &lt;= n; i += (2&lt;&lt;(i % 6 == 1))) {
		while(n % i == 0) {
			x++;
			n /= i;
		}
		if(x) {
			a[i] = x;
			x = 0;
		}
	}
	if(n &gt; 1)
		a[n] = 1;
	return a;
}
vector&lt;pair&lt;ll, ll&gt; &gt; primeFactorisePairVector(ll n) {
	vector&lt;pair&lt;ll, ll&gt; &gt; a;
	if(n == 1)
		return a;
	ll i, x = 0;
	while((n &amp; 1) == 0) {
		x++;
		n &gt;&gt;= 1;
	}
	if(x) {
		a.push_back({2, x});
		x = 0;
	}
	while(n % 3 == 0) {
		x++;
		n /= 3;
	}
	if(x) {
		a.push_back({3, x});
		x = 0;
	}
	for(i = 5; i * i &lt;= n; i += (2&lt;&lt;(i % 6 == 1))) {
		while(n % i == 0) {
			x++;
			n /= i;
		}
		if(x) {
			a.push_back({i, x});
			x = 0;
		}
	}
	if(n &gt; 1)
		a.push_back({n, 1});
	return a;
}
*/</comment>
<comment type="block">/*//string template
bool isPalindrome(string s) {
	ll n = s.length();
	ll ub = n / 2;
	for(ll i = 0; i &lt; ub; i++)
		if(s[i] != s[n-1-i])
			return false;
	return true;
}
vector&lt;pair&lt;char, ll&gt; &gt; clubConsecutiveSameChar(string s) {
	vector&lt;pair&lt;char, ll&gt; &gt; a;
	ll i, ub = s.length();
	if(ub == 0)
		return a;
	a.push_back({s[0], 1});
	for(i = 1; i &lt; ub; i++)
		if(s[i] == s[i-1])
			a.back().second++;
		else
			a.push_back({s[i], 1});
	return a;
}
*/</comment>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name><name>ios_base</name> <operator>::</operator> <name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ll</name></type> <name><name>a</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></decl>;</decl_stmt>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<if>if<condition>(<expr><name>i</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><then>
			<block type="pseudo"><for>for<control>(<init><expr><name>j</name><operator>=</operator><name>n</name><operator>-</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition><incr><expr><name>j</name><operator>--</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>k</name></expr>;</expr_stmt></block></for></block></then>
		<else>else
			<block type="pseudo"><for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
				<block type="pseudo"><expr_stmt><expr><name><name>a</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator><operator>++</operator><name>k</name></expr>;</expr_stmt></block></for></block></else></if>
	}</block></for>
	<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name><name>a</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name><operator>&lt;&lt;</operator><literal type="string">" "</literal></expr>;</expr_stmt></block></for>
		<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"\n"</literal></expr>;</expr_stmt>
	}</block></for>
	<comment type="block">/*ll mans=n*n+1;
	for(i=0;i&lt;n;i++){
		for(j=0;j&lt;n;j++){
			if(i==j)
				continue;
			k=0;
			for(int p=0;p&lt;n;p++){
				for(int q=0;q&lt;n;q++){
					if(a[i][p]&gt;a[j][q])
						++k;
				}
			}
			mans=min(mans,k);
		}
	}
	cout&lt;&lt;mans;*/</comment>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
