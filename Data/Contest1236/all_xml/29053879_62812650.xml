<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29053879_62812650.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rep</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = a; i &lt; n; i++)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>per</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (int i = n - 1; i &gt;= a; i--)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>clr</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>memset(x, 0, sizeof(x))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x).begin(), (x).end()</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fi</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>se</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>sz</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)(x).size())</cpp:value></cpp:define>
<typedef>typedef <type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>vi</name>;</typedef>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pii</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>double</name></type> <name>PI</name> <init>= <expr><call><name>acos</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>inf</name> <init>= <expr><literal type="number">1e9</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxn</name> <init>= <expr><literal type="number">2e5</literal></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name><name>std</name><operator>::</operator><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>A</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>B</name><index>[<expr><name>maxn</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x_max</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_min</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>y_max</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>ne</name><parameter_list>(<parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><operator>+</operator><name>inf</name></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>S</name><operator>.</operator><name>end</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><operator>+</operator><name>inf</name></expr>;</return></block></then></if>
  <return>return <expr><operator>*</operator><name>it</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>pe</name><parameter_list>(<parameter><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name> <modifier>&amp;</modifier></type><name>S</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list> <block>{
  <if>if <condition>(<expr><call><name><name>S</name><operator>.</operator><name>empty</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><operator>-</operator><name>inf</name></expr>;</return></block></then></if>
  <decl_stmt><decl><type><name>auto</name></type> <name>it</name> <init>= <expr><call><name><name>S</name><operator>.</operator><name>lower_bound</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if <condition>(<expr><name>it</name> <operator>==</operator> <call><name><name>S</name><operator>.</operator><name>begin</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
    <block type="pseudo"><return>return <expr><operator>-</operator><name>inf</name></expr>;</return></block></then></if>
  <return>return <expr><operator>(</operator><operator>*</operator><operator>(</operator><operator>--</operator><name>it</name><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <expr_stmt><expr><call><name>init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>m</name> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt>
  <macro><name>rep</name><argument_list>(<argument>i</argument>, <argument><literal type="number">0</literal></argument>, <argument>k</argument>)</argument_list></macro> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>x</name> <operator>&gt;&gt;</operator> <name>y</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>A</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>B</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block>
  <decl_stmt><decl><type><name>ll</name></type> <name>cnt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>x_min</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>x_max</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>y_min</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>y_max</name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>dir</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>st</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>x2</name></decl>, <decl><type ref="prev"/><name>y2</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{
    <comment type="line">// cout &lt;&lt; "dir = " &lt;&lt; dir &lt;&lt; endl;</comment>
    <comment type="line">// cout &lt;&lt; x &lt;&lt; "," &lt;&lt; y &lt;&lt; endl;</comment>
    <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>y2</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>y_max</name></expr></argument>, <argument><expr><call><name>ne</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>x_min</name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>y2</name> <operator>&lt;=</operator> <name>y</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>st</name></expr>)</condition><then>
        <block type="pseudo"><break>break;</break></block></then>
      <else>else
        <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>y2</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
      <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>min</name><argument_list>(<argument><expr><name>x_max</name></expr></argument>, <argument><expr><call><name>ne</name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>y_max</name> <operator>=</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>x2</name> <operator>&lt;=</operator> <name>x</name></expr>)</condition><then>
        <block type="pseudo"><break>break;</break></block></then>
      <else>else
        <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>x2</name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
      <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>y2</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>y_min</name></expr></argument>, <argument><expr><call><name>pe</name><argument_list>(<argument><expr><name><name>A</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>x_max</name> <operator>=</operator> <name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>y2</name> <operator>&gt;=</operator> <name>y</name></expr>)</condition><then>
        <block type="pseudo"><break>break;</break></block></then>
      <else>else
        <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>y2</name> <operator>-</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
      <expr_stmt><expr><name>y</name> <operator>=</operator> <name>y2</name></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>dir</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><then> <block>{
      <expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>max</name><argument_list>(<argument><expr><name>x_min</name></expr></argument>, <argument><expr><call><name>pe</name><argument_list>(<argument><expr><name><name>B</name><index>[<expr><name>y</name></expr>]</index></name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>y_min</name> <operator>=</operator> <name>y</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if>if <condition>(<expr><name>x2</name> <operator>&gt;=</operator> <name>x</name></expr>)</condition><then>
        <block type="pseudo"><break>break;</break></block></then>
      <else>else
        <block type="pseudo"><expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>abs</name><argument_list>(<argument><expr><name>x2</name> <operator>-</operator> <name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
      <expr_stmt><expr><name>x</name> <operator>=</operator> <name>x2</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>dir</name> <operator>=</operator> <operator>(</operator><name>dir</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>st</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  }</block></while>
  <if>if <condition>(<expr><name>cnt</name> <operator>+</operator> <name>k</name> <operator>&gt;=</operator> <operator>(</operator><name>ll</name><operator>)</operator><name>n</name> <operator>*</operator> <name>m</name></expr>)</condition><then> <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"Yes"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
  }</block></then> <else>else <block>{
    <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"No"</literal> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    <comment type="line">// cout &lt;&lt; cnt + k &lt;&lt; " " &lt;&lt; (ll)n * m &lt;&lt; endl; // debug</comment>
  }</block></else></if>
}</block></function>
</unit>
