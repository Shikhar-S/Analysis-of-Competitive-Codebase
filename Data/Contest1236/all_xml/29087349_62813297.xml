<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29087349_62813297.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>'\n'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IOS</name></cpp:macro> <cpp:value>cin.sync_with_stdio(false);cin.tie(0);cout.tie(0);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>x</name><index>[<expr><literal type="number">100025</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>y</name><index>[<expr><literal type="number">100025</literal></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>x0</name></decl>,<decl><type ref="prev"/><name>y0</name></decl>,<decl><type ref="prev"/><name>x1</name></decl>,<decl><type ref="prev"/><name>y1</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>xx</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>yy</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>kk</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sum</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>iff</name><parameter_list>()</parameter_list><block>{
    <return>return <expr><name>x1</name><operator>&gt;=</operator><name>x0</name><operator>&amp;&amp;</operator><name>y1</name><operator>&gt;=</operator><name>y0</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>operator_1</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>x</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>x</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name>xx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name>y1</name></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name>xx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>y1</name></expr></argument>,<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>x0</name><operator>=</operator><name>x0</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>y0</name><operator>=</operator><name>y0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x1</name><operator>=</operator><name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y1</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum</name><operator>+=</operator><name>b</name><operator>-</operator><name>yy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xx</name><operator>=</operator><name>a</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>operator_2</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>yy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>y</name><index>[<expr><name>yy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>y</name><index>[<expr><name>yy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name>x1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name>yy</name></expr>;</expr_stmt>
    }</block></then>
    <else>else<block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name>yy</name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>x0</name><operator>=</operator><name>x0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y0</name><operator>=</operator><name>y0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x1</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y1</name><operator>=</operator><name>y1</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum</name><operator>+=</operator><name>a</name><operator>-</operator><name>xx</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xx</name><operator>=</operator><name>a</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>operator_3</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>x</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>yy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>x</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name>xx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name>y0</name></expr>;</expr_stmt>
    }</block></then>
    <elseif>else <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>x</name><index>[<expr><name>xx</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name>xx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name>y0</name></expr>;</expr_stmt>
    }</block></then></if></elseif>
    <else>else<block>{
        <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name><operator>=</operator><name>xx</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>x0</name><operator>=</operator><name>x0</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y0</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x1</name><operator>=</operator><name>x1</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>y1</name><operator>=</operator><name>y1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum</name><operator>+=</operator><name>yy</name><operator>-</operator><name>b</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xx</name><operator>=</operator><name>a</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>operator_4</name><parameter_list>()</parameter_list><block>{
    <decl_stmt><decl><type><name>auto</name></type> <name>it</name><init>=<expr><call><name>lower_bound</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>yy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>y</name><index>[<expr><name>yy</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>xx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
    <if>if<condition>(<expr><name><name>y</name><index>[<expr><name>yy</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name>x0</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name>yy</name></expr>;</expr_stmt>
    }</block></then>
    <elseif>else <if>if<condition>(<expr><name>it</name><operator>==</operator><name><name>y</name><index>[<expr><name>yy</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
        <expr_stmt><expr><name>a</name><operator>=</operator><name>x0</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name>yy</name></expr>;</expr_stmt>
    }</block></then></if></elseif>
    <else>else<block>{
        <expr_stmt><expr><name>it</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>a</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>it</name><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr></argument>,<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name><operator>=</operator><name>yy</name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>x0</name><operator>=</operator><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y0</name><operator>=</operator><name>y0</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>x1</name><operator>=</operator><name>x1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>y1</name><operator>=</operator><name>y1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sum</name><operator>+=</operator><name>xx</name><operator>-</operator><name>a</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>xx</name><operator>=</operator><name>a</name></expr><operator>,</operator><expr><name>yy</name><operator>=</operator><name>b</name></expr>;</expr_stmt>
}</block></function>
<function><type><name>signed</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{<expr_stmt><expr><name>IOS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>x0</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>y0</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator><expr><name>x1</name><operator>=</operator><name>n</name></expr><operator>,</operator><expr><name>y1</name><operator>=</operator><name>m</name></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>x</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>y</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>x</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>y</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <while>while<condition>(<expr><call><name>iff</name><argument_list>()</argument_list></call></expr>)</condition><block>{
        <if>if<condition>(<expr><name>kk</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>operator_1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <elseif>else <if>if<condition>(<expr><name>kk</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>operator_2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>kk</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>operator_3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif>
        <elseif>else <if>if<condition>(<expr><name>kk</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><call><name>operator_4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then></if></elseif></if>
        <comment type="line">//cout&lt;&lt;xx&lt;&lt;" "&lt;&lt;yy&lt;&lt;" "&lt;&lt;sum&lt;&lt;" "&lt;&lt;x0&lt;&lt;" "&lt;&lt;y0&lt;&lt;" "&lt;&lt;x1&lt;&lt;" "&lt;&lt;y1&lt;&lt;endl;</comment>
        <expr_stmt><expr><operator>++</operator><name>kk</name></expr>;</expr_stmt>
        <if>if<condition>(<expr><name>kk</name><operator>==</operator><literal type="number">5</literal></expr>)</condition><then><block>{
            <expr_stmt><expr><name>kk</name><operator>-=</operator><literal type="number">4</literal></expr>;</expr_stmt>
        }</block></then></if>
    }</block></while>
    <comment type="line">//cout&lt;&lt;sum&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><name>sum</name><operator>+</operator><name>k</name><operator>==</operator><name>n</name><operator>*</operator><name>m</name></expr>)</condition><then><block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
        <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No"</literal><operator>&lt;&lt;</operator><name>endl</name></expr>;</expr_stmt>
    }</block></else></if>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>

<comment type="block">/*
*/</comment>

</unit>
