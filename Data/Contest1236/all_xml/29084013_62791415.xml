<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29084013_62791415.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007LL</cpp:value></cpp:define>

<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>
<function><type><name>ll</name></type> <name>pw</name><parameter_list>(<parameter><decl><type><name>ll</name></type> <name>nr</name></decl></parameter>,<parameter><decl><type><name>ll</name></type> <name>pt</name></decl></parameter>)</parameter_list><block>{
  <if>if<condition>(<expr><name>pt</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>pt</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block type="pseudo"><return>return <expr><name>nr</name><operator>%</operator><name>MOD</name></expr>;</return></block></then></if>
  <if>if<condition>(<expr><name>pt</name><operator>%</operator><literal type="number">2</literal></expr>)</condition><then><block>{
    <decl_stmt><decl><type><name>ll</name></type> <name>aux</name><init>=<expr><call><name>pw</name><argument_list>(<argument><expr><name>nr</name></expr></argument>,<argument><expr><name>pt</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>aux</name><operator>*</operator><name>nr</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>
  }</block></then></if>
  <decl_stmt><decl><type><name>ll</name></type> <name>aux</name><init>=<expr><call><name>pw</name><argument_list>(<argument><expr><name>nr</name></expr></argument>,<argument><expr><name>pt</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><name>aux</name><operator>*</operator><name>aux</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><call><name>pw</name><argument_list>(<argument><expr><operator>(</operator><name>MOD</name><operator>+</operator><call><name>pw</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>%</operator><name>MOD</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>&lt;&lt;</operator><literal type="char">'\n'</literal></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
