<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29064033_62785716.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>endl</name></cpp:macro> <cpp:value>"\n"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>x</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debug</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>cerr &lt;&lt; #x &lt;&lt; ": " &lt;&lt; x &lt;&lt; endl;</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>all</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x.begin(), x.end()</cpp:value></cpp:define>

<typedef>typedef <type><name>long</name> <name>long</name></type> <name>LL</name>;</typedef>
<typedef>typedef <type><name><name>pair</name> <argument_list type="generic">&lt;<argument><expr><name>LL</name></expr></argument>, <argument><expr><name>LL</name></expr></argument>&gt;</argument_list></name></type> <name>PLL</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>maxn</name> <init>= <expr><literal type="number">100010</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>mod</name> <init>= <expr><literal type="number">1000000007</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>inf</name> <init>= <expr><literal type="number">2000000000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>LL</name></type> <name>inf64</name> <init>= <expr><name>inf</name><operator>*</operator><name>inf</name></expr></init></decl>;</decl_stmt>


<function><name>main</name><parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>t</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>t</name><operator>--</operator></expr>)</condition>
    <block>{
        <decl_stmt><decl><type><name>int</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>cin</name> <operator>&gt;&gt;</operator> <name>a</name> <operator>&gt;&gt;</operator> <name>b</name> <operator>&gt;&gt;</operator> <name>c</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name>c</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>b</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>c</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>b</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> <operator>-=</operator> <call><name>min</name><argument_list>(<argument><expr><name>c</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>b</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> <operator>+=</operator> <call><name>min</name><argument_list>(<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>a</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>min</name><argument_list>(<argument><expr><name>b</name><operator>/</operator><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>a</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <name>res</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt>
    }</block></while>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
