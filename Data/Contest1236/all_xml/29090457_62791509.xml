<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29090457_62791509.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>int</name></cpp:macro> <cpp:value>long long</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAXN</name></cpp:macro> <cpp:value>100005</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INF</name></cpp:macro> <cpp:value>2000000000000000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOD</name></cpp:macro> <cpp:value>1000000007</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mp</name></cpp:macro> <cpp:value>make_pair</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y0</name></cpp:macro> <cpp:value>sdkfaslhagaklsldk</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>y1</name></cpp:macro> <cpp:value>aasdfasdfasdf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>j1</name></cpp:macro> <cpp:value>assdgsdgasghsf</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tm</name></cpp:macro> <cpp:value>sdfjahlfasfh</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name>pp</name>;</typedef>

<function><type><name>int</name></type> <name>fastmul</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>,<parameter><decl><type><name>int</name></type> <name>so</name></decl></parameter>)</parameter_list><block>{
	<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt> <if>if <condition>(<expr><name>so</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><literal type="number">1</literal></expr>;</return></block></then></if>
	<if>if <condition>(<expr><name>so</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><return>return <expr><name>x</name><operator>%</operator><name>MOD</name></expr>;</return></block></then></if>
	<expr_stmt><expr><name>t</name><operator>=</operator><call><name>fastmul</name><argument_list>(<argument><expr><name>x</name></expr></argument>,<argument><expr><name>so</name><operator>/</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>t</name><operator>=</operator><operator>(</operator><name>t</name><operator>*</operator><name>t</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt> <if>if <condition>(<expr><name>so</name><operator>%</operator><literal type="number">2</literal><operator>==</operator><literal type="number">1</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>t</name><operator>=</operator><operator>(</operator><name>t</name><operator>*</operator><name>x</name><operator>)</operator><operator>%</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>
	<return>return <expr><name>t</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>,<decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
<function><name>main</name><parameter_list>()</parameter_list><block>{
	<comment type="line">//ios::sync_with_stdio(false); cin.tie(0);</comment>
	<comment type="line">//freopen("inp.txt","r",stdin);</comment>
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>val</name><init>=<expr><call><name>fastmul</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><name>m</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <if>if <condition>(<expr><name>val</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><name>val</name><operator>+=</operator><name>MOD</name></expr>;</expr_stmt></block></then></if>
	<comment type="line">//cout&lt;&lt;val&lt;&lt;'\n';</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>ans</name> <init>= <expr><call><name>fastmul</name><argument_list>(<argument><expr><name>val</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><name>ans</name></expr>;</expr_stmt>
}</block></function>
<comment type="block">/* Beware of Constants and Constraints. Check again. 
If graph -&gt; da do thi
If Multitest -&gt; eye-check init() function
*/</comment>
</unit>
