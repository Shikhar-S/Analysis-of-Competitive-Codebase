<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29049993_62810956.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>MAXN</name><init>=<expr><literal type="number">1e5</literal><operator>+</operator><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>x</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>y</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>xn</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>set</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type> <name><name>yn</name><index>[<expr><name>MAXN</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name><name>ios_base</name><operator>::</operator><name>sync_with_stdio</name></name><argument_list>(<argument><expr><literal type="boolean">false</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cin</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>cout</name><operator>.</operator><name>tie</name></name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>,<decl><type ref="prev"/><name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>px</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>py</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>mnx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>mny</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>mxx</name></decl>,<decl><type ref="prev"/><name>mxy</name></decl>,<decl><type ref="prev"/><name>dir</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>ln</name></decl>,<decl><type ref="prev"/><name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>res</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>tot</name></decl>,<decl><type ref="prev"/><name>NN</name></decl>,<decl><type ref="prev"/><name>MM</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>NN</name><operator>=</operator><name>n</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>MM</name><operator>=</operator><name>m</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>tot</name><operator>=</operator><name>NN</name><operator>*</operator><name>MM</name><operator>-</operator><name>k</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>mxy</name><operator>=</operator><name>m</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>mxx</name><operator>=</operator><name>n</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
    <block>{
        <expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>a</name><operator>&gt;&gt;</operator><name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>y</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>x</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>yn</name><index>[<expr><name>a</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><operator>-</operator><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>xn</name><index>[<expr><name>b</name></expr>]</index></name><operator>.</operator><call><name>insert</name><argument_list>(<argument><expr><operator>-</operator><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <while>while<condition>(<expr><literal type="boolean">true</literal></expr>)</condition>
    <block>{
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>xd</name><init>=<expr><name><name>y</name><index>[<expr><name>px</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>py</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>xd</name><operator>!=</operator><name><name>y</name><index>[<expr><name>px</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>mxy</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mxy</name></expr></argument>,<argument><expr><operator>*</operator><name>xd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>ln</name><operator>=</operator><name>mxy</name><operator>-</operator><name>py</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>ln</name><operator>==</operator><literal type="number">0</literal><operator>&amp;&amp;</operator><name>cnt</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
            <block>{
                <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
            }</block></then>
            <else>else
            <block>{
                <if>if<condition>(<expr><name>ln</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                    <block type="pseudo"><break>break;</break></block></then></if>
                <expr_stmt><expr><name>res</name><operator>+=</operator><name>ln</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>py</name><operator>=</operator><name>mxy</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>mnx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mnx</name></expr></argument>,<argument><expr><name>px</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <comment type="line">//cout&lt;&lt;px&lt;&lt;" "&lt;&lt;py&lt;&lt;"\n";</comment>
        }</block></then>
        <elseif>else
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>xd</name><init>=<expr><name><name>x</name><index>[<expr><name>py</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><name>px</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>xd</name><operator>!=</operator><name><name>x</name><index>[<expr><name>py</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>mxx</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mxx</name></expr></argument>,<argument><expr><operator>*</operator><name>xd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>ln</name><operator>=</operator><name>mxx</name><operator>-</operator><name>px</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>ln</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>res</name><operator>+=</operator><name>ln</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>px</name><operator>=</operator><name>mxx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>mxy</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mxy</name></expr></argument>,<argument><expr><name>py</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
           <comment type="line">//cout&lt;&lt;px&lt;&lt;" "&lt;&lt;py&lt;&lt;"\n";</comment>
        }</block></then></if></elseif>
        <elseif>else
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>xd</name><init>=<expr><name><name>yn</name><index>[<expr><name>px</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><operator>-</operator><name>py</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>xd</name><operator>!=</operator><name><name>yn</name><index>[<expr><name>px</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>mny</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mny</name></expr></argument>,<argument><expr><operator>-</operator><operator>(</operator><operator>*</operator><name>xd</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>ln</name><operator>=</operator><name>py</name><operator>-</operator><name>mny</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>ln</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>res</name><operator>+=</operator><name>ln</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>py</name><operator>=</operator><name>mny</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>mxx</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>mxx</name></expr></argument>,<argument><expr><name>px</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//cout&lt;&lt;px&lt;&lt;" "&lt;&lt;py&lt;&lt;"\n";</comment>
        }</block></then></if></elseif>
        <elseif>else
        <if>if<condition>(<expr><name>dir</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><then>
        <block>{
            <decl_stmt><decl><type><name>auto</name></type> <name>xd</name><init>=<expr><name><name>xn</name><index>[<expr><name>py</name></expr>]</index></name><operator>.</operator><call><name>lower_bound</name><argument_list>(<argument><expr><operator>-</operator><name>px</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if>if<condition>(<expr><name>xd</name><operator>!=</operator><name><name>xn</name><index>[<expr><name>py</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <block type="pseudo"><expr_stmt><expr><name>mnx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mnx</name></expr></argument>,<argument><expr><operator>-</operator><operator>(</operator><operator>*</operator><name>xd</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then></if>
            <expr_stmt><expr><name>ln</name><operator>=</operator><name>px</name><operator>-</operator><name>mnx</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <if>if<condition>(<expr><name>ln</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then>
                <block type="pseudo"><break>break;</break></block></then></if>
            <expr_stmt><expr><name>res</name><operator>+=</operator><name>ln</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>px</name><operator>=</operator><name>mnx</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>dir</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>mny</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>mny</name></expr></argument>,<argument><expr><name>py</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//cout&lt;&lt;px&lt;&lt;" "&lt;&lt;py&lt;&lt;"\n";</comment>
        }</block></then></if></elseif></if>
        <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
    }</block></while>
    <if>if<condition>(<expr><name>res</name><operator>==</operator><name>tot</name></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"Yes\n"</literal></expr>;</expr_stmt></block></then>
    <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><literal type="string">"No\n"</literal></expr>;</expr_stmt></block></else></if>
}</block></function>
</unit>
