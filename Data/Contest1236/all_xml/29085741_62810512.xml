<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29085741_62810512.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>
<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mod</name><init>=<expr><literal type="number">1e9</literal><operator>+</operator><literal type="number">7</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></type><name><name>v</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>,<decl><type ref="prev"/><name><name>vv</name><index>[<expr><literal type="number">100005</literal></expr>]</index></name></decl>;</decl_stmt>
<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
  <decl_stmt><decl><type><name>ll</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%lld%lld%lld"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <expr_stmt><expr><name><name>vv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <decl_stmt><decl><type><name>ll</name></type> <name>ans</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%d%d"</literal></expr></argument>,<argument><expr><operator>&amp;</operator><name>x</name></expr></argument>,<argument><expr><operator>&amp;</operator><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vv</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>push_back</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>vv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>vv</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>tmp</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>x</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>y</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>maxx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>minn</name><init>=<expr><name>n</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>,<decl><type ref="prev"/><name>maxxx</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>minnn</name><init>=<expr><name>m</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>f</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while<condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{
    <comment type="line">//cout&lt;&lt;tmp&lt;&lt;" "&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl;</comment>
    <if>if<condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">1</literal></expr>)</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>in</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>xx</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>minnn</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>in</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><name>y</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <comment type="line">//cout&lt;&lt;xx&lt;&lt;endl;</comment>
      <if>if<condition>(<expr><name>f</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <expr_stmt><expr><name>f</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
      }</block></then>
      <else>else <block>{
        <if>if<condition>(<expr><name>xx</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
      }</block></else></if>
      <expr_stmt><expr><name>ans</name><operator>+=</operator><name>xx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>y</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>minnn</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>in</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>maxx</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then>
    <elseif>else <if>if<condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>in</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>vv</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>vv</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>vv</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>xx</name><init>=<expr><call><name>min</name><argument_list>(<argument><expr><name>minn</name></expr></argument>,<argument><expr><name><name>vv</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>in</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><name>x</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <comment type="line">//cout&lt;&lt;xx&lt;&lt;endl;</comment>
      <if>if<condition>(<expr><name>xx</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <break>break;</break>
      }</block></then></if>
      <expr_stmt><expr><name>ans</name><operator>+=</operator><name>xx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>minn</name></expr></argument>,<argument><expr><name><name>vv</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>in</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>minnn</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>minnn</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif>
    <elseif>else <if>if<condition>(<expr><name>tmp</name><operator>==</operator><literal type="number">3</literal></expr>)</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>in</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>v</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>xx</name><init>=<expr><name>y</name><operator>-</operator><call><name>max</name><argument_list>(<argument><expr><name>maxxx</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>in</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>xx</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then><block>{
        <break>break;</break>
      }</block></then></if>
      <expr_stmt><expr><name>ans</name><operator>+=</operator><name>xx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>y</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>maxxx</name></expr></argument>,<argument><expr><name><name>v</name><index>[<expr><name>x</name></expr>]</index><index>[<expr><name>in</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>minn</name><operator>=</operator><call><name>min</name><argument_list>(<argument><expr><name>minn</name></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if></elseif>
    <else>else <block>{
      <decl_stmt><decl><type><name>int</name></type> <name>in</name><init>=<expr><call><name>upper_bound</name><argument_list>(<argument><expr><name><name>vv</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>vv</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>x</name></expr></argument>)</argument_list></call><operator>-</operator><name><name>vv</name><index>[<expr><name>y</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>ll</name></type> <name>xx</name><init>=<expr><name>x</name><operator>-</operator><call><name>max</name><argument_list>(<argument><expr><name>maxx</name></expr></argument>,<argument><expr><name><name>vv</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>in</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
      <if>if<condition>(<expr><name>xx</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><then> <block>{
        <break>break;</break>
      }</block></then></if>
      <expr_stmt><expr><name>ans</name><operator>+=</operator><name>xx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tmp</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>maxx</name></expr></argument>,<argument><expr><name><name>vv</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>in</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>maxxx</name><operator>=</operator><call><name>max</name><argument_list>(<argument><expr><name>maxxx</name></expr></argument>,<argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></while>
  <if>if<condition>(<expr><name>ans</name><operator>==</operator><name>n</name><operator>*</operator><name>m</name><operator>-</operator><name>k</name></expr>)</condition><then> <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Yes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></then>
  <else>else <block type="pseudo"><expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"No"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></else></if>
  <comment type="line">//cout&lt;&lt;ans&lt;&lt;endl;</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function>
</unit>
