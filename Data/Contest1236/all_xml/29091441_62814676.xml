<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="0.9.5" language="C++" filename="Data/Contest1236/all/29091441_62814676.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;bits/stdc++.h&gt;</cpp:file></cpp:include>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pp</name></cpp:macro> <cpp:value>push_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pf</name></cpp:macro> <cpp:value>pop_front</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pb</name></cpp:macro> <cpp:value>pop_back</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>va</name></cpp:macro> <cpp:value>first</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>vb</name></cpp:macro> <cpp:value>second</cpp:value></cpp:define>
<using>using <namespace>namespace <name>std</name>;</namespace></using>
<typedef>typedef <type><name>long</name> <name>long</name></type> <name>ll</name>;</typedef>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>,<decl><type ref="prev"/><name>m</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>pair</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>,<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>v</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name><name>vector</name><argument_list type="generic">&lt;<argument><expr><name><name>deque</name><argument_list type="generic">&lt;<argument><expr><name>int</name></expr></argument>&gt;</argument_list></name></expr></argument>&gt;</argument_list></name></type> <name>r</name></decl>,<decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list><block>{
	<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>n</name><operator>&gt;&gt;</operator><name>m</name><operator>&gt;&gt;</operator><name>k</name></expr>;</expr_stmt>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>cin</name><operator>&gt;&gt;</operator><name>x</name><operator>&gt;&gt;</operator><name>y</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>v</name><operator>.</operator><name>pp</name></name><argument_list>(<argument><expr><block>{<expr><name>x</name><operator>-</operator><literal type="number">1</literal></expr>,<expr><name>y</name><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>r</name><operator>.</operator><name>pp</name></name><argument_list>(<argument><expr><block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name><name>c</name><operator>.</operator><name>pp</name></name><argument_list>(<argument><expr><block>{}</block></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>k</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
		<expr_stmt><expr><name><name>r</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>va</name></expr>]</index></name><operator>.</operator><call><name>pp</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>c</name><index>[<expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vb</name></expr>]</index></name><operator>.</operator><call><name>pp</name><argument_list>(<argument><expr><name><name>v</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>va</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>n</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>m</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><call><name>sort</name><argument_list>(<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>begin</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>end</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block></for>
	
	<decl_stmt><decl><type><name>int</name></type> <name>tr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>br</name><init>=<expr><name>n</name></expr></init></decl>,<decl><type ref="prev"/><name>tc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>bc</name><init>=<expr><name>m</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>dir</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cnt</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>pr</name><init>=<expr><literal type="number">0</literal></expr></init></decl>,<decl><type ref="prev"/><name>pc</name><init>=<expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>(</operator><name>tr</name><operator>!=</operator><name>br</name><operator>)</operator><operator>&amp;&amp;</operator><operator>(</operator><name>tc</name><operator>!=</operator><name>bc</name><operator>)</operator></expr>)</condition><block>{
		<switch>switch<condition>(<expr><name>dir</name><operator>%</operator><literal type="number">4</literal></expr>)</condition><block>{
			<case>case <expr><literal type="number">1</literal></expr>:</case>
				<if>if<condition>(<expr><operator>!</operator><name><name>r</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name><name>r</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>!=</operator> <name>bc</name> <operator>-</operator> <name><name>r</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>}</block></then></if>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>r</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>bc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>!=</operator> <name>br</name> <operator>-</operator> <name>tr</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>}</block></then></if>
					}</block></for> <if>if<condition>(<expr><name>cnt</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
					<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name>bc</name><operator>-</operator><name><name>r</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>bc</name> <operator>=</operator> <name><name>r</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>pr</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>br</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
						<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>temp</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
					}</block></for>
				}</block></then></if>
				<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>bc</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>tr</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
			<case>case <expr><literal type="number">2</literal></expr>:</case>
				<if>if<condition>(<expr><operator>!</operator><name><name>c</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name><name>c</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>!=</operator> <name>br</name> <operator>-</operator> <name><name>c</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>}</block></then></if>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>c</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>br</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>!=</operator> <name>bc</name> <operator>-</operator> <name>tc</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>}</block></then></if>
					}</block></for> <if>if<condition>(<expr><name>cnt</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
					<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name>br</name><operator>-</operator><name><name>c</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>br</name> <operator>=</operator> <name><name>c</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>front</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>pc</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><name>tc</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
						<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>temp</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pb</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
					}</block></for>
				}</block></then></if>
				<expr_stmt><expr><name>pr</name> <operator>=</operator> <name>br</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name>bc</name><operator>--</operator></expr>;</expr_stmt>
			<break>break;</break>
			<case>case <expr><literal type="number">3</literal></expr>:</case>
				<if>if<condition>(<expr><operator>!</operator><name><name>r</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name><name>r</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>!=</operator> <name><name>r</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tc</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>}</block></then></if>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>r</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><name>tc</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>!=</operator> <name>br</name> <operator>-</operator> <name>tr</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>}</block></then></if>
					}</block></for> <if>if<condition>(<expr><name>cnt</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
					<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name><name>r</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call> <operator>-</operator> <name>tc</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>tc</name> <operator>=</operator> <name><name>r</name><index>[<expr><name>pr</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>pr</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&gt;=</operator><name>tr</name></expr>;</condition><incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
						<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>temp</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pf</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
					}</block></for>
				}</block></then></if>
				<expr_stmt><expr><name>pc</name> <operator>=</operator> <name>tc</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>br</name><operator>--</operator></expr>;</expr_stmt>
			<break>break;</break>
			<case>case <expr><literal type="number">0</literal></expr>:</case>
				<if>if<condition>(<expr><operator>!</operator><name><name>c</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>empty</name><argument_list>()</argument_list></call></expr>)</condition><then><block>{
					<if>if<condition>(<expr><name><name>c</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>!=</operator> <name><name>c</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call><operator>-</operator><name>tr</name><operator>+</operator><literal type="number">1</literal></expr>)</condition><then><block>{<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>}</block></then></if>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name><name>c</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&gt;=</operator><name>tr</name></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block>{
						<if>if<condition>(<expr><name><name>r</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>size</name><argument_list>()</argument_list></call><operator>!=</operator> <name>bc</name> <operator>-</operator> <name>tc</name></expr>)</condition><then><block>{<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt> <break>break;</break>}</block></then></if>
					}</block></for> <if>if<condition>(<expr><name>cnt</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
					<decl_stmt><decl><type><name>int</name></type> <name>temp</name> <init>= <expr><name><name>c</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call><operator>-</operator><name>tr</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><name>tr</name> <operator>=</operator> <name><name>c</name><index>[<expr><name>pc</name></expr>]</index></name><operator>.</operator><call><name>back</name><argument_list>()</argument_list></call><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>
					<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><name>pc</name></expr></init></decl>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>bc</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{
						<for>for<control>(<init><decl><type><name>int</name></type> <name>j</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>temp</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block type="pseudo"><expr_stmt><expr><name><name>c</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>pf</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></for>
					}</block></for>
				}</block></then></if>
				<expr_stmt><expr><name>pr</name> <operator>=</operator> <name>tr</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>tc</name><operator>++</operator></expr>;</expr_stmt>
			<break>break;</break>
		}</block></switch>
		<comment type="line">//cout&lt;&lt;pr&lt;&lt;' '&lt;&lt;pc&lt;&lt;endl;</comment>
		<if>if<condition>(<expr><name>cnt</name></expr>)</condition><then> <block type="pseudo"><break>break;</break></block></then></if>
		<expr_stmt><expr><name>dir</name><operator>++</operator></expr>;</expr_stmt>
	}</block></while>
	<expr_stmt><expr><name>cout</name><operator>&lt;&lt;</operator><operator>(</operator><ternary><condition><expr><name>cnt</name></expr>?</condition><then><expr><literal type="string">"No"</literal></expr></then><else>:<expr><literal type="string">"Yes"</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
}</block></function></unit>
